var Tk = (l) => {
  throw TypeError(l);
};
var XK = (l, Z, u) => Z.has(l) || Tk("Cannot " + u);
var ll = (l, Z, u) => (XK(l, Z, "read from private field"), u ? u.call(l) : Z.get(l)), ZZ = (l, Z, u) => Z.has(l) ? Tk("Cannot add the same private member more than once") : Z instanceof WeakSet ? Z.add(l) : Z.set(l, u), vl = (l, Z, u, s) => (XK(l, Z, "write to private field"), s ? s.call(l, u) : Z.set(l, u), u), XZ = (l, Z, u) => (XK(l, Z, "access private method"), u);
var gL = (l, Z, u, s) => ({
  set _(G) {
    vl(l, Z, G, u);
  },
  get _() {
    return ll(l, Z, s);
  }
});
function wh(l) {
  return l && l.__esModule && Object.prototype.hasOwnProperty.call(l, "default") ? l.default : l;
}
var fI = { exports: {} }, EI = { exports: {} }, Ya = { exports: {} };
Ya.exports;
var fk;
function YT() {
  return fk || (fk = 1, function(l, Z) {
    /**
     * @license React
     * react.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    (function() {
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var u = "18.3.1", s = Symbol.for("react.element"), G = Symbol.for("react.portal"), i = Symbol.for("react.fragment"), m = Symbol.for("react.strict_mode"), a = Symbol.for("react.profiler"), n = Symbol.for("react.provider"), p = Symbol.for("react.context"), y = Symbol.for("react.forward_ref"), h = Symbol.for("react.suspense"), S = Symbol.for("react.suspense_list"), t = Symbol.for("react.memo"), W = Symbol.for("react.lazy"), V = Symbol.for("react.offscreen"), R = Symbol.iterator, x = "@@iterator";
      function r(I) {
        if (I === null || typeof I != "object")
          return null;
        var Q = R && I[R] || I[x];
        return typeof Q == "function" ? Q : null;
      }
      var k = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
      }, U = {
        transition: null
      }, w = {
        current: null,
        // Used to reproduce behavior of `batchedUpdates` in legacy mode.
        isBatchingLegacy: !1,
        didScheduleLegacyUpdate: !1
      }, z = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
      }, D = {}, C = null;
      function j(I) {
        C = I;
      }
      D.setExtraStackFrame = function(I) {
        C = I;
      }, D.getCurrentStack = null, D.getStackAddendum = function() {
        var I = "";
        C && (I += C);
        var Q = D.getCurrentStack;
        return Q && (I += Q() || ""), I;
      };
      var E = !1, g = !1, A = !1, J = !1, F = !1, v = {
        ReactCurrentDispatcher: k,
        ReactCurrentBatchConfig: U,
        ReactCurrentOwner: z
      };
      v.ReactDebugCurrentFrame = D, v.ReactCurrentActQueue = w;
      function T(I) {
        {
          for (var Q = arguments.length, dl = new Array(Q > 1 ? Q - 1 : 0), al = 1; al < Q; al++)
            dl[al - 1] = arguments[al];
          O("warn", I, dl);
        }
      }
      function f(I) {
        {
          for (var Q = arguments.length, dl = new Array(Q > 1 ? Q - 1 : 0), al = 1; al < Q; al++)
            dl[al - 1] = arguments[al];
          O("error", I, dl);
        }
      }
      function O(I, Q, dl) {
        {
          var al = v.ReactDebugCurrentFrame, Yl = al.getStackAddendum();
          Yl !== "" && (Q += "%s", dl = dl.concat([Yl]));
          var Ol = dl.map(function(gl) {
            return String(gl);
          });
          Ol.unshift("Warning: " + Q), Function.prototype.apply.call(console[I], console, Ol);
        }
      }
      var _ = {};
      function il(I, Q) {
        {
          var dl = I.constructor, al = dl && (dl.displayName || dl.name) || "ReactClass", Yl = al + "." + Q;
          if (_[Yl])
            return;
          f("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", Q, al), _[Yl] = !0;
        }
      }
      var Zl = {
        /**
         * Checks whether or not this composite component is mounted.
         * @param {ReactClass} publicInstance The instance we want to test.
         * @return {boolean} True if mounted, false otherwise.
         * @protected
         * @final
         */
        isMounted: function(I) {
          return !1;
        },
        /**
         * Forces an update. This should only be invoked when it is known with
         * certainty that we are **not** in a DOM transaction.
         *
         * You may want to call this when you know that some deeper aspect of the
         * component's state has changed but `setState` was not called.
         *
         * This will not invoke `shouldComponentUpdate`, but it will invoke
         * `componentWillUpdate` and `componentDidUpdate`.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueForceUpdate: function(I, Q, dl) {
          il(I, "forceUpdate");
        },
        /**
         * Replaces all of the state. Always use this or `setState` to mutate state.
         * You should treat `this.state` as immutable.
         *
         * There is no guarantee that `this.state` will be immediately updated, so
         * accessing `this.state` after calling this method may return the old value.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} completeState Next state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueReplaceState: function(I, Q, dl, al) {
          il(I, "replaceState");
        },
        /**
         * Sets a subset of the state. This only exists because _pendingState is
         * internal. This provides a merging strategy that is not available to deep
         * properties which is confusing. TODO: Expose pendingState or don't use it
         * during the merge.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} partialState Next partial state to be merged with state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} Name of the calling function in the public API.
         * @internal
         */
        enqueueSetState: function(I, Q, dl, al) {
          il(I, "setState");
        }
      }, ol = Object.assign, Wl = {};
      Object.freeze(Wl);
      function ml(I, Q, dl) {
        this.props = I, this.context = Q, this.refs = Wl, this.updater = dl || Zl;
      }
      ml.prototype.isReactComponent = {}, ml.prototype.setState = function(I, Q) {
        if (typeof I != "object" && typeof I != "function" && I != null)
          throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, I, Q, "setState");
      }, ml.prototype.forceUpdate = function(I) {
        this.updater.enqueueForceUpdate(this, I, "forceUpdate");
      };
      {
        var Rl = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        }, kl = function(I, Q) {
          Object.defineProperty(ml.prototype, I, {
            get: function() {
              T("%s(...) is deprecated in plain JavaScript React classes. %s", Q[0], Q[1]);
            }
          });
        };
        for (var zl in Rl)
          Rl.hasOwnProperty(zl) && kl(zl, Rl[zl]);
      }
      function Vl() {
      }
      Vl.prototype = ml.prototype;
      function el(I, Q, dl) {
        this.props = I, this.context = Q, this.refs = Wl, this.updater = dl || Zl;
      }
      var xl = el.prototype = new Vl();
      xl.constructor = el, ol(xl, ml.prototype), xl.isPureReactComponent = !0;
      function hl() {
        var I = {
          current: null
        };
        return Object.seal(I), I;
      }
      var cl = Array.isArray;
      function wl(I) {
        return cl(I);
      }
      function Jl(I) {
        {
          var Q = typeof Symbol == "function" && Symbol.toStringTag, dl = Q && I[Symbol.toStringTag] || I.constructor.name || "Object";
          return dl;
        }
      }
      function cZ(I) {
        try {
          return uZ(I), !1;
        } catch {
          return !0;
        }
      }
      function uZ(I) {
        return "" + I;
      }
      function UZ(I) {
        if (cZ(I))
          return f("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", Jl(I)), uZ(I);
      }
      function hc(I, Q, dl) {
        var al = I.displayName;
        if (al)
          return al;
        var Yl = Q.displayName || Q.name || "";
        return Yl !== "" ? dl + "(" + Yl + ")" : dl;
      }
      function Zb(I) {
        return I.displayName || "Context";
      }
      function yc(I) {
        if (I == null)
          return null;
        if (typeof I.tag == "number" && f("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof I == "function")
          return I.displayName || I.name || null;
        if (typeof I == "string")
          return I;
        switch (I) {
          case i:
            return "Fragment";
          case G:
            return "Portal";
          case a:
            return "Profiler";
          case m:
            return "StrictMode";
          case h:
            return "Suspense";
          case S:
            return "SuspenseList";
        }
        if (typeof I == "object")
          switch (I.$$typeof) {
            case p:
              var Q = I;
              return Zb(Q) + ".Consumer";
            case n:
              var dl = I;
              return Zb(dl._context) + ".Provider";
            case y:
              return hc(I, I.render, "ForwardRef");
            case t:
              var al = I.displayName || null;
              return al !== null ? al : yc(I.type) || "Memo";
            case W: {
              var Yl = I, Ol = Yl._payload, gl = Yl._init;
              try {
                return yc(gl(Ol));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var nb = Object.prototype.hasOwnProperty, Nc = {
        key: !0,
        ref: !0,
        __self: !0,
        __source: !0
      }, oc, cb, sc;
      sc = {};
      function Vc(I) {
        if (nb.call(I, "ref")) {
          var Q = Object.getOwnPropertyDescriptor(I, "ref").get;
          if (Q && Q.isReactWarning)
            return !1;
        }
        return I.ref !== void 0;
      }
      function BZ(I) {
        if (nb.call(I, "key")) {
          var Q = Object.getOwnPropertyDescriptor(I, "key").get;
          if (Q && Q.isReactWarning)
            return !1;
        }
        return I.key !== void 0;
      }
      function Rb(I, Q) {
        var dl = function() {
          oc || (oc = !0, f("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", Q));
        };
        dl.isReactWarning = !0, Object.defineProperty(I, "key", {
          get: dl,
          configurable: !0
        });
      }
      function Tb(I, Q) {
        var dl = function() {
          cb || (cb = !0, f("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", Q));
        };
        dl.isReactWarning = !0, Object.defineProperty(I, "ref", {
          get: dl,
          configurable: !0
        });
      }
      function tu(I) {
        if (typeof I.ref == "string" && z.current && I.__self && z.current.stateNode !== I.__self) {
          var Q = yc(z.current.type);
          sc[Q] || (f('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', Q, I.ref), sc[Q] = !0);
        }
      }
      var Il = function(I, Q, dl, al, Yl, Ol, gl) {
        var $l = {
          // This tag allows us to uniquely identify this as a React Element
          $$typeof: s,
          // Built-in properties that belong on the element
          type: I,
          key: Q,
          ref: dl,
          props: gl,
          // Record the component responsible for creating this element.
          _owner: Ol
        };
        return $l._store = {}, Object.defineProperty($l._store, "validated", {
          configurable: !1,
          enumerable: !1,
          writable: !0,
          value: !1
        }), Object.defineProperty($l, "_self", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: al
        }), Object.defineProperty($l, "_source", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: Yl
        }), Object.freeze && (Object.freeze($l.props), Object.freeze($l)), $l;
      };
      function El(I, Q, dl) {
        var al, Yl = {}, Ol = null, gl = null, $l = null, nZ = null;
        if (Q != null) {
          Vc(Q) && (gl = Q.ref, tu(Q)), BZ(Q) && (UZ(Q.key), Ol = "" + Q.key), $l = Q.__self === void 0 ? null : Q.__self, nZ = Q.__source === void 0 ? null : Q.__source;
          for (al in Q)
            nb.call(Q, al) && !Nc.hasOwnProperty(al) && (Yl[al] = Q[al]);
        }
        var CZ = arguments.length - 2;
        if (CZ === 1)
          Yl.children = dl;
        else if (CZ > 1) {
          for (var TZ = Array(CZ), fZ = 0; fZ < CZ; fZ++)
            TZ[fZ] = arguments[fZ + 2];
          Object.freeze && Object.freeze(TZ), Yl.children = TZ;
        }
        if (I && I.defaultProps) {
          var AZ = I.defaultProps;
          for (al in AZ)
            Yl[al] === void 0 && (Yl[al] = AZ[al]);
        }
        if (Ol || gl) {
          var dc = typeof I == "function" ? I.displayName || I.name || "Unknown" : I;
          Ol && Rb(Yl, dc), gl && Tb(Yl, dc);
        }
        return Il(I, Ol, gl, $l, nZ, z.current, Yl);
      }
      function sZ(I, Q) {
        var dl = Il(I.type, Q, I.ref, I._self, I._source, I._owner, I.props);
        return dl;
      }
      function YZ(I, Q, dl) {
        if (I == null)
          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + I + ".");
        var al, Yl = ol({}, I.props), Ol = I.key, gl = I.ref, $l = I._self, nZ = I._source, CZ = I._owner;
        if (Q != null) {
          Vc(Q) && (gl = Q.ref, CZ = z.current), BZ(Q) && (UZ(Q.key), Ol = "" + Q.key);
          var TZ;
          I.type && I.type.defaultProps && (TZ = I.type.defaultProps);
          for (al in Q)
            nb.call(Q, al) && !Nc.hasOwnProperty(al) && (Q[al] === void 0 && TZ !== void 0 ? Yl[al] = TZ[al] : Yl[al] = Q[al]);
        }
        var fZ = arguments.length - 2;
        if (fZ === 1)
          Yl.children = dl;
        else if (fZ > 1) {
          for (var AZ = Array(fZ), dc = 0; dc < fZ; dc++)
            AZ[dc] = arguments[dc + 2];
          Yl.children = AZ;
        }
        return Il(I.type, Ol, gl, $l, nZ, CZ, Yl);
      }
      function kZ(I) {
        return typeof I == "object" && I !== null && I.$$typeof === s;
      }
      var ec = ".", Zc = ":";
      function bb(I) {
        var Q = /[=:]/g, dl = {
          "=": "=0",
          ":": "=2"
        }, al = I.replace(Q, function(Yl) {
          return dl[Yl];
        });
        return "$" + al;
      }
      var zZ = !1, pb = /\/+/g;
      function gZ(I) {
        return I.replace(pb, "$&/");
      }
      function vZ(I, Q) {
        return typeof I == "object" && I !== null && I.key != null ? (UZ(I.key), bb("" + I.key)) : Q.toString(36);
      }
      function cu(I, Q, dl, al, Yl) {
        var Ol = typeof I;
        (Ol === "undefined" || Ol === "boolean") && (I = null);
        var gl = !1;
        if (I === null)
          gl = !0;
        else
          switch (Ol) {
            case "string":
            case "number":
              gl = !0;
              break;
            case "object":
              switch (I.$$typeof) {
                case s:
                case G:
                  gl = !0;
              }
          }
        if (gl) {
          var $l = I, nZ = Yl($l), CZ = al === "" ? ec + vZ($l, 0) : al;
          if (wl(nZ)) {
            var TZ = "";
            CZ != null && (TZ = gZ(CZ) + "/"), cu(nZ, Q, TZ, "", function(ty) {
              return ty;
            });
          } else nZ != null && (kZ(nZ) && (nZ.key && (!$l || $l.key !== nZ.key) && UZ(nZ.key), nZ = sZ(
            nZ,
            // Keep both the (mapped) and old keys if they differ, just as
            // traverseAllChildren used to do for objects as children
            dl + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
            (nZ.key && (!$l || $l.key !== nZ.key) ? (
              // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
              // eslint-disable-next-line react-internal/safe-string-coercion
              gZ("" + nZ.key) + "/"
            ) : "") + CZ
          )), Q.push(nZ));
          return 1;
        }
        var fZ, AZ, dc = 0, xZ = al === "" ? ec : al + Zc;
        if (wl(I))
          for (var Md = 0; Md < I.length; Md++)
            fZ = I[Md], AZ = xZ + vZ(fZ, Md), dc += cu(fZ, Q, dl, AZ, Yl);
        else {
          var Tm = r(I);
          if (typeof Tm == "function") {
            var Jo = I;
            Tm === Jo.entries && (zZ || T("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), zZ = !0);
            for (var Sy = Tm.call(Jo), Us, Ho = 0; !(Us = Sy.next()).done; )
              fZ = Us.value, AZ = xZ + vZ(fZ, Ho++), dc += cu(fZ, Q, dl, AZ, Yl);
          } else if (Ol === "object") {
            var go = String(I);
            throw new Error("Objects are not valid as a React child (found: " + (go === "[object Object]" ? "object with keys {" + Object.keys(I).join(", ") + "}" : go) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
        return dc;
      }
      function Yb(I, Q, dl) {
        if (I == null)
          return I;
        var al = [], Yl = 0;
        return cu(I, al, "", "", function(Ol) {
          return Q.call(dl, Ol, Yl++);
        }), al;
      }
      function Rs(I) {
        var Q = 0;
        return Yb(I, function() {
          Q++;
        }), Q;
      }
      function Xd(I, Q, dl) {
        Yb(I, function() {
          Q.apply(this, arguments);
        }, dl);
      }
      function tG(I) {
        return Yb(I, function(Q) {
          return Q;
        }) || [];
      }
      function Ys(I) {
        if (!kZ(I))
          throw new Error("React.Children.only expected to receive a single React element child.");
        return I;
      }
      function ks(I) {
        var Q = {
          $$typeof: p,
          // As a workaround to support multiple concurrent renderers, we categorize
          // some renderers as primary and others as secondary. We only expect
          // there to be two concurrent renderers at most: React Native (primary) and
          // Fabric (secondary); React DOM (primary) and React ART (secondary).
          // Secondary renderers store their context values on separate fields.
          _currentValue: I,
          _currentValue2: I,
          // Used to track how many concurrent renderers this context currently
          // supports within in a single renderer. Such as parallel server rendering.
          _threadCount: 0,
          // These are circular
          Provider: null,
          Consumer: null,
          // Add these to use same hidden class in VM as ServerContext
          _defaultValue: null,
          _globalName: null
        };
        Q.Provider = {
          $$typeof: n,
          _context: Q
        };
        var dl = !1, al = !1, Yl = !1;
        {
          var Ol = {
            $$typeof: p,
            _context: Q
          };
          Object.defineProperties(Ol, {
            Provider: {
              get: function() {
                return al || (al = !0, f("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?")), Q.Provider;
              },
              set: function(gl) {
                Q.Provider = gl;
              }
            },
            _currentValue: {
              get: function() {
                return Q._currentValue;
              },
              set: function(gl) {
                Q._currentValue = gl;
              }
            },
            _currentValue2: {
              get: function() {
                return Q._currentValue2;
              },
              set: function(gl) {
                Q._currentValue2 = gl;
              }
            },
            _threadCount: {
              get: function() {
                return Q._threadCount;
              },
              set: function(gl) {
                Q._threadCount = gl;
              }
            },
            Consumer: {
              get: function() {
                return dl || (dl = !0, f("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?")), Q.Consumer;
              }
            },
            displayName: {
              get: function() {
                return Q.displayName;
              },
              set: function(gl) {
                Yl || (T("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", gl), Yl = !0);
              }
            }
          }), Q.Consumer = Ol;
        }
        return Q._currentRenderer = null, Q._currentRenderer2 = null, Q;
      }
      var Xu = -1, Qu = 0, Ku = 1, fb = 2;
      function Eb(I) {
        if (I._status === Xu) {
          var Q = I._result, dl = Q();
          if (dl.then(function(Ol) {
            if (I._status === Qu || I._status === Xu) {
              var gl = I;
              gl._status = Ku, gl._result = Ol;
            }
          }, function(Ol) {
            if (I._status === Qu || I._status === Xu) {
              var gl = I;
              gl._status = fb, gl._result = Ol;
            }
          }), I._status === Xu) {
            var al = I;
            al._status = Qu, al._result = dl;
          }
        }
        if (I._status === Ku) {
          var Yl = I._result;
          return Yl === void 0 && f(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))

Did you accidentally put curly braces around the import?`, Yl), "default" in Yl || f(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))`, Yl), Yl.default;
        } else
          throw I._result;
      }
      function bu(I) {
        var Q = {
          // We use these fields to store the result.
          _status: Xu,
          _result: I
        }, dl = {
          $$typeof: W,
          _payload: Q,
          _init: Eb
        };
        {
          var al, Yl;
          Object.defineProperties(dl, {
            defaultProps: {
              configurable: !0,
              get: function() {
                return al;
              },
              set: function(Ol) {
                f("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), al = Ol, Object.defineProperty(dl, "defaultProps", {
                  enumerable: !0
                });
              }
            },
            propTypes: {
              configurable: !0,
              get: function() {
                return Yl;
              },
              set: function(Ol) {
                f("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), Yl = Ol, Object.defineProperty(dl, "propTypes", {
                  enumerable: !0
                });
              }
            }
          });
        }
        return dl;
      }
      function Ms(I) {
        I != null && I.$$typeof === t ? f("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).") : typeof I != "function" ? f("forwardRef requires a render function but was given %s.", I === null ? "null" : typeof I) : I.length !== 0 && I.length !== 2 && f("forwardRef render functions accept exactly two parameters: props and ref. %s", I.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined."), I != null && (I.defaultProps != null || I.propTypes != null) && f("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        var Q = {
          $$typeof: y,
          render: I
        };
        {
          var dl;
          Object.defineProperty(Q, "displayName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
              return dl;
            },
            set: function(al) {
              dl = al, !I.name && !I.displayName && (I.displayName = al);
            }
          });
        }
        return Q;
      }
      var Pu;
      Pu = Symbol.for("react.module.reference");
      function P(I) {
        return !!(typeof I == "string" || typeof I == "function" || I === i || I === a || F || I === m || I === h || I === S || J || I === V || E || g || A || typeof I == "object" && I !== null && (I.$$typeof === W || I.$$typeof === t || I.$$typeof === n || I.$$typeof === p || I.$$typeof === y || // This needs to include all possible module reference object
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        I.$$typeof === Pu || I.getModuleId !== void 0));
      }
      function yl(I, Q) {
        P(I) || f("memo: The first argument must be a component. Instead received: %s", I === null ? "null" : typeof I);
        var dl = {
          $$typeof: t,
          type: I,
          compare: Q === void 0 ? null : Q
        };
        {
          var al;
          Object.defineProperty(dl, "displayName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
              return al;
            },
            set: function(Yl) {
              al = Yl, !I.name && !I.displayName && (I.displayName = Yl);
            }
          });
        }
        return dl;
      }
      function Kl() {
        var I = k.current;
        return I === null && f(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`), I;
      }
      function Bl(I) {
        var Q = Kl();
        if (I._context !== void 0) {
          var dl = I._context;
          dl.Consumer === I ? f("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?") : dl.Provider === I && f("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return Q.useContext(I);
      }
      function oZ(I) {
        var Q = Kl();
        return Q.useState(I);
      }
      function aZ(I, Q, dl) {
        var al = Kl();
        return al.useReducer(I, Q, dl);
      }
      function jl(I) {
        var Q = Kl();
        return Q.useRef(I);
      }
      function dZ(I, Q) {
        var dl = Kl();
        return dl.useEffect(I, Q);
      }
      function ac(I, Q) {
        var dl = Kl();
        return dl.useInsertionEffect(I, Q);
      }
      function JZ(I, Q) {
        var dl = Kl();
        return dl.useLayoutEffect(I, Q);
      }
      function DZ(I, Q) {
        var dl = Kl();
        return dl.useCallback(I, Q);
      }
      function xc(I, Q) {
        var dl = Kl();
        return dl.useMemo(I, Q);
      }
      function uu(I, Q, dl) {
        var al = Kl();
        return al.useImperativeHandle(I, Q, dl);
      }
      function kb(I, Q) {
        {
          var dl = Kl();
          return dl.useDebugValue(I, Q);
        }
      }
      function Sc() {
        var I = Kl();
        return I.useTransition();
      }
      function Lb(I) {
        var Q = Kl();
        return Q.useDeferredValue(I);
      }
      function GZ() {
        var I = Kl();
        return I.useId();
      }
      function Wu(I, Q, dl) {
        var al = Kl();
        return al.useSyncExternalStore(I, Q, dl);
      }
      var Ou = 0, Kd, XG, KG, WG, VG, xG, RG;
      function wm() {
      }
      wm.__reactDisabledLog = !0;
      function Co() {
        {
          if (Ou === 0) {
            Kd = console.log, XG = console.info, KG = console.warn, WG = console.error, VG = console.group, xG = console.groupCollapsed, RG = console.groupEnd;
            var I = {
              configurable: !0,
              enumerable: !0,
              value: wm,
              writable: !0
            };
            Object.defineProperties(console, {
              info: I,
              log: I,
              warn: I,
              error: I,
              group: I,
              groupCollapsed: I,
              groupEnd: I
            });
          }
          Ou++;
        }
      }
      function YG() {
        {
          if (Ou--, Ou === 0) {
            var I = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: ol({}, I, {
                value: Kd
              }),
              info: ol({}, I, {
                value: XG
              }),
              warn: ol({}, I, {
                value: KG
              }),
              error: ol({}, I, {
                value: WG
              }),
              group: ol({}, I, {
                value: VG
              }),
              groupCollapsed: ol({}, I, {
                value: xG
              }),
              groupEnd: ol({}, I, {
                value: RG
              })
            });
          }
          Ou < 0 && f("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var Vu = v.ReactCurrentDispatcher, Mb;
      function Wd(I, Q, dl) {
        {
          if (Mb === void 0)
            try {
              throw Error();
            } catch (Yl) {
              var al = Yl.stack.trim().match(/\n( *(at )?)/);
              Mb = al && al[1] || "";
            }
          return `
` + Mb + I;
        }
      }
      var Vd = !1, zm;
      {
        var ro = typeof WeakMap == "function" ? WeakMap : Map;
        zm = new ro();
      }
      function kn(I, Q) {
        if (!I || Vd)
          return "";
        {
          var dl = zm.get(I);
          if (dl !== void 0)
            return dl;
        }
        var al;
        Vd = !0;
        var Yl = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var Ol;
        Ol = Vu.current, Vu.current = null, Co();
        try {
          if (Q) {
            var gl = function() {
              throw Error();
            };
            if (Object.defineProperty(gl.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(gl, []);
              } catch (xZ) {
                al = xZ;
              }
              Reflect.construct(I, [], gl);
            } else {
              try {
                gl.call();
              } catch (xZ) {
                al = xZ;
              }
              I.call(gl.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (xZ) {
              al = xZ;
            }
            I();
          }
        } catch (xZ) {
          if (xZ && al && typeof xZ.stack == "string") {
            for (var $l = xZ.stack.split(`
`), nZ = al.stack.split(`
`), CZ = $l.length - 1, TZ = nZ.length - 1; CZ >= 1 && TZ >= 0 && $l[CZ] !== nZ[TZ]; )
              TZ--;
            for (; CZ >= 1 && TZ >= 0; CZ--, TZ--)
              if ($l[CZ] !== nZ[TZ]) {
                if (CZ !== 1 || TZ !== 1)
                  do
                    if (CZ--, TZ--, TZ < 0 || $l[CZ] !== nZ[TZ]) {
                      var fZ = `
` + $l[CZ].replace(" at new ", " at ");
                      return I.displayName && fZ.includes("<anonymous>") && (fZ = fZ.replace("<anonymous>", I.displayName)), typeof I == "function" && zm.set(I, fZ), fZ;
                    }
                  while (CZ >= 1 && TZ >= 0);
                break;
              }
          }
        } finally {
          Vd = !1, Vu.current = Ol, YG(), Error.prepareStackTrace = Yl;
        }
        var AZ = I ? I.displayName || I.name : "", dc = AZ ? Wd(AZ) : "";
        return typeof I == "function" && zm.set(I, dc), dc;
      }
      function Fo(I, Q, dl) {
        return kn(I, !1);
      }
      function hy(I) {
        var Q = I.prototype;
        return !!(Q && Q.isReactComponent);
      }
      function xd(I, Q, dl) {
        if (I == null)
          return "";
        if (typeof I == "function")
          return kn(I, hy(I));
        if (typeof I == "string")
          return Wd(I);
        switch (I) {
          case h:
            return Wd("Suspense");
          case S:
            return Wd("SuspenseList");
        }
        if (typeof I == "object")
          switch (I.$$typeof) {
            case y:
              return Fo(I.render);
            case t:
              return xd(I.type, Q, dl);
            case W: {
              var al = I, Yl = al._payload, Ol = al._init;
              try {
                return xd(Ol(Yl), Q, dl);
              } catch {
              }
            }
          }
        return "";
      }
      var Mn = {}, No = v.ReactDebugCurrentFrame;
      function Jm(I) {
        if (I) {
          var Q = I._owner, dl = xd(I.type, I._source, Q ? Q.type : null);
          No.setExtraStackFrame(dl);
        } else
          No.setExtraStackFrame(null);
      }
      function In(I, Q, dl, al, Yl) {
        {
          var Ol = Function.call.bind(nb);
          for (var gl in I)
            if (Ol(I, gl)) {
              var $l = void 0;
              try {
                if (typeof I[gl] != "function") {
                  var nZ = Error((al || "React class") + ": " + dl + " type `" + gl + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof I[gl] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw nZ.name = "Invariant Violation", nZ;
                }
                $l = I[gl](Q, gl, al, dl, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (CZ) {
                $l = CZ;
              }
              $l && !($l instanceof Error) && (Jm(Yl), f("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", al || "React class", dl, gl, typeof $l), Jm(null)), $l instanceof Error && !($l.message in Mn) && (Mn[$l.message] = !0, Jm(Yl), f("Failed %s type: %s", dl, $l.message), Jm(null));
            }
        }
      }
      function tZ(I) {
        if (I) {
          var Q = I._owner, dl = xd(I.type, I._source, Q ? Q.type : null);
          j(dl);
        } else
          j(null);
      }
      var wo;
      wo = !1;
      function zo() {
        if (z.current) {
          var I = yc(z.current.type);
          if (I)
            return `

Check the render method of \`` + I + "`.";
        }
        return "";
      }
      function bZ(I) {
        if (I !== void 0) {
          var Q = I.fileName.replace(/^.*[\\\/]/, ""), dl = I.lineNumber;
          return `

Check your code at ` + Q + ":" + dl + ".";
        }
        return "";
      }
      function Un(I) {
        return I != null ? bZ(I.__source) : "";
      }
      var ub = {};
      function kG(I) {
        var Q = zo();
        if (!Q) {
          var dl = typeof I == "string" ? I : I.displayName || I.name;
          dl && (Q = `

Check the top-level render call using <` + dl + ">.");
        }
        return Q;
      }
      function Rd(I, Q) {
        if (!(!I._store || I._store.validated || I.key != null)) {
          I._store.validated = !0;
          var dl = kG(Q);
          if (!ub[dl]) {
            ub[dl] = !0;
            var al = "";
            I && I._owner && I._owner !== z.current && (al = " It was passed a child from " + yc(I._owner.type) + "."), tZ(I), f('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', dl, al), tZ(null);
          }
        }
      }
      function Cn(I, Q) {
        if (typeof I == "object") {
          if (wl(I))
            for (var dl = 0; dl < I.length; dl++) {
              var al = I[dl];
              kZ(al) && Rd(al, Q);
            }
          else if (kZ(I))
            I._store && (I._store.validated = !0);
          else if (I) {
            var Yl = r(I);
            if (typeof Yl == "function" && Yl !== I.entries)
              for (var Ol = Yl.call(I), gl; !(gl = Ol.next()).done; )
                kZ(gl.value) && Rd(gl.value, Q);
          }
        }
      }
      function wc(I) {
        {
          var Q = I.type;
          if (Q == null || typeof Q == "string")
            return;
          var dl;
          if (typeof Q == "function")
            dl = Q.propTypes;
          else if (typeof Q == "object" && (Q.$$typeof === y || // Note: Memo only checks outer props here.
          // Inner props are checked in the reconciler.
          Q.$$typeof === t))
            dl = Q.propTypes;
          else
            return;
          if (dl) {
            var al = yc(Q);
            In(dl, I.props, "prop", al, I);
          } else if (Q.PropTypes !== void 0 && !wo) {
            wo = !0;
            var Yl = yc(Q);
            f("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", Yl || "Unknown");
          }
          typeof Q.getDefaultProps == "function" && !Q.getDefaultProps.isReactClassApproved && f("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
      function cc(I) {
        {
          for (var Q = Object.keys(I.props), dl = 0; dl < Q.length; dl++) {
            var al = Q[dl];
            if (al !== "children" && al !== "key") {
              tZ(I), f("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", al), tZ(null);
              break;
            }
          }
          I.ref !== null && (tZ(I), f("Invalid attribute `ref` supplied to `React.Fragment`."), tZ(null));
        }
      }
      function rn(I, Q, dl) {
        var al = P(I);
        if (!al) {
          var Yl = "";
          (I === void 0 || typeof I == "object" && I !== null && Object.keys(I).length === 0) && (Yl += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var Ol = Un(Q);
          Ol ? Yl += Ol : Yl += zo();
          var gl;
          I === null ? gl = "null" : wl(I) ? gl = "array" : I !== void 0 && I.$$typeof === s ? (gl = "<" + (yc(I.type) || "Unknown") + " />", Yl = " Did you accidentally export a JSX literal instead of a component?") : gl = typeof I, f("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", gl, Yl);
        }
        var $l = El.apply(this, arguments);
        if ($l == null)
          return $l;
        if (al)
          for (var nZ = 2; nZ < arguments.length; nZ++)
            Cn(arguments[nZ], I);
        return I === i ? cc($l) : wc($l), $l;
      }
      var Bb = !1;
      function Ib(I) {
        var Q = rn.bind(null, I);
        return Q.type = I, Bb || (Bb = !0, T("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.")), Object.defineProperty(Q, "type", {
          enumerable: !1,
          get: function() {
            return T("Factory.type is deprecated. Access the class directly before passing it to createFactory."), Object.defineProperty(this, "type", {
              value: I
            }), I;
          }
        }), Q;
      }
      function Au(I, Q, dl) {
        for (var al = YZ.apply(this, arguments), Yl = 2; Yl < arguments.length; Yl++)
          Cn(arguments[Yl], al.type);
        return wc(al), al;
      }
      function yy(I, Q) {
        var dl = U.transition;
        U.transition = {};
        var al = U.transition;
        U.transition._updatedFibers = /* @__PURE__ */ new Set();
        try {
          I();
        } finally {
          if (U.transition = dl, dl === null && al._updatedFibers) {
            var Yl = al._updatedFibers.size;
            Yl > 10 && T("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), al._updatedFibers.clear();
          }
        }
      }
      var Hm = !1, MG = null;
      function Fn(I) {
        if (MG === null)
          try {
            var Q = ("require" + Math.random()).slice(0, 7), dl = l && l[Q];
            MG = dl.call(l, "timers").setImmediate;
          } catch {
            MG = function(Yl) {
              Hm === !1 && (Hm = !0, typeof MessageChannel > "u" && f("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));
              var Ol = new MessageChannel();
              Ol.port1.onmessage = Yl, Ol.port2.postMessage(void 0);
            };
          }
        return MG(I);
      }
      var Yd = 0, Nn = !1;
      function wn(I) {
        {
          var Q = Yd;
          Yd++, w.current === null && (w.current = []);
          var dl = w.isBatchingLegacy, al;
          try {
            if (w.isBatchingLegacy = !0, al = I(), !dl && w.didScheduleLegacyUpdate) {
              var Yl = w.current;
              Yl !== null && (w.didScheduleLegacyUpdate = !1, vm(Yl));
            }
          } catch (AZ) {
            throw Is(Q), AZ;
          } finally {
            w.isBatchingLegacy = dl;
          }
          if (al !== null && typeof al == "object" && typeof al.then == "function") {
            var Ol = al, gl = !1, $l = {
              then: function(AZ, dc) {
                gl = !0, Ol.then(function(xZ) {
                  Is(Q), Yd === 0 ? gm(xZ, AZ, dc) : AZ(xZ);
                }, function(xZ) {
                  Is(Q), dc(xZ);
                });
              }
            };
            return !Nn && typeof Promise < "u" && Promise.resolve().then(function() {
            }).then(function() {
              gl || (Nn = !0, f("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"));
            }), $l;
          } else {
            var nZ = al;
            if (Is(Q), Yd === 0) {
              var CZ = w.current;
              CZ !== null && (vm(CZ), w.current = null);
              var TZ = {
                then: function(AZ, dc) {
                  w.current === null ? (w.current = [], gm(nZ, AZ, dc)) : AZ(nZ);
                }
              };
              return TZ;
            } else {
              var fZ = {
                then: function(AZ, dc) {
                  AZ(nZ);
                }
              };
              return fZ;
            }
          }
        }
      }
      function Is(I) {
        I !== Yd - 1 && f("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "), Yd = I;
      }
      function gm(I, Q, dl) {
        {
          var al = w.current;
          if (al !== null)
            try {
              vm(al), Fn(function() {
                al.length === 0 ? (w.current = null, Q(I)) : gm(I, Q, dl);
              });
            } catch (Yl) {
              dl(Yl);
            }
          else
            Q(I);
        }
      }
      var kd = !1;
      function vm(I) {
        if (!kd) {
          kd = !0;
          var Q = 0;
          try {
            for (; Q < I.length; Q++) {
              var dl = I[Q];
              do
                dl = dl(!0);
              while (dl !== null);
            }
            I.length = 0;
          } catch (al) {
            throw I = I.slice(Q + 1), al;
          } finally {
            kd = !1;
          }
        }
      }
      var zn = rn, Jn = Au, Hn = Ib, gn = {
        map: Yb,
        forEach: Xd,
        count: Rs,
        toArray: tG,
        only: Ys
      };
      Z.Children = gn, Z.Component = ml, Z.Fragment = i, Z.Profiler = a, Z.PureComponent = el, Z.StrictMode = m, Z.Suspense = h, Z.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = v, Z.act = wn, Z.cloneElement = Jn, Z.createContext = ks, Z.createElement = zn, Z.createFactory = Hn, Z.createRef = hl, Z.forwardRef = Ms, Z.isValidElement = kZ, Z.lazy = bu, Z.memo = yl, Z.startTransition = yy, Z.unstable_act = wn, Z.useCallback = DZ, Z.useContext = Bl, Z.useDebugValue = kb, Z.useDeferredValue = Lb, Z.useEffect = dZ, Z.useId = GZ, Z.useImperativeHandle = uu, Z.useInsertionEffect = ac, Z.useLayoutEffect = JZ, Z.useMemo = xc, Z.useReducer = aZ, Z.useRef = jl, Z.useState = oZ, Z.useSyncExternalStore = Wu, Z.useTransition = Sc, Z.version = u, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    })();
  }(Ya, Ya.exports)), Ya.exports;
}
EI.exports = YT();
var M = EI.exports;
const tl = /* @__PURE__ */ wh(M);
var La = {}, Ek;
function kT() {
  if (Ek) return La;
  Ek = 1;
  /**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  return function() {
    var l = M, Z = Symbol.for("react.element"), u = Symbol.for("react.portal"), s = Symbol.for("react.fragment"), G = Symbol.for("react.strict_mode"), i = Symbol.for("react.profiler"), m = Symbol.for("react.provider"), a = Symbol.for("react.context"), n = Symbol.for("react.forward_ref"), p = Symbol.for("react.suspense"), y = Symbol.for("react.suspense_list"), h = Symbol.for("react.memo"), S = Symbol.for("react.lazy"), t = Symbol.for("react.offscreen"), W = Symbol.iterator, V = "@@iterator";
    function R(P) {
      if (P === null || typeof P != "object")
        return null;
      var yl = W && P[W] || P[V];
      return typeof yl == "function" ? yl : null;
    }
    var x = l.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function r(P) {
      {
        for (var yl = arguments.length, Kl = new Array(yl > 1 ? yl - 1 : 0), Bl = 1; Bl < yl; Bl++)
          Kl[Bl - 1] = arguments[Bl];
        k("error", P, Kl);
      }
    }
    function k(P, yl, Kl) {
      {
        var Bl = x.ReactDebugCurrentFrame, oZ = Bl.getStackAddendum();
        oZ !== "" && (yl += "%s", Kl = Kl.concat([oZ]));
        var aZ = Kl.map(function(jl) {
          return String(jl);
        });
        aZ.unshift("Warning: " + yl), Function.prototype.apply.call(console[P], console, aZ);
      }
    }
    var U = !1, w = !1, z = !1, D = !1, C = !1, j;
    j = Symbol.for("react.module.reference");
    function E(P) {
      return !!(typeof P == "string" || typeof P == "function" || P === s || P === i || C || P === G || P === p || P === y || D || P === t || U || w || z || typeof P == "object" && P !== null && (P.$$typeof === S || P.$$typeof === h || P.$$typeof === m || P.$$typeof === a || P.$$typeof === n || // This needs to include all possible module reference object
      // types supported by any Flight configuration anywhere since
      // we don't know which Flight build this will end up being used
      // with.
      P.$$typeof === j || P.getModuleId !== void 0));
    }
    function g(P, yl, Kl) {
      var Bl = P.displayName;
      if (Bl)
        return Bl;
      var oZ = yl.displayName || yl.name || "";
      return oZ !== "" ? Kl + "(" + oZ + ")" : Kl;
    }
    function A(P) {
      return P.displayName || "Context";
    }
    function J(P) {
      if (P == null)
        return null;
      if (typeof P.tag == "number" && r("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof P == "function")
        return P.displayName || P.name || null;
      if (typeof P == "string")
        return P;
      switch (P) {
        case s:
          return "Fragment";
        case u:
          return "Portal";
        case i:
          return "Profiler";
        case G:
          return "StrictMode";
        case p:
          return "Suspense";
        case y:
          return "SuspenseList";
      }
      if (typeof P == "object")
        switch (P.$$typeof) {
          case a:
            var yl = P;
            return A(yl) + ".Consumer";
          case m:
            var Kl = P;
            return A(Kl._context) + ".Provider";
          case n:
            return g(P, P.render, "ForwardRef");
          case h:
            var Bl = P.displayName || null;
            return Bl !== null ? Bl : J(P.type) || "Memo";
          case S: {
            var oZ = P, aZ = oZ._payload, jl = oZ._init;
            try {
              return J(jl(aZ));
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    var F = Object.assign, v = 0, T, f, O, _, il, Zl, ol;
    function Wl() {
    }
    Wl.__reactDisabledLog = !0;
    function ml() {
      {
        if (v === 0) {
          T = console.log, f = console.info, O = console.warn, _ = console.error, il = console.group, Zl = console.groupCollapsed, ol = console.groupEnd;
          var P = {
            configurable: !0,
            enumerable: !0,
            value: Wl,
            writable: !0
          };
          Object.defineProperties(console, {
            info: P,
            log: P,
            warn: P,
            error: P,
            group: P,
            groupCollapsed: P,
            groupEnd: P
          });
        }
        v++;
      }
    }
    function Rl() {
      {
        if (v--, v === 0) {
          var P = {
            configurable: !0,
            enumerable: !0,
            writable: !0
          };
          Object.defineProperties(console, {
            log: F({}, P, {
              value: T
            }),
            info: F({}, P, {
              value: f
            }),
            warn: F({}, P, {
              value: O
            }),
            error: F({}, P, {
              value: _
            }),
            group: F({}, P, {
              value: il
            }),
            groupCollapsed: F({}, P, {
              value: Zl
            }),
            groupEnd: F({}, P, {
              value: ol
            })
          });
        }
        v < 0 && r("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var kl = x.ReactCurrentDispatcher, zl;
    function Vl(P, yl, Kl) {
      {
        if (zl === void 0)
          try {
            throw Error();
          } catch (oZ) {
            var Bl = oZ.stack.trim().match(/\n( *(at )?)/);
            zl = Bl && Bl[1] || "";
          }
        return `
` + zl + P;
      }
    }
    var el = !1, xl;
    {
      var hl = typeof WeakMap == "function" ? WeakMap : Map;
      xl = new hl();
    }
    function cl(P, yl) {
      if (!P || el)
        return "";
      {
        var Kl = xl.get(P);
        if (Kl !== void 0)
          return Kl;
      }
      var Bl;
      el = !0;
      var oZ = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var aZ;
      aZ = kl.current, kl.current = null, ml();
      try {
        if (yl) {
          var jl = function() {
            throw Error();
          };
          if (Object.defineProperty(jl.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(jl, []);
            } catch (Sc) {
              Bl = Sc;
            }
            Reflect.construct(P, [], jl);
          } else {
            try {
              jl.call();
            } catch (Sc) {
              Bl = Sc;
            }
            P.call(jl.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (Sc) {
            Bl = Sc;
          }
          P();
        }
      } catch (Sc) {
        if (Sc && Bl && typeof Sc.stack == "string") {
          for (var dZ = Sc.stack.split(`
`), ac = Bl.stack.split(`
`), JZ = dZ.length - 1, DZ = ac.length - 1; JZ >= 1 && DZ >= 0 && dZ[JZ] !== ac[DZ]; )
            DZ--;
          for (; JZ >= 1 && DZ >= 0; JZ--, DZ--)
            if (dZ[JZ] !== ac[DZ]) {
              if (JZ !== 1 || DZ !== 1)
                do
                  if (JZ--, DZ--, DZ < 0 || dZ[JZ] !== ac[DZ]) {
                    var xc = `
` + dZ[JZ].replace(" at new ", " at ");
                    return P.displayName && xc.includes("<anonymous>") && (xc = xc.replace("<anonymous>", P.displayName)), typeof P == "function" && xl.set(P, xc), xc;
                  }
                while (JZ >= 1 && DZ >= 0);
              break;
            }
        }
      } finally {
        el = !1, kl.current = aZ, Rl(), Error.prepareStackTrace = oZ;
      }
      var uu = P ? P.displayName || P.name : "", kb = uu ? Vl(uu) : "";
      return typeof P == "function" && xl.set(P, kb), kb;
    }
    function wl(P, yl, Kl) {
      return cl(P, !1);
    }
    function Jl(P) {
      var yl = P.prototype;
      return !!(yl && yl.isReactComponent);
    }
    function cZ(P, yl, Kl) {
      if (P == null)
        return "";
      if (typeof P == "function")
        return cl(P, Jl(P));
      if (typeof P == "string")
        return Vl(P);
      switch (P) {
        case p:
          return Vl("Suspense");
        case y:
          return Vl("SuspenseList");
      }
      if (typeof P == "object")
        switch (P.$$typeof) {
          case n:
            return wl(P.render);
          case h:
            return cZ(P.type, yl, Kl);
          case S: {
            var Bl = P, oZ = Bl._payload, aZ = Bl._init;
            try {
              return cZ(aZ(oZ), yl, Kl);
            } catch {
            }
          }
        }
      return "";
    }
    var uZ = Object.prototype.hasOwnProperty, UZ = {}, hc = x.ReactDebugCurrentFrame;
    function Zb(P) {
      if (P) {
        var yl = P._owner, Kl = cZ(P.type, P._source, yl ? yl.type : null);
        hc.setExtraStackFrame(Kl);
      } else
        hc.setExtraStackFrame(null);
    }
    function yc(P, yl, Kl, Bl, oZ) {
      {
        var aZ = Function.call.bind(uZ);
        for (var jl in P)
          if (aZ(P, jl)) {
            var dZ = void 0;
            try {
              if (typeof P[jl] != "function") {
                var ac = Error((Bl || "React class") + ": " + Kl + " type `" + jl + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof P[jl] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw ac.name = "Invariant Violation", ac;
              }
              dZ = P[jl](yl, jl, Bl, Kl, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (JZ) {
              dZ = JZ;
            }
            dZ && !(dZ instanceof Error) && (Zb(oZ), r("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", Bl || "React class", Kl, jl, typeof dZ), Zb(null)), dZ instanceof Error && !(dZ.message in UZ) && (UZ[dZ.message] = !0, Zb(oZ), r("Failed %s type: %s", Kl, dZ.message), Zb(null));
          }
      }
    }
    var nb = Array.isArray;
    function Nc(P) {
      return nb(P);
    }
    function oc(P) {
      {
        var yl = typeof Symbol == "function" && Symbol.toStringTag, Kl = yl && P[Symbol.toStringTag] || P.constructor.name || "Object";
        return Kl;
      }
    }
    function cb(P) {
      try {
        return sc(P), !1;
      } catch {
        return !0;
      }
    }
    function sc(P) {
      return "" + P;
    }
    function Vc(P) {
      if (cb(P))
        return r("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", oc(P)), sc(P);
    }
    var BZ = x.ReactCurrentOwner, Rb = {
      key: !0,
      ref: !0,
      __self: !0,
      __source: !0
    }, Tb, tu, Il;
    Il = {};
    function El(P) {
      if (uZ.call(P, "ref")) {
        var yl = Object.getOwnPropertyDescriptor(P, "ref").get;
        if (yl && yl.isReactWarning)
          return !1;
      }
      return P.ref !== void 0;
    }
    function sZ(P) {
      if (uZ.call(P, "key")) {
        var yl = Object.getOwnPropertyDescriptor(P, "key").get;
        if (yl && yl.isReactWarning)
          return !1;
      }
      return P.key !== void 0;
    }
    function YZ(P, yl) {
      if (typeof P.ref == "string" && BZ.current && yl && BZ.current.stateNode !== yl) {
        var Kl = J(BZ.current.type);
        Il[Kl] || (r('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', J(BZ.current.type), P.ref), Il[Kl] = !0);
      }
    }
    function kZ(P, yl) {
      {
        var Kl = function() {
          Tb || (Tb = !0, r("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", yl));
        };
        Kl.isReactWarning = !0, Object.defineProperty(P, "key", {
          get: Kl,
          configurable: !0
        });
      }
    }
    function ec(P, yl) {
      {
        var Kl = function() {
          tu || (tu = !0, r("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", yl));
        };
        Kl.isReactWarning = !0, Object.defineProperty(P, "ref", {
          get: Kl,
          configurable: !0
        });
      }
    }
    var Zc = function(P, yl, Kl, Bl, oZ, aZ, jl) {
      var dZ = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: Z,
        // Built-in properties that belong on the element
        type: P,
        key: yl,
        ref: Kl,
        props: jl,
        // Record the component responsible for creating this element.
        _owner: aZ
      };
      return dZ._store = {}, Object.defineProperty(dZ._store, "validated", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: !1
      }), Object.defineProperty(dZ, "_self", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: Bl
      }), Object.defineProperty(dZ, "_source", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: oZ
      }), Object.freeze && (Object.freeze(dZ.props), Object.freeze(dZ)), dZ;
    };
    function bb(P, yl, Kl, Bl, oZ) {
      {
        var aZ, jl = {}, dZ = null, ac = null;
        Kl !== void 0 && (Vc(Kl), dZ = "" + Kl), sZ(yl) && (Vc(yl.key), dZ = "" + yl.key), El(yl) && (ac = yl.ref, YZ(yl, oZ));
        for (aZ in yl)
          uZ.call(yl, aZ) && !Rb.hasOwnProperty(aZ) && (jl[aZ] = yl[aZ]);
        if (P && P.defaultProps) {
          var JZ = P.defaultProps;
          for (aZ in JZ)
            jl[aZ] === void 0 && (jl[aZ] = JZ[aZ]);
        }
        if (dZ || ac) {
          var DZ = typeof P == "function" ? P.displayName || P.name || "Unknown" : P;
          dZ && kZ(jl, DZ), ac && ec(jl, DZ);
        }
        return Zc(P, dZ, ac, oZ, Bl, BZ.current, jl);
      }
    }
    var zZ = x.ReactCurrentOwner, pb = x.ReactDebugCurrentFrame;
    function gZ(P) {
      if (P) {
        var yl = P._owner, Kl = cZ(P.type, P._source, yl ? yl.type : null);
        pb.setExtraStackFrame(Kl);
      } else
        pb.setExtraStackFrame(null);
    }
    var vZ;
    vZ = !1;
    function cu(P) {
      return typeof P == "object" && P !== null && P.$$typeof === Z;
    }
    function Yb() {
      {
        if (zZ.current) {
          var P = J(zZ.current.type);
          if (P)
            return `

Check the render method of \`` + P + "`.";
        }
        return "";
      }
    }
    function Rs(P) {
      return "";
    }
    var Xd = {};
    function tG(P) {
      {
        var yl = Yb();
        if (!yl) {
          var Kl = typeof P == "string" ? P : P.displayName || P.name;
          Kl && (yl = `

Check the top-level render call using <` + Kl + ">.");
        }
        return yl;
      }
    }
    function Ys(P, yl) {
      {
        if (!P._store || P._store.validated || P.key != null)
          return;
        P._store.validated = !0;
        var Kl = tG(yl);
        if (Xd[Kl])
          return;
        Xd[Kl] = !0;
        var Bl = "";
        P && P._owner && P._owner !== zZ.current && (Bl = " It was passed a child from " + J(P._owner.type) + "."), gZ(P), r('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', Kl, Bl), gZ(null);
      }
    }
    function ks(P, yl) {
      {
        if (typeof P != "object")
          return;
        if (Nc(P))
          for (var Kl = 0; Kl < P.length; Kl++) {
            var Bl = P[Kl];
            cu(Bl) && Ys(Bl, yl);
          }
        else if (cu(P))
          P._store && (P._store.validated = !0);
        else if (P) {
          var oZ = R(P);
          if (typeof oZ == "function" && oZ !== P.entries)
            for (var aZ = oZ.call(P), jl; !(jl = aZ.next()).done; )
              cu(jl.value) && Ys(jl.value, yl);
        }
      }
    }
    function Xu(P) {
      {
        var yl = P.type;
        if (yl == null || typeof yl == "string")
          return;
        var Kl;
        if (typeof yl == "function")
          Kl = yl.propTypes;
        else if (typeof yl == "object" && (yl.$$typeof === n || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        yl.$$typeof === h))
          Kl = yl.propTypes;
        else
          return;
        if (Kl) {
          var Bl = J(yl);
          yc(Kl, P.props, "prop", Bl, P);
        } else if (yl.PropTypes !== void 0 && !vZ) {
          vZ = !0;
          var oZ = J(yl);
          r("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", oZ || "Unknown");
        }
        typeof yl.getDefaultProps == "function" && !yl.getDefaultProps.isReactClassApproved && r("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
      }
    }
    function Qu(P) {
      {
        for (var yl = Object.keys(P.props), Kl = 0; Kl < yl.length; Kl++) {
          var Bl = yl[Kl];
          if (Bl !== "children" && Bl !== "key") {
            gZ(P), r("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", Bl), gZ(null);
            break;
          }
        }
        P.ref !== null && (gZ(P), r("Invalid attribute `ref` supplied to `React.Fragment`."), gZ(null));
      }
    }
    var Ku = {};
    function fb(P, yl, Kl, Bl, oZ, aZ) {
      {
        var jl = E(P);
        if (!jl) {
          var dZ = "";
          (P === void 0 || typeof P == "object" && P !== null && Object.keys(P).length === 0) && (dZ += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var ac = Rs();
          ac ? dZ += ac : dZ += Yb();
          var JZ;
          P === null ? JZ = "null" : Nc(P) ? JZ = "array" : P !== void 0 && P.$$typeof === Z ? (JZ = "<" + (J(P.type) || "Unknown") + " />", dZ = " Did you accidentally export a JSX literal instead of a component?") : JZ = typeof P, r("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", JZ, dZ);
        }
        var DZ = bb(P, yl, Kl, oZ, aZ);
        if (DZ == null)
          return DZ;
        if (jl) {
          var xc = yl.children;
          if (xc !== void 0)
            if (Bl)
              if (Nc(xc)) {
                for (var uu = 0; uu < xc.length; uu++)
                  ks(xc[uu], P);
                Object.freeze && Object.freeze(xc);
              } else
                r("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
            else
              ks(xc, P);
        }
        if (uZ.call(yl, "key")) {
          var kb = J(P), Sc = Object.keys(yl).filter(function(Wu) {
            return Wu !== "key";
          }), Lb = Sc.length > 0 ? "{key: someKey, " + Sc.join(": ..., ") + ": ...}" : "{key: someKey}";
          if (!Ku[kb + Lb]) {
            var GZ = Sc.length > 0 ? "{" + Sc.join(": ..., ") + ": ...}" : "{}";
            r(`A props object containing a "key" prop is being spread into JSX:
  let props = %s;
  <%s {...props} />
React keys must be passed directly to JSX without using spread:
  let props = %s;
  <%s key={someKey} {...props} />`, Lb, kb, GZ, kb), Ku[kb + Lb] = !0;
          }
        }
        return P === s ? Qu(DZ) : Xu(DZ), DZ;
      }
    }
    function Eb(P, yl, Kl) {
      return fb(P, yl, Kl, !0);
    }
    function bu(P, yl, Kl) {
      return fb(P, yl, Kl, !1);
    }
    var Ms = bu, Pu = Eb;
    La.Fragment = s, La.jsx = Ms, La.jsxs = Pu;
  }(), La;
}
fI.exports = kT();
var B = fI.exports, BI = { exports: {} }, KK = { exports: {} }, WK = {}, Bk;
function MT() {
  return Bk || (Bk = 1, function(l) {
    /**
     * @license React
     * scheduler.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    (function() {
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var Z = !1, u = !1, s = 5;
      function G(Il, El) {
        var sZ = Il.length;
        Il.push(El), a(Il, El, sZ);
      }
      function i(Il) {
        return Il.length === 0 ? null : Il[0];
      }
      function m(Il) {
        if (Il.length === 0)
          return null;
        var El = Il[0], sZ = Il.pop();
        return sZ !== El && (Il[0] = sZ, n(Il, sZ, 0)), El;
      }
      function a(Il, El, sZ) {
        for (var YZ = sZ; YZ > 0; ) {
          var kZ = YZ - 1 >>> 1, ec = Il[kZ];
          if (p(ec, El) > 0)
            Il[kZ] = El, Il[YZ] = ec, YZ = kZ;
          else
            return;
        }
      }
      function n(Il, El, sZ) {
        for (var YZ = sZ, kZ = Il.length, ec = kZ >>> 1; YZ < ec; ) {
          var Zc = (YZ + 1) * 2 - 1, bb = Il[Zc], zZ = Zc + 1, pb = Il[zZ];
          if (p(bb, El) < 0)
            zZ < kZ && p(pb, bb) < 0 ? (Il[YZ] = pb, Il[zZ] = El, YZ = zZ) : (Il[YZ] = bb, Il[Zc] = El, YZ = Zc);
          else if (zZ < kZ && p(pb, El) < 0)
            Il[YZ] = pb, Il[zZ] = El, YZ = zZ;
          else
            return;
        }
      }
      function p(Il, El) {
        var sZ = Il.sortIndex - El.sortIndex;
        return sZ !== 0 ? sZ : Il.id - El.id;
      }
      var y = 1, h = 2, S = 3, t = 4, W = 5;
      function V(Il, El) {
      }
      var R = typeof performance == "object" && typeof performance.now == "function";
      if (R) {
        var x = performance;
        l.unstable_now = function() {
          return x.now();
        };
      } else {
        var r = Date, k = r.now();
        l.unstable_now = function() {
          return r.now() - k;
        };
      }
      var U = 1073741823, w = -1, z = 250, D = 5e3, C = 1e4, j = U, E = [], g = [], A = 1, J = null, F = S, v = !1, T = !1, f = !1, O = typeof setTimeout == "function" ? setTimeout : null, _ = typeof clearTimeout == "function" ? clearTimeout : null, il = typeof setImmediate < "u" ? setImmediate : null;
      typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
      function Zl(Il) {
        for (var El = i(g); El !== null; ) {
          if (El.callback === null)
            m(g);
          else if (El.startTime <= Il)
            m(g), El.sortIndex = El.expirationTime, G(E, El);
          else
            return;
          El = i(g);
        }
      }
      function ol(Il) {
        if (f = !1, Zl(Il), !T)
          if (i(E) !== null)
            T = !0, Vc(Wl);
          else {
            var El = i(g);
            El !== null && BZ(ol, El.startTime - Il);
          }
      }
      function Wl(Il, El) {
        T = !1, f && (f = !1, Rb()), v = !0;
        var sZ = F;
        try {
          var YZ;
          if (!u) return ml(Il, El);
        } finally {
          J = null, F = sZ, v = !1;
        }
      }
      function ml(Il, El) {
        var sZ = El;
        for (Zl(sZ), J = i(E); J !== null && !Z && !(J.expirationTime > sZ && (!Il || Zb())); ) {
          var YZ = J.callback;
          if (typeof YZ == "function") {
            J.callback = null, F = J.priorityLevel;
            var kZ = J.expirationTime <= sZ, ec = YZ(kZ);
            sZ = l.unstable_now(), typeof ec == "function" ? J.callback = ec : J === i(E) && m(E), Zl(sZ);
          } else
            m(E);
          J = i(E);
        }
        if (J !== null)
          return !0;
        var Zc = i(g);
        return Zc !== null && BZ(ol, Zc.startTime - sZ), !1;
      }
      function Rl(Il, El) {
        switch (Il) {
          case y:
          case h:
          case S:
          case t:
          case W:
            break;
          default:
            Il = S;
        }
        var sZ = F;
        F = Il;
        try {
          return El();
        } finally {
          F = sZ;
        }
      }
      function kl(Il) {
        var El;
        switch (F) {
          case y:
          case h:
          case S:
            El = S;
            break;
          default:
            El = F;
            break;
        }
        var sZ = F;
        F = El;
        try {
          return Il();
        } finally {
          F = sZ;
        }
      }
      function zl(Il) {
        var El = F;
        return function() {
          var sZ = F;
          F = El;
          try {
            return Il.apply(this, arguments);
          } finally {
            F = sZ;
          }
        };
      }
      function Vl(Il, El, sZ) {
        var YZ = l.unstable_now(), kZ;
        if (typeof sZ == "object" && sZ !== null) {
          var ec = sZ.delay;
          typeof ec == "number" && ec > 0 ? kZ = YZ + ec : kZ = YZ;
        } else
          kZ = YZ;
        var Zc;
        switch (Il) {
          case y:
            Zc = w;
            break;
          case h:
            Zc = z;
            break;
          case W:
            Zc = j;
            break;
          case t:
            Zc = C;
            break;
          case S:
          default:
            Zc = D;
            break;
        }
        var bb = kZ + Zc, zZ = {
          id: A++,
          callback: El,
          priorityLevel: Il,
          startTime: kZ,
          expirationTime: bb,
          sortIndex: -1
        };
        return kZ > YZ ? (zZ.sortIndex = kZ, G(g, zZ), i(E) === null && zZ === i(g) && (f ? Rb() : f = !0, BZ(ol, kZ - YZ))) : (zZ.sortIndex = bb, G(E, zZ), !T && !v && (T = !0, Vc(Wl))), zZ;
      }
      function el() {
      }
      function xl() {
        !T && !v && (T = !0, Vc(Wl));
      }
      function hl() {
        return i(E);
      }
      function cl(Il) {
        Il.callback = null;
      }
      function wl() {
        return F;
      }
      var Jl = !1, cZ = null, uZ = -1, UZ = s, hc = -1;
      function Zb() {
        var Il = l.unstable_now() - hc;
        return !(Il < UZ);
      }
      function yc() {
      }
      function nb(Il) {
        if (Il < 0 || Il > 125) {
          console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
          return;
        }
        Il > 0 ? UZ = Math.floor(1e3 / Il) : UZ = s;
      }
      var Nc = function() {
        if (cZ !== null) {
          var Il = l.unstable_now();
          hc = Il;
          var El = !0, sZ = !0;
          try {
            sZ = cZ(El, Il);
          } finally {
            sZ ? oc() : (Jl = !1, cZ = null);
          }
        } else
          Jl = !1;
      }, oc;
      if (typeof il == "function")
        oc = function() {
          il(Nc);
        };
      else if (typeof MessageChannel < "u") {
        var cb = new MessageChannel(), sc = cb.port2;
        cb.port1.onmessage = Nc, oc = function() {
          sc.postMessage(null);
        };
      } else
        oc = function() {
          O(Nc, 0);
        };
      function Vc(Il) {
        cZ = Il, Jl || (Jl = !0, oc());
      }
      function BZ(Il, El) {
        uZ = O(function() {
          Il(l.unstable_now());
        }, El);
      }
      function Rb() {
        _(uZ), uZ = -1;
      }
      var Tb = yc, tu = null;
      l.unstable_IdlePriority = W, l.unstable_ImmediatePriority = y, l.unstable_LowPriority = t, l.unstable_NormalPriority = S, l.unstable_Profiling = tu, l.unstable_UserBlockingPriority = h, l.unstable_cancelCallback = cl, l.unstable_continueExecution = xl, l.unstable_forceFrameRate = nb, l.unstable_getCurrentPriorityLevel = wl, l.unstable_getFirstCallbackNode = hl, l.unstable_next = kl, l.unstable_pauseExecution = el, l.unstable_requestPaint = Tb, l.unstable_runWithPriority = Rl, l.unstable_scheduleCallback = Vl, l.unstable_shouldYield = Zb, l.unstable_wrapCallback = zl, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    })();
  }(WK)), WK;
}
var Dk;
function IT() {
  return Dk || (Dk = 1, KK.exports = MT()), KK.exports;
}
var zb = {}, jk;
function UT() {
  if (jk) return zb;
  jk = 1;
  /**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  return function() {
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var l = M, Z = IT(), u = l.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, s = !1;
    function G(c) {
      s = c;
    }
    function i(c) {
      if (!s) {
        for (var b = arguments.length, d = new Array(b > 1 ? b - 1 : 0), o = 1; o < b; o++)
          d[o - 1] = arguments[o];
        a("warn", c, d);
      }
    }
    function m(c) {
      if (!s) {
        for (var b = arguments.length, d = new Array(b > 1 ? b - 1 : 0), o = 1; o < b; o++)
          d[o - 1] = arguments[o];
        a("error", c, d);
      }
    }
    function a(c, b, d) {
      {
        var o = u.ReactDebugCurrentFrame, e = o.getStackAddendum();
        e !== "" && (b += "%s", d = d.concat([e]));
        var L = d.map(function(X) {
          return String(X);
        });
        L.unshift("Warning: " + b), Function.prototype.apply.call(console[c], console, L);
      }
    }
    var n = 0, p = 1, y = 2, h = 3, S = 4, t = 5, W = 6, V = 7, R = 8, x = 9, r = 10, k = 11, U = 12, w = 13, z = 14, D = 15, C = 16, j = 17, E = 18, g = 19, A = 21, J = 22, F = 23, v = 24, T = 25, f = !0, O = !1, _ = !1, il = !1, Zl = !1, ol = !0, Wl = !1, ml = !0, Rl = !0, kl = !0, zl = !0, Vl = /* @__PURE__ */ new Set(), el = {}, xl = {};
    function hl(c, b) {
      cl(c, b), cl(c + "Capture", b);
    }
    function cl(c, b) {
      el[c] && m("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", c), el[c] = b;
      {
        var d = c.toLowerCase();
        xl[d] = c, c === "onDoubleClick" && (xl.ondblclick = c);
      }
      for (var o = 0; o < b.length; o++)
        Vl.add(b[o]);
    }
    var wl = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", Jl = Object.prototype.hasOwnProperty;
    function cZ(c) {
      {
        var b = typeof Symbol == "function" && Symbol.toStringTag, d = b && c[Symbol.toStringTag] || c.constructor.name || "Object";
        return d;
      }
    }
    function uZ(c) {
      try {
        return UZ(c), !1;
      } catch {
        return !0;
      }
    }
    function UZ(c) {
      return "" + c;
    }
    function hc(c, b) {
      if (uZ(c))
        return m("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", b, cZ(c)), UZ(c);
    }
    function Zb(c) {
      if (uZ(c))
        return m("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", cZ(c)), UZ(c);
    }
    function yc(c, b) {
      if (uZ(c))
        return m("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", b, cZ(c)), UZ(c);
    }
    function nb(c, b) {
      if (uZ(c))
        return m("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", b, cZ(c)), UZ(c);
    }
    function Nc(c) {
      if (uZ(c))
        return m("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", cZ(c)), UZ(c);
    }
    function oc(c) {
      if (uZ(c))
        return m("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", cZ(c)), UZ(c);
    }
    var cb = 0, sc = 1, Vc = 2, BZ = 3, Rb = 4, Tb = 5, tu = 6, Il = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", El = Il + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040", sZ = new RegExp("^[" + Il + "][" + El + "]*$"), YZ = {}, kZ = {};
    function ec(c) {
      return Jl.call(kZ, c) ? !0 : Jl.call(YZ, c) ? !1 : sZ.test(c) ? (kZ[c] = !0, !0) : (YZ[c] = !0, m("Invalid attribute name: `%s`", c), !1);
    }
    function Zc(c, b, d) {
      return b !== null ? b.type === cb : d ? !1 : c.length > 2 && (c[0] === "o" || c[0] === "O") && (c[1] === "n" || c[1] === "N");
    }
    function bb(c, b, d, o) {
      if (d !== null && d.type === cb)
        return !1;
      switch (typeof b) {
        case "function":
        case "symbol":
          return !0;
        case "boolean": {
          if (o)
            return !1;
          if (d !== null)
            return !d.acceptsBooleans;
          var e = c.toLowerCase().slice(0, 5);
          return e !== "data-" && e !== "aria-";
        }
        default:
          return !1;
      }
    }
    function zZ(c, b, d, o) {
      if (b === null || typeof b > "u" || bb(c, b, d, o))
        return !0;
      if (o)
        return !1;
      if (d !== null)
        switch (d.type) {
          case BZ:
            return !b;
          case Rb:
            return b === !1;
          case Tb:
            return isNaN(b);
          case tu:
            return isNaN(b) || b < 1;
        }
      return !1;
    }
    function pb(c) {
      return vZ.hasOwnProperty(c) ? vZ[c] : null;
    }
    function gZ(c, b, d, o, e, L, X) {
      this.acceptsBooleans = b === Vc || b === BZ || b === Rb, this.attributeName = o, this.attributeNamespace = e, this.mustUseProperty = d, this.propertyName = c, this.type = b, this.sanitizeURL = L, this.removeEmptyString = X;
    }
    var vZ = {}, cu = [
      "children",
      "dangerouslySetInnerHTML",
      // TODO: This prevents the assignment of defaultValue to regular
      // elements (not just inputs). Now that ReactDOMInput assigns to the
      // defaultValue property -- do we need this?
      "defaultValue",
      "defaultChecked",
      "innerHTML",
      "suppressContentEditableWarning",
      "suppressHydrationWarning",
      "style"
    ];
    cu.forEach(function(c) {
      vZ[c] = new gZ(
        c,
        cb,
        !1,
        // mustUseProperty
        c,
        // attributeName
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(c) {
      var b = c[0], d = c[1];
      vZ[b] = new gZ(
        b,
        sc,
        !1,
        // mustUseProperty
        d,
        // attributeName
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(c) {
      vZ[c] = new gZ(
        c,
        Vc,
        !1,
        // mustUseProperty
        c.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(c) {
      vZ[c] = new gZ(
        c,
        Vc,
        !1,
        // mustUseProperty
        c,
        // attributeName
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    }), [
      "allowFullScreen",
      "async",
      // Note: there is a special case that prevents it from being written to the DOM
      // on the client side because the browsers are inconsistent. Instead we call focus().
      "autoFocus",
      "autoPlay",
      "controls",
      "default",
      "defer",
      "disabled",
      "disablePictureInPicture",
      "disableRemotePlayback",
      "formNoValidate",
      "hidden",
      "loop",
      "noModule",
      "noValidate",
      "open",
      "playsInline",
      "readOnly",
      "required",
      "reversed",
      "scoped",
      "seamless",
      // Microdata
      "itemScope"
    ].forEach(function(c) {
      vZ[c] = new gZ(
        c,
        BZ,
        !1,
        // mustUseProperty
        c.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    }), [
      "checked",
      // Note: `option.selected` is not updated if `select.multiple` is
      // disabled with `removeAttribute`. We have special logic for handling this.
      "multiple",
      "muted",
      "selected"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(c) {
      vZ[c] = new gZ(
        c,
        BZ,
        !0,
        // mustUseProperty
        c,
        // attributeName
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    }), [
      "capture",
      "download"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(c) {
      vZ[c] = new gZ(
        c,
        Rb,
        !1,
        // mustUseProperty
        c,
        // attributeName
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    }), [
      "cols",
      "rows",
      "size",
      "span"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(c) {
      vZ[c] = new gZ(
        c,
        tu,
        !1,
        // mustUseProperty
        c,
        // attributeName
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    }), ["rowSpan", "start"].forEach(function(c) {
      vZ[c] = new gZ(
        c,
        Tb,
        !1,
        // mustUseProperty
        c.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    });
    var Yb = /[\-\:]([a-z])/g, Rs = function(c) {
      return c[1].toUpperCase();
    };
    [
      "accent-height",
      "alignment-baseline",
      "arabic-form",
      "baseline-shift",
      "cap-height",
      "clip-path",
      "clip-rule",
      "color-interpolation",
      "color-interpolation-filters",
      "color-profile",
      "color-rendering",
      "dominant-baseline",
      "enable-background",
      "fill-opacity",
      "fill-rule",
      "flood-color",
      "flood-opacity",
      "font-family",
      "font-size",
      "font-size-adjust",
      "font-stretch",
      "font-style",
      "font-variant",
      "font-weight",
      "glyph-name",
      "glyph-orientation-horizontal",
      "glyph-orientation-vertical",
      "horiz-adv-x",
      "horiz-origin-x",
      "image-rendering",
      "letter-spacing",
      "lighting-color",
      "marker-end",
      "marker-mid",
      "marker-start",
      "overline-position",
      "overline-thickness",
      "paint-order",
      "panose-1",
      "pointer-events",
      "rendering-intent",
      "shape-rendering",
      "stop-color",
      "stop-opacity",
      "strikethrough-position",
      "strikethrough-thickness",
      "stroke-dasharray",
      "stroke-dashoffset",
      "stroke-linecap",
      "stroke-linejoin",
      "stroke-miterlimit",
      "stroke-opacity",
      "stroke-width",
      "text-anchor",
      "text-decoration",
      "text-rendering",
      "underline-position",
      "underline-thickness",
      "unicode-bidi",
      "unicode-range",
      "units-per-em",
      "v-alphabetic",
      "v-hanging",
      "v-ideographic",
      "v-mathematical",
      "vector-effect",
      "vert-adv-y",
      "vert-origin-x",
      "vert-origin-y",
      "word-spacing",
      "writing-mode",
      "xmlns:xlink",
      "x-height"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(c) {
      var b = c.replace(Yb, Rs);
      vZ[b] = new gZ(
        b,
        sc,
        !1,
        // mustUseProperty
        c,
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    }), [
      "xlink:actuate",
      "xlink:arcrole",
      "xlink:role",
      "xlink:show",
      "xlink:title",
      "xlink:type"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(c) {
      var b = c.replace(Yb, Rs);
      vZ[b] = new gZ(
        b,
        sc,
        !1,
        // mustUseProperty
        c,
        "http://www.w3.org/1999/xlink",
        !1,
        // sanitizeURL
        !1
      );
    }), [
      "xml:base",
      "xml:lang",
      "xml:space"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(c) {
      var b = c.replace(Yb, Rs);
      vZ[b] = new gZ(
        b,
        sc,
        !1,
        // mustUseProperty
        c,
        "http://www.w3.org/XML/1998/namespace",
        !1,
        // sanitizeURL
        !1
      );
    }), ["tabIndex", "crossOrigin"].forEach(function(c) {
      vZ[c] = new gZ(
        c,
        sc,
        !1,
        // mustUseProperty
        c.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    });
    var Xd = "xlinkHref";
    vZ[Xd] = new gZ(
      "xlinkHref",
      sc,
      !1,
      // mustUseProperty
      "xlink:href",
      "http://www.w3.org/1999/xlink",
      !0,
      // sanitizeURL
      !1
    ), ["src", "href", "action", "formAction"].forEach(function(c) {
      vZ[c] = new gZ(
        c,
        sc,
        !1,
        // mustUseProperty
        c.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        !0,
        // sanitizeURL
        !0
      );
    });
    var tG = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i, Ys = !1;
    function ks(c) {
      !Ys && tG.test(c) && (Ys = !0, m("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(c)));
    }
    function Xu(c, b, d, o) {
      if (o.mustUseProperty) {
        var e = o.propertyName;
        return c[e];
      } else {
        hc(d, b), o.sanitizeURL && ks("" + d);
        var L = o.attributeName, X = null;
        if (o.type === Rb) {
          if (c.hasAttribute(L)) {
            var K = c.getAttribute(L);
            return K === "" ? !0 : zZ(b, d, o, !1) ? K : K === "" + d ? d : K;
          }
        } else if (c.hasAttribute(L)) {
          if (zZ(b, d, o, !1))
            return c.getAttribute(L);
          if (o.type === BZ)
            return d;
          X = c.getAttribute(L);
        }
        return zZ(b, d, o, !1) ? X === null ? d : X : X === "" + d ? d : X;
      }
    }
    function Qu(c, b, d, o) {
      {
        if (!ec(b))
          return;
        if (!c.hasAttribute(b))
          return d === void 0 ? void 0 : null;
        var e = c.getAttribute(b);
        return hc(d, b), e === "" + d ? d : e;
      }
    }
    function Ku(c, b, d, o) {
      var e = pb(b);
      if (!Zc(b, e, o)) {
        if (zZ(b, d, e, o) && (d = null), o || e === null) {
          if (ec(b)) {
            var L = b;
            d === null ? c.removeAttribute(L) : (hc(d, b), c.setAttribute(L, "" + d));
          }
          return;
        }
        var X = e.mustUseProperty;
        if (X) {
          var K = e.propertyName;
          if (d === null) {
            var Y = e.type;
            c[K] = Y === BZ ? !1 : "";
          } else
            c[K] = d;
          return;
        }
        var N = e.attributeName, H = e.attributeNamespace;
        if (d === null)
          c.removeAttribute(N);
        else {
          var q = e.type, $;
          q === BZ || q === Rb && d === !0 ? $ = "" : (hc(d, N), $ = "" + d, e.sanitizeURL && ks($.toString())), H ? c.setAttributeNS(H, N, $) : c.setAttribute(N, $);
        }
      }
    }
    var fb = Symbol.for("react.element"), Eb = Symbol.for("react.portal"), bu = Symbol.for("react.fragment"), Ms = Symbol.for("react.strict_mode"), Pu = Symbol.for("react.profiler"), P = Symbol.for("react.provider"), yl = Symbol.for("react.context"), Kl = Symbol.for("react.forward_ref"), Bl = Symbol.for("react.suspense"), oZ = Symbol.for("react.suspense_list"), aZ = Symbol.for("react.memo"), jl = Symbol.for("react.lazy"), dZ = Symbol.for("react.scope"), ac = Symbol.for("react.debug_trace_mode"), JZ = Symbol.for("react.offscreen"), DZ = Symbol.for("react.legacy_hidden"), xc = Symbol.for("react.cache"), uu = Symbol.for("react.tracing_marker"), kb = Symbol.iterator, Sc = "@@iterator";
    function Lb(c) {
      if (c === null || typeof c != "object")
        return null;
      var b = kb && c[kb] || c[Sc];
      return typeof b == "function" ? b : null;
    }
    var GZ = Object.assign, Wu = 0, Ou, Kd, XG, KG, WG, VG, xG;
    function RG() {
    }
    RG.__reactDisabledLog = !0;
    function wm() {
      {
        if (Wu === 0) {
          Ou = console.log, Kd = console.info, XG = console.warn, KG = console.error, WG = console.group, VG = console.groupCollapsed, xG = console.groupEnd;
          var c = {
            configurable: !0,
            enumerable: !0,
            value: RG,
            writable: !0
          };
          Object.defineProperties(console, {
            info: c,
            log: c,
            warn: c,
            error: c,
            group: c,
            groupCollapsed: c,
            groupEnd: c
          });
        }
        Wu++;
      }
    }
    function Co() {
      {
        if (Wu--, Wu === 0) {
          var c = {
            configurable: !0,
            enumerable: !0,
            writable: !0
          };
          Object.defineProperties(console, {
            log: GZ({}, c, {
              value: Ou
            }),
            info: GZ({}, c, {
              value: Kd
            }),
            warn: GZ({}, c, {
              value: XG
            }),
            error: GZ({}, c, {
              value: KG
            }),
            group: GZ({}, c, {
              value: WG
            }),
            groupCollapsed: GZ({}, c, {
              value: VG
            }),
            groupEnd: GZ({}, c, {
              value: xG
            })
          });
        }
        Wu < 0 && m("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var YG = u.ReactCurrentDispatcher, Vu;
    function Mb(c, b, d) {
      {
        if (Vu === void 0)
          try {
            throw Error();
          } catch (e) {
            var o = e.stack.trim().match(/\n( *(at )?)/);
            Vu = o && o[1] || "";
          }
        return `
` + Vu + c;
      }
    }
    var Wd = !1, Vd;
    {
      var zm = typeof WeakMap == "function" ? WeakMap : Map;
      Vd = new zm();
    }
    function ro(c, b) {
      if (!c || Wd)
        return "";
      {
        var d = Vd.get(c);
        if (d !== void 0)
          return d;
      }
      var o;
      Wd = !0;
      var e = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var L;
      L = YG.current, YG.current = null, wm();
      try {
        if (b) {
          var X = function() {
            throw Error();
          };
          if (Object.defineProperty(X.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(X, []);
            } catch (Gl) {
              o = Gl;
            }
            Reflect.construct(c, [], X);
          } else {
            try {
              X.call();
            } catch (Gl) {
              o = Gl;
            }
            c.call(X.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (Gl) {
            o = Gl;
          }
          c();
        }
      } catch (Gl) {
        if (Gl && o && typeof Gl.stack == "string") {
          for (var K = Gl.stack.split(`
`), Y = o.stack.split(`
`), N = K.length - 1, H = Y.length - 1; N >= 1 && H >= 0 && K[N] !== Y[H]; )
            H--;
          for (; N >= 1 && H >= 0; N--, H--)
            if (K[N] !== Y[H]) {
              if (N !== 1 || H !== 1)
                do
                  if (N--, H--, H < 0 || K[N] !== Y[H]) {
                    var q = `
` + K[N].replace(" at new ", " at ");
                    return c.displayName && q.includes("<anonymous>") && (q = q.replace("<anonymous>", c.displayName)), typeof c == "function" && Vd.set(c, q), q;
                  }
                while (N >= 1 && H >= 0);
              break;
            }
        }
      } finally {
        Wd = !1, YG.current = L, Co(), Error.prepareStackTrace = e;
      }
      var $ = c ? c.displayName || c.name : "", sl = $ ? Mb($) : "";
      return typeof c == "function" && Vd.set(c, sl), sl;
    }
    function kn(c, b, d) {
      return ro(c, !0);
    }
    function Fo(c, b, d) {
      return ro(c, !1);
    }
    function hy(c) {
      var b = c.prototype;
      return !!(b && b.isReactComponent);
    }
    function xd(c, b, d) {
      if (c == null)
        return "";
      if (typeof c == "function")
        return ro(c, hy(c));
      if (typeof c == "string")
        return Mb(c);
      switch (c) {
        case Bl:
          return Mb("Suspense");
        case oZ:
          return Mb("SuspenseList");
      }
      if (typeof c == "object")
        switch (c.$$typeof) {
          case Kl:
            return Fo(c.render);
          case aZ:
            return xd(c.type, b, d);
          case jl: {
            var o = c, e = o._payload, L = o._init;
            try {
              return xd(L(e), b, d);
            } catch {
            }
          }
        }
      return "";
    }
    function Mn(c) {
      switch (c._debugOwner && c._debugOwner.type, c._debugSource, c.tag) {
        case t:
          return Mb(c.type);
        case C:
          return Mb("Lazy");
        case w:
          return Mb("Suspense");
        case g:
          return Mb("SuspenseList");
        case n:
        case y:
        case D:
          return Fo(c.type);
        case k:
          return Fo(c.type.render);
        case p:
          return kn(c.type);
        default:
          return "";
      }
    }
    function No(c) {
      try {
        var b = "", d = c;
        do
          b += Mn(d), d = d.return;
        while (d);
        return b;
      } catch (o) {
        return `
Error generating stack: ` + o.message + `
` + o.stack;
      }
    }
    function Jm(c, b, d) {
      var o = c.displayName;
      if (o)
        return o;
      var e = b.displayName || b.name || "";
      return e !== "" ? d + "(" + e + ")" : d;
    }
    function In(c) {
      return c.displayName || "Context";
    }
    function tZ(c) {
      if (c == null)
        return null;
      if (typeof c.tag == "number" && m("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof c == "function")
        return c.displayName || c.name || null;
      if (typeof c == "string")
        return c;
      switch (c) {
        case bu:
          return "Fragment";
        case Eb:
          return "Portal";
        case Pu:
          return "Profiler";
        case Ms:
          return "StrictMode";
        case Bl:
          return "Suspense";
        case oZ:
          return "SuspenseList";
      }
      if (typeof c == "object")
        switch (c.$$typeof) {
          case yl:
            var b = c;
            return In(b) + ".Consumer";
          case P:
            var d = c;
            return In(d._context) + ".Provider";
          case Kl:
            return Jm(c, c.render, "ForwardRef");
          case aZ:
            var o = c.displayName || null;
            return o !== null ? o : tZ(c.type) || "Memo";
          case jl: {
            var e = c, L = e._payload, X = e._init;
            try {
              return tZ(X(L));
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    function wo(c, b, d) {
      var o = b.displayName || b.name || "";
      return c.displayName || (o !== "" ? d + "(" + o + ")" : d);
    }
    function zo(c) {
      return c.displayName || "Context";
    }
    function bZ(c) {
      var b = c.tag, d = c.type;
      switch (b) {
        case v:
          return "Cache";
        case x:
          var o = d;
          return zo(o) + ".Consumer";
        case r:
          var e = d;
          return zo(e._context) + ".Provider";
        case E:
          return "DehydratedFragment";
        case k:
          return wo(d, d.render, "ForwardRef");
        case V:
          return "Fragment";
        case t:
          return d;
        case S:
          return "Portal";
        case h:
          return "Root";
        case W:
          return "Text";
        case C:
          return tZ(d);
        case R:
          return d === Ms ? "StrictMode" : "Mode";
        case J:
          return "Offscreen";
        case U:
          return "Profiler";
        case A:
          return "Scope";
        case w:
          return "Suspense";
        case g:
          return "SuspenseList";
        case T:
          return "TracingMarker";
        case p:
        case n:
        case j:
        case y:
        case z:
        case D:
          if (typeof d == "function")
            return d.displayName || d.name || null;
          if (typeof d == "string")
            return d;
          break;
      }
      return null;
    }
    var Un = u.ReactDebugCurrentFrame, ub = null, kG = !1;
    function Rd() {
      {
        if (ub === null)
          return null;
        var c = ub._debugOwner;
        if (c !== null && typeof c < "u")
          return bZ(c);
      }
      return null;
    }
    function Cn() {
      return ub === null ? "" : No(ub);
    }
    function wc() {
      Un.getCurrentStack = null, ub = null, kG = !1;
    }
    function cc(c) {
      Un.getCurrentStack = c === null ? null : Cn, ub = c, kG = !1;
    }
    function rn() {
      return ub;
    }
    function Bb(c) {
      kG = c;
    }
    function Ib(c) {
      return "" + c;
    }
    function Au(c) {
      switch (typeof c) {
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return c;
        case "object":
          return oc(c), c;
        default:
          return "";
      }
    }
    var yy = {
      button: !0,
      checkbox: !0,
      image: !0,
      hidden: !0,
      radio: !0,
      reset: !0,
      submit: !0
    };
    function Hm(c, b) {
      yy[b.type] || b.onChange || b.onInput || b.readOnly || b.disabled || b.value == null || m("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."), b.onChange || b.readOnly || b.disabled || b.checked == null || m("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function MG(c) {
      var b = c.type, d = c.nodeName;
      return d && d.toLowerCase() === "input" && (b === "checkbox" || b === "radio");
    }
    function Fn(c) {
      return c._valueTracker;
    }
    function Yd(c) {
      c._valueTracker = null;
    }
    function Nn(c) {
      var b = "";
      return c && (MG(c) ? b = c.checked ? "true" : "false" : b = c.value), b;
    }
    function wn(c) {
      var b = MG(c) ? "checked" : "value", d = Object.getOwnPropertyDescriptor(c.constructor.prototype, b);
      oc(c[b]);
      var o = "" + c[b];
      if (!(c.hasOwnProperty(b) || typeof d > "u" || typeof d.get != "function" || typeof d.set != "function")) {
        var e = d.get, L = d.set;
        Object.defineProperty(c, b, {
          configurable: !0,
          get: function() {
            return e.call(this);
          },
          set: function(K) {
            oc(K), o = "" + K, L.call(this, K);
          }
        }), Object.defineProperty(c, b, {
          enumerable: d.enumerable
        });
        var X = {
          getValue: function() {
            return o;
          },
          setValue: function(K) {
            oc(K), o = "" + K;
          },
          stopTracking: function() {
            Yd(c), delete c[b];
          }
        };
        return X;
      }
    }
    function Is(c) {
      Fn(c) || (c._valueTracker = wn(c));
    }
    function gm(c) {
      if (!c)
        return !1;
      var b = Fn(c);
      if (!b)
        return !0;
      var d = b.getValue(), o = Nn(c);
      return o !== d ? (b.setValue(o), !0) : !1;
    }
    function kd(c) {
      if (c = c || (typeof document < "u" ? document : void 0), typeof c > "u")
        return null;
      try {
        return c.activeElement || c.body;
      } catch {
        return c.body;
      }
    }
    var vm = !1, zn = !1, Jn = !1, Hn = !1;
    function gn(c) {
      var b = c.type === "checkbox" || c.type === "radio";
      return b ? c.checked != null : c.value != null;
    }
    function I(c, b) {
      var d = c, o = b.checked, e = GZ({}, b, {
        defaultChecked: void 0,
        defaultValue: void 0,
        value: void 0,
        checked: o ?? d._wrapperState.initialChecked
      });
      return e;
    }
    function Q(c, b) {
      Hm("input", b), b.checked !== void 0 && b.defaultChecked !== void 0 && !zn && (m("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", Rd() || "A component", b.type), zn = !0), b.value !== void 0 && b.defaultValue !== void 0 && !vm && (m("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", Rd() || "A component", b.type), vm = !0);
      var d = c, o = b.defaultValue == null ? "" : b.defaultValue;
      d._wrapperState = {
        initialChecked: b.checked != null ? b.checked : b.defaultChecked,
        initialValue: Au(b.value != null ? b.value : o),
        controlled: gn(b)
      };
    }
    function dl(c, b) {
      var d = c, o = b.checked;
      o != null && Ku(d, "checked", o, !1);
    }
    function al(c, b) {
      var d = c;
      {
        var o = gn(b);
        !d._wrapperState.controlled && o && !Hn && (m("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"), Hn = !0), d._wrapperState.controlled && !o && !Jn && (m("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"), Jn = !0);
      }
      dl(c, b);
      var e = Au(b.value), L = b.type;
      if (e != null)
        L === "number" ? (e === 0 && d.value === "" || // We explicitly want to coerce to number here if possible.
        // eslint-disable-next-line
        d.value != e) && (d.value = Ib(e)) : d.value !== Ib(e) && (d.value = Ib(e));
      else if (L === "submit" || L === "reset") {
        d.removeAttribute("value");
        return;
      }
      b.hasOwnProperty("value") ? $l(d, b.type, e) : b.hasOwnProperty("defaultValue") && $l(d, b.type, Au(b.defaultValue)), b.checked == null && b.defaultChecked != null && (d.defaultChecked = !!b.defaultChecked);
    }
    function Yl(c, b, d) {
      var o = c;
      if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
        var e = b.type, L = e === "submit" || e === "reset";
        if (L && (b.value === void 0 || b.value === null))
          return;
        var X = Ib(o._wrapperState.initialValue);
        d || X !== o.value && (o.value = X), o.defaultValue = X;
      }
      var K = o.name;
      K !== "" && (o.name = ""), o.defaultChecked = !o.defaultChecked, o.defaultChecked = !!o._wrapperState.initialChecked, K !== "" && (o.name = K);
    }
    function Ol(c, b) {
      var d = c;
      al(d, b), gl(d, b);
    }
    function gl(c, b) {
      var d = b.name;
      if (b.type === "radio" && d != null) {
        for (var o = c; o.parentNode; )
          o = o.parentNode;
        hc(d, "name");
        for (var e = o.querySelectorAll("input[name=" + JSON.stringify("" + d) + '][type="radio"]'), L = 0; L < e.length; L++) {
          var X = e[L];
          if (!(X === c || X.form !== c.form)) {
            var K = Rp(X);
            if (!K)
              throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
            gm(X), al(X, K);
          }
        }
      }
    }
    function $l(c, b, d) {
      // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
      (b !== "number" || kd(c.ownerDocument) !== c) && (d == null ? c.defaultValue = Ib(c._wrapperState.initialValue) : c.defaultValue !== Ib(d) && (c.defaultValue = Ib(d)));
    }
    var nZ = !1, CZ = !1, TZ = !1;
    function fZ(c, b) {
      b.value == null && (typeof b.children == "object" && b.children !== null ? l.Children.forEach(b.children, function(d) {
        d != null && (typeof d == "string" || typeof d == "number" || CZ || (CZ = !0, m("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.")));
      }) : b.dangerouslySetInnerHTML != null && (TZ || (TZ = !0, m("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.")))), b.selected != null && !nZ && (m("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), nZ = !0);
    }
    function AZ(c, b) {
      b.value != null && c.setAttribute("value", Ib(Au(b.value)));
    }
    var dc = Array.isArray;
    function xZ(c) {
      return dc(c);
    }
    var Md;
    Md = !1;
    function Tm() {
      var c = Rd();
      return c ? `

Check the render method of \`` + c + "`." : "";
    }
    var Jo = ["value", "defaultValue"];
    function Sy(c) {
      {
        Hm("select", c);
        for (var b = 0; b < Jo.length; b++) {
          var d = Jo[b];
          if (c[d] != null) {
            var o = xZ(c[d]);
            c.multiple && !o ? m("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", d, Tm()) : !c.multiple && o && m("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", d, Tm());
          }
        }
      }
    }
    function Us(c, b, d, o) {
      var e = c.options;
      if (b) {
        for (var L = d, X = {}, K = 0; K < L.length; K++)
          X["$" + L[K]] = !0;
        for (var Y = 0; Y < e.length; Y++) {
          var N = X.hasOwnProperty("$" + e[Y].value);
          e[Y].selected !== N && (e[Y].selected = N), N && o && (e[Y].defaultSelected = !0);
        }
      } else {
        for (var H = Ib(Au(d)), q = null, $ = 0; $ < e.length; $++) {
          if (e[$].value === H) {
            e[$].selected = !0, o && (e[$].defaultSelected = !0);
            return;
          }
          q === null && !e[$].disabled && (q = e[$]);
        }
        q !== null && (q.selected = !0);
      }
    }
    function Ho(c, b) {
      return GZ({}, b, {
        value: void 0
      });
    }
    function go(c, b) {
      var d = c;
      Sy(b), d._wrapperState = {
        wasMultiple: !!b.multiple
      }, b.value !== void 0 && b.defaultValue !== void 0 && !Md && (m("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), Md = !0);
    }
    function ty(c, b) {
      var d = c;
      d.multiple = !!b.multiple;
      var o = b.value;
      o != null ? Us(d, !!b.multiple, o, !1) : b.defaultValue != null && Us(d, !!b.multiple, b.defaultValue, !0);
    }
    function oF(c, b) {
      var d = c, o = d._wrapperState.wasMultiple;
      d._wrapperState.wasMultiple = !!b.multiple;
      var e = b.value;
      e != null ? Us(d, !!b.multiple, e, !1) : o !== !!b.multiple && (b.defaultValue != null ? Us(d, !!b.multiple, b.defaultValue, !0) : Us(d, !!b.multiple, b.multiple ? [] : "", !1));
    }
    function eF(c, b) {
      var d = c, o = b.value;
      o != null && Us(d, !!b.multiple, o, !1);
    }
    var Nx = !1;
    function Xy(c, b) {
      var d = c;
      if (b.dangerouslySetInnerHTML != null)
        throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
      var o = GZ({}, b, {
        value: void 0,
        defaultValue: void 0,
        children: Ib(d._wrapperState.initialValue)
      });
      return o;
    }
    function wx(c, b) {
      var d = c;
      Hm("textarea", b), b.value !== void 0 && b.defaultValue !== void 0 && !Nx && (m("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", Rd() || "A component"), Nx = !0);
      var o = b.value;
      if (o == null) {
        var e = b.children, L = b.defaultValue;
        if (e != null) {
          m("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
          {
            if (L != null)
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            if (xZ(e)) {
              if (e.length > 1)
                throw new Error("<textarea> can only have at most one child.");
              e = e[0];
            }
            L = e;
          }
        }
        L == null && (L = ""), o = L;
      }
      d._wrapperState = {
        initialValue: Au(o)
      };
    }
    function zx(c, b) {
      var d = c, o = Au(b.value), e = Au(b.defaultValue);
      if (o != null) {
        var L = Ib(o);
        L !== d.value && (d.value = L), b.defaultValue == null && d.defaultValue !== L && (d.defaultValue = L);
      }
      e != null && (d.defaultValue = Ib(e));
    }
    function Jx(c, b) {
      var d = c, o = d.textContent;
      o === d._wrapperState.initialValue && o !== "" && o !== null && (d.value = o);
    }
    function aF(c, b) {
      zx(c, b);
    }
    var Cs = "http://www.w3.org/1999/xhtml", nF = "http://www.w3.org/1998/Math/MathML", Ky = "http://www.w3.org/2000/svg";
    function Wy(c) {
      switch (c) {
        case "svg":
          return Ky;
        case "math":
          return nF;
        default:
          return Cs;
      }
    }
    function Vy(c, b) {
      return c == null || c === Cs ? Wy(b) : c === Ky && b === "foreignObject" ? Cs : c;
    }
    var pF = function(c) {
      return typeof MSApp < "u" && MSApp.execUnsafeLocalFunction ? function(b, d, o, e) {
        MSApp.execUnsafeLocalFunction(function() {
          return c(b, d, o, e);
        });
      } : c;
    }, vn, Hx = pF(function(c, b) {
      if (c.namespaceURI === Ky && !("innerHTML" in c)) {
        vn = vn || document.createElement("div"), vn.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
        for (var d = vn.firstChild; c.firstChild; )
          c.removeChild(c.firstChild);
        for (; d.firstChild; )
          c.appendChild(d.firstChild);
        return;
      }
      c.innerHTML = b;
    }), Ub = 1, rs = 3, tc = 8, Fs = 9, xy = 11, Tn = function(c, b) {
      if (b) {
        var d = c.firstChild;
        if (d && d === c.lastChild && d.nodeType === rs) {
          d.nodeValue = b;
          return;
        }
      }
      c.textContent = b;
    }, LF = {
      animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
      background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
      backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
      border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
      borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
      borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
      borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
      borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
      borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
      borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
      borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
      borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
      borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
      borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
      borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
      borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
      borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
      columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
      columns: ["columnCount", "columnWidth"],
      flex: ["flexBasis", "flexGrow", "flexShrink"],
      flexFlow: ["flexDirection", "flexWrap"],
      font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
      fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
      gap: ["columnGap", "rowGap"],
      grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
      gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
      gridColumn: ["gridColumnEnd", "gridColumnStart"],
      gridColumnGap: ["columnGap"],
      gridGap: ["columnGap", "rowGap"],
      gridRow: ["gridRowEnd", "gridRowStart"],
      gridRowGap: ["rowGap"],
      gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
      listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
      margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
      marker: ["markerEnd", "markerMid", "markerStart"],
      mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
      maskPosition: ["maskPositionX", "maskPositionY"],
      outline: ["outlineColor", "outlineStyle", "outlineWidth"],
      overflow: ["overflowX", "overflowY"],
      padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
      placeContent: ["alignContent", "justifyContent"],
      placeItems: ["alignItems", "justifyItems"],
      placeSelf: ["alignSelf", "justifySelf"],
      textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
      textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
      transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
      wordWrap: ["overflowWrap"]
    }, vo = {
      animationIterationCount: !0,
      aspectRatio: !0,
      borderImageOutset: !0,
      borderImageSlice: !0,
      borderImageWidth: !0,
      boxFlex: !0,
      boxFlexGroup: !0,
      boxOrdinalGroup: !0,
      columnCount: !0,
      columns: !0,
      flex: !0,
      flexGrow: !0,
      flexPositive: !0,
      flexShrink: !0,
      flexNegative: !0,
      flexOrder: !0,
      gridArea: !0,
      gridRow: !0,
      gridRowEnd: !0,
      gridRowSpan: !0,
      gridRowStart: !0,
      gridColumn: !0,
      gridColumnEnd: !0,
      gridColumnSpan: !0,
      gridColumnStart: !0,
      fontWeight: !0,
      lineClamp: !0,
      lineHeight: !0,
      opacity: !0,
      order: !0,
      orphans: !0,
      tabSize: !0,
      widows: !0,
      zIndex: !0,
      zoom: !0,
      // SVG-related properties
      fillOpacity: !0,
      floodOpacity: !0,
      stopOpacity: !0,
      strokeDasharray: !0,
      strokeDashoffset: !0,
      strokeMiterlimit: !0,
      strokeOpacity: !0,
      strokeWidth: !0
    };
    function hF(c, b) {
      return c + b.charAt(0).toUpperCase() + b.substring(1);
    }
    var yF = ["Webkit", "ms", "Moz", "O"];
    Object.keys(vo).forEach(function(c) {
      yF.forEach(function(b) {
        vo[hF(b, c)] = vo[c];
      });
    });
    function Ry(c, b, d) {
      var o = b == null || typeof b == "boolean" || b === "";
      return o ? "" : !d && typeof b == "number" && b !== 0 && !(vo.hasOwnProperty(c) && vo[c]) ? b + "px" : (nb(b, c), ("" + b).trim());
    }
    var SF = /([A-Z])/g, tF = /^ms-/;
    function XF(c) {
      return c.replace(SF, "-$1").toLowerCase().replace(tF, "-ms-");
    }
    var gx = function() {
    };
    {
      var KF = /^(?:webkit|moz|o)[A-Z]/, WF = /^-ms-/, VF = /-(.)/g, vx = /;\s*$/, fm = {}, Yy = {}, Tx = !1, fx = !1, xF = function(c) {
        return c.replace(VF, function(b, d) {
          return d.toUpperCase();
        });
      }, RF = function(c) {
        fm.hasOwnProperty(c) && fm[c] || (fm[c] = !0, m(
          "Unsupported style property %s. Did you mean %s?",
          c,
          // As Andi Smith suggests
          // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
          // is converted to lowercase `ms`.
          xF(c.replace(WF, "ms-"))
        ));
      }, YF = function(c) {
        fm.hasOwnProperty(c) && fm[c] || (fm[c] = !0, m("Unsupported vendor-prefixed style property %s. Did you mean %s?", c, c.charAt(0).toUpperCase() + c.slice(1)));
      }, kF = function(c, b) {
        Yy.hasOwnProperty(b) && Yy[b] || (Yy[b] = !0, m(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, c, b.replace(vx, "")));
      }, MF = function(c, b) {
        Tx || (Tx = !0, m("`NaN` is an invalid value for the `%s` css style property.", c));
      }, IF = function(c, b) {
        fx || (fx = !0, m("`Infinity` is an invalid value for the `%s` css style property.", c));
      };
      gx = function(c, b) {
        c.indexOf("-") > -1 ? RF(c) : KF.test(c) ? YF(c) : vx.test(b) && kF(c, b), typeof b == "number" && (isNaN(b) ? MF(c, b) : isFinite(b) || IF(c, b));
      };
    }
    var UF = gx;
    function CF(c) {
      {
        var b = "", d = "";
        for (var o in c)
          if (c.hasOwnProperty(o)) {
            var e = c[o];
            if (e != null) {
              var L = o.indexOf("--") === 0;
              b += d + (L ? o : XF(o)) + ":", b += Ry(o, e, L), d = ";";
            }
          }
        return b || null;
      }
    }
    function Ex(c, b) {
      var d = c.style;
      for (var o in b)
        if (b.hasOwnProperty(o)) {
          var e = o.indexOf("--") === 0;
          e || UF(o, b[o]);
          var L = Ry(o, b[o], e);
          o === "float" && (o = "cssFloat"), e ? d.setProperty(o, L) : d[o] = L;
        }
    }
    function rF(c) {
      return c == null || typeof c == "boolean" || c === "";
    }
    function Bx(c) {
      var b = {};
      for (var d in c)
        for (var o = LF[d] || [d], e = 0; e < o.length; e++)
          b[o[e]] = d;
      return b;
    }
    function FF(c, b) {
      {
        if (!b)
          return;
        var d = Bx(c), o = Bx(b), e = {};
        for (var L in d) {
          var X = d[L], K = o[L];
          if (K && X !== K) {
            var Y = X + "," + K;
            if (e[Y])
              continue;
            e[Y] = !0, m("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", rF(c[X]) ? "Removing" : "Updating", X, K);
          }
        }
      }
    }
    var NF = {
      area: !0,
      base: !0,
      br: !0,
      col: !0,
      embed: !0,
      hr: !0,
      img: !0,
      input: !0,
      keygen: !0,
      link: !0,
      meta: !0,
      param: !0,
      source: !0,
      track: !0,
      wbr: !0
      // NOTE: menuitem's close tag should be omitted, but that causes problems.
    }, wF = GZ({
      menuitem: !0
    }, NF), zF = "__html";
    function ky(c, b) {
      if (b) {
        if (wF[c] && (b.children != null || b.dangerouslySetInnerHTML != null))
          throw new Error(c + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
        if (b.dangerouslySetInnerHTML != null) {
          if (b.children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof b.dangerouslySetInnerHTML != "object" || !(zF in b.dangerouslySetInnerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        if (!b.suppressContentEditableWarning && b.contentEditable && b.children != null && m("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."), b.style != null && typeof b.style != "object")
          throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
      }
    }
    function IG(c, b) {
      if (c.indexOf("-") === -1)
        return typeof b.is == "string";
      switch (c) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return !1;
        default:
          return !0;
      }
    }
    var fn = {
      // HTML
      accept: "accept",
      acceptcharset: "acceptCharset",
      "accept-charset": "acceptCharset",
      accesskey: "accessKey",
      action: "action",
      allowfullscreen: "allowFullScreen",
      alt: "alt",
      as: "as",
      async: "async",
      autocapitalize: "autoCapitalize",
      autocomplete: "autoComplete",
      autocorrect: "autoCorrect",
      autofocus: "autoFocus",
      autoplay: "autoPlay",
      autosave: "autoSave",
      capture: "capture",
      cellpadding: "cellPadding",
      cellspacing: "cellSpacing",
      challenge: "challenge",
      charset: "charSet",
      checked: "checked",
      children: "children",
      cite: "cite",
      class: "className",
      classid: "classID",
      classname: "className",
      cols: "cols",
      colspan: "colSpan",
      content: "content",
      contenteditable: "contentEditable",
      contextmenu: "contextMenu",
      controls: "controls",
      controlslist: "controlsList",
      coords: "coords",
      crossorigin: "crossOrigin",
      dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
      data: "data",
      datetime: "dateTime",
      default: "default",
      defaultchecked: "defaultChecked",
      defaultvalue: "defaultValue",
      defer: "defer",
      dir: "dir",
      disabled: "disabled",
      disablepictureinpicture: "disablePictureInPicture",
      disableremoteplayback: "disableRemotePlayback",
      download: "download",
      draggable: "draggable",
      enctype: "encType",
      enterkeyhint: "enterKeyHint",
      for: "htmlFor",
      form: "form",
      formmethod: "formMethod",
      formaction: "formAction",
      formenctype: "formEncType",
      formnovalidate: "formNoValidate",
      formtarget: "formTarget",
      frameborder: "frameBorder",
      headers: "headers",
      height: "height",
      hidden: "hidden",
      high: "high",
      href: "href",
      hreflang: "hrefLang",
      htmlfor: "htmlFor",
      httpequiv: "httpEquiv",
      "http-equiv": "httpEquiv",
      icon: "icon",
      id: "id",
      imagesizes: "imageSizes",
      imagesrcset: "imageSrcSet",
      innerhtml: "innerHTML",
      inputmode: "inputMode",
      integrity: "integrity",
      is: "is",
      itemid: "itemID",
      itemprop: "itemProp",
      itemref: "itemRef",
      itemscope: "itemScope",
      itemtype: "itemType",
      keyparams: "keyParams",
      keytype: "keyType",
      kind: "kind",
      label: "label",
      lang: "lang",
      list: "list",
      loop: "loop",
      low: "low",
      manifest: "manifest",
      marginwidth: "marginWidth",
      marginheight: "marginHeight",
      max: "max",
      maxlength: "maxLength",
      media: "media",
      mediagroup: "mediaGroup",
      method: "method",
      min: "min",
      minlength: "minLength",
      multiple: "multiple",
      muted: "muted",
      name: "name",
      nomodule: "noModule",
      nonce: "nonce",
      novalidate: "noValidate",
      open: "open",
      optimum: "optimum",
      pattern: "pattern",
      placeholder: "placeholder",
      playsinline: "playsInline",
      poster: "poster",
      preload: "preload",
      profile: "profile",
      radiogroup: "radioGroup",
      readonly: "readOnly",
      referrerpolicy: "referrerPolicy",
      rel: "rel",
      required: "required",
      reversed: "reversed",
      role: "role",
      rows: "rows",
      rowspan: "rowSpan",
      sandbox: "sandbox",
      scope: "scope",
      scoped: "scoped",
      scrolling: "scrolling",
      seamless: "seamless",
      selected: "selected",
      shape: "shape",
      size: "size",
      sizes: "sizes",
      span: "span",
      spellcheck: "spellCheck",
      src: "src",
      srcdoc: "srcDoc",
      srclang: "srcLang",
      srcset: "srcSet",
      start: "start",
      step: "step",
      style: "style",
      summary: "summary",
      tabindex: "tabIndex",
      target: "target",
      title: "title",
      type: "type",
      usemap: "useMap",
      value: "value",
      width: "width",
      wmode: "wmode",
      wrap: "wrap",
      // SVG
      about: "about",
      accentheight: "accentHeight",
      "accent-height": "accentHeight",
      accumulate: "accumulate",
      additive: "additive",
      alignmentbaseline: "alignmentBaseline",
      "alignment-baseline": "alignmentBaseline",
      allowreorder: "allowReorder",
      alphabetic: "alphabetic",
      amplitude: "amplitude",
      arabicform: "arabicForm",
      "arabic-form": "arabicForm",
      ascent: "ascent",
      attributename: "attributeName",
      attributetype: "attributeType",
      autoreverse: "autoReverse",
      azimuth: "azimuth",
      basefrequency: "baseFrequency",
      baselineshift: "baselineShift",
      "baseline-shift": "baselineShift",
      baseprofile: "baseProfile",
      bbox: "bbox",
      begin: "begin",
      bias: "bias",
      by: "by",
      calcmode: "calcMode",
      capheight: "capHeight",
      "cap-height": "capHeight",
      clip: "clip",
      clippath: "clipPath",
      "clip-path": "clipPath",
      clippathunits: "clipPathUnits",
      cliprule: "clipRule",
      "clip-rule": "clipRule",
      color: "color",
      colorinterpolation: "colorInterpolation",
      "color-interpolation": "colorInterpolation",
      colorinterpolationfilters: "colorInterpolationFilters",
      "color-interpolation-filters": "colorInterpolationFilters",
      colorprofile: "colorProfile",
      "color-profile": "colorProfile",
      colorrendering: "colorRendering",
      "color-rendering": "colorRendering",
      contentscripttype: "contentScriptType",
      contentstyletype: "contentStyleType",
      cursor: "cursor",
      cx: "cx",
      cy: "cy",
      d: "d",
      datatype: "datatype",
      decelerate: "decelerate",
      descent: "descent",
      diffuseconstant: "diffuseConstant",
      direction: "direction",
      display: "display",
      divisor: "divisor",
      dominantbaseline: "dominantBaseline",
      "dominant-baseline": "dominantBaseline",
      dur: "dur",
      dx: "dx",
      dy: "dy",
      edgemode: "edgeMode",
      elevation: "elevation",
      enablebackground: "enableBackground",
      "enable-background": "enableBackground",
      end: "end",
      exponent: "exponent",
      externalresourcesrequired: "externalResourcesRequired",
      fill: "fill",
      fillopacity: "fillOpacity",
      "fill-opacity": "fillOpacity",
      fillrule: "fillRule",
      "fill-rule": "fillRule",
      filter: "filter",
      filterres: "filterRes",
      filterunits: "filterUnits",
      floodopacity: "floodOpacity",
      "flood-opacity": "floodOpacity",
      floodcolor: "floodColor",
      "flood-color": "floodColor",
      focusable: "focusable",
      fontfamily: "fontFamily",
      "font-family": "fontFamily",
      fontsize: "fontSize",
      "font-size": "fontSize",
      fontsizeadjust: "fontSizeAdjust",
      "font-size-adjust": "fontSizeAdjust",
      fontstretch: "fontStretch",
      "font-stretch": "fontStretch",
      fontstyle: "fontStyle",
      "font-style": "fontStyle",
      fontvariant: "fontVariant",
      "font-variant": "fontVariant",
      fontweight: "fontWeight",
      "font-weight": "fontWeight",
      format: "format",
      from: "from",
      fx: "fx",
      fy: "fy",
      g1: "g1",
      g2: "g2",
      glyphname: "glyphName",
      "glyph-name": "glyphName",
      glyphorientationhorizontal: "glyphOrientationHorizontal",
      "glyph-orientation-horizontal": "glyphOrientationHorizontal",
      glyphorientationvertical: "glyphOrientationVertical",
      "glyph-orientation-vertical": "glyphOrientationVertical",
      glyphref: "glyphRef",
      gradienttransform: "gradientTransform",
      gradientunits: "gradientUnits",
      hanging: "hanging",
      horizadvx: "horizAdvX",
      "horiz-adv-x": "horizAdvX",
      horizoriginx: "horizOriginX",
      "horiz-origin-x": "horizOriginX",
      ideographic: "ideographic",
      imagerendering: "imageRendering",
      "image-rendering": "imageRendering",
      in2: "in2",
      in: "in",
      inlist: "inlist",
      intercept: "intercept",
      k1: "k1",
      k2: "k2",
      k3: "k3",
      k4: "k4",
      k: "k",
      kernelmatrix: "kernelMatrix",
      kernelunitlength: "kernelUnitLength",
      kerning: "kerning",
      keypoints: "keyPoints",
      keysplines: "keySplines",
      keytimes: "keyTimes",
      lengthadjust: "lengthAdjust",
      letterspacing: "letterSpacing",
      "letter-spacing": "letterSpacing",
      lightingcolor: "lightingColor",
      "lighting-color": "lightingColor",
      limitingconeangle: "limitingConeAngle",
      local: "local",
      markerend: "markerEnd",
      "marker-end": "markerEnd",
      markerheight: "markerHeight",
      markermid: "markerMid",
      "marker-mid": "markerMid",
      markerstart: "markerStart",
      "marker-start": "markerStart",
      markerunits: "markerUnits",
      markerwidth: "markerWidth",
      mask: "mask",
      maskcontentunits: "maskContentUnits",
      maskunits: "maskUnits",
      mathematical: "mathematical",
      mode: "mode",
      numoctaves: "numOctaves",
      offset: "offset",
      opacity: "opacity",
      operator: "operator",
      order: "order",
      orient: "orient",
      orientation: "orientation",
      origin: "origin",
      overflow: "overflow",
      overlineposition: "overlinePosition",
      "overline-position": "overlinePosition",
      overlinethickness: "overlineThickness",
      "overline-thickness": "overlineThickness",
      paintorder: "paintOrder",
      "paint-order": "paintOrder",
      panose1: "panose1",
      "panose-1": "panose1",
      pathlength: "pathLength",
      patterncontentunits: "patternContentUnits",
      patterntransform: "patternTransform",
      patternunits: "patternUnits",
      pointerevents: "pointerEvents",
      "pointer-events": "pointerEvents",
      points: "points",
      pointsatx: "pointsAtX",
      pointsaty: "pointsAtY",
      pointsatz: "pointsAtZ",
      prefix: "prefix",
      preservealpha: "preserveAlpha",
      preserveaspectratio: "preserveAspectRatio",
      primitiveunits: "primitiveUnits",
      property: "property",
      r: "r",
      radius: "radius",
      refx: "refX",
      refy: "refY",
      renderingintent: "renderingIntent",
      "rendering-intent": "renderingIntent",
      repeatcount: "repeatCount",
      repeatdur: "repeatDur",
      requiredextensions: "requiredExtensions",
      requiredfeatures: "requiredFeatures",
      resource: "resource",
      restart: "restart",
      result: "result",
      results: "results",
      rotate: "rotate",
      rx: "rx",
      ry: "ry",
      scale: "scale",
      security: "security",
      seed: "seed",
      shaperendering: "shapeRendering",
      "shape-rendering": "shapeRendering",
      slope: "slope",
      spacing: "spacing",
      specularconstant: "specularConstant",
      specularexponent: "specularExponent",
      speed: "speed",
      spreadmethod: "spreadMethod",
      startoffset: "startOffset",
      stddeviation: "stdDeviation",
      stemh: "stemh",
      stemv: "stemv",
      stitchtiles: "stitchTiles",
      stopcolor: "stopColor",
      "stop-color": "stopColor",
      stopopacity: "stopOpacity",
      "stop-opacity": "stopOpacity",
      strikethroughposition: "strikethroughPosition",
      "strikethrough-position": "strikethroughPosition",
      strikethroughthickness: "strikethroughThickness",
      "strikethrough-thickness": "strikethroughThickness",
      string: "string",
      stroke: "stroke",
      strokedasharray: "strokeDasharray",
      "stroke-dasharray": "strokeDasharray",
      strokedashoffset: "strokeDashoffset",
      "stroke-dashoffset": "strokeDashoffset",
      strokelinecap: "strokeLinecap",
      "stroke-linecap": "strokeLinecap",
      strokelinejoin: "strokeLinejoin",
      "stroke-linejoin": "strokeLinejoin",
      strokemiterlimit: "strokeMiterlimit",
      "stroke-miterlimit": "strokeMiterlimit",
      strokewidth: "strokeWidth",
      "stroke-width": "strokeWidth",
      strokeopacity: "strokeOpacity",
      "stroke-opacity": "strokeOpacity",
      suppresscontenteditablewarning: "suppressContentEditableWarning",
      suppresshydrationwarning: "suppressHydrationWarning",
      surfacescale: "surfaceScale",
      systemlanguage: "systemLanguage",
      tablevalues: "tableValues",
      targetx: "targetX",
      targety: "targetY",
      textanchor: "textAnchor",
      "text-anchor": "textAnchor",
      textdecoration: "textDecoration",
      "text-decoration": "textDecoration",
      textlength: "textLength",
      textrendering: "textRendering",
      "text-rendering": "textRendering",
      to: "to",
      transform: "transform",
      typeof: "typeof",
      u1: "u1",
      u2: "u2",
      underlineposition: "underlinePosition",
      "underline-position": "underlinePosition",
      underlinethickness: "underlineThickness",
      "underline-thickness": "underlineThickness",
      unicode: "unicode",
      unicodebidi: "unicodeBidi",
      "unicode-bidi": "unicodeBidi",
      unicoderange: "unicodeRange",
      "unicode-range": "unicodeRange",
      unitsperem: "unitsPerEm",
      "units-per-em": "unitsPerEm",
      unselectable: "unselectable",
      valphabetic: "vAlphabetic",
      "v-alphabetic": "vAlphabetic",
      values: "values",
      vectoreffect: "vectorEffect",
      "vector-effect": "vectorEffect",
      version: "version",
      vertadvy: "vertAdvY",
      "vert-adv-y": "vertAdvY",
      vertoriginx: "vertOriginX",
      "vert-origin-x": "vertOriginX",
      vertoriginy: "vertOriginY",
      "vert-origin-y": "vertOriginY",
      vhanging: "vHanging",
      "v-hanging": "vHanging",
      videographic: "vIdeographic",
      "v-ideographic": "vIdeographic",
      viewbox: "viewBox",
      viewtarget: "viewTarget",
      visibility: "visibility",
      vmathematical: "vMathematical",
      "v-mathematical": "vMathematical",
      vocab: "vocab",
      widths: "widths",
      wordspacing: "wordSpacing",
      "word-spacing": "wordSpacing",
      writingmode: "writingMode",
      "writing-mode": "writingMode",
      x1: "x1",
      x2: "x2",
      x: "x",
      xchannelselector: "xChannelSelector",
      xheight: "xHeight",
      "x-height": "xHeight",
      xlinkactuate: "xlinkActuate",
      "xlink:actuate": "xlinkActuate",
      xlinkarcrole: "xlinkArcrole",
      "xlink:arcrole": "xlinkArcrole",
      xlinkhref: "xlinkHref",
      "xlink:href": "xlinkHref",
      xlinkrole: "xlinkRole",
      "xlink:role": "xlinkRole",
      xlinkshow: "xlinkShow",
      "xlink:show": "xlinkShow",
      xlinktitle: "xlinkTitle",
      "xlink:title": "xlinkTitle",
      xlinktype: "xlinkType",
      "xlink:type": "xlinkType",
      xmlbase: "xmlBase",
      "xml:base": "xmlBase",
      xmllang: "xmlLang",
      "xml:lang": "xmlLang",
      xmlns: "xmlns",
      "xml:space": "xmlSpace",
      xmlnsxlink: "xmlnsXlink",
      "xmlns:xlink": "xmlnsXlink",
      xmlspace: "xmlSpace",
      y1: "y1",
      y2: "y2",
      y: "y",
      ychannelselector: "yChannelSelector",
      z: "z",
      zoomandpan: "zoomAndPan"
    }, Dx = {
      "aria-current": 0,
      // state
      "aria-description": 0,
      "aria-details": 0,
      "aria-disabled": 0,
      // state
      "aria-hidden": 0,
      // state
      "aria-invalid": 0,
      // state
      "aria-keyshortcuts": 0,
      "aria-label": 0,
      "aria-roledescription": 0,
      // Widget Attributes
      "aria-autocomplete": 0,
      "aria-checked": 0,
      "aria-expanded": 0,
      "aria-haspopup": 0,
      "aria-level": 0,
      "aria-modal": 0,
      "aria-multiline": 0,
      "aria-multiselectable": 0,
      "aria-orientation": 0,
      "aria-placeholder": 0,
      "aria-pressed": 0,
      "aria-readonly": 0,
      "aria-required": 0,
      "aria-selected": 0,
      "aria-sort": 0,
      "aria-valuemax": 0,
      "aria-valuemin": 0,
      "aria-valuenow": 0,
      "aria-valuetext": 0,
      // Live Region Attributes
      "aria-atomic": 0,
      "aria-busy": 0,
      "aria-live": 0,
      "aria-relevant": 0,
      // Drag-and-Drop Attributes
      "aria-dropeffect": 0,
      "aria-grabbed": 0,
      // Relationship Attributes
      "aria-activedescendant": 0,
      "aria-colcount": 0,
      "aria-colindex": 0,
      "aria-colspan": 0,
      "aria-controls": 0,
      "aria-describedby": 0,
      "aria-errormessage": 0,
      "aria-flowto": 0,
      "aria-labelledby": 0,
      "aria-owns": 0,
      "aria-posinset": 0,
      "aria-rowcount": 0,
      "aria-rowindex": 0,
      "aria-rowspan": 0,
      "aria-setsize": 0
    }, Em = {}, JF = new RegExp("^(aria)-[" + El + "]*$"), HF = new RegExp("^(aria)[A-Z][" + El + "]*$");
    function gF(c, b) {
      {
        if (Jl.call(Em, b) && Em[b])
          return !0;
        if (HF.test(b)) {
          var d = "aria-" + b.slice(4).toLowerCase(), o = Dx.hasOwnProperty(d) ? d : null;
          if (o == null)
            return m("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", b), Em[b] = !0, !0;
          if (b !== o)
            return m("Invalid ARIA attribute `%s`. Did you mean `%s`?", b, o), Em[b] = !0, !0;
        }
        if (JF.test(b)) {
          var e = b.toLowerCase(), L = Dx.hasOwnProperty(e) ? e : null;
          if (L == null)
            return Em[b] = !0, !1;
          if (b !== L)
            return m("Unknown ARIA attribute `%s`. Did you mean `%s`?", b, L), Em[b] = !0, !0;
        }
      }
      return !0;
    }
    function vF(c, b) {
      {
        var d = [];
        for (var o in b) {
          var e = gF(c, o);
          e || d.push(o);
        }
        var L = d.map(function(X) {
          return "`" + X + "`";
        }).join(", ");
        d.length === 1 ? m("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", L, c) : d.length > 1 && m("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", L, c);
      }
    }
    function TF(c, b) {
      IG(c, b) || vF(c, b);
    }
    var jx = !1;
    function fF(c, b) {
      {
        if (c !== "input" && c !== "textarea" && c !== "select")
          return;
        b != null && b.value === null && !jx && (jx = !0, c === "select" && b.multiple ? m("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", c) : m("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", c));
      }
    }
    var Qx = function() {
    };
    {
      var hb = {}, Px = /^on./, EF = /^on[^A-Z]/, BF = new RegExp("^(aria)-[" + El + "]*$"), DF = new RegExp("^(aria)[A-Z][" + El + "]*$");
      Qx = function(c, b, d, o) {
        if (Jl.call(hb, b) && hb[b])
          return !0;
        var e = b.toLowerCase();
        if (e === "onfocusin" || e === "onfocusout")
          return m("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), hb[b] = !0, !0;
        if (o != null) {
          var L = o.registrationNameDependencies, X = o.possibleRegistrationNames;
          if (L.hasOwnProperty(b))
            return !0;
          var K = X.hasOwnProperty(e) ? X[e] : null;
          if (K != null)
            return m("Invalid event handler property `%s`. Did you mean `%s`?", b, K), hb[b] = !0, !0;
          if (Px.test(b))
            return m("Unknown event handler property `%s`. It will be ignored.", b), hb[b] = !0, !0;
        } else if (Px.test(b))
          return EF.test(b) && m("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", b), hb[b] = !0, !0;
        if (BF.test(b) || DF.test(b))
          return !0;
        if (e === "innerhtml")
          return m("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), hb[b] = !0, !0;
        if (e === "aria")
          return m("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), hb[b] = !0, !0;
        if (e === "is" && d !== null && d !== void 0 && typeof d != "string")
          return m("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof d), hb[b] = !0, !0;
        if (typeof d == "number" && isNaN(d))
          return m("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", b), hb[b] = !0, !0;
        var Y = pb(b), N = Y !== null && Y.type === cb;
        if (fn.hasOwnProperty(e)) {
          var H = fn[e];
          if (H !== b)
            return m("Invalid DOM property `%s`. Did you mean `%s`?", b, H), hb[b] = !0, !0;
        } else if (!N && b !== e)
          return m("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", b, e), hb[b] = !0, !0;
        return typeof d == "boolean" && bb(b, d, Y, !1) ? (d ? m('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', d, b, b, d, b) : m('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', d, b, b, d, b, b, b), hb[b] = !0, !0) : N ? !0 : bb(b, d, Y, !1) ? (hb[b] = !0, !1) : ((d === "false" || d === "true") && Y !== null && Y.type === BZ && (m("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", d, b, d === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', b, d), hb[b] = !0), !0);
      };
    }
    var jF = function(c, b, d) {
      {
        var o = [];
        for (var e in b) {
          var L = Qx(c, e, b[e], d);
          L || o.push(e);
        }
        var X = o.map(function(K) {
          return "`" + K + "`";
        }).join(", ");
        o.length === 1 ? m("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", X, c) : o.length > 1 && m("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", X, c);
      }
    };
    function QF(c, b, d) {
      IG(c, b) || jF(c, b, d);
    }
    var Ox = 1, My = 2, To = 4, PF = Ox | My | To, fo = null;
    function OF(c) {
      fo !== null && m("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue."), fo = c;
    }
    function AF() {
      fo === null && m("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue."), fo = null;
    }
    function $F(c) {
      return c === fo;
    }
    function Iy(c) {
      var b = c.target || c.srcElement || window;
      return b.correspondingUseElement && (b = b.correspondingUseElement), b.nodeType === rs ? b.parentNode : b;
    }
    var Uy = null, Bm = null, Dm = null;
    function Ax(c) {
      var b = zd(c);
      if (b) {
        if (typeof Uy != "function")
          throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        var d = b.stateNode;
        if (d) {
          var o = Rp(d);
          Uy(b.stateNode, b.type, o);
        }
      }
    }
    function qF(c) {
      Uy = c;
    }
    function $x(c) {
      Bm ? Dm ? Dm.push(c) : Dm = [c] : Bm = c;
    }
    function _F() {
      return Bm !== null || Dm !== null;
    }
    function qx() {
      if (Bm) {
        var c = Bm, b = Dm;
        if (Bm = null, Dm = null, Ax(c), b)
          for (var d = 0; d < b.length; d++)
            Ax(b[d]);
      }
    }
    var _x = function(c, b) {
      return c(b);
    }, l5 = function() {
    }, Cy = !1;
    function lN() {
      var c = _F();
      c && (l5(), qx());
    }
    function Z5(c, b, d) {
      if (Cy)
        return c(b, d);
      Cy = !0;
      try {
        return _x(c, b, d);
      } finally {
        Cy = !1, lN();
      }
    }
    function ZN(c, b, d) {
      _x = c, l5 = d;
    }
    function cN(c) {
      return c === "button" || c === "input" || c === "select" || c === "textarea";
    }
    function bN(c, b, d) {
      switch (c) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          return !!(d.disabled && cN(b));
        default:
          return !1;
      }
    }
    function Eo(c, b) {
      var d = c.stateNode;
      if (d === null)
        return null;
      var o = Rp(d);
      if (o === null)
        return null;
      var e = o[b];
      if (bN(b, c.type, o))
        return null;
      if (e && typeof e != "function")
        throw new Error("Expected `" + b + "` listener to be a function, instead got a value of `" + typeof e + "` type.");
      return e;
    }
    var ry = !1;
    if (wl)
      try {
        var Bo = {};
        Object.defineProperty(Bo, "passive", {
          get: function() {
            ry = !0;
          }
        }), window.addEventListener("test", Bo, Bo), window.removeEventListener("test", Bo, Bo);
      } catch {
        ry = !1;
      }
    function c5(c, b, d, o, e, L, X, K, Y) {
      var N = Array.prototype.slice.call(arguments, 3);
      try {
        b.apply(d, N);
      } catch (H) {
        this.onError(H);
      }
    }
    var b5 = c5;
    if (typeof window < "u" && typeof window.dispatchEvent == "function" && typeof document < "u" && typeof document.createEvent == "function") {
      var Fy = document.createElement("react");
      b5 = function(b, d, o, e, L, X, K, Y, N) {
        if (typeof document > "u" || document === null)
          throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
        var H = document.createEvent("Event"), q = !1, $ = !0, sl = window.event, Gl = Object.getOwnPropertyDescriptor(window, "event");
        function nl() {
          Fy.removeEventListener(pl, Dl, !1), typeof window.event < "u" && window.hasOwnProperty("event") && (window.event = sl);
        }
        var Ul = Array.prototype.slice.call(arguments, 3);
        function Dl() {
          q = !0, nl(), d.apply(o, Ul), $ = !1;
        }
        var fl, hZ = !1, eZ = !1;
        function bl(ul) {
          if (fl = ul.error, hZ = !0, fl === null && ul.colno === 0 && ul.lineno === 0 && (eZ = !0), ul.defaultPrevented && fl != null && typeof fl == "object")
            try {
              fl._suppressLogging = !0;
            } catch {
            }
        }
        var pl = "react-" + (b || "invokeguardedcallback");
        if (window.addEventListener("error", bl), Fy.addEventListener(pl, Dl, !1), H.initEvent(pl, !1, !1), Fy.dispatchEvent(H), Gl && Object.defineProperty(window, "event", Gl), q && $ && (hZ ? eZ && (fl = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.")) : fl = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`), this.onError(fl)), window.removeEventListener("error", bl), !q)
          return nl(), c5.apply(this, arguments);
      };
    }
    var uN = b5, jm = !1, En = null, Bn = !1, Ny = null, sN = {
      onError: function(c) {
        jm = !0, En = c;
      }
    };
    function wy(c, b, d, o, e, L, X, K, Y) {
      jm = !1, En = null, uN.apply(sN, arguments);
    }
    function dN(c, b, d, o, e, L, X, K, Y) {
      if (wy.apply(this, arguments), jm) {
        var N = zy();
        Bn || (Bn = !0, Ny = N);
      }
    }
    function GN() {
      if (Bn) {
        var c = Ny;
        throw Bn = !1, Ny = null, c;
      }
    }
    function mN() {
      return jm;
    }
    function zy() {
      if (jm) {
        var c = En;
        return jm = !1, En = null, c;
      } else
        throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    function Qm(c) {
      return c._reactInternals;
    }
    function iN(c) {
      return c._reactInternals !== void 0;
    }
    function oN(c, b) {
      c._reactInternals = b;
    }
    var Pl = (
      /*                      */
      0
    ), Pm = (
      /*                */
      1
    ), Xc = (
      /*                    */
      2
    ), SZ = (
      /*                       */
      4
    ), UG = (
      /*                */
      16
    ), Do = (
      /*                 */
      32
    ), Jy = (
      /*                     */
      64
    ), RZ = (
      /*                   */
      128
    ), Ns = (
      /*            */
      256
    ), Id = (
      /*                          */
      512
    ), CG = (
      /*                     */
      1024
    ), xu = (
      /*                      */
      2048
    ), ws = (
      /*                    */
      4096
    ), rG = (
      /*                   */
      8192
    ), Dn = (
      /*             */
      16384
    ), eN = xu | SZ | Jy | Id | CG | Dn, aN = (
      /*               */
      32767
    ), jo = (
      /*                   */
      32768
    ), yb = (
      /*                */
      65536
    ), Hy = (
      /* */
      131072
    ), u5 = (
      /*                       */
      1048576
    ), gy = (
      /*                    */
      2097152
    ), FG = (
      /*                 */
      4194304
    ), vy = (
      /*                */
      8388608
    ), zs = (
      /*               */
      16777216
    ), jn = (
      /*              */
      33554432
    ), Ty = (
      // TODO: Remove Update flag from before mutation phase by re-landing Visibility
      // flag logic (see #20043)
      SZ | CG | 0
    ), fy = Xc | SZ | UG | Do | Id | ws | rG, Qo = SZ | Jy | Id | rG, Om = xu | UG, Js = FG | vy | gy, nN = u.ReactCurrentOwner;
    function NG(c) {
      var b = c, d = c;
      if (c.alternate)
        for (; b.return; )
          b = b.return;
      else {
        var o = b;
        do
          b = o, (b.flags & (Xc | ws)) !== Pl && (d = b.return), o = b.return;
        while (o);
      }
      return b.tag === h ? d : null;
    }
    function s5(c) {
      if (c.tag === w) {
        var b = c.memoizedState;
        if (b === null) {
          var d = c.alternate;
          d !== null && (b = d.memoizedState);
        }
        if (b !== null)
          return b.dehydrated;
      }
      return null;
    }
    function d5(c) {
      return c.tag === h ? c.stateNode.containerInfo : null;
    }
    function pN(c) {
      return NG(c) === c;
    }
    function LN(c) {
      {
        var b = nN.current;
        if (b !== null && b.tag === p) {
          var d = b, o = d.stateNode;
          o._warnedAboutRefsInRender || m("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", bZ(d) || "A component"), o._warnedAboutRefsInRender = !0;
        }
      }
      var e = Qm(c);
      return e ? NG(e) === e : !1;
    }
    function G5(c) {
      if (NG(c) !== c)
        throw new Error("Unable to find node on an unmounted component.");
    }
    function m5(c) {
      var b = c.alternate;
      if (!b) {
        var d = NG(c);
        if (d === null)
          throw new Error("Unable to find node on an unmounted component.");
        return d !== c ? null : c;
      }
      for (var o = c, e = b; ; ) {
        var L = o.return;
        if (L === null)
          break;
        var X = L.alternate;
        if (X === null) {
          var K = L.return;
          if (K !== null) {
            o = e = K;
            continue;
          }
          break;
        }
        if (L.child === X.child) {
          for (var Y = L.child; Y; ) {
            if (Y === o)
              return G5(L), c;
            if (Y === e)
              return G5(L), b;
            Y = Y.sibling;
          }
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (o.return !== e.return)
          o = L, e = X;
        else {
          for (var N = !1, H = L.child; H; ) {
            if (H === o) {
              N = !0, o = L, e = X;
              break;
            }
            if (H === e) {
              N = !0, e = L, o = X;
              break;
            }
            H = H.sibling;
          }
          if (!N) {
            for (H = X.child; H; ) {
              if (H === o) {
                N = !0, o = X, e = L;
                break;
              }
              if (H === e) {
                N = !0, e = X, o = L;
                break;
              }
              H = H.sibling;
            }
            if (!N)
              throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
          }
        }
        if (o.alternate !== e)
          throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
      }
      if (o.tag !== h)
        throw new Error("Unable to find node on an unmounted component.");
      return o.stateNode.current === o ? c : b;
    }
    function i5(c) {
      var b = m5(c);
      return b !== null ? o5(b) : null;
    }
    function o5(c) {
      if (c.tag === t || c.tag === W)
        return c;
      for (var b = c.child; b !== null; ) {
        var d = o5(b);
        if (d !== null)
          return d;
        b = b.sibling;
      }
      return null;
    }
    function hN(c) {
      var b = m5(c);
      return b !== null ? e5(b) : null;
    }
    function e5(c) {
      if (c.tag === t || c.tag === W)
        return c;
      for (var b = c.child; b !== null; ) {
        if (b.tag !== S) {
          var d = e5(b);
          if (d !== null)
            return d;
        }
        b = b.sibling;
      }
      return null;
    }
    var a5 = Z.unstable_scheduleCallback, yN = Z.unstable_cancelCallback, SN = Z.unstable_shouldYield, tN = Z.unstable_requestPaint, zc = Z.unstable_now, XN = Z.unstable_getCurrentPriorityLevel, Qn = Z.unstable_ImmediatePriority, Ey = Z.unstable_UserBlockingPriority, wG = Z.unstable_NormalPriority, KN = Z.unstable_LowPriority, By = Z.unstable_IdlePriority, WN = Z.unstable_yieldValue, VN = Z.unstable_setDisableYieldValue, Am = null, sb = null, rl = null, $u = !1, Ru = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u";
    function xN(c) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u")
        return !1;
      var b = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (b.isDisabled)
        return !0;
      if (!b.supportsFiber)
        return m("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools"), !0;
      try {
        Rl && (c = GZ({}, c, {
          getLaneLabelMap: UN,
          injectProfilingHooks: IN
        })), Am = b.inject(c), sb = b;
      } catch (d) {
        m("React instrumentation encountered an error: %s.", d);
      }
      return !!b.checkDCE;
    }
    function RN(c, b) {
      if (sb && typeof sb.onScheduleFiberRoot == "function")
        try {
          sb.onScheduleFiberRoot(Am, c, b);
        } catch (d) {
          $u || ($u = !0, m("React instrumentation encountered an error: %s", d));
        }
    }
    function YN(c, b) {
      if (sb && typeof sb.onCommitFiberRoot == "function")
        try {
          var d = (c.current.flags & RZ) === RZ;
          if (kl) {
            var o;
            switch (b) {
              case Qb:
                o = Qn;
                break;
              case gs:
                o = Ey;
                break;
              case vs:
                o = wG;
                break;
              case lp:
                o = By;
                break;
              default:
                o = wG;
                break;
            }
            sb.onCommitFiberRoot(Am, c, o, d);
          }
        } catch (e) {
          $u || ($u = !0, m("React instrumentation encountered an error: %s", e));
        }
    }
    function kN(c) {
      if (sb && typeof sb.onPostCommitFiberRoot == "function")
        try {
          sb.onPostCommitFiberRoot(Am, c);
        } catch (b) {
          $u || ($u = !0, m("React instrumentation encountered an error: %s", b));
        }
    }
    function MN(c) {
      if (sb && typeof sb.onCommitFiberUnmount == "function")
        try {
          sb.onCommitFiberUnmount(Am, c);
        } catch (b) {
          $u || ($u = !0, m("React instrumentation encountered an error: %s", b));
        }
    }
    function Jc(c) {
      if (typeof WN == "function" && (VN(c), G(c)), sb && typeof sb.setStrictMode == "function")
        try {
          sb.setStrictMode(Am, c);
        } catch (b) {
          $u || ($u = !0, m("React instrumentation encountered an error: %s", b));
        }
    }
    function IN(c) {
      rl = c;
    }
    function UN() {
      {
        for (var c = /* @__PURE__ */ new Map(), b = 1, d = 0; d < jy; d++) {
          var o = AN(b);
          c.set(b, o), b *= 2;
        }
        return c;
      }
    }
    function CN(c) {
      rl !== null && typeof rl.markCommitStarted == "function" && rl.markCommitStarted(c);
    }
    function n5() {
      rl !== null && typeof rl.markCommitStopped == "function" && rl.markCommitStopped();
    }
    function Po(c) {
      rl !== null && typeof rl.markComponentRenderStarted == "function" && rl.markComponentRenderStarted(c);
    }
    function $m() {
      rl !== null && typeof rl.markComponentRenderStopped == "function" && rl.markComponentRenderStopped();
    }
    function rN(c) {
      rl !== null && typeof rl.markComponentPassiveEffectMountStarted == "function" && rl.markComponentPassiveEffectMountStarted(c);
    }
    function FN() {
      rl !== null && typeof rl.markComponentPassiveEffectMountStopped == "function" && rl.markComponentPassiveEffectMountStopped();
    }
    function NN(c) {
      rl !== null && typeof rl.markComponentPassiveEffectUnmountStarted == "function" && rl.markComponentPassiveEffectUnmountStarted(c);
    }
    function wN() {
      rl !== null && typeof rl.markComponentPassiveEffectUnmountStopped == "function" && rl.markComponentPassiveEffectUnmountStopped();
    }
    function zN(c) {
      rl !== null && typeof rl.markComponentLayoutEffectMountStarted == "function" && rl.markComponentLayoutEffectMountStarted(c);
    }
    function JN() {
      rl !== null && typeof rl.markComponentLayoutEffectMountStopped == "function" && rl.markComponentLayoutEffectMountStopped();
    }
    function p5(c) {
      rl !== null && typeof rl.markComponentLayoutEffectUnmountStarted == "function" && rl.markComponentLayoutEffectUnmountStarted(c);
    }
    function L5() {
      rl !== null && typeof rl.markComponentLayoutEffectUnmountStopped == "function" && rl.markComponentLayoutEffectUnmountStopped();
    }
    function HN(c, b, d) {
      rl !== null && typeof rl.markComponentErrored == "function" && rl.markComponentErrored(c, b, d);
    }
    function gN(c, b, d) {
      rl !== null && typeof rl.markComponentSuspended == "function" && rl.markComponentSuspended(c, b, d);
    }
    function vN(c) {
      rl !== null && typeof rl.markLayoutEffectsStarted == "function" && rl.markLayoutEffectsStarted(c);
    }
    function TN() {
      rl !== null && typeof rl.markLayoutEffectsStopped == "function" && rl.markLayoutEffectsStopped();
    }
    function fN(c) {
      rl !== null && typeof rl.markPassiveEffectsStarted == "function" && rl.markPassiveEffectsStarted(c);
    }
    function EN() {
      rl !== null && typeof rl.markPassiveEffectsStopped == "function" && rl.markPassiveEffectsStopped();
    }
    function h5(c) {
      rl !== null && typeof rl.markRenderStarted == "function" && rl.markRenderStarted(c);
    }
    function BN() {
      rl !== null && typeof rl.markRenderYielded == "function" && rl.markRenderYielded();
    }
    function y5() {
      rl !== null && typeof rl.markRenderStopped == "function" && rl.markRenderStopped();
    }
    function DN(c) {
      rl !== null && typeof rl.markRenderScheduled == "function" && rl.markRenderScheduled(c);
    }
    function jN(c, b) {
      rl !== null && typeof rl.markForceUpdateScheduled == "function" && rl.markForceUpdateScheduled(c, b);
    }
    function Dy(c, b) {
      rl !== null && typeof rl.markStateUpdateScheduled == "function" && rl.markStateUpdateScheduled(c, b);
    }
    var Ql = (
      /*                         */
      0
    ), pZ = (
      /*                 */
      1
    ), rZ = (
      /*                    */
      2
    ), Gc = (
      /*               */
      8
    ), qu = (
      /*              */
      16
    ), S5 = Math.clz32 ? Math.clz32 : ON, QN = Math.log, PN = Math.LN2;
    function ON(c) {
      var b = c >>> 0;
      return b === 0 ? 32 : 31 - (QN(b) / PN | 0) | 0;
    }
    var jy = 31, Sl = (
      /*                        */
      0
    ), Hc = (
      /*                          */
      0
    ), ql = (
      /*                        */
      1
    ), qm = (
      /*    */
      2
    ), Hs = (
      /*             */
      4
    ), zG = (
      /*            */
      8
    ), _u = (
      /*                     */
      16
    ), Oo = (
      /*                */
      32
    ), _m = (
      /*                       */
      4194240
    ), Ao = (
      /*                        */
      64
    ), Qy = (
      /*                        */
      128
    ), Py = (
      /*                        */
      256
    ), Oy = (
      /*                        */
      512
    ), Ay = (
      /*                        */
      1024
    ), $y = (
      /*                        */
      2048
    ), qy = (
      /*                        */
      4096
    ), _y = (
      /*                        */
      8192
    ), lS = (
      /*                        */
      16384
    ), ZS = (
      /*                       */
      32768
    ), cS = (
      /*                       */
      65536
    ), bS = (
      /*                       */
      131072
    ), uS = (
      /*                       */
      262144
    ), sS = (
      /*                       */
      524288
    ), dS = (
      /*                       */
      1048576
    ), GS = (
      /*                       */
      2097152
    ), Pn = (
      /*                            */
      130023424
    ), li = (
      /*                             */
      4194304
    ), mS = (
      /*                             */
      8388608
    ), iS = (
      /*                             */
      16777216
    ), oS = (
      /*                             */
      33554432
    ), eS = (
      /*                             */
      67108864
    ), t5 = li, $o = (
      /*          */
      134217728
    ), X5 = (
      /*                          */
      268435455
    ), qo = (
      /*               */
      268435456
    ), JG = (
      /*                        */
      536870912
    ), Db = (
      /*                   */
      1073741824
    );
    function AN(c) {
      {
        if (c & ql)
          return "Sync";
        if (c & qm)
          return "InputContinuousHydration";
        if (c & Hs)
          return "InputContinuous";
        if (c & zG)
          return "DefaultHydration";
        if (c & _u)
          return "Default";
        if (c & Oo)
          return "TransitionHydration";
        if (c & _m)
          return "Transition";
        if (c & Pn)
          return "Retry";
        if (c & $o)
          return "SelectiveHydration";
        if (c & qo)
          return "IdleHydration";
        if (c & JG)
          return "Idle";
        if (c & Db)
          return "Offscreen";
      }
    }
    var jZ = -1, On = Ao, An = li;
    function _o(c) {
      switch (HG(c)) {
        case ql:
          return ql;
        case qm:
          return qm;
        case Hs:
          return Hs;
        case zG:
          return zG;
        case _u:
          return _u;
        case Oo:
          return Oo;
        case Ao:
        case Qy:
        case Py:
        case Oy:
        case Ay:
        case $y:
        case qy:
        case _y:
        case lS:
        case ZS:
        case cS:
        case bS:
        case uS:
        case sS:
        case dS:
        case GS:
          return c & _m;
        case li:
        case mS:
        case iS:
        case oS:
        case eS:
          return c & Pn;
        case $o:
          return $o;
        case qo:
          return qo;
        case JG:
          return JG;
        case Db:
          return Db;
        default:
          return m("Should have found matching lanes. This is a bug in React."), c;
      }
    }
    function $n(c, b) {
      var d = c.pendingLanes;
      if (d === Sl)
        return Sl;
      var o = Sl, e = c.suspendedLanes, L = c.pingedLanes, X = d & X5;
      if (X !== Sl) {
        var K = X & ~e;
        if (K !== Sl)
          o = _o(K);
        else {
          var Y = X & L;
          Y !== Sl && (o = _o(Y));
        }
      } else {
        var N = d & ~e;
        N !== Sl ? o = _o(N) : L !== Sl && (o = _o(L));
      }
      if (o === Sl)
        return Sl;
      if (b !== Sl && b !== o && // If we already suspended with a delay, then interrupting is fine. Don't
      // bother waiting until the root is complete.
      (b & e) === Sl) {
        var H = HG(o), q = HG(b);
        if (
          // Tests whether the next lane is equal or lower priority than the wip
          // one. This works because the bits decrease in priority as you go left.
          H >= q || // Default priority updates should not interrupt transition updates. The
          // only difference between default updates and transition updates is that
          // default updates do not support refresh transitions.
          H === _u && (q & _m) !== Sl
        )
          return b;
      }
      (o & Hs) !== Sl && (o |= d & _u);
      var $ = c.entangledLanes;
      if ($ !== Sl)
        for (var sl = c.entanglements, Gl = o & $; Gl > 0; ) {
          var nl = gG(Gl), Ul = 1 << nl;
          o |= sl[nl], Gl &= ~Ul;
        }
      return o;
    }
    function $N(c, b) {
      for (var d = c.eventTimes, o = jZ; b > 0; ) {
        var e = gG(b), L = 1 << e, X = d[e];
        X > o && (o = X), b &= ~L;
      }
      return o;
    }
    function qN(c, b) {
      switch (c) {
        case ql:
        case qm:
        case Hs:
          return b + 250;
        case zG:
        case _u:
        case Oo:
        case Ao:
        case Qy:
        case Py:
        case Oy:
        case Ay:
        case $y:
        case qy:
        case _y:
        case lS:
        case ZS:
        case cS:
        case bS:
        case uS:
        case sS:
        case dS:
        case GS:
          return b + 5e3;
        case li:
        case mS:
        case iS:
        case oS:
        case eS:
          return jZ;
        case $o:
        case qo:
        case JG:
        case Db:
          return jZ;
        default:
          return m("Should have found matching lanes. This is a bug in React."), jZ;
      }
    }
    function _N(c, b) {
      for (var d = c.pendingLanes, o = c.suspendedLanes, e = c.pingedLanes, L = c.expirationTimes, X = d; X > 0; ) {
        var K = gG(X), Y = 1 << K, N = L[K];
        N === jZ ? ((Y & o) === Sl || (Y & e) !== Sl) && (L[K] = qN(Y, b)) : N <= b && (c.expiredLanes |= Y), X &= ~Y;
      }
    }
    function lw(c) {
      return _o(c.pendingLanes);
    }
    function aS(c) {
      var b = c.pendingLanes & ~Db;
      return b !== Sl ? b : b & Db ? Db : Sl;
    }
    function Zw(c) {
      return (c & ql) !== Sl;
    }
    function nS(c) {
      return (c & X5) !== Sl;
    }
    function K5(c) {
      return (c & Pn) === c;
    }
    function cw(c) {
      var b = ql | Hs | _u;
      return (c & b) === Sl;
    }
    function bw(c) {
      return (c & _m) === c;
    }
    function qn(c, b) {
      var d = qm | Hs | zG | _u;
      return (b & d) !== Sl;
    }
    function uw(c, b) {
      return (b & c.expiredLanes) !== Sl;
    }
    function W5(c) {
      return (c & _m) !== Sl;
    }
    function V5() {
      var c = On;
      return On <<= 1, (On & _m) === Sl && (On = Ao), c;
    }
    function sw() {
      var c = An;
      return An <<= 1, (An & Pn) === Sl && (An = li), c;
    }
    function HG(c) {
      return c & -c;
    }
    function le(c) {
      return HG(c);
    }
    function gG(c) {
      return 31 - S5(c);
    }
    function pS(c) {
      return gG(c);
    }
    function jb(c, b) {
      return (c & b) !== Sl;
    }
    function Zi(c, b) {
      return (c & b) === b;
    }
    function mZ(c, b) {
      return c | b;
    }
    function _n(c, b) {
      return c & ~b;
    }
    function x5(c, b) {
      return c & b;
    }
    function x_(c) {
      return c;
    }
    function dw(c, b) {
      return c !== Hc && c < b ? c : b;
    }
    function LS(c) {
      for (var b = [], d = 0; d < jy; d++)
        b.push(c);
      return b;
    }
    function Ze(c, b, d) {
      c.pendingLanes |= b, b !== JG && (c.suspendedLanes = Sl, c.pingedLanes = Sl);
      var o = c.eventTimes, e = pS(b);
      o[e] = d;
    }
    function Gw(c, b) {
      c.suspendedLanes |= b, c.pingedLanes &= ~b;
      for (var d = c.expirationTimes, o = b; o > 0; ) {
        var e = gG(o), L = 1 << e;
        d[e] = jZ, o &= ~L;
      }
    }
    function R5(c, b, d) {
      c.pingedLanes |= c.suspendedLanes & b;
    }
    function mw(c, b) {
      var d = c.pendingLanes & ~b;
      c.pendingLanes = b, c.suspendedLanes = Sl, c.pingedLanes = Sl, c.expiredLanes &= b, c.mutableReadLanes &= b, c.entangledLanes &= b;
      for (var o = c.entanglements, e = c.eventTimes, L = c.expirationTimes, X = d; X > 0; ) {
        var K = gG(X), Y = 1 << K;
        o[K] = Sl, e[K] = jZ, L[K] = jZ, X &= ~Y;
      }
    }
    function hS(c, b) {
      for (var d = c.entangledLanes |= b, o = c.entanglements, e = d; e; ) {
        var L = gG(e), X = 1 << L;
        // Is this one of the newly entangled lanes?
        X & b | // Is this lane transitively entangled with the newly entangled lanes?
        o[L] & b && (o[L] |= b), e &= ~X;
      }
    }
    function iw(c, b) {
      var d = HG(b), o;
      switch (d) {
        case Hs:
          o = qm;
          break;
        case _u:
          o = zG;
          break;
        case Ao:
        case Qy:
        case Py:
        case Oy:
        case Ay:
        case $y:
        case qy:
        case _y:
        case lS:
        case ZS:
        case cS:
        case bS:
        case uS:
        case sS:
        case dS:
        case GS:
        case li:
        case mS:
        case iS:
        case oS:
        case eS:
          o = Oo;
          break;
        case JG:
          o = qo;
          break;
        default:
          o = Hc;
          break;
      }
      return (o & (c.suspendedLanes | b)) !== Hc ? Hc : o;
    }
    function Y5(c, b, d) {
      if (Ru)
        for (var o = c.pendingUpdatersLaneMap; d > 0; ) {
          var e = pS(d), L = 1 << e, X = o[e];
          X.add(b), d &= ~L;
        }
    }
    function k5(c, b) {
      if (Ru)
        for (var d = c.pendingUpdatersLaneMap, o = c.memoizedUpdaters; b > 0; ) {
          var e = pS(b), L = 1 << e, X = d[e];
          X.size > 0 && (X.forEach(function(K) {
            var Y = K.alternate;
            (Y === null || !o.has(Y)) && o.add(K);
          }), X.clear()), b &= ~L;
        }
    }
    function M5(c, b) {
      return null;
    }
    var Qb = ql, gs = Hs, vs = _u, lp = JG, ce = Hc;
    function Yu() {
      return ce;
    }
    function gc(c) {
      ce = c;
    }
    function ow(c, b) {
      var d = ce;
      try {
        return ce = c, b();
      } finally {
        ce = d;
      }
    }
    function ew(c, b) {
      return c !== 0 && c < b ? c : b;
    }
    function aw(c, b) {
      return c > b ? c : b;
    }
    function yS(c, b) {
      return c !== 0 && c < b;
    }
    function I5(c) {
      var b = HG(c);
      return yS(Qb, b) ? yS(gs, b) ? nS(b) ? vs : lp : gs : Qb;
    }
    function Zp(c) {
      var b = c.current.memoizedState;
      return b.isDehydrated;
    }
    var U5;
    function nw(c) {
      U5 = c;
    }
    function pw(c) {
      U5(c);
    }
    var SS;
    function Lw(c) {
      SS = c;
    }
    var C5;
    function hw(c) {
      C5 = c;
    }
    var r5;
    function yw(c) {
      r5 = c;
    }
    var F5;
    function Sw(c) {
      F5 = c;
    }
    var tS = !1, cp = [], Ud = null, Cd = null, rd = null, be = /* @__PURE__ */ new Map(), ue = /* @__PURE__ */ new Map(), Fd = [], tw = [
      "mousedown",
      "mouseup",
      "touchcancel",
      "touchend",
      "touchstart",
      "auxclick",
      "dblclick",
      "pointercancel",
      "pointerdown",
      "pointerup",
      "dragend",
      "dragstart",
      "drop",
      "compositionend",
      "compositionstart",
      "keydown",
      "keypress",
      "keyup",
      "input",
      "textInput",
      // Intentionally camelCase
      "copy",
      "cut",
      "paste",
      "click",
      "change",
      "contextmenu",
      "reset",
      "submit"
    ];
    function Xw(c) {
      return tw.indexOf(c) > -1;
    }
    function Kw(c, b, d, o, e) {
      return {
        blockedOn: c,
        domEventName: b,
        eventSystemFlags: d,
        nativeEvent: e,
        targetContainers: [o]
      };
    }
    function N5(c, b) {
      switch (c) {
        case "focusin":
        case "focusout":
          Ud = null;
          break;
        case "dragenter":
        case "dragleave":
          Cd = null;
          break;
        case "mouseover":
        case "mouseout":
          rd = null;
          break;
        case "pointerover":
        case "pointerout": {
          var d = b.pointerId;
          be.delete(d);
          break;
        }
        case "gotpointercapture":
        case "lostpointercapture": {
          var o = b.pointerId;
          ue.delete(o);
          break;
        }
      }
    }
    function se(c, b, d, o, e, L) {
      if (c === null || c.nativeEvent !== L) {
        var X = Kw(b, d, o, e, L);
        if (b !== null) {
          var K = zd(b);
          K !== null && SS(K);
        }
        return X;
      }
      c.eventSystemFlags |= o;
      var Y = c.targetContainers;
      return e !== null && Y.indexOf(e) === -1 && Y.push(e), c;
    }
    function Ww(c, b, d, o, e) {
      switch (b) {
        case "focusin": {
          var L = e;
          return Ud = se(Ud, c, b, d, o, L), !0;
        }
        case "dragenter": {
          var X = e;
          return Cd = se(Cd, c, b, d, o, X), !0;
        }
        case "mouseover": {
          var K = e;
          return rd = se(rd, c, b, d, o, K), !0;
        }
        case "pointerover": {
          var Y = e, N = Y.pointerId;
          return be.set(N, se(be.get(N) || null, c, b, d, o, Y)), !0;
        }
        case "gotpointercapture": {
          var H = e, q = H.pointerId;
          return ue.set(q, se(ue.get(q) || null, c, b, d, o, H)), !0;
        }
      }
      return !1;
    }
    function w5(c) {
      var b = fG(c.target);
      if (b !== null) {
        var d = NG(b);
        if (d !== null) {
          var o = d.tag;
          if (o === w) {
            var e = s5(d);
            if (e !== null) {
              c.blockedOn = e, F5(c.priority, function() {
                C5(d);
              });
              return;
            }
          } else if (o === h) {
            var L = d.stateNode;
            if (Zp(L)) {
              c.blockedOn = d5(d);
              return;
            }
          }
        }
      }
      c.blockedOn = null;
    }
    function Vw(c) {
      for (var b = r5(), d = {
        blockedOn: null,
        target: c,
        priority: b
      }, o = 0; o < Fd.length && yS(b, Fd[o].priority); o++)
        ;
      Fd.splice(o, 0, d), o === 0 && w5(d);
    }
    function bp(c) {
      if (c.blockedOn !== null)
        return !1;
      for (var b = c.targetContainers; b.length > 0; ) {
        var d = b[0], o = WS(c.domEventName, c.eventSystemFlags, d, c.nativeEvent);
        if (o === null) {
          var e = c.nativeEvent, L = new e.constructor(e.type, e);
          OF(L), e.target.dispatchEvent(L), AF();
        } else {
          var X = zd(o);
          return X !== null && SS(X), c.blockedOn = o, !1;
        }
        b.shift();
      }
      return !0;
    }
    function z5(c, b, d) {
      bp(c) && d.delete(b);
    }
    function xw() {
      tS = !1, Ud !== null && bp(Ud) && (Ud = null), Cd !== null && bp(Cd) && (Cd = null), rd !== null && bp(rd) && (rd = null), be.forEach(z5), ue.forEach(z5);
    }
    function de(c, b) {
      c.blockedOn === b && (c.blockedOn = null, tS || (tS = !0, Z.unstable_scheduleCallback(Z.unstable_NormalPriority, xw)));
    }
    function Ge(c) {
      if (cp.length > 0) {
        de(cp[0], c);
        for (var b = 1; b < cp.length; b++) {
          var d = cp[b];
          d.blockedOn === c && (d.blockedOn = null);
        }
      }
      Ud !== null && de(Ud, c), Cd !== null && de(Cd, c), rd !== null && de(rd, c);
      var o = function(K) {
        return de(K, c);
      };
      be.forEach(o), ue.forEach(o);
      for (var e = 0; e < Fd.length; e++) {
        var L = Fd[e];
        L.blockedOn === c && (L.blockedOn = null);
      }
      for (; Fd.length > 0; ) {
        var X = Fd[0];
        if (X.blockedOn !== null)
          break;
        w5(X), X.blockedOn === null && Fd.shift();
      }
    }
    var ci = u.ReactCurrentBatchConfig, XS = !0;
    function J5(c) {
      XS = !!c;
    }
    function Rw() {
      return XS;
    }
    function Yw(c, b, d) {
      var o = H5(b), e;
      switch (o) {
        case Qb:
          e = kw;
          break;
        case gs:
          e = Mw;
          break;
        case vs:
        default:
          e = KS;
          break;
      }
      return e.bind(null, b, d, c);
    }
    function kw(c, b, d, o) {
      var e = Yu(), L = ci.transition;
      ci.transition = null;
      try {
        gc(Qb), KS(c, b, d, o);
      } finally {
        gc(e), ci.transition = L;
      }
    }
    function Mw(c, b, d, o) {
      var e = Yu(), L = ci.transition;
      ci.transition = null;
      try {
        gc(gs), KS(c, b, d, o);
      } finally {
        gc(e), ci.transition = L;
      }
    }
    function KS(c, b, d, o) {
      XS && Iw(c, b, d, o);
    }
    function Iw(c, b, d, o) {
      var e = WS(c, b, d, o);
      if (e === null) {
        zS(c, b, o, up, d), N5(c, o);
        return;
      }
      if (Ww(e, c, b, d, o)) {
        o.stopPropagation();
        return;
      }
      if (N5(c, o), b & To && Xw(c)) {
        for (; e !== null; ) {
          var L = zd(e);
          L !== null && pw(L);
          var X = WS(c, b, d, o);
          if (X === null && zS(c, b, o, up, d), X === e)
            break;
          e = X;
        }
        e !== null && o.stopPropagation();
        return;
      }
      zS(c, b, o, null, d);
    }
    var up = null;
    function WS(c, b, d, o) {
      up = null;
      var e = Iy(o), L = fG(e);
      if (L !== null) {
        var X = NG(L);
        if (X === null)
          L = null;
        else {
          var K = X.tag;
          if (K === w) {
            var Y = s5(X);
            if (Y !== null)
              return Y;
            L = null;
          } else if (K === h) {
            var N = X.stateNode;
            if (Zp(N))
              return d5(X);
            L = null;
          } else X !== L && (L = null);
        }
      }
      return up = L, null;
    }
    function H5(c) {
      switch (c) {
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return Qb;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return gs;
        case "message": {
          var b = XN();
          switch (b) {
            case Qn:
              return Qb;
            case Ey:
              return gs;
            case wG:
            case KN:
              return vs;
            case By:
              return lp;
            default:
              return vs;
          }
        }
        default:
          return vs;
      }
    }
    function Uw(c, b, d) {
      return c.addEventListener(b, d, !1), d;
    }
    function Cw(c, b, d) {
      return c.addEventListener(b, d, !0), d;
    }
    function rw(c, b, d, o) {
      return c.addEventListener(b, d, {
        capture: !0,
        passive: o
      }), d;
    }
    function Fw(c, b, d, o) {
      return c.addEventListener(b, d, {
        passive: o
      }), d;
    }
    var me = null, VS = null, ie = null;
    function Nw(c) {
      return me = c, VS = v5(), !0;
    }
    function ww() {
      me = null, VS = null, ie = null;
    }
    function g5() {
      if (ie)
        return ie;
      var c, b = VS, d = b.length, o, e = v5(), L = e.length;
      for (c = 0; c < d && b[c] === e[c]; c++)
        ;
      var X = d - c;
      for (o = 1; o <= X && b[d - o] === e[L - o]; o++)
        ;
      var K = o > 1 ? 1 - o : void 0;
      return ie = e.slice(c, K), ie;
    }
    function v5() {
      return "value" in me ? me.value : me.textContent;
    }
    function sp(c) {
      var b, d = c.keyCode;
      return "charCode" in c ? (b = c.charCode, b === 0 && d === 13 && (b = 13)) : b = d, b === 10 && (b = 13), b >= 32 || b === 13 ? b : 0;
    }
    function dp() {
      return !0;
    }
    function T5() {
      return !1;
    }
    function Pb(c) {
      function b(d, o, e, L, X) {
        this._reactName = d, this._targetInst = e, this.type = o, this.nativeEvent = L, this.target = X, this.currentTarget = null;
        for (var K in c)
          if (c.hasOwnProperty(K)) {
            var Y = c[K];
            Y ? this[K] = Y(L) : this[K] = L[K];
          }
        var N = L.defaultPrevented != null ? L.defaultPrevented : L.returnValue === !1;
        return N ? this.isDefaultPrevented = dp : this.isDefaultPrevented = T5, this.isPropagationStopped = T5, this;
      }
      return GZ(b.prototype, {
        preventDefault: function() {
          this.defaultPrevented = !0;
          var d = this.nativeEvent;
          d && (d.preventDefault ? d.preventDefault() : typeof d.returnValue != "unknown" && (d.returnValue = !1), this.isDefaultPrevented = dp);
        },
        stopPropagation: function() {
          var d = this.nativeEvent;
          d && (d.stopPropagation ? d.stopPropagation() : typeof d.cancelBubble != "unknown" && (d.cancelBubble = !0), this.isPropagationStopped = dp);
        },
        /**
         * We release all dispatched `SyntheticEvent`s after each event loop, adding
         * them back into the pool. This allows a way to hold onto a reference that
         * won't be added back into the pool.
         */
        persist: function() {
        },
        /**
         * Checks if this event should be released back into the pool.
         *
         * @return {boolean} True if this should not be released, false otherwise.
         */
        isPersistent: dp
      }), b;
    }
    var bi = {
      eventPhase: 0,
      bubbles: 0,
      cancelable: 0,
      timeStamp: function(c) {
        return c.timeStamp || Date.now();
      },
      defaultPrevented: 0,
      isTrusted: 0
    }, xS = Pb(bi), oe = GZ({}, bi, {
      view: 0,
      detail: 0
    }), zw = Pb(oe), RS, YS, ee;
    function Jw(c) {
      c !== ee && (ee && c.type === "mousemove" ? (RS = c.screenX - ee.screenX, YS = c.screenY - ee.screenY) : (RS = 0, YS = 0), ee = c);
    }
    var Gp = GZ({}, oe, {
      screenX: 0,
      screenY: 0,
      clientX: 0,
      clientY: 0,
      pageX: 0,
      pageY: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      getModifierState: MS,
      button: 0,
      buttons: 0,
      relatedTarget: function(c) {
        return c.relatedTarget === void 0 ? c.fromElement === c.srcElement ? c.toElement : c.fromElement : c.relatedTarget;
      },
      movementX: function(c) {
        return "movementX" in c ? c.movementX : (Jw(c), RS);
      },
      movementY: function(c) {
        return "movementY" in c ? c.movementY : YS;
      }
    }), f5 = Pb(Gp), Hw = GZ({}, Gp, {
      dataTransfer: 0
    }), gw = Pb(Hw), vw = GZ({}, oe, {
      relatedTarget: 0
    }), kS = Pb(vw), Tw = GZ({}, bi, {
      animationName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    }), fw = Pb(Tw), Ew = GZ({}, bi, {
      clipboardData: function(c) {
        return "clipboardData" in c ? c.clipboardData : window.clipboardData;
      }
    }), Bw = Pb(Ew), Dw = GZ({}, bi, {
      data: 0
    }), E5 = Pb(Dw), jw = E5, Qw = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    }, Pw = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    };
    function Ow(c) {
      if (c.key) {
        var b = Qw[c.key] || c.key;
        if (b !== "Unidentified")
          return b;
      }
      if (c.type === "keypress") {
        var d = sp(c);
        return d === 13 ? "Enter" : String.fromCharCode(d);
      }
      return c.type === "keydown" || c.type === "keyup" ? Pw[c.keyCode] || "Unidentified" : "";
    }
    var Aw = {
      Alt: "altKey",
      Control: "ctrlKey",
      Meta: "metaKey",
      Shift: "shiftKey"
    };
    function $w(c) {
      var b = this, d = b.nativeEvent;
      if (d.getModifierState)
        return d.getModifierState(c);
      var o = Aw[c];
      return o ? !!d[o] : !1;
    }
    function MS(c) {
      return $w;
    }
    var qw = GZ({}, oe, {
      key: Ow,
      code: 0,
      location: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      repeat: 0,
      locale: 0,
      getModifierState: MS,
      // Legacy Interface
      charCode: function(c) {
        return c.type === "keypress" ? sp(c) : 0;
      },
      keyCode: function(c) {
        return c.type === "keydown" || c.type === "keyup" ? c.keyCode : 0;
      },
      which: function(c) {
        return c.type === "keypress" ? sp(c) : c.type === "keydown" || c.type === "keyup" ? c.keyCode : 0;
      }
    }), _w = Pb(qw), lz = GZ({}, Gp, {
      pointerId: 0,
      width: 0,
      height: 0,
      pressure: 0,
      tangentialPressure: 0,
      tiltX: 0,
      tiltY: 0,
      twist: 0,
      pointerType: 0,
      isPrimary: 0
    }), B5 = Pb(lz), Zz = GZ({}, oe, {
      touches: 0,
      targetTouches: 0,
      changedTouches: 0,
      altKey: 0,
      metaKey: 0,
      ctrlKey: 0,
      shiftKey: 0,
      getModifierState: MS
    }), cz = Pb(Zz), bz = GZ({}, bi, {
      propertyName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    }), uz = Pb(bz), sz = GZ({}, Gp, {
      deltaX: function(c) {
        return "deltaX" in c ? c.deltaX : (
          // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
          "wheelDeltaX" in c ? -c.wheelDeltaX : 0
        );
      },
      deltaY: function(c) {
        return "deltaY" in c ? c.deltaY : (
          // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
          "wheelDeltaY" in c ? -c.wheelDeltaY : (
            // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
            "wheelDelta" in c ? -c.wheelDelta : 0
          )
        );
      },
      deltaZ: 0,
      // Browsers without "deltaMode" is reporting in raw wheel delta where one
      // notch on the scroll is always +/- 120, roughly equivalent to pixels.
      // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
      // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
      deltaMode: 0
    }), dz = Pb(sz), Gz = [9, 13, 27, 32], D5 = 229, IS = wl && "CompositionEvent" in window, ae = null;
    wl && "documentMode" in document && (ae = document.documentMode);
    var mz = wl && "TextEvent" in window && !ae, j5 = wl && (!IS || ae && ae > 8 && ae <= 11), Q5 = 32, P5 = String.fromCharCode(Q5);
    function iz() {
      hl("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]), hl("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]), hl("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]), hl("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
    }
    var O5 = !1;
    function oz(c) {
      return (c.ctrlKey || c.altKey || c.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
      !(c.ctrlKey && c.altKey);
    }
    function ez(c) {
      switch (c) {
        case "compositionstart":
          return "onCompositionStart";
        case "compositionend":
          return "onCompositionEnd";
        case "compositionupdate":
          return "onCompositionUpdate";
      }
    }
    function az(c, b) {
      return c === "keydown" && b.keyCode === D5;
    }
    function A5(c, b) {
      switch (c) {
        case "keyup":
          return Gz.indexOf(b.keyCode) !== -1;
        case "keydown":
          return b.keyCode !== D5;
        case "keypress":
        case "mousedown":
        case "focusout":
          return !0;
        default:
          return !1;
      }
    }
    function $5(c) {
      var b = c.detail;
      return typeof b == "object" && "data" in b ? b.data : null;
    }
    function q5(c) {
      return c.locale === "ko";
    }
    var ui = !1;
    function nz(c, b, d, o, e) {
      var L, X;
      if (IS ? L = ez(b) : ui ? A5(b, o) && (L = "onCompositionEnd") : az(b, o) && (L = "onCompositionStart"), !L)
        return null;
      j5 && !q5(o) && (!ui && L === "onCompositionStart" ? ui = Nw(e) : L === "onCompositionEnd" && ui && (X = g5()));
      var K = ap(d, L);
      if (K.length > 0) {
        var Y = new E5(L, b, null, o, e);
        if (c.push({
          event: Y,
          listeners: K
        }), X)
          Y.data = X;
        else {
          var N = $5(o);
          N !== null && (Y.data = N);
        }
      }
    }
    function pz(c, b) {
      switch (c) {
        case "compositionend":
          return $5(b);
        case "keypress":
          var d = b.which;
          return d !== Q5 ? null : (O5 = !0, P5);
        case "textInput":
          var o = b.data;
          return o === P5 && O5 ? null : o;
        default:
          return null;
      }
    }
    function Lz(c, b) {
      if (ui) {
        if (c === "compositionend" || !IS && A5(c, b)) {
          var d = g5();
          return ww(), ui = !1, d;
        }
        return null;
      }
      switch (c) {
        case "paste":
          return null;
        case "keypress":
          if (!oz(b)) {
            if (b.char && b.char.length > 1)
              return b.char;
            if (b.which)
              return String.fromCharCode(b.which);
          }
          return null;
        case "compositionend":
          return j5 && !q5(b) ? null : b.data;
        default:
          return null;
      }
    }
    function hz(c, b, d, o, e) {
      var L;
      if (mz ? L = pz(b, o) : L = Lz(b, o), !L)
        return null;
      var X = ap(d, "onBeforeInput");
      if (X.length > 0) {
        var K = new jw("onBeforeInput", "beforeinput", null, o, e);
        c.push({
          event: K,
          listeners: X
        }), K.data = L;
      }
    }
    function yz(c, b, d, o, e, L, X) {
      nz(c, b, d, o, e), hz(c, b, d, o, e);
    }
    var Sz = {
      color: !0,
      date: !0,
      datetime: !0,
      "datetime-local": !0,
      email: !0,
      month: !0,
      number: !0,
      password: !0,
      range: !0,
      search: !0,
      tel: !0,
      text: !0,
      time: !0,
      url: !0,
      week: !0
    };
    function _5(c) {
      var b = c && c.nodeName && c.nodeName.toLowerCase();
      return b === "input" ? !!Sz[c.type] : b === "textarea";
    }
    /**
     * Checks if an event is supported in the current execution environment.
     *
     * NOTE: This will not work correctly for non-generic events such as `change`,
     * `reset`, `load`, `error`, and `select`.
     *
     * Borrows from Modernizr.
     *
     * @param {string} eventNameSuffix Event name, e.g. "click".
     * @return {boolean} True if the event is supported.
     * @internal
     * @license Modernizr 3.0.0pre (Custom Build) | MIT
     */
    function tz(c) {
      if (!wl)
        return !1;
      var b = "on" + c, d = b in document;
      if (!d) {
        var o = document.createElement("div");
        o.setAttribute(b, "return;"), d = typeof o[b] == "function";
      }
      return d;
    }
    function Xz() {
      hl("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
    }
    function l0(c, b, d, o) {
      $x(o);
      var e = ap(b, "onChange");
      if (e.length > 0) {
        var L = new xS("onChange", "change", null, d, o);
        c.push({
          event: L,
          listeners: e
        });
      }
    }
    var ne = null, pe = null;
    function Kz(c) {
      var b = c.nodeName && c.nodeName.toLowerCase();
      return b === "select" || b === "input" && c.type === "file";
    }
    function Wz(c) {
      var b = [];
      l0(b, pe, c, Iy(c)), Z5(Vz, b);
    }
    function Vz(c) {
      S0(c, 0);
    }
    function mp(c) {
      var b = oi(c);
      if (gm(b))
        return c;
    }
    function xz(c, b) {
      if (c === "change")
        return b;
    }
    var Z0 = !1;
    wl && (Z0 = tz("input") && (!document.documentMode || document.documentMode > 9));
    function Rz(c, b) {
      ne = c, pe = b, ne.attachEvent("onpropertychange", b0);
    }
    function c0() {
      ne && (ne.detachEvent("onpropertychange", b0), ne = null, pe = null);
    }
    function b0(c) {
      c.propertyName === "value" && mp(pe) && Wz(c);
    }
    function Yz(c, b, d) {
      c === "focusin" ? (c0(), Rz(b, d)) : c === "focusout" && c0();
    }
    function kz(c, b) {
      if (c === "selectionchange" || c === "keyup" || c === "keydown")
        return mp(pe);
    }
    function Mz(c) {
      var b = c.nodeName;
      return b && b.toLowerCase() === "input" && (c.type === "checkbox" || c.type === "radio");
    }
    function Iz(c, b) {
      if (c === "click")
        return mp(b);
    }
    function Uz(c, b) {
      if (c === "input" || c === "change")
        return mp(b);
    }
    function Cz(c) {
      var b = c._wrapperState;
      !b || !b.controlled || c.type !== "number" || $l(c, "number", c.value);
    }
    function rz(c, b, d, o, e, L, X) {
      var K = d ? oi(d) : window, Y, N;
      if (Kz(K) ? Y = xz : _5(K) ? Z0 ? Y = Uz : (Y = kz, N = Yz) : Mz(K) && (Y = Iz), Y) {
        var H = Y(b, d);
        if (H) {
          l0(c, H, o, e);
          return;
        }
      }
      N && N(b, K, d), b === "focusout" && Cz(K);
    }
    function Fz() {
      cl("onMouseEnter", ["mouseout", "mouseover"]), cl("onMouseLeave", ["mouseout", "mouseover"]), cl("onPointerEnter", ["pointerout", "pointerover"]), cl("onPointerLeave", ["pointerout", "pointerover"]);
    }
    function Nz(c, b, d, o, e, L, X) {
      var K = b === "mouseover" || b === "pointerover", Y = b === "mouseout" || b === "pointerout";
      if (K && !$F(o)) {
        var N = o.relatedTarget || o.fromElement;
        if (N && (fG(N) || Ie(N)))
          return;
      }
      if (!(!Y && !K)) {
        var H;
        if (e.window === e)
          H = e;
        else {
          var q = e.ownerDocument;
          q ? H = q.defaultView || q.parentWindow : H = window;
        }
        var $, sl;
        if (Y) {
          var Gl = o.relatedTarget || o.toElement;
          if ($ = d, sl = Gl ? fG(Gl) : null, sl !== null) {
            var nl = NG(sl);
            (sl !== nl || sl.tag !== t && sl.tag !== W) && (sl = null);
          }
        } else
          $ = null, sl = d;
        if ($ !== sl) {
          var Ul = f5, Dl = "onMouseLeave", fl = "onMouseEnter", hZ = "mouse";
          (b === "pointerout" || b === "pointerover") && (Ul = B5, Dl = "onPointerLeave", fl = "onPointerEnter", hZ = "pointer");
          var eZ = $ == null ? H : oi($), bl = sl == null ? H : oi(sl), pl = new Ul(Dl, hZ + "leave", $, o, e);
          pl.target = eZ, pl.relatedTarget = bl;
          var ul = null, Xl = fG(e);
          if (Xl === d) {
            var Nl = new Ul(fl, hZ + "enter", sl, o, e);
            Nl.target = bl, Nl.relatedTarget = eZ, ul = Nl;
          }
          uJ(c, pl, ul, $, sl);
        }
      }
    }
    function wz(c, b) {
      return c === b && (c !== 0 || 1 / c === 1 / b) || c !== c && b !== b;
    }
    var Ob = typeof Object.is == "function" ? Object.is : wz;
    function Le(c, b) {
      if (Ob(c, b))
        return !0;
      if (typeof c != "object" || c === null || typeof b != "object" || b === null)
        return !1;
      var d = Object.keys(c), o = Object.keys(b);
      if (d.length !== o.length)
        return !1;
      for (var e = 0; e < d.length; e++) {
        var L = d[e];
        if (!Jl.call(b, L) || !Ob(c[L], b[L]))
          return !1;
      }
      return !0;
    }
    function u0(c) {
      for (; c && c.firstChild; )
        c = c.firstChild;
      return c;
    }
    function zz(c) {
      for (; c; ) {
        if (c.nextSibling)
          return c.nextSibling;
        c = c.parentNode;
      }
    }
    function s0(c, b) {
      for (var d = u0(c), o = 0, e = 0; d; ) {
        if (d.nodeType === rs) {
          if (e = o + d.textContent.length, o <= b && e >= b)
            return {
              node: d,
              offset: b - o
            };
          o = e;
        }
        d = u0(zz(d));
      }
    }
    function Jz(c) {
      var b = c.ownerDocument, d = b && b.defaultView || window, o = d.getSelection && d.getSelection();
      if (!o || o.rangeCount === 0)
        return null;
      var e = o.anchorNode, L = o.anchorOffset, X = o.focusNode, K = o.focusOffset;
      try {
        e.nodeType, X.nodeType;
      } catch {
        return null;
      }
      return Hz(c, e, L, X, K);
    }
    function Hz(c, b, d, o, e) {
      var L = 0, X = -1, K = -1, Y = 0, N = 0, H = c, q = null;
      l: for (; ; ) {
        for (var $ = null; H === b && (d === 0 || H.nodeType === rs) && (X = L + d), H === o && (e === 0 || H.nodeType === rs) && (K = L + e), H.nodeType === rs && (L += H.nodeValue.length), ($ = H.firstChild) !== null; )
          q = H, H = $;
        for (; ; ) {
          if (H === c)
            break l;
          if (q === b && ++Y === d && (X = L), q === o && ++N === e && (K = L), ($ = H.nextSibling) !== null)
            break;
          H = q, q = H.parentNode;
        }
        H = $;
      }
      return X === -1 || K === -1 ? null : {
        start: X,
        end: K
      };
    }
    function gz(c, b) {
      var d = c.ownerDocument || document, o = d && d.defaultView || window;
      if (o.getSelection) {
        var e = o.getSelection(), L = c.textContent.length, X = Math.min(b.start, L), K = b.end === void 0 ? X : Math.min(b.end, L);
        if (!e.extend && X > K) {
          var Y = K;
          K = X, X = Y;
        }
        var N = s0(c, X), H = s0(c, K);
        if (N && H) {
          if (e.rangeCount === 1 && e.anchorNode === N.node && e.anchorOffset === N.offset && e.focusNode === H.node && e.focusOffset === H.offset)
            return;
          var q = d.createRange();
          q.setStart(N.node, N.offset), e.removeAllRanges(), X > K ? (e.addRange(q), e.extend(H.node, H.offset)) : (q.setEnd(H.node, H.offset), e.addRange(q));
        }
      }
    }
    function d0(c) {
      return c && c.nodeType === rs;
    }
    function G0(c, b) {
      return !c || !b ? !1 : c === b ? !0 : d0(c) ? !1 : d0(b) ? G0(c, b.parentNode) : "contains" in c ? c.contains(b) : c.compareDocumentPosition ? !!(c.compareDocumentPosition(b) & 16) : !1;
    }
    function vz(c) {
      return c && c.ownerDocument && G0(c.ownerDocument.documentElement, c);
    }
    function Tz(c) {
      try {
        return typeof c.contentWindow.location.href == "string";
      } catch {
        return !1;
      }
    }
    function m0() {
      for (var c = window, b = kd(); b instanceof c.HTMLIFrameElement; ) {
        if (Tz(b))
          c = b.contentWindow;
        else
          return b;
        b = kd(c.document);
      }
      return b;
    }
    function US(c) {
      var b = c && c.nodeName && c.nodeName.toLowerCase();
      return b && (b === "input" && (c.type === "text" || c.type === "search" || c.type === "tel" || c.type === "url" || c.type === "password") || b === "textarea" || c.contentEditable === "true");
    }
    function fz() {
      var c = m0();
      return {
        focusedElem: c,
        selectionRange: US(c) ? Bz(c) : null
      };
    }
    function Ez(c) {
      var b = m0(), d = c.focusedElem, o = c.selectionRange;
      if (b !== d && vz(d)) {
        o !== null && US(d) && Dz(d, o);
        for (var e = [], L = d; L = L.parentNode; )
          L.nodeType === Ub && e.push({
            element: L,
            left: L.scrollLeft,
            top: L.scrollTop
          });
        typeof d.focus == "function" && d.focus();
        for (var X = 0; X < e.length; X++) {
          var K = e[X];
          K.element.scrollLeft = K.left, K.element.scrollTop = K.top;
        }
      }
    }
    function Bz(c) {
      var b;
      return "selectionStart" in c ? b = {
        start: c.selectionStart,
        end: c.selectionEnd
      } : b = Jz(c), b || {
        start: 0,
        end: 0
      };
    }
    function Dz(c, b) {
      var d = b.start, o = b.end;
      o === void 0 && (o = d), "selectionStart" in c ? (c.selectionStart = d, c.selectionEnd = Math.min(o, c.value.length)) : gz(c, b);
    }
    var jz = wl && "documentMode" in document && document.documentMode <= 11;
    function Qz() {
      hl("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
    }
    var si = null, CS = null, he = null, rS = !1;
    function Pz(c) {
      if ("selectionStart" in c && US(c))
        return {
          start: c.selectionStart,
          end: c.selectionEnd
        };
      var b = c.ownerDocument && c.ownerDocument.defaultView || window, d = b.getSelection();
      return {
        anchorNode: d.anchorNode,
        anchorOffset: d.anchorOffset,
        focusNode: d.focusNode,
        focusOffset: d.focusOffset
      };
    }
    function Oz(c) {
      return c.window === c ? c.document : c.nodeType === Fs ? c : c.ownerDocument;
    }
    function i0(c, b, d) {
      var o = Oz(d);
      if (!(rS || si == null || si !== kd(o))) {
        var e = Pz(si);
        if (!he || !Le(he, e)) {
          he = e;
          var L = ap(CS, "onSelect");
          if (L.length > 0) {
            var X = new xS("onSelect", "select", null, b, d);
            c.push({
              event: X,
              listeners: L
            }), X.target = si;
          }
        }
      }
    }
    function Az(c, b, d, o, e, L, X) {
      var K = d ? oi(d) : window;
      switch (b) {
        case "focusin":
          (_5(K) || K.contentEditable === "true") && (si = K, CS = d, he = null);
          break;
        case "focusout":
          si = null, CS = null, he = null;
          break;
        case "mousedown":
          rS = !0;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          rS = !1, i0(c, o, e);
          break;
        case "selectionchange":
          if (jz)
            break;
        case "keydown":
        case "keyup":
          i0(c, o, e);
      }
    }
    function ip(c, b) {
      var d = {};
      return d[c.toLowerCase()] = b.toLowerCase(), d["Webkit" + c] = "webkit" + b, d["Moz" + c] = "moz" + b, d;
    }
    var di = {
      animationend: ip("Animation", "AnimationEnd"),
      animationiteration: ip("Animation", "AnimationIteration"),
      animationstart: ip("Animation", "AnimationStart"),
      transitionend: ip("Transition", "TransitionEnd")
    }, FS = {}, o0 = {};
    wl && (o0 = document.createElement("div").style, "AnimationEvent" in window || (delete di.animationend.animation, delete di.animationiteration.animation, delete di.animationstart.animation), "TransitionEvent" in window || delete di.transitionend.transition);
    function op(c) {
      if (FS[c])
        return FS[c];
      if (!di[c])
        return c;
      var b = di[c];
      for (var d in b)
        if (b.hasOwnProperty(d) && d in o0)
          return FS[c] = b[d];
      return c;
    }
    var e0 = op("animationend"), a0 = op("animationiteration"), n0 = op("animationstart"), p0 = op("transitionend"), L0 = /* @__PURE__ */ new Map(), h0 = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
    function Nd(c, b) {
      L0.set(c, b), hl(b, [c]);
    }
    function $z() {
      for (var c = 0; c < h0.length; c++) {
        var b = h0[c], d = b.toLowerCase(), o = b[0].toUpperCase() + b.slice(1);
        Nd(d, "on" + o);
      }
      Nd(e0, "onAnimationEnd"), Nd(a0, "onAnimationIteration"), Nd(n0, "onAnimationStart"), Nd("dblclick", "onDoubleClick"), Nd("focusin", "onFocus"), Nd("focusout", "onBlur"), Nd(p0, "onTransitionEnd");
    }
    function qz(c, b, d, o, e, L, X) {
      var K = L0.get(b);
      if (K !== void 0) {
        var Y = xS, N = b;
        switch (b) {
          case "keypress":
            if (sp(o) === 0)
              return;
          case "keydown":
          case "keyup":
            Y = _w;
            break;
          case "focusin":
            N = "focus", Y = kS;
            break;
          case "focusout":
            N = "blur", Y = kS;
            break;
          case "beforeblur":
          case "afterblur":
            Y = kS;
            break;
          case "click":
            if (o.button === 2)
              return;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            Y = f5;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            Y = gw;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            Y = cz;
            break;
          case e0:
          case a0:
          case n0:
            Y = fw;
            break;
          case p0:
            Y = uz;
            break;
          case "scroll":
            Y = zw;
            break;
          case "wheel":
            Y = dz;
            break;
          case "copy":
          case "cut":
          case "paste":
            Y = Bw;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            Y = B5;
            break;
        }
        var H = (L & To) !== 0;
        {
          var q = !H && // TODO: ideally, we'd eventually add all events from
          // nonDelegatedEvents list in DOMPluginEventSystem.
          // Then we can remove this special list.
          // This is a breaking change that can wait until React 18.
          b === "scroll", $ = cJ(d, K, o.type, H, q);
          if ($.length > 0) {
            var sl = new Y(K, N, null, o, e);
            c.push({
              event: sl,
              listeners: $
            });
          }
        }
      }
    }
    $z(), Fz(), Xz(), Qz(), iz();
    function _z(c, b, d, o, e, L, X) {
      qz(c, b, d, o, e, L);
      var K = (L & PF) === 0;
      K && (Nz(c, b, d, o, e), rz(c, b, d, o, e), Az(c, b, d, o, e), yz(c, b, d, o, e));
    }
    var ye = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"], NS = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(ye));
    function y0(c, b, d) {
      var o = c.type || "unknown-event";
      c.currentTarget = d, dN(o, b, void 0, c), c.currentTarget = null;
    }
    function lJ(c, b, d) {
      var o;
      if (d)
        for (var e = b.length - 1; e >= 0; e--) {
          var L = b[e], X = L.instance, K = L.currentTarget, Y = L.listener;
          if (X !== o && c.isPropagationStopped())
            return;
          y0(c, Y, K), o = X;
        }
      else
        for (var N = 0; N < b.length; N++) {
          var H = b[N], q = H.instance, $ = H.currentTarget, sl = H.listener;
          if (q !== o && c.isPropagationStopped())
            return;
          y0(c, sl, $), o = q;
        }
    }
    function S0(c, b) {
      for (var d = (b & To) !== 0, o = 0; o < c.length; o++) {
        var e = c[o], L = e.event, X = e.listeners;
        lJ(L, X, d);
      }
      GN();
    }
    function ZJ(c, b, d, o, e) {
      var L = Iy(d), X = [];
      _z(X, c, o, d, L, b), S0(X, b);
    }
    function $Z(c, b) {
      NS.has(c) || m('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', c);
      var d = !1, o = CH(b), e = sJ(c);
      o.has(e) || (t0(b, c, My, d), o.add(e));
    }
    function wS(c, b, d) {
      NS.has(c) && !b && m('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', c);
      var o = 0;
      b && (o |= To), t0(d, c, o, b);
    }
    var ep = "_reactListening" + Math.random().toString(36).slice(2);
    function Se(c) {
      if (!c[ep]) {
        c[ep] = !0, Vl.forEach(function(d) {
          d !== "selectionchange" && (NS.has(d) || wS(d, !1, c), wS(d, !0, c));
        });
        var b = c.nodeType === Fs ? c : c.ownerDocument;
        b !== null && (b[ep] || (b[ep] = !0, wS("selectionchange", !1, b)));
      }
    }
    function t0(c, b, d, o, e) {
      var L = Yw(c, b, d), X = void 0;
      ry && (b === "touchstart" || b === "touchmove" || b === "wheel") && (X = !0), c = c, o ? X !== void 0 ? rw(c, b, L, X) : Cw(c, b, L) : X !== void 0 ? Fw(c, b, L, X) : Uw(c, b, L);
    }
    function X0(c, b) {
      return c === b || c.nodeType === tc && c.parentNode === b;
    }
    function zS(c, b, d, o, e) {
      var L = o;
      if (!(b & Ox) && !(b & My)) {
        var X = e;
        if (o !== null) {
          var K = o;
          l: for (; ; ) {
            if (K === null)
              return;
            var Y = K.tag;
            if (Y === h || Y === S) {
              var N = K.stateNode.containerInfo;
              if (X0(N, X))
                break;
              if (Y === S)
                for (var H = K.return; H !== null; ) {
                  var q = H.tag;
                  if (q === h || q === S) {
                    var $ = H.stateNode.containerInfo;
                    if (X0($, X))
                      return;
                  }
                  H = H.return;
                }
              for (; N !== null; ) {
                var sl = fG(N);
                if (sl === null)
                  return;
                var Gl = sl.tag;
                if (Gl === t || Gl === W) {
                  K = L = sl;
                  continue l;
                }
                N = N.parentNode;
              }
            }
            K = K.return;
          }
        }
      }
      Z5(function() {
        return ZJ(c, b, d, L);
      });
    }
    function te(c, b, d) {
      return {
        instance: c,
        listener: b,
        currentTarget: d
      };
    }
    function cJ(c, b, d, o, e, L) {
      for (var X = b !== null ? b + "Capture" : null, K = o ? X : b, Y = [], N = c, H = null; N !== null; ) {
        var q = N, $ = q.stateNode, sl = q.tag;
        if (sl === t && $ !== null && (H = $, K !== null)) {
          var Gl = Eo(N, K);
          Gl != null && Y.push(te(N, Gl, H));
        }
        if (e)
          break;
        N = N.return;
      }
      return Y;
    }
    function ap(c, b) {
      for (var d = b + "Capture", o = [], e = c; e !== null; ) {
        var L = e, X = L.stateNode, K = L.tag;
        if (K === t && X !== null) {
          var Y = X, N = Eo(e, d);
          N != null && o.unshift(te(e, N, Y));
          var H = Eo(e, b);
          H != null && o.push(te(e, H, Y));
        }
        e = e.return;
      }
      return o;
    }
    function Gi(c) {
      if (c === null)
        return null;
      do
        c = c.return;
      while (c && c.tag !== t);
      return c || null;
    }
    function bJ(c, b) {
      for (var d = c, o = b, e = 0, L = d; L; L = Gi(L))
        e++;
      for (var X = 0, K = o; K; K = Gi(K))
        X++;
      for (; e - X > 0; )
        d = Gi(d), e--;
      for (; X - e > 0; )
        o = Gi(o), X--;
      for (var Y = e; Y--; ) {
        if (d === o || o !== null && d === o.alternate)
          return d;
        d = Gi(d), o = Gi(o);
      }
      return null;
    }
    function K0(c, b, d, o, e) {
      for (var L = b._reactName, X = [], K = d; K !== null && K !== o; ) {
        var Y = K, N = Y.alternate, H = Y.stateNode, q = Y.tag;
        if (N !== null && N === o)
          break;
        if (q === t && H !== null) {
          var $ = H;
          if (e) {
            var sl = Eo(K, L);
            sl != null && X.unshift(te(K, sl, $));
          } else if (!e) {
            var Gl = Eo(K, L);
            Gl != null && X.push(te(K, Gl, $));
          }
        }
        K = K.return;
      }
      X.length !== 0 && c.push({
        event: b,
        listeners: X
      });
    }
    function uJ(c, b, d, o, e) {
      var L = o && e ? bJ(o, e) : null;
      o !== null && K0(c, b, o, L, !1), e !== null && d !== null && K0(c, d, e, L, !0);
    }
    function sJ(c, b) {
      return c + "__bubble";
    }
    var Cb = !1, Xe = "dangerouslySetInnerHTML", np = "suppressContentEditableWarning", wd = "suppressHydrationWarning", W0 = "autoFocus", vG = "children", TG = "style", pp = "__html", JS, Lp, Ke, V0, hp, x0, R0;
    JS = {
      // There are working polyfills for <dialog>. Let people use it.
      dialog: !0,
      // Electron ships a custom <webview> tag to display external web content in
      // an isolated frame and process.
      // This tag is not present in non Electron environments such as JSDom which
      // is often used for testing purposes.
      // @see https://electronjs.org/docs/api/webview-tag
      webview: !0
    }, Lp = function(c, b) {
      TF(c, b), fF(c, b), QF(c, b, {
        registrationNameDependencies: el,
        possibleRegistrationNames: xl
      });
    }, x0 = wl && !document.documentMode, Ke = function(c, b, d) {
      if (!Cb) {
        var o = yp(d), e = yp(b);
        e !== o && (Cb = !0, m("Prop `%s` did not match. Server: %s Client: %s", c, JSON.stringify(e), JSON.stringify(o)));
      }
    }, V0 = function(c) {
      if (!Cb) {
        Cb = !0;
        var b = [];
        c.forEach(function(d) {
          b.push(d);
        }), m("Extra attributes from the server: %s", b);
      }
    }, hp = function(c, b) {
      b === !1 ? m("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", c, c, c) : m("Expected `%s` listener to be a function, instead got a value of `%s` type.", c, typeof b);
    }, R0 = function(c, b) {
      var d = c.namespaceURI === Cs ? c.ownerDocument.createElement(c.tagName) : c.ownerDocument.createElementNS(c.namespaceURI, c.tagName);
      return d.innerHTML = b, d.innerHTML;
    };
    var dJ = /\r\n?/g, GJ = /\u0000|\uFFFD/g;
    function yp(c) {
      Nc(c);
      var b = typeof c == "string" ? c : "" + c;
      return b.replace(dJ, `
`).replace(GJ, "");
    }
    function Sp(c, b, d, o) {
      var e = yp(b), L = yp(c);
      if (L !== e && (o && (Cb || (Cb = !0, m('Text content did not match. Server: "%s" Client: "%s"', L, e))), d && f))
        throw new Error("Text content does not match server-rendered HTML.");
    }
    function Y0(c) {
      return c.nodeType === Fs ? c : c.ownerDocument;
    }
    function mJ() {
    }
    function tp(c) {
      c.onclick = mJ;
    }
    function iJ(c, b, d, o, e) {
      for (var L in o)
        if (o.hasOwnProperty(L)) {
          var X = o[L];
          if (L === TG)
            X && Object.freeze(X), Ex(b, X);
          else if (L === Xe) {
            var K = X ? X[pp] : void 0;
            K != null && Hx(b, K);
          } else if (L === vG)
            if (typeof X == "string") {
              var Y = c !== "textarea" || X !== "";
              Y && Tn(b, X);
            } else typeof X == "number" && Tn(b, "" + X);
          else L === np || L === wd || L === W0 || (el.hasOwnProperty(L) ? X != null && (typeof X != "function" && hp(L, X), L === "onScroll" && $Z("scroll", b)) : X != null && Ku(b, L, X, e));
        }
    }
    function oJ(c, b, d, o) {
      for (var e = 0; e < b.length; e += 2) {
        var L = b[e], X = b[e + 1];
        L === TG ? Ex(c, X) : L === Xe ? Hx(c, X) : L === vG ? Tn(c, X) : Ku(c, L, X, o);
      }
    }
    function eJ(c, b, d, o) {
      var e, L = Y0(d), X, K = o;
      if (K === Cs && (K = Wy(c)), K === Cs) {
        if (e = IG(c, b), !e && c !== c.toLowerCase() && m("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", c), c === "script") {
          var Y = L.createElement("div");
          Y.innerHTML = "<script><\/script>";
          var N = Y.firstChild;
          X = Y.removeChild(N);
        } else if (typeof b.is == "string")
          X = L.createElement(c, {
            is: b.is
          });
        else if (X = L.createElement(c), c === "select") {
          var H = X;
          b.multiple ? H.multiple = !0 : b.size && (H.size = b.size);
        }
      } else
        X = L.createElementNS(K, c);
      return K === Cs && !e && Object.prototype.toString.call(X) === "[object HTMLUnknownElement]" && !Jl.call(JS, c) && (JS[c] = !0, m("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", c)), X;
    }
    function aJ(c, b) {
      return Y0(b).createTextNode(c);
    }
    function nJ(c, b, d, o) {
      var e = IG(b, d);
      Lp(b, d);
      var L;
      switch (b) {
        case "dialog":
          $Z("cancel", c), $Z("close", c), L = d;
          break;
        case "iframe":
        case "object":
        case "embed":
          $Z("load", c), L = d;
          break;
        case "video":
        case "audio":
          for (var X = 0; X < ye.length; X++)
            $Z(ye[X], c);
          L = d;
          break;
        case "source":
          $Z("error", c), L = d;
          break;
        case "img":
        case "image":
        case "link":
          $Z("error", c), $Z("load", c), L = d;
          break;
        case "details":
          $Z("toggle", c), L = d;
          break;
        case "input":
          Q(c, d), L = I(c, d), $Z("invalid", c);
          break;
        case "option":
          fZ(c, d), L = d;
          break;
        case "select":
          go(c, d), L = Ho(c, d), $Z("invalid", c);
          break;
        case "textarea":
          wx(c, d), L = Xy(c, d), $Z("invalid", c);
          break;
        default:
          L = d;
      }
      switch (ky(b, L), iJ(b, c, o, L, e), b) {
        case "input":
          Is(c), Yl(c, d, !1);
          break;
        case "textarea":
          Is(c), Jx(c);
          break;
        case "option":
          AZ(c, d);
          break;
        case "select":
          ty(c, d);
          break;
        default:
          typeof L.onClick == "function" && tp(c);
          break;
      }
    }
    function pJ(c, b, d, o, e) {
      Lp(b, o);
      var L = null, X, K;
      switch (b) {
        case "input":
          X = I(c, d), K = I(c, o), L = [];
          break;
        case "select":
          X = Ho(c, d), K = Ho(c, o), L = [];
          break;
        case "textarea":
          X = Xy(c, d), K = Xy(c, o), L = [];
          break;
        default:
          X = d, K = o, typeof X.onClick != "function" && typeof K.onClick == "function" && tp(c);
          break;
      }
      ky(b, K);
      var Y, N, H = null;
      for (Y in X)
        if (!(K.hasOwnProperty(Y) || !X.hasOwnProperty(Y) || X[Y] == null))
          if (Y === TG) {
            var q = X[Y];
            for (N in q)
              q.hasOwnProperty(N) && (H || (H = {}), H[N] = "");
          } else Y === Xe || Y === vG || Y === np || Y === wd || Y === W0 || (el.hasOwnProperty(Y) ? L || (L = []) : (L = L || []).push(Y, null));
      for (Y in K) {
        var $ = K[Y], sl = X != null ? X[Y] : void 0;
        if (!(!K.hasOwnProperty(Y) || $ === sl || $ == null && sl == null))
          if (Y === TG)
            if ($ && Object.freeze($), sl) {
              for (N in sl)
                sl.hasOwnProperty(N) && (!$ || !$.hasOwnProperty(N)) && (H || (H = {}), H[N] = "");
              for (N in $)
                $.hasOwnProperty(N) && sl[N] !== $[N] && (H || (H = {}), H[N] = $[N]);
            } else
              H || (L || (L = []), L.push(Y, H)), H = $;
          else if (Y === Xe) {
            var Gl = $ ? $[pp] : void 0, nl = sl ? sl[pp] : void 0;
            Gl != null && nl !== Gl && (L = L || []).push(Y, Gl);
          } else Y === vG ? (typeof $ == "string" || typeof $ == "number") && (L = L || []).push(Y, "" + $) : Y === np || Y === wd || (el.hasOwnProperty(Y) ? ($ != null && (typeof $ != "function" && hp(Y, $), Y === "onScroll" && $Z("scroll", c)), !L && sl !== $ && (L = [])) : (L = L || []).push(Y, $));
      }
      return H && (FF(H, K[TG]), (L = L || []).push(TG, H)), L;
    }
    function LJ(c, b, d, o, e) {
      d === "input" && e.type === "radio" && e.name != null && dl(c, e);
      var L = IG(d, o), X = IG(d, e);
      switch (oJ(c, b, L, X), d) {
        case "input":
          al(c, e);
          break;
        case "textarea":
          zx(c, e);
          break;
        case "select":
          oF(c, e);
          break;
      }
    }
    function hJ(c) {
      {
        var b = c.toLowerCase();
        return fn.hasOwnProperty(b) && fn[b] || null;
      }
    }
    function yJ(c, b, d, o, e, L, X) {
      var K, Y;
      switch (K = IG(b, d), Lp(b, d), b) {
        case "dialog":
          $Z("cancel", c), $Z("close", c);
          break;
        case "iframe":
        case "object":
        case "embed":
          $Z("load", c);
          break;
        case "video":
        case "audio":
          for (var N = 0; N < ye.length; N++)
            $Z(ye[N], c);
          break;
        case "source":
          $Z("error", c);
          break;
        case "img":
        case "image":
        case "link":
          $Z("error", c), $Z("load", c);
          break;
        case "details":
          $Z("toggle", c);
          break;
        case "input":
          Q(c, d), $Z("invalid", c);
          break;
        case "option":
          fZ(c, d);
          break;
        case "select":
          go(c, d), $Z("invalid", c);
          break;
        case "textarea":
          wx(c, d), $Z("invalid", c);
          break;
      }
      ky(b, d);
      {
        Y = /* @__PURE__ */ new Set();
        for (var H = c.attributes, q = 0; q < H.length; q++) {
          var $ = H[q].name.toLowerCase();
          switch ($) {
            case "value":
              break;
            case "checked":
              break;
            case "selected":
              break;
            default:
              Y.add(H[q].name);
          }
        }
      }
      var sl = null;
      for (var Gl in d)
        if (d.hasOwnProperty(Gl)) {
          var nl = d[Gl];
          if (Gl === vG)
            typeof nl == "string" ? c.textContent !== nl && (d[wd] !== !0 && Sp(c.textContent, nl, L, X), sl = [vG, nl]) : typeof nl == "number" && c.textContent !== "" + nl && (d[wd] !== !0 && Sp(c.textContent, nl, L, X), sl = [vG, "" + nl]);
          else if (el.hasOwnProperty(Gl))
            nl != null && (typeof nl != "function" && hp(Gl, nl), Gl === "onScroll" && $Z("scroll", c));
          else if (X && // Convince Flow we've calculated it (it's DEV-only in this method.)
          typeof K == "boolean") {
            var Ul = void 0, Dl = K && Wl ? null : pb(Gl);
            if (d[wd] !== !0) {
              if (!(Gl === np || Gl === wd || // Controlled attributes are not validated
              // TODO: Only ignore them on controlled tags.
              Gl === "value" || Gl === "checked" || Gl === "selected")) {
                if (Gl === Xe) {
                  var fl = c.innerHTML, hZ = nl ? nl[pp] : void 0;
                  if (hZ != null) {
                    var eZ = R0(c, hZ);
                    eZ !== fl && Ke(Gl, fl, eZ);
                  }
                } else if (Gl === TG) {
                  if (Y.delete(Gl), x0) {
                    var bl = CF(nl);
                    Ul = c.getAttribute("style"), bl !== Ul && Ke(Gl, Ul, bl);
                  }
                } else if (K && !Wl)
                  Y.delete(Gl.toLowerCase()), Ul = Qu(c, Gl, nl), nl !== Ul && Ke(Gl, Ul, nl);
                else if (!Zc(Gl, Dl, K) && !zZ(Gl, nl, Dl, K)) {
                  var pl = !1;
                  if (Dl !== null)
                    Y.delete(Dl.attributeName), Ul = Xu(c, Gl, nl, Dl);
                  else {
                    var ul = o;
                    if (ul === Cs && (ul = Wy(b)), ul === Cs)
                      Y.delete(Gl.toLowerCase());
                    else {
                      var Xl = hJ(Gl);
                      Xl !== null && Xl !== Gl && (pl = !0, Y.delete(Xl)), Y.delete(Gl);
                    }
                    Ul = Qu(c, Gl, nl);
                  }
                  var Nl = Wl;
                  !Nl && nl !== Ul && !pl && Ke(Gl, Ul, nl);
                }
              }
            }
          }
        }
      switch (X && // $FlowFixMe - Should be inferred as not undefined.
      Y.size > 0 && d[wd] !== !0 && V0(Y), b) {
        case "input":
          Is(c), Yl(c, d, !0);
          break;
        case "textarea":
          Is(c), Jx(c);
          break;
        case "select":
        case "option":
          break;
        default:
          typeof d.onClick == "function" && tp(c);
          break;
      }
      return sl;
    }
    function SJ(c, b, d) {
      var o = c.nodeValue !== b;
      return o;
    }
    function HS(c, b) {
      {
        if (Cb)
          return;
        Cb = !0, m("Did not expect server HTML to contain a <%s> in <%s>.", b.nodeName.toLowerCase(), c.nodeName.toLowerCase());
      }
    }
    function gS(c, b) {
      {
        if (Cb)
          return;
        Cb = !0, m('Did not expect server HTML to contain the text node "%s" in <%s>.', b.nodeValue, c.nodeName.toLowerCase());
      }
    }
    function vS(c, b, d) {
      {
        if (Cb)
          return;
        Cb = !0, m("Expected server HTML to contain a matching <%s> in <%s>.", b, c.nodeName.toLowerCase());
      }
    }
    function TS(c, b) {
      {
        if (b === "" || Cb)
          return;
        Cb = !0, m('Expected server HTML to contain a matching text node for "%s" in <%s>.', b, c.nodeName.toLowerCase());
      }
    }
    function tJ(c, b, d) {
      switch (b) {
        case "input":
          Ol(c, d);
          return;
        case "textarea":
          aF(c, d);
          return;
        case "select":
          eF(c, d);
          return;
      }
    }
    var We = function() {
    }, Ve = function() {
    };
    {
      var XJ = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"], k0 = [
        "applet",
        "caption",
        "html",
        "table",
        "td",
        "th",
        "marquee",
        "object",
        "template",
        // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        "foreignObject",
        "desc",
        "title"
      ], KJ = k0.concat(["button"]), WJ = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"], M0 = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
      };
      Ve = function(c, b) {
        var d = GZ({}, c || M0), o = {
          tag: b
        };
        return k0.indexOf(b) !== -1 && (d.aTagInScope = null, d.buttonTagInScope = null, d.nobrTagInScope = null), KJ.indexOf(b) !== -1 && (d.pTagInButtonScope = null), XJ.indexOf(b) !== -1 && b !== "address" && b !== "div" && b !== "p" && (d.listItemTagAutoclosing = null, d.dlItemTagAutoclosing = null), d.current = o, b === "form" && (d.formTag = o), b === "a" && (d.aTagInScope = o), b === "button" && (d.buttonTagInScope = o), b === "nobr" && (d.nobrTagInScope = o), b === "p" && (d.pTagInButtonScope = o), b === "li" && (d.listItemTagAutoclosing = o), (b === "dd" || b === "dt") && (d.dlItemTagAutoclosing = o), d;
      };
      var VJ = function(c, b) {
        switch (b) {
          case "select":
            return c === "option" || c === "optgroup" || c === "#text";
          case "optgroup":
            return c === "option" || c === "#text";
          case "option":
            return c === "#text";
          case "tr":
            return c === "th" || c === "td" || c === "style" || c === "script" || c === "template";
          case "tbody":
          case "thead":
          case "tfoot":
            return c === "tr" || c === "style" || c === "script" || c === "template";
          case "colgroup":
            return c === "col" || c === "template";
          case "table":
            return c === "caption" || c === "colgroup" || c === "tbody" || c === "tfoot" || c === "thead" || c === "style" || c === "script" || c === "template";
          case "head":
            return c === "base" || c === "basefont" || c === "bgsound" || c === "link" || c === "meta" || c === "title" || c === "noscript" || c === "noframes" || c === "style" || c === "script" || c === "template";
          case "html":
            return c === "head" || c === "body" || c === "frameset";
          case "frameset":
            return c === "frame";
          case "#document":
            return c === "html";
        }
        switch (c) {
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return b !== "h1" && b !== "h2" && b !== "h3" && b !== "h4" && b !== "h5" && b !== "h6";
          case "rp":
          case "rt":
            return WJ.indexOf(b) === -1;
          case "body":
          case "caption":
          case "col":
          case "colgroup":
          case "frameset":
          case "frame":
          case "head":
          case "html":
          case "tbody":
          case "td":
          case "tfoot":
          case "th":
          case "thead":
          case "tr":
            return b == null;
        }
        return !0;
      }, xJ = function(c, b) {
        switch (c) {
          case "address":
          case "article":
          case "aside":
          case "blockquote":
          case "center":
          case "details":
          case "dialog":
          case "dir":
          case "div":
          case "dl":
          case "fieldset":
          case "figcaption":
          case "figure":
          case "footer":
          case "header":
          case "hgroup":
          case "main":
          case "menu":
          case "nav":
          case "ol":
          case "p":
          case "section":
          case "summary":
          case "ul":
          case "pre":
          case "listing":
          case "table":
          case "hr":
          case "xmp":
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return b.pTagInButtonScope;
          case "form":
            return b.formTag || b.pTagInButtonScope;
          case "li":
            return b.listItemTagAutoclosing;
          case "dd":
          case "dt":
            return b.dlItemTagAutoclosing;
          case "button":
            return b.buttonTagInScope;
          case "a":
            return b.aTagInScope;
          case "nobr":
            return b.nobrTagInScope;
        }
        return null;
      }, I0 = {};
      We = function(c, b, d) {
        d = d || M0;
        var o = d.current, e = o && o.tag;
        b != null && (c != null && m("validateDOMNesting: when childText is passed, childTag should be null"), c = "#text");
        var L = VJ(c, e) ? null : o, X = L ? null : xJ(c, d), K = L || X;
        if (K) {
          var Y = K.tag, N = !!L + "|" + c + "|" + Y;
          if (!I0[N]) {
            I0[N] = !0;
            var H = c, q = "";
            if (c === "#text" ? /\S/.test(b) ? H = "Text nodes" : (H = "Whitespace text nodes", q = " Make sure you don't have any extra whitespace between tags on each line of your source code.") : H = "<" + c + ">", L) {
              var $ = "";
              Y === "table" && c === "tr" && ($ += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."), m("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", H, Y, q, $);
            } else
              m("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", H, Y);
          }
        }
      };
    }
    var Xp = "suppressHydrationWarning", Kp = "$", Wp = "/$", xe = "$?", Re = "$!", RJ = "style", fS = null, ES = null;
    function YJ(c) {
      var b, d, o = c.nodeType;
      switch (o) {
        case Fs:
        case xy: {
          b = o === Fs ? "#document" : "#fragment";
          var e = c.documentElement;
          d = e ? e.namespaceURI : Vy(null, "");
          break;
        }
        default: {
          var L = o === tc ? c.parentNode : c, X = L.namespaceURI || null;
          b = L.tagName, d = Vy(X, b);
          break;
        }
      }
      {
        var K = b.toLowerCase(), Y = Ve(null, K);
        return {
          namespace: d,
          ancestorInfo: Y
        };
      }
    }
    function kJ(c, b, d) {
      {
        var o = c, e = Vy(o.namespace, b), L = Ve(o.ancestorInfo, b);
        return {
          namespace: e,
          ancestorInfo: L
        };
      }
    }
    function R_(c) {
      return c;
    }
    function MJ(c) {
      fS = Rw(), ES = fz();
      var b = null;
      return J5(!1), b;
    }
    function IJ(c) {
      Ez(ES), J5(fS), fS = null, ES = null;
    }
    function UJ(c, b, d, o, e) {
      var L;
      {
        var X = o;
        if (We(c, null, X.ancestorInfo), typeof b.children == "string" || typeof b.children == "number") {
          var K = "" + b.children, Y = Ve(X.ancestorInfo, c);
          We(null, K, Y);
        }
        L = X.namespace;
      }
      var N = eJ(c, b, d, L);
      return Me(e, N), $S(N, b), N;
    }
    function CJ(c, b) {
      c.appendChild(b);
    }
    function rJ(c, b, d, o, e) {
      switch (nJ(c, b, d, o), b) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          return !!d.autoFocus;
        case "img":
          return !0;
        default:
          return !1;
      }
    }
    function FJ(c, b, d, o, e, L) {
      {
        var X = L;
        if (typeof o.children != typeof d.children && (typeof o.children == "string" || typeof o.children == "number")) {
          var K = "" + o.children, Y = Ve(X.ancestorInfo, b);
          We(null, K, Y);
        }
      }
      return pJ(c, b, d, o);
    }
    function BS(c, b) {
      return c === "textarea" || c === "noscript" || typeof b.children == "string" || typeof b.children == "number" || typeof b.dangerouslySetInnerHTML == "object" && b.dangerouslySetInnerHTML !== null && b.dangerouslySetInnerHTML.__html != null;
    }
    function NJ(c, b, d, o) {
      {
        var e = d;
        We(null, c, e.ancestorInfo);
      }
      var L = aJ(c, b);
      return Me(o, L), L;
    }
    function wJ() {
      var c = window.event;
      return c === void 0 ? vs : H5(c.type);
    }
    var DS = typeof setTimeout == "function" ? setTimeout : void 0, zJ = typeof clearTimeout == "function" ? clearTimeout : void 0, jS = -1, U0 = typeof Promise == "function" ? Promise : void 0, JJ = typeof queueMicrotask == "function" ? queueMicrotask : typeof U0 < "u" ? function(c) {
      return U0.resolve(null).then(c).catch(HJ);
    } : DS;
    function HJ(c) {
      setTimeout(function() {
        throw c;
      });
    }
    function gJ(c, b, d, o) {
      switch (b) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          d.autoFocus && c.focus();
          return;
        case "img": {
          d.src && (c.src = d.src);
          return;
        }
      }
    }
    function vJ(c, b, d, o, e, L) {
      LJ(c, b, d, o, e), $S(c, e);
    }
    function C0(c) {
      Tn(c, "");
    }
    function TJ(c, b, d) {
      c.nodeValue = d;
    }
    function fJ(c, b) {
      c.appendChild(b);
    }
    function EJ(c, b) {
      var d;
      c.nodeType === tc ? (d = c.parentNode, d.insertBefore(b, c)) : (d = c, d.appendChild(b));
      var o = c._reactRootContainer;
      o == null && d.onclick === null && tp(d);
    }
    function BJ(c, b, d) {
      c.insertBefore(b, d);
    }
    function DJ(c, b, d) {
      c.nodeType === tc ? c.parentNode.insertBefore(b, d) : c.insertBefore(b, d);
    }
    function jJ(c, b) {
      c.removeChild(b);
    }
    function QJ(c, b) {
      c.nodeType === tc ? c.parentNode.removeChild(b) : c.removeChild(b);
    }
    function QS(c, b) {
      var d = b, o = 0;
      do {
        var e = d.nextSibling;
        if (c.removeChild(d), e && e.nodeType === tc) {
          var L = e.data;
          if (L === Wp)
            if (o === 0) {
              c.removeChild(e), Ge(b);
              return;
            } else
              o--;
          else (L === Kp || L === xe || L === Re) && o++;
        }
        d = e;
      } while (d);
      Ge(b);
    }
    function PJ(c, b) {
      c.nodeType === tc ? QS(c.parentNode, b) : c.nodeType === Ub && QS(c, b), Ge(c);
    }
    function OJ(c) {
      c = c;
      var b = c.style;
      typeof b.setProperty == "function" ? b.setProperty("display", "none", "important") : b.display = "none";
    }
    function AJ(c) {
      c.nodeValue = "";
    }
    function $J(c, b) {
      c = c;
      var d = b[RJ], o = d != null && d.hasOwnProperty("display") ? d.display : null;
      c.style.display = Ry("display", o);
    }
    function qJ(c, b) {
      c.nodeValue = b;
    }
    function _J(c) {
      c.nodeType === Ub ? c.textContent = "" : c.nodeType === Fs && c.documentElement && c.removeChild(c.documentElement);
    }
    function lH(c, b, d) {
      return c.nodeType !== Ub || b.toLowerCase() !== c.nodeName.toLowerCase() ? null : c;
    }
    function ZH(c, b) {
      return b === "" || c.nodeType !== rs ? null : c;
    }
    function cH(c) {
      return c.nodeType !== tc ? null : c;
    }
    function r0(c) {
      return c.data === xe;
    }
    function PS(c) {
      return c.data === Re;
    }
    function bH(c) {
      var b = c.nextSibling && c.nextSibling.dataset, d, o, e;
      return b && (d = b.dgst, o = b.msg, e = b.stck), {
        message: o,
        digest: d,
        stack: e
      };
    }
    function uH(c, b) {
      c._reactRetry = b;
    }
    function Vp(c) {
      for (; c != null; c = c.nextSibling) {
        var b = c.nodeType;
        if (b === Ub || b === rs)
          break;
        if (b === tc) {
          var d = c.data;
          if (d === Kp || d === Re || d === xe)
            break;
          if (d === Wp)
            return null;
        }
      }
      return c;
    }
    function Ye(c) {
      return Vp(c.nextSibling);
    }
    function sH(c) {
      return Vp(c.firstChild);
    }
    function dH(c) {
      return Vp(c.firstChild);
    }
    function GH(c) {
      return Vp(c.nextSibling);
    }
    function mH(c, b, d, o, e, L, X) {
      Me(L, c), $S(c, d);
      var K;
      {
        var Y = e;
        K = Y.namespace;
      }
      var N = (L.mode & pZ) !== Ql;
      return yJ(c, b, d, K, o, N, X);
    }
    function iH(c, b, d, o) {
      return Me(d, c), d.mode & pZ, SJ(c, b);
    }
    function oH(c, b) {
      Me(b, c);
    }
    function eH(c) {
      for (var b = c.nextSibling, d = 0; b; ) {
        if (b.nodeType === tc) {
          var o = b.data;
          if (o === Wp) {
            if (d === 0)
              return Ye(b);
            d--;
          } else (o === Kp || o === Re || o === xe) && d++;
        }
        b = b.nextSibling;
      }
      return null;
    }
    function F0(c) {
      for (var b = c.previousSibling, d = 0; b; ) {
        if (b.nodeType === tc) {
          var o = b.data;
          if (o === Kp || o === Re || o === xe) {
            if (d === 0)
              return b;
            d--;
          } else o === Wp && d++;
        }
        b = b.previousSibling;
      }
      return null;
    }
    function aH(c) {
      Ge(c);
    }
    function nH(c) {
      Ge(c);
    }
    function pH(c) {
      return c !== "head" && c !== "body";
    }
    function LH(c, b, d, o) {
      var e = !0;
      Sp(b.nodeValue, d, o, e);
    }
    function hH(c, b, d, o, e, L) {
      if (b[Xp] !== !0) {
        var X = !0;
        Sp(o.nodeValue, e, L, X);
      }
    }
    function yH(c, b) {
      b.nodeType === Ub ? HS(c, b) : b.nodeType === tc || gS(c, b);
    }
    function SH(c, b) {
      {
        var d = c.parentNode;
        d !== null && (b.nodeType === Ub ? HS(d, b) : b.nodeType === tc || gS(d, b));
      }
    }
    function tH(c, b, d, o, e) {
      (e || b[Xp] !== !0) && (o.nodeType === Ub ? HS(d, o) : o.nodeType === tc || gS(d, o));
    }
    function XH(c, b, d) {
      vS(c, b);
    }
    function KH(c, b) {
      TS(c, b);
    }
    function WH(c, b, d) {
      {
        var o = c.parentNode;
        o !== null && vS(o, b);
      }
    }
    function VH(c, b) {
      {
        var d = c.parentNode;
        d !== null && TS(d, b);
      }
    }
    function xH(c, b, d, o, e, L) {
      (L || b[Xp] !== !0) && vS(d, o);
    }
    function RH(c, b, d, o, e) {
      (e || b[Xp] !== !0) && TS(d, o);
    }
    function YH(c) {
      m("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", c.nodeName.toLowerCase());
    }
    function kH(c) {
      Se(c);
    }
    var mi = Math.random().toString(36).slice(2), ii = "__reactFiber$" + mi, OS = "__reactProps$" + mi, ke = "__reactContainer$" + mi, AS = "__reactEvents$" + mi, MH = "__reactListeners$" + mi, IH = "__reactHandles$" + mi;
    function UH(c) {
      delete c[ii], delete c[OS], delete c[AS], delete c[MH], delete c[IH];
    }
    function Me(c, b) {
      b[ii] = c;
    }
    function xp(c, b) {
      b[ke] = c;
    }
    function N0(c) {
      c[ke] = null;
    }
    function Ie(c) {
      return !!c[ke];
    }
    function fG(c) {
      var b = c[ii];
      if (b)
        return b;
      for (var d = c.parentNode; d; ) {
        if (b = d[ke] || d[ii], b) {
          var o = b.alternate;
          if (b.child !== null || o !== null && o.child !== null)
            for (var e = F0(c); e !== null; ) {
              var L = e[ii];
              if (L)
                return L;
              e = F0(e);
            }
          return b;
        }
        c = d, d = c.parentNode;
      }
      return null;
    }
    function zd(c) {
      var b = c[ii] || c[ke];
      return b && (b.tag === t || b.tag === W || b.tag === w || b.tag === h) ? b : null;
    }
    function oi(c) {
      if (c.tag === t || c.tag === W)
        return c.stateNode;
      throw new Error("getNodeFromInstance: Invalid argument.");
    }
    function Rp(c) {
      return c[OS] || null;
    }
    function $S(c, b) {
      c[OS] = b;
    }
    function CH(c) {
      var b = c[AS];
      return b === void 0 && (b = c[AS] = /* @__PURE__ */ new Set()), b;
    }
    var w0 = {}, z0 = u.ReactDebugCurrentFrame;
    function Yp(c) {
      if (c) {
        var b = c._owner, d = xd(c.type, c._source, b ? b.type : null);
        z0.setExtraStackFrame(d);
      } else
        z0.setExtraStackFrame(null);
    }
    function ku(c, b, d, o, e) {
      {
        var L = Function.call.bind(Jl);
        for (var X in c)
          if (L(c, X)) {
            var K = void 0;
            try {
              if (typeof c[X] != "function") {
                var Y = Error((o || "React class") + ": " + d + " type `" + X + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof c[X] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw Y.name = "Invariant Violation", Y;
              }
              K = c[X](b, X, o, d, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (N) {
              K = N;
            }
            K && !(K instanceof Error) && (Yp(e), m("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", o || "React class", d, X, typeof K), Yp(null)), K instanceof Error && !(K.message in w0) && (w0[K.message] = !0, Yp(e), m("Failed %s type: %s", d, K.message), Yp(null));
          }
      }
    }
    var qS = [], kp;
    kp = [];
    var Ts = -1;
    function Jd(c) {
      return {
        current: c
      };
    }
    function db(c, b) {
      if (Ts < 0) {
        m("Unexpected pop.");
        return;
      }
      b !== kp[Ts] && m("Unexpected Fiber popped."), c.current = qS[Ts], qS[Ts] = null, kp[Ts] = null, Ts--;
    }
    function Gb(c, b, d) {
      Ts++, qS[Ts] = c.current, kp[Ts] = d, c.current = b;
    }
    var _S;
    _S = {};
    var Ab = {};
    Object.freeze(Ab);
    var fs = Jd(Ab), ls = Jd(!1), lt = Ab;
    function ei(c, b, d) {
      return d && Zs(b) ? lt : fs.current;
    }
    function J0(c, b, d) {
      {
        var o = c.stateNode;
        o.__reactInternalMemoizedUnmaskedChildContext = b, o.__reactInternalMemoizedMaskedChildContext = d;
      }
    }
    function ai(c, b) {
      {
        var d = c.type, o = d.contextTypes;
        if (!o)
          return Ab;
        var e = c.stateNode;
        if (e && e.__reactInternalMemoizedUnmaskedChildContext === b)
          return e.__reactInternalMemoizedMaskedChildContext;
        var L = {};
        for (var X in o)
          L[X] = b[X];
        {
          var K = bZ(c) || "Unknown";
          ku(o, L, "context", K);
        }
        return e && J0(c, b, L), L;
      }
    }
    function Mp() {
      return ls.current;
    }
    function Zs(c) {
      {
        var b = c.childContextTypes;
        return b != null;
      }
    }
    function Ip(c) {
      db(ls, c), db(fs, c);
    }
    function Zt(c) {
      db(ls, c), db(fs, c);
    }
    function H0(c, b, d) {
      {
        if (fs.current !== Ab)
          throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        Gb(fs, b, c), Gb(ls, d, c);
      }
    }
    function g0(c, b, d) {
      {
        var o = c.stateNode, e = b.childContextTypes;
        if (typeof o.getChildContext != "function") {
          {
            var L = bZ(c) || "Unknown";
            _S[L] || (_S[L] = !0, m("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", L, L));
          }
          return d;
        }
        var X = o.getChildContext();
        for (var K in X)
          if (!(K in e))
            throw new Error((bZ(c) || "Unknown") + '.getChildContext(): key "' + K + '" is not defined in childContextTypes.');
        {
          var Y = bZ(c) || "Unknown";
          ku(e, X, "child context", Y);
        }
        return GZ({}, d, X);
      }
    }
    function Up(c) {
      {
        var b = c.stateNode, d = b && b.__reactInternalMemoizedMergedChildContext || Ab;
        return lt = fs.current, Gb(fs, d, c), Gb(ls, ls.current, c), !0;
      }
    }
    function v0(c, b, d) {
      {
        var o = c.stateNode;
        if (!o)
          throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (d) {
          var e = g0(c, b, lt);
          o.__reactInternalMemoizedMergedChildContext = e, db(ls, c), db(fs, c), Gb(fs, e, c), Gb(ls, d, c);
        } else
          db(ls, c), Gb(ls, d, c);
      }
    }
    function rH(c) {
      {
        if (!pN(c) || c.tag !== p)
          throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var b = c;
        do {
          switch (b.tag) {
            case h:
              return b.stateNode.context;
            case p: {
              var d = b.type;
              if (Zs(d))
                return b.stateNode.__reactInternalMemoizedMergedChildContext;
              break;
            }
          }
          b = b.return;
        } while (b !== null);
        throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    var Hd = 0, Cp = 1, Es = null, ct = !1, bt = !1;
    function T0(c) {
      Es === null ? Es = [c] : Es.push(c);
    }
    function FH(c) {
      ct = !0, T0(c);
    }
    function f0() {
      ct && gd();
    }
    function gd() {
      if (!bt && Es !== null) {
        bt = !0;
        var c = 0, b = Yu();
        try {
          var d = !0, o = Es;
          for (gc(Qb); c < o.length; c++) {
            var e = o[c];
            do
              e = e(d);
            while (e !== null);
          }
          Es = null, ct = !1;
        } catch (L) {
          throw Es !== null && (Es = Es.slice(c + 1)), a5(Qn, gd), L;
        } finally {
          gc(b), bt = !1;
        }
      }
      return null;
    }
    var ni = [], pi = 0, rp = null, Fp = 0, su = [], du = 0, EG = null, Bs = 1, Ds = "";
    function NH(c) {
      return DG(), (c.flags & u5) !== Pl;
    }
    function wH(c) {
      return DG(), Fp;
    }
    function zH() {
      var c = Ds, b = Bs, d = b & ~JH(b);
      return d.toString(32) + c;
    }
    function BG(c, b) {
      DG(), ni[pi++] = Fp, ni[pi++] = rp, rp = c, Fp = b;
    }
    function E0(c, b, d) {
      DG(), su[du++] = Bs, su[du++] = Ds, su[du++] = EG, EG = c;
      var o = Bs, e = Ds, L = Np(o) - 1, X = o & ~(1 << L), K = d + 1, Y = Np(b) + L;
      if (Y > 30) {
        var N = L - L % 5, H = (1 << N) - 1, q = (X & H).toString(32), $ = X >> N, sl = L - N, Gl = Np(b) + sl, nl = K << sl, Ul = nl | $, Dl = q + e;
        Bs = 1 << Gl | Ul, Ds = Dl;
      } else {
        var fl = K << L, hZ = fl | X, eZ = e;
        Bs = 1 << Y | hZ, Ds = eZ;
      }
    }
    function ut(c) {
      DG();
      var b = c.return;
      if (b !== null) {
        var d = 1, o = 0;
        BG(c, d), E0(c, d, o);
      }
    }
    function Np(c) {
      return 32 - S5(c);
    }
    function JH(c) {
      return 1 << Np(c) - 1;
    }
    function st(c) {
      for (; c === rp; )
        rp = ni[--pi], ni[pi] = null, Fp = ni[--pi], ni[pi] = null;
      for (; c === EG; )
        EG = su[--du], su[du] = null, Ds = su[--du], su[du] = null, Bs = su[--du], su[du] = null;
    }
    function HH() {
      return DG(), EG !== null ? {
        id: Bs,
        overflow: Ds
      } : null;
    }
    function gH(c, b) {
      DG(), su[du++] = Bs, su[du++] = Ds, su[du++] = EG, Bs = b.id, Ds = b.overflow, EG = c;
    }
    function DG() {
      Dc() || m("Expected to be hydrating. This is a bug in React. Please file an issue.");
    }
    var Bc = null, Gu = null, Mu = !1, jG = !1, vd = null;
    function vH() {
      Mu && m("We should not be hydrating here. This is a bug in React. Please file a bug.");
    }
    function B0() {
      jG = !0;
    }
    function TH() {
      return jG;
    }
    function fH(c) {
      var b = c.stateNode.containerInfo;
      return Gu = dH(b), Bc = c, Mu = !0, vd = null, jG = !1, !0;
    }
    function EH(c, b, d) {
      return Gu = GH(b), Bc = c, Mu = !0, vd = null, jG = !1, d !== null && gH(c, d), !0;
    }
    function D0(c, b) {
      switch (c.tag) {
        case h: {
          yH(c.stateNode.containerInfo, b);
          break;
        }
        case t: {
          var d = (c.mode & pZ) !== Ql;
          tH(
            c.type,
            c.memoizedProps,
            c.stateNode,
            b,
            // TODO: Delete this argument when we remove the legacy root API.
            d
          );
          break;
        }
        case w: {
          var o = c.memoizedState;
          o.dehydrated !== null && SH(o.dehydrated, b);
          break;
        }
      }
    }
    function j0(c, b) {
      D0(c, b);
      var d = Qv();
      d.stateNode = b, d.return = c;
      var o = c.deletions;
      o === null ? (c.deletions = [d], c.flags |= UG) : o.push(d);
    }
    function dt(c, b) {
      {
        if (jG)
          return;
        switch (c.tag) {
          case h: {
            var d = c.stateNode.containerInfo;
            switch (b.tag) {
              case t:
                var o = b.type;
                b.pendingProps, XH(d, o);
                break;
              case W:
                var e = b.pendingProps;
                KH(d, e);
                break;
            }
            break;
          }
          case t: {
            var L = c.type, X = c.memoizedProps, K = c.stateNode;
            switch (b.tag) {
              case t: {
                var Y = b.type, N = b.pendingProps, H = (c.mode & pZ) !== Ql;
                xH(
                  L,
                  X,
                  K,
                  Y,
                  N,
                  // TODO: Delete this argument when we remove the legacy root API.
                  H
                );
                break;
              }
              case W: {
                var q = b.pendingProps, $ = (c.mode & pZ) !== Ql;
                RH(
                  L,
                  X,
                  K,
                  q,
                  // TODO: Delete this argument when we remove the legacy root API.
                  $
                );
                break;
              }
            }
            break;
          }
          case w: {
            var sl = c.memoizedState, Gl = sl.dehydrated;
            if (Gl !== null) switch (b.tag) {
              case t:
                var nl = b.type;
                b.pendingProps, WH(Gl, nl);
                break;
              case W:
                var Ul = b.pendingProps;
                VH(Gl, Ul);
                break;
            }
            break;
          }
          default:
            return;
        }
      }
    }
    function Q0(c, b) {
      b.flags = b.flags & ~ws | Xc, dt(c, b);
    }
    function P0(c, b) {
      switch (c.tag) {
        case t: {
          var d = c.type;
          c.pendingProps;
          var o = lH(b, d);
          return o !== null ? (c.stateNode = o, Bc = c, Gu = sH(o), !0) : !1;
        }
        case W: {
          var e = c.pendingProps, L = ZH(b, e);
          return L !== null ? (c.stateNode = L, Bc = c, Gu = null, !0) : !1;
        }
        case w: {
          var X = cH(b);
          if (X !== null) {
            var K = {
              dehydrated: X,
              treeContext: HH(),
              retryLane: Db
            };
            c.memoizedState = K;
            var Y = Pv(X);
            return Y.return = c, c.child = Y, Bc = c, Gu = null, !0;
          }
          return !1;
        }
        default:
          return !1;
      }
    }
    function Gt(c) {
      return (c.mode & pZ) !== Ql && (c.flags & RZ) === Pl;
    }
    function mt(c) {
      throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
    }
    function it(c) {
      if (Mu) {
        var b = Gu;
        if (!b) {
          Gt(c) && (dt(Bc, c), mt()), Q0(Bc, c), Mu = !1, Bc = c;
          return;
        }
        var d = b;
        if (!P0(c, b)) {
          Gt(c) && (dt(Bc, c), mt()), b = Ye(d);
          var o = Bc;
          if (!b || !P0(c, b)) {
            Q0(Bc, c), Mu = !1, Bc = c;
            return;
          }
          j0(o, d);
        }
      }
    }
    function BH(c, b, d) {
      var o = c.stateNode, e = !jG, L = mH(o, c.type, c.memoizedProps, b, d, c, e);
      return c.updateQueue = L, L !== null;
    }
    function DH(c) {
      var b = c.stateNode, d = c.memoizedProps, o = iH(b, d, c);
      if (o) {
        var e = Bc;
        if (e !== null)
          switch (e.tag) {
            case h: {
              var L = e.stateNode.containerInfo, X = (e.mode & pZ) !== Ql;
              LH(
                L,
                b,
                d,
                // TODO: Delete this argument when we remove the legacy root API.
                X
              );
              break;
            }
            case t: {
              var K = e.type, Y = e.memoizedProps, N = e.stateNode, H = (e.mode & pZ) !== Ql;
              hH(
                K,
                Y,
                N,
                b,
                d,
                // TODO: Delete this argument when we remove the legacy root API.
                H
              );
              break;
            }
          }
      }
      return o;
    }
    function jH(c) {
      var b = c.memoizedState, d = b !== null ? b.dehydrated : null;
      if (!d)
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      oH(d, c);
    }
    function QH(c) {
      var b = c.memoizedState, d = b !== null ? b.dehydrated : null;
      if (!d)
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      return eH(d);
    }
    function O0(c) {
      for (var b = c.return; b !== null && b.tag !== t && b.tag !== h && b.tag !== w; )
        b = b.return;
      Bc = b;
    }
    function wp(c) {
      if (c !== Bc)
        return !1;
      if (!Mu)
        return O0(c), Mu = !0, !1;
      if (c.tag !== h && (c.tag !== t || pH(c.type) && !BS(c.type, c.memoizedProps))) {
        var b = Gu;
        if (b)
          if (Gt(c))
            A0(c), mt();
          else
            for (; b; )
              j0(c, b), b = Ye(b);
      }
      return O0(c), c.tag === w ? Gu = QH(c) : Gu = Bc ? Ye(c.stateNode) : null, !0;
    }
    function PH() {
      return Mu && Gu !== null;
    }
    function A0(c) {
      for (var b = Gu; b; )
        D0(c, b), b = Ye(b);
    }
    function Li() {
      Bc = null, Gu = null, Mu = !1, jG = !1;
    }
    function $0() {
      vd !== null && (BY(vd), vd = null);
    }
    function Dc() {
      return Mu;
    }
    function ot(c) {
      vd === null ? vd = [c] : vd.push(c);
    }
    var OH = u.ReactCurrentBatchConfig, AH = null;
    function $H() {
      return OH.transition;
    }
    var Iu = {
      recordUnsafeLifecycleWarnings: function(c, b) {
      },
      flushPendingUnsafeLifecycleWarnings: function() {
      },
      recordLegacyContextWarning: function(c, b) {
      },
      flushLegacyContextWarning: function() {
      },
      discardPendingWarnings: function() {
      }
    };
    {
      var qH = function(c) {
        for (var b = null, d = c; d !== null; )
          d.mode & Gc && (b = d), d = d.return;
        return b;
      }, QG = function(c) {
        var b = [];
        return c.forEach(function(d) {
          b.push(d);
        }), b.sort().join(", ");
      }, Ue = [], Ce = [], re = [], Fe = [], Ne = [], we = [], PG = /* @__PURE__ */ new Set();
      Iu.recordUnsafeLifecycleWarnings = function(c, b) {
        PG.has(c.type) || (typeof b.componentWillMount == "function" && // Don't warn about react-lifecycles-compat polyfilled components.
        b.componentWillMount.__suppressDeprecationWarning !== !0 && Ue.push(c), c.mode & Gc && typeof b.UNSAFE_componentWillMount == "function" && Ce.push(c), typeof b.componentWillReceiveProps == "function" && b.componentWillReceiveProps.__suppressDeprecationWarning !== !0 && re.push(c), c.mode & Gc && typeof b.UNSAFE_componentWillReceiveProps == "function" && Fe.push(c), typeof b.componentWillUpdate == "function" && b.componentWillUpdate.__suppressDeprecationWarning !== !0 && Ne.push(c), c.mode & Gc && typeof b.UNSAFE_componentWillUpdate == "function" && we.push(c));
      }, Iu.flushPendingUnsafeLifecycleWarnings = function() {
        var c = /* @__PURE__ */ new Set();
        Ue.length > 0 && (Ue.forEach(function($) {
          c.add(bZ($) || "Component"), PG.add($.type);
        }), Ue = []);
        var b = /* @__PURE__ */ new Set();
        Ce.length > 0 && (Ce.forEach(function($) {
          b.add(bZ($) || "Component"), PG.add($.type);
        }), Ce = []);
        var d = /* @__PURE__ */ new Set();
        re.length > 0 && (re.forEach(function($) {
          d.add(bZ($) || "Component"), PG.add($.type);
        }), re = []);
        var o = /* @__PURE__ */ new Set();
        Fe.length > 0 && (Fe.forEach(function($) {
          o.add(bZ($) || "Component"), PG.add($.type);
        }), Fe = []);
        var e = /* @__PURE__ */ new Set();
        Ne.length > 0 && (Ne.forEach(function($) {
          e.add(bZ($) || "Component"), PG.add($.type);
        }), Ne = []);
        var L = /* @__PURE__ */ new Set();
        if (we.length > 0 && (we.forEach(function($) {
          L.add(bZ($) || "Component"), PG.add($.type);
        }), we = []), b.size > 0) {
          var X = QG(b);
          m(`Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.

Please update the following components: %s`, X);
        }
        if (o.size > 0) {
          var K = QG(o);
          m(`Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state

Please update the following components: %s`, K);
        }
        if (L.size > 0) {
          var Y = QG(L);
          m(`Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.

Please update the following components: %s`, Y);
        }
        if (c.size > 0) {
          var N = QG(c);
          i(`componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.
* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, N);
        }
        if (d.size > 0) {
          var H = QG(d);
          i(`componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state
* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, H);
        }
        if (e.size > 0) {
          var q = QG(e);
          i(`componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, q);
        }
      };
      var zp = /* @__PURE__ */ new Map(), q0 = /* @__PURE__ */ new Set();
      Iu.recordLegacyContextWarning = function(c, b) {
        var d = qH(c);
        if (d === null) {
          m("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
          return;
        }
        if (!q0.has(c.type)) {
          var o = zp.get(d);
          (c.type.contextTypes != null || c.type.childContextTypes != null || b !== null && typeof b.getChildContext == "function") && (o === void 0 && (o = [], zp.set(d, o)), o.push(c));
        }
      }, Iu.flushLegacyContextWarning = function() {
        zp.forEach(function(c, b) {
          if (c.length !== 0) {
            var d = c[0], o = /* @__PURE__ */ new Set();
            c.forEach(function(L) {
              o.add(bZ(L) || "Component"), q0.add(L.type);
            });
            var e = QG(o);
            try {
              cc(d), m(`Legacy context API has been detected within a strict-mode tree.

The old API will be supported in all 16.x releases, but applications using it should migrate to the new version.

Please update the following components: %s

Learn more about this warning here: https://reactjs.org/link/legacy-context`, e);
            } finally {
              wc();
            }
          }
        });
      }, Iu.discardPendingWarnings = function() {
        Ue = [], Ce = [], re = [], Fe = [], Ne = [], we = [], zp = /* @__PURE__ */ new Map();
      };
    }
    var et, at, nt, pt, Lt, _0 = function(c, b) {
    };
    et = !1, at = !1, nt = {}, pt = {}, Lt = {}, _0 = function(c, b) {
      if (!(c === null || typeof c != "object") && !(!c._store || c._store.validated || c.key != null)) {
        if (typeof c._store != "object")
          throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        c._store.validated = !0;
        var d = bZ(b) || "Component";
        pt[d] || (pt[d] = !0, m('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.'));
      }
    };
    function _H(c) {
      return c.prototype && c.prototype.isReactComponent;
    }
    function ze(c, b, d) {
      var o = d.ref;
      if (o !== null && typeof o != "function" && typeof o != "object") {
        if ((c.mode & Gc || ml) && // We warn in ReactElement.js if owner and self are equal for string refs
        // because these cannot be automatically converted to an arrow function
        // using a codemod. Therefore, we don't have to warn about string refs again.
        !(d._owner && d._self && d._owner.stateNode !== d._self) && // Will already throw with "Function components cannot have string refs"
        !(d._owner && d._owner.tag !== p) && // Will already warn with "Function components cannot be given refs"
        !(typeof d.type == "function" && !_H(d.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
        d._owner) {
          var e = bZ(c) || "Component";
          nt[e] || (m('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', e, o), nt[e] = !0);
        }
        if (d._owner) {
          var L = d._owner, X;
          if (L) {
            var K = L;
            if (K.tag !== p)
              throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
            X = K.stateNode;
          }
          if (!X)
            throw new Error("Missing owner for string ref " + o + ". This error is likely caused by a bug in React. Please file an issue.");
          var Y = X;
          yc(o, "ref");
          var N = "" + o;
          if (b !== null && b.ref !== null && typeof b.ref == "function" && b.ref._stringRef === N)
            return b.ref;
          var H = function(q) {
            var $ = Y.refs;
            q === null ? delete $[N] : $[N] = q;
          };
          return H._stringRef = N, H;
        } else {
          if (typeof o != "string")
            throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
          if (!d._owner)
            throw new Error("Element ref was specified as a string (" + o + `) but no owner was set. This could happen for one of the following reasons:
1. You may be adding a ref to a function component
2. You may be adding a ref to a component that was not created inside a component's render method
3. You have multiple copies of React loaded
See https://reactjs.org/link/refs-must-have-owner for more information.`);
        }
      }
      return o;
    }
    function Jp(c, b) {
      var d = Object.prototype.toString.call(b);
      throw new Error("Objects are not valid as a React child (found: " + (d === "[object Object]" ? "object with keys {" + Object.keys(b).join(", ") + "}" : d) + "). If you meant to render a collection of children, use an array instead.");
    }
    function Hp(c) {
      {
        var b = bZ(c) || "Component";
        if (Lt[b])
          return;
        Lt[b] = !0, m("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
    }
    function lR(c) {
      var b = c._payload, d = c._init;
      return d(b);
    }
    function ZR(c) {
      function b(bl, pl) {
        if (c) {
          var ul = bl.deletions;
          ul === null ? (bl.deletions = [pl], bl.flags |= UG) : ul.push(pl);
        }
      }
      function d(bl, pl) {
        if (!c)
          return null;
        for (var ul = pl; ul !== null; )
          b(bl, ul), ul = ul.sibling;
        return null;
      }
      function o(bl, pl) {
        for (var ul = /* @__PURE__ */ new Map(), Xl = pl; Xl !== null; )
          Xl.key !== null ? ul.set(Xl.key, Xl) : ul.set(Xl.index, Xl), Xl = Xl.sibling;
        return ul;
      }
      function e(bl, pl) {
        var ul = bm(bl, pl);
        return ul.index = 0, ul.sibling = null, ul;
      }
      function L(bl, pl, ul) {
        if (bl.index = ul, !c)
          return bl.flags |= u5, pl;
        var Xl = bl.alternate;
        if (Xl !== null) {
          var Nl = Xl.index;
          return Nl < pl ? (bl.flags |= Xc, pl) : Nl;
        } else
          return bl.flags |= Xc, pl;
      }
      function X(bl) {
        return c && bl.alternate === null && (bl.flags |= Xc), bl;
      }
      function K(bl, pl, ul, Xl) {
        if (pl === null || pl.tag !== W) {
          var Nl = oK(ul, bl.mode, Xl);
          return Nl.return = bl, Nl;
        } else {
          var Cl = e(pl, ul);
          return Cl.return = bl, Cl;
        }
      }
      function Y(bl, pl, ul, Xl) {
        var Nl = ul.type;
        if (Nl === bu)
          return H(bl, pl, ul.props.children, Xl, ul.key);
        if (pl !== null && (pl.elementType === Nl || // Keep this check inline so it only runs on the false path:
        dk(pl, ul) || // Lazy types should reconcile their resolved type.
        // We need to do this after the Hot Reloading check above,
        // because hot reloading has different semantics than prod because
        // it doesn't resuspend. So we can't let the call below suspend.
        typeof Nl == "object" && Nl !== null && Nl.$$typeof === jl && lR(Nl) === pl.type)) {
          var Cl = e(pl, ul.props);
          return Cl.ref = ze(bl, pl, ul), Cl.return = bl, Cl._debugSource = ul._source, Cl._debugOwner = ul._owner, Cl;
        }
        var Al = iK(ul, bl.mode, Xl);
        return Al.ref = ze(bl, pl, ul), Al.return = bl, Al;
      }
      function N(bl, pl, ul, Xl) {
        if (pl === null || pl.tag !== S || pl.stateNode.containerInfo !== ul.containerInfo || pl.stateNode.implementation !== ul.implementation) {
          var Nl = eK(ul, bl.mode, Xl);
          return Nl.return = bl, Nl;
        } else {
          var Cl = e(pl, ul.children || []);
          return Cl.return = bl, Cl;
        }
      }
      function H(bl, pl, ul, Xl, Nl) {
        if (pl === null || pl.tag !== V) {
          var Cl = $d(ul, bl.mode, Xl, Nl);
          return Cl.return = bl, Cl;
        } else {
          var Al = e(pl, ul);
          return Al.return = bl, Al;
        }
      }
      function q(bl, pl, ul) {
        if (typeof pl == "string" && pl !== "" || typeof pl == "number") {
          var Xl = oK("" + pl, bl.mode, ul);
          return Xl.return = bl, Xl;
        }
        if (typeof pl == "object" && pl !== null) {
          switch (pl.$$typeof) {
            case fb: {
              var Nl = iK(pl, bl.mode, ul);
              return Nl.ref = ze(bl, null, pl), Nl.return = bl, Nl;
            }
            case Eb: {
              var Cl = eK(pl, bl.mode, ul);
              return Cl.return = bl, Cl;
            }
            case jl: {
              var Al = pl._payload, lZ = pl._init;
              return q(bl, lZ(Al), ul);
            }
          }
          if (xZ(pl) || Lb(pl)) {
            var NZ = $d(pl, bl.mode, ul, null);
            return NZ.return = bl, NZ;
          }
          Jp(bl, pl);
        }
        return typeof pl == "function" && Hp(bl), null;
      }
      function $(bl, pl, ul, Xl) {
        var Nl = pl !== null ? pl.key : null;
        if (typeof ul == "string" && ul !== "" || typeof ul == "number")
          return Nl !== null ? null : K(bl, pl, "" + ul, Xl);
        if (typeof ul == "object" && ul !== null) {
          switch (ul.$$typeof) {
            case fb:
              return ul.key === Nl ? Y(bl, pl, ul, Xl) : null;
            case Eb:
              return ul.key === Nl ? N(bl, pl, ul, Xl) : null;
            case jl: {
              var Cl = ul._payload, Al = ul._init;
              return $(bl, pl, Al(Cl), Xl);
            }
          }
          if (xZ(ul) || Lb(ul))
            return Nl !== null ? null : H(bl, pl, ul, Xl, null);
          Jp(bl, ul);
        }
        return typeof ul == "function" && Hp(bl), null;
      }
      function sl(bl, pl, ul, Xl, Nl) {
        if (typeof Xl == "string" && Xl !== "" || typeof Xl == "number") {
          var Cl = bl.get(ul) || null;
          return K(pl, Cl, "" + Xl, Nl);
        }
        if (typeof Xl == "object" && Xl !== null) {
          switch (Xl.$$typeof) {
            case fb: {
              var Al = bl.get(Xl.key === null ? ul : Xl.key) || null;
              return Y(pl, Al, Xl, Nl);
            }
            case Eb: {
              var lZ = bl.get(Xl.key === null ? ul : Xl.key) || null;
              return N(pl, lZ, Xl, Nl);
            }
            case jl:
              var NZ = Xl._payload, WZ = Xl._init;
              return sl(bl, pl, ul, WZ(NZ), Nl);
          }
          if (xZ(Xl) || Lb(Xl)) {
            var nc = bl.get(ul) || null;
            return H(pl, nc, Xl, Nl, null);
          }
          Jp(pl, Xl);
        }
        return typeof Xl == "function" && Hp(pl), null;
      }
      function Gl(bl, pl, ul) {
        {
          if (typeof bl != "object" || bl === null)
            return pl;
          switch (bl.$$typeof) {
            case fb:
            case Eb:
              _0(bl, ul);
              var Xl = bl.key;
              if (typeof Xl != "string")
                break;
              if (pl === null) {
                pl = /* @__PURE__ */ new Set(), pl.add(Xl);
                break;
              }
              if (!pl.has(Xl)) {
                pl.add(Xl);
                break;
              }
              m("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", Xl);
              break;
            case jl:
              var Nl = bl._payload, Cl = bl._init;
              Gl(Cl(Nl), pl, ul);
              break;
          }
        }
        return pl;
      }
      function nl(bl, pl, ul, Xl) {
        for (var Nl = null, Cl = 0; Cl < ul.length; Cl++) {
          var Al = ul[Cl];
          Nl = Gl(Al, Nl, bl);
        }
        for (var lZ = null, NZ = null, WZ = pl, nc = 0, VZ = 0, mc = null; WZ !== null && VZ < ul.length; VZ++) {
          WZ.index > VZ ? (mc = WZ, WZ = null) : mc = WZ.sibling;
          var ib = $(bl, WZ, ul[VZ], Xl);
          if (ib === null) {
            WZ === null && (WZ = mc);
            break;
          }
          c && WZ && ib.alternate === null && b(bl, WZ), nc = L(ib, nc, VZ), NZ === null ? lZ = ib : NZ.sibling = ib, NZ = ib, WZ = mc;
        }
        if (VZ === ul.length) {
          if (d(bl, WZ), Dc()) {
            var qc = VZ;
            BG(bl, qc);
          }
          return lZ;
        }
        if (WZ === null) {
          for (; VZ < ul.length; VZ++) {
            var qb = q(bl, ul[VZ], Xl);
            qb !== null && (nc = L(qb, nc, VZ), NZ === null ? lZ = qb : NZ.sibling = qb, NZ = qb);
          }
          if (Dc()) {
            var Kb = VZ;
            BG(bl, Kb);
          }
          return lZ;
        }
        for (var Wb = o(bl, WZ); VZ < ul.length; VZ++) {
          var ob = sl(Wb, bl, VZ, ul[VZ], Xl);
          ob !== null && (c && ob.alternate !== null && Wb.delete(ob.key === null ? VZ : ob.key), nc = L(ob, nc, VZ), NZ === null ? lZ = ob : NZ.sibling = ob, NZ = ob);
        }
        if (c && Wb.forEach(function(Ni) {
          return b(bl, Ni);
        }), Dc()) {
          var qs = VZ;
          BG(bl, qs);
        }
        return lZ;
      }
      function Ul(bl, pl, ul, Xl) {
        var Nl = Lb(ul);
        if (typeof Nl != "function")
          throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
        {
          typeof Symbol == "function" && // $FlowFixMe Flow doesn't know about toStringTag
          ul[Symbol.toStringTag] === "Generator" && (at || m("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), at = !0), ul.entries === Nl && (et || m("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), et = !0);
          var Cl = Nl.call(ul);
          if (Cl)
            for (var Al = null, lZ = Cl.next(); !lZ.done; lZ = Cl.next()) {
              var NZ = lZ.value;
              Al = Gl(NZ, Al, bl);
            }
        }
        var WZ = Nl.call(ul);
        if (WZ == null)
          throw new Error("An iterable object provided no iterator.");
        for (var nc = null, VZ = null, mc = pl, ib = 0, qc = 0, qb = null, Kb = WZ.next(); mc !== null && !Kb.done; qc++, Kb = WZ.next()) {
          mc.index > qc ? (qb = mc, mc = null) : qb = mc.sibling;
          var Wb = $(bl, mc, Kb.value, Xl);
          if (Wb === null) {
            mc === null && (mc = qb);
            break;
          }
          c && mc && Wb.alternate === null && b(bl, mc), ib = L(Wb, ib, qc), VZ === null ? nc = Wb : VZ.sibling = Wb, VZ = Wb, mc = qb;
        }
        if (Kb.done) {
          if (d(bl, mc), Dc()) {
            var ob = qc;
            BG(bl, ob);
          }
          return nc;
        }
        if (mc === null) {
          for (; !Kb.done; qc++, Kb = WZ.next()) {
            var qs = q(bl, Kb.value, Xl);
            qs !== null && (ib = L(qs, ib, qc), VZ === null ? nc = qs : VZ.sibling = qs, VZ = qs);
          }
          if (Dc()) {
            var Ni = qc;
            BG(bl, Ni);
          }
          return nc;
        }
        for (var pa = o(bl, mc); !Kb.done; qc++, Kb = WZ.next()) {
          var is = sl(pa, bl, qc, Kb.value, Xl);
          is !== null && (c && is.alternate !== null && pa.delete(is.key === null ? qc : is.key), ib = L(is, ib, qc), VZ === null ? nc = is : VZ.sibling = is, VZ = is);
        }
        if (c && pa.forEach(function(RT) {
          return b(bl, RT);
        }), Dc()) {
          var xT = qc;
          BG(bl, xT);
        }
        return nc;
      }
      function Dl(bl, pl, ul, Xl) {
        if (pl !== null && pl.tag === W) {
          d(bl, pl.sibling);
          var Nl = e(pl, ul);
          return Nl.return = bl, Nl;
        }
        d(bl, pl);
        var Cl = oK(ul, bl.mode, Xl);
        return Cl.return = bl, Cl;
      }
      function fl(bl, pl, ul, Xl) {
        for (var Nl = ul.key, Cl = pl; Cl !== null; ) {
          if (Cl.key === Nl) {
            var Al = ul.type;
            if (Al === bu) {
              if (Cl.tag === V) {
                d(bl, Cl.sibling);
                var lZ = e(Cl, ul.props.children);
                return lZ.return = bl, lZ._debugSource = ul._source, lZ._debugOwner = ul._owner, lZ;
              }
            } else if (Cl.elementType === Al || // Keep this check inline so it only runs on the false path:
            dk(Cl, ul) || // Lazy types should reconcile their resolved type.
            // We need to do this after the Hot Reloading check above,
            // because hot reloading has different semantics than prod because
            // it doesn't resuspend. So we can't let the call below suspend.
            typeof Al == "object" && Al !== null && Al.$$typeof === jl && lR(Al) === Cl.type) {
              d(bl, Cl.sibling);
              var NZ = e(Cl, ul.props);
              return NZ.ref = ze(bl, Cl, ul), NZ.return = bl, NZ._debugSource = ul._source, NZ._debugOwner = ul._owner, NZ;
            }
            d(bl, Cl);
            break;
          } else
            b(bl, Cl);
          Cl = Cl.sibling;
        }
        if (ul.type === bu) {
          var WZ = $d(ul.props.children, bl.mode, Xl, ul.key);
          return WZ.return = bl, WZ;
        } else {
          var nc = iK(ul, bl.mode, Xl);
          return nc.ref = ze(bl, pl, ul), nc.return = bl, nc;
        }
      }
      function hZ(bl, pl, ul, Xl) {
        for (var Nl = ul.key, Cl = pl; Cl !== null; ) {
          if (Cl.key === Nl)
            if (Cl.tag === S && Cl.stateNode.containerInfo === ul.containerInfo && Cl.stateNode.implementation === ul.implementation) {
              d(bl, Cl.sibling);
              var Al = e(Cl, ul.children || []);
              return Al.return = bl, Al;
            } else {
              d(bl, Cl);
              break;
            }
          else
            b(bl, Cl);
          Cl = Cl.sibling;
        }
        var lZ = eK(ul, bl.mode, Xl);
        return lZ.return = bl, lZ;
      }
      function eZ(bl, pl, ul, Xl) {
        var Nl = typeof ul == "object" && ul !== null && ul.type === bu && ul.key === null;
        if (Nl && (ul = ul.props.children), typeof ul == "object" && ul !== null) {
          switch (ul.$$typeof) {
            case fb:
              return X(fl(bl, pl, ul, Xl));
            case Eb:
              return X(hZ(bl, pl, ul, Xl));
            case jl:
              var Cl = ul._payload, Al = ul._init;
              return eZ(bl, pl, Al(Cl), Xl);
          }
          if (xZ(ul))
            return nl(bl, pl, ul, Xl);
          if (Lb(ul))
            return Ul(bl, pl, ul, Xl);
          Jp(bl, ul);
        }
        return typeof ul == "string" && ul !== "" || typeof ul == "number" ? X(Dl(bl, pl, "" + ul, Xl)) : (typeof ul == "function" && Hp(bl), d(bl, pl));
      }
      return eZ;
    }
    var hi = ZR(!0), cR = ZR(!1);
    function l3(c, b) {
      if (c !== null && b.child !== c.child)
        throw new Error("Resuming work not yet implemented.");
      if (b.child !== null) {
        var d = b.child, o = bm(d, d.pendingProps);
        for (b.child = o, o.return = b; d.sibling !== null; )
          d = d.sibling, o = o.sibling = bm(d, d.pendingProps), o.return = b;
        o.sibling = null;
      }
    }
    function Z3(c, b) {
      for (var d = c.child; d !== null; )
        fv(d, b), d = d.sibling;
    }
    var ht = Jd(null), yt;
    yt = {};
    var gp = null, yi = null, St = null, vp = !1;
    function Tp() {
      gp = null, yi = null, St = null, vp = !1;
    }
    function bR() {
      vp = !0;
    }
    function uR() {
      vp = !1;
    }
    function sR(c, b, d) {
      Gb(ht, b._currentValue, c), b._currentValue = d, b._currentRenderer !== void 0 && b._currentRenderer !== null && b._currentRenderer !== yt && m("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), b._currentRenderer = yt;
    }
    function tt(c, b) {
      var d = ht.current;
      db(ht, b), c._currentValue = d;
    }
    function Xt(c, b, d) {
      for (var o = c; o !== null; ) {
        var e = o.alternate;
        if (Zi(o.childLanes, b) ? e !== null && !Zi(e.childLanes, b) && (e.childLanes = mZ(e.childLanes, b)) : (o.childLanes = mZ(o.childLanes, b), e !== null && (e.childLanes = mZ(e.childLanes, b))), o === d)
          break;
        o = o.return;
      }
      o !== d && m("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
    }
    function c3(c, b, d) {
      b3(c, b, d);
    }
    function b3(c, b, d) {
      var o = c.child;
      for (o !== null && (o.return = c); o !== null; ) {
        var e = void 0, L = o.dependencies;
        if (L !== null) {
          e = o.child;
          for (var X = L.firstContext; X !== null; ) {
            if (X.context === b) {
              if (o.tag === p) {
                var K = le(d), Y = js(jZ, K);
                Y.tag = Ep;
                var N = o.updateQueue;
                if (N !== null) {
                  var H = N.shared, q = H.pending;
                  q === null ? Y.next = Y : (Y.next = q.next, q.next = Y), H.pending = Y;
                }
              }
              o.lanes = mZ(o.lanes, d);
              var $ = o.alternate;
              $ !== null && ($.lanes = mZ($.lanes, d)), Xt(o.return, d, c), L.lanes = mZ(L.lanes, d);
              break;
            }
            X = X.next;
          }
        } else if (o.tag === r)
          e = o.type === c.type ? null : o.child;
        else if (o.tag === E) {
          var sl = o.return;
          if (sl === null)
            throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
          sl.lanes = mZ(sl.lanes, d);
          var Gl = sl.alternate;
          Gl !== null && (Gl.lanes = mZ(Gl.lanes, d)), Xt(sl, d, c), e = o.sibling;
        } else
          e = o.child;
        if (e !== null)
          e.return = o;
        else
          for (e = o; e !== null; ) {
            if (e === c) {
              e = null;
              break;
            }
            var nl = e.sibling;
            if (nl !== null) {
              nl.return = e.return, e = nl;
              break;
            }
            e = e.return;
          }
        o = e;
      }
    }
    function Si(c, b) {
      gp = c, yi = null, St = null;
      var d = c.dependencies;
      if (d !== null) {
        var o = d.firstContext;
        o !== null && (jb(d.lanes, b) && $e(), d.firstContext = null);
      }
    }
    function Kc(c) {
      vp && m("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      var b = c._currentValue;
      if (St !== c) {
        var d = {
          context: c,
          memoizedValue: b,
          next: null
        };
        if (yi === null) {
          if (gp === null)
            throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          yi = d, gp.dependencies = {
            lanes: Sl,
            firstContext: d
          };
        } else
          yi = yi.next = d;
      }
      return b;
    }
    var OG = null;
    function Kt(c) {
      OG === null ? OG = [c] : OG.push(c);
    }
    function u3() {
      if (OG !== null) {
        for (var c = 0; c < OG.length; c++) {
          var b = OG[c], d = b.interleaved;
          if (d !== null) {
            b.interleaved = null;
            var o = d.next, e = b.pending;
            if (e !== null) {
              var L = e.next;
              e.next = o, d.next = L;
            }
            b.pending = d;
          }
        }
        OG = null;
      }
    }
    function dR(c, b, d, o) {
      var e = b.interleaved;
      return e === null ? (d.next = d, Kt(b)) : (d.next = e.next, e.next = d), b.interleaved = d, fp(c, o);
    }
    function s3(c, b, d, o) {
      var e = b.interleaved;
      e === null ? (d.next = d, Kt(b)) : (d.next = e.next, e.next = d), b.interleaved = d;
    }
    function d3(c, b, d, o) {
      var e = b.interleaved;
      return e === null ? (d.next = d, Kt(b)) : (d.next = e.next, e.next = d), b.interleaved = d, fp(c, o);
    }
    function rb(c, b) {
      return fp(c, b);
    }
    var G3 = fp;
    function fp(c, b) {
      c.lanes = mZ(c.lanes, b);
      var d = c.alternate;
      d !== null && (d.lanes = mZ(d.lanes, b)), d === null && (c.flags & (Xc | ws)) !== Pl && ck(c);
      for (var o = c, e = c.return; e !== null; )
        e.childLanes = mZ(e.childLanes, b), d = e.alternate, d !== null ? d.childLanes = mZ(d.childLanes, b) : (e.flags & (Xc | ws)) !== Pl && ck(c), o = e, e = e.return;
      if (o.tag === h) {
        var L = o.stateNode;
        return L;
      } else
        return null;
    }
    var GR = 0, mR = 1, Ep = 2, Wt = 3, Bp = !1, Vt, Dp;
    Vt = !1, Dp = null;
    function xt(c) {
      var b = {
        baseState: c.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
          pending: null,
          interleaved: null,
          lanes: Sl
        },
        effects: null
      };
      c.updateQueue = b;
    }
    function iR(c, b) {
      var d = b.updateQueue, o = c.updateQueue;
      if (d === o) {
        var e = {
          baseState: o.baseState,
          firstBaseUpdate: o.firstBaseUpdate,
          lastBaseUpdate: o.lastBaseUpdate,
          shared: o.shared,
          effects: o.effects
        };
        b.updateQueue = e;
      }
    }
    function js(c, b) {
      var d = {
        eventTime: c,
        lane: b,
        tag: GR,
        payload: null,
        callback: null,
        next: null
      };
      return d;
    }
    function Td(c, b, d) {
      var o = c.updateQueue;
      if (o === null)
        return null;
      var e = o.shared;
      if (Dp === e && !Vt && (m("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback."), Vt = !0), sv()) {
        var L = e.pending;
        return L === null ? b.next = b : (b.next = L.next, L.next = b), e.pending = b, G3(c, d);
      } else
        return d3(c, e, b, d);
    }
    function jp(c, b, d) {
      var o = b.updateQueue;
      if (o !== null) {
        var e = o.shared;
        if (W5(d)) {
          var L = e.lanes;
          L = x5(L, c.pendingLanes);
          var X = mZ(L, d);
          e.lanes = X, hS(c, X);
        }
      }
    }
    function Rt(c, b) {
      var d = c.updateQueue, o = c.alternate;
      if (o !== null) {
        var e = o.updateQueue;
        if (d === e) {
          var L = null, X = null, K = d.firstBaseUpdate;
          if (K !== null) {
            var Y = K;
            do {
              var N = {
                eventTime: Y.eventTime,
                lane: Y.lane,
                tag: Y.tag,
                payload: Y.payload,
                callback: Y.callback,
                next: null
              };
              X === null ? L = X = N : (X.next = N, X = N), Y = Y.next;
            } while (Y !== null);
            X === null ? L = X = b : (X.next = b, X = b);
          } else
            L = X = b;
          d = {
            baseState: e.baseState,
            firstBaseUpdate: L,
            lastBaseUpdate: X,
            shared: e.shared,
            effects: e.effects
          }, c.updateQueue = d;
          return;
        }
      }
      var H = d.lastBaseUpdate;
      H === null ? d.firstBaseUpdate = b : H.next = b, d.lastBaseUpdate = b;
    }
    function m3(c, b, d, o, e, L) {
      switch (d.tag) {
        case mR: {
          var X = d.payload;
          if (typeof X == "function") {
            bR();
            var K = X.call(L, o, e);
            {
              if (c.mode & Gc) {
                Jc(!0);
                try {
                  X.call(L, o, e);
                } finally {
                  Jc(!1);
                }
              }
              uR();
            }
            return K;
          }
          return X;
        }
        case Wt:
          c.flags = c.flags & ~yb | RZ;
        case GR: {
          var Y = d.payload, N;
          if (typeof Y == "function") {
            bR(), N = Y.call(L, o, e);
            {
              if (c.mode & Gc) {
                Jc(!0);
                try {
                  Y.call(L, o, e);
                } finally {
                  Jc(!1);
                }
              }
              uR();
            }
          } else
            N = Y;
          return N == null ? o : GZ({}, o, N);
        }
        case Ep:
          return Bp = !0, o;
      }
      return o;
    }
    function Qp(c, b, d, o) {
      var e = c.updateQueue;
      Bp = !1, Dp = e.shared;
      var L = e.firstBaseUpdate, X = e.lastBaseUpdate, K = e.shared.pending;
      if (K !== null) {
        e.shared.pending = null;
        var Y = K, N = Y.next;
        Y.next = null, X === null ? L = N : X.next = N, X = Y;
        var H = c.alternate;
        if (H !== null) {
          var q = H.updateQueue, $ = q.lastBaseUpdate;
          $ !== X && ($ === null ? q.firstBaseUpdate = N : $.next = N, q.lastBaseUpdate = Y);
        }
      }
      if (L !== null) {
        var sl = e.baseState, Gl = Sl, nl = null, Ul = null, Dl = null, fl = L;
        do {
          var hZ = fl.lane, eZ = fl.eventTime;
          if (Zi(o, hZ)) {
            if (Dl !== null) {
              var pl = {
                eventTime: eZ,
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: Hc,
                tag: fl.tag,
                payload: fl.payload,
                callback: fl.callback,
                next: null
              };
              Dl = Dl.next = pl;
            }
            sl = m3(c, e, fl, sl, b, d);
            var ul = fl.callback;
            if (ul !== null && // If the update was already committed, we should not queue its
            // callback again.
            fl.lane !== Hc) {
              c.flags |= Jy;
              var Xl = e.effects;
              Xl === null ? e.effects = [fl] : Xl.push(fl);
            }
          } else {
            var bl = {
              eventTime: eZ,
              lane: hZ,
              tag: fl.tag,
              payload: fl.payload,
              callback: fl.callback,
              next: null
            };
            Dl === null ? (Ul = Dl = bl, nl = sl) : Dl = Dl.next = bl, Gl = mZ(Gl, hZ);
          }
          if (fl = fl.next, fl === null) {
            if (K = e.shared.pending, K === null)
              break;
            var Nl = K, Cl = Nl.next;
            Nl.next = null, fl = Cl, e.lastBaseUpdate = Nl, e.shared.pending = null;
          }
        } while (!0);
        Dl === null && (nl = sl), e.baseState = nl, e.firstBaseUpdate = Ul, e.lastBaseUpdate = Dl;
        var Al = e.shared.interleaved;
        if (Al !== null) {
          var lZ = Al;
          do
            Gl = mZ(Gl, lZ.lane), lZ = lZ.next;
          while (lZ !== Al);
        } else L === null && (e.shared.lanes = Sl);
        ia(Gl), c.lanes = Gl, c.memoizedState = sl;
      }
      Dp = null;
    }
    function i3(c, b) {
      if (typeof c != "function")
        throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + c));
      c.call(b);
    }
    function oR() {
      Bp = !1;
    }
    function Pp() {
      return Bp;
    }
    function eR(c, b, d) {
      var o = b.effects;
      if (b.effects = null, o !== null)
        for (var e = 0; e < o.length; e++) {
          var L = o[e], X = L.callback;
          X !== null && (L.callback = null, i3(X, d));
        }
    }
    var Je = {}, fd = Jd(Je), He = Jd(Je), Op = Jd(Je);
    function Ap(c) {
      if (c === Je)
        throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      return c;
    }
    function aR() {
      var c = Ap(Op.current);
      return c;
    }
    function Yt(c, b) {
      Gb(Op, b, c), Gb(He, c, c), Gb(fd, Je, c);
      var d = YJ(b);
      db(fd, c), Gb(fd, d, c);
    }
    function ti(c) {
      db(fd, c), db(He, c), db(Op, c);
    }
    function kt() {
      var c = Ap(fd.current);
      return c;
    }
    function nR(c) {
      Ap(Op.current);
      var b = Ap(fd.current), d = kJ(b, c.type);
      b !== d && (Gb(He, c, c), Gb(fd, d, c));
    }
    function Mt(c) {
      He.current === c && (db(fd, c), db(He, c));
    }
    var o3 = 0, pR = 1, LR = 1, ge = 2, Uu = Jd(o3);
    function It(c, b) {
      return (c & b) !== 0;
    }
    function Xi(c) {
      return c & pR;
    }
    function Ut(c, b) {
      return c & pR | b;
    }
    function e3(c, b) {
      return c | b;
    }
    function Ed(c, b) {
      Gb(Uu, b, c);
    }
    function Ki(c) {
      db(Uu, c);
    }
    function a3(c, b) {
      var d = c.memoizedState;
      return d !== null ? d.dehydrated !== null : (c.memoizedProps, !0);
    }
    function $p(c) {
      for (var b = c; b !== null; ) {
        if (b.tag === w) {
          var d = b.memoizedState;
          if (d !== null) {
            var o = d.dehydrated;
            if (o === null || r0(o) || PS(o))
              return b;
          }
        } else if (b.tag === g && // revealOrder undefined can't be trusted because it don't
        // keep track of whether it suspended or not.
        b.memoizedProps.revealOrder !== void 0) {
          var e = (b.flags & RZ) !== Pl;
          if (e)
            return b;
        } else if (b.child !== null) {
          b.child.return = b, b = b.child;
          continue;
        }
        if (b === c)
          return null;
        for (; b.sibling === null; ) {
          if (b.return === null || b.return === c)
            return null;
          b = b.return;
        }
        b.sibling.return = b.return, b = b.sibling;
      }
      return null;
    }
    var Fb = (
      /*   */
      0
    ), Rc = (
      /* */
      1
    ), cs = (
      /*  */
      2
    ), Yc = (
      /*    */
      4
    ), jc = (
      /*   */
      8
    ), Ct = [];
    function rt() {
      for (var c = 0; c < Ct.length; c++) {
        var b = Ct[c];
        b._workInProgressVersionPrimary = null;
      }
      Ct.length = 0;
    }
    function n3(c, b) {
      var d = b._getVersion, o = d(b._source);
      c.mutableSourceEagerHydrationData == null ? c.mutableSourceEagerHydrationData = [b, o] : c.mutableSourceEagerHydrationData.push(b, o);
    }
    var Fl = u.ReactCurrentDispatcher, ve = u.ReactCurrentBatchConfig, Ft, Wi;
    Ft = /* @__PURE__ */ new Set();
    var AG = Sl, FZ = null, kc = null, Mc = null, qp = !1, Te = !1, fe = 0, p3 = 0, L3 = 25, Ll = null, mu = null, Bd = -1, Nt = !1;
    function MZ() {
      {
        var c = Ll;
        mu === null ? mu = [c] : mu.push(c);
      }
    }
    function Ml() {
      {
        var c = Ll;
        mu !== null && (Bd++, mu[Bd] !== c && h3(c));
      }
    }
    function Vi(c) {
      c != null && !xZ(c) && m("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", Ll, typeof c);
    }
    function h3(c) {
      {
        var b = bZ(FZ);
        if (!Ft.has(b) && (Ft.add(b), mu !== null)) {
          for (var d = "", o = 30, e = 0; e <= Bd; e++) {
            for (var L = mu[e], X = e === Bd ? c : L, K = e + 1 + ". " + L; K.length < o; )
              K += " ";
            K += X + `
`, d += K;
          }
          m(`React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks

   Previous render            Next render
   ------------------------------------------------------
%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
`, b, d);
        }
      }
    }
    function mb() {
      throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
    }
    function wt(c, b) {
      if (Nt)
        return !1;
      if (b === null)
        return m("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", Ll), !1;
      c.length !== b.length && m(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, Ll, "[" + b.join(", ") + "]", "[" + c.join(", ") + "]");
      for (var d = 0; d < b.length && d < c.length; d++)
        if (!Ob(c[d], b[d]))
          return !1;
      return !0;
    }
    function xi(c, b, d, o, e, L) {
      AG = L, FZ = b, mu = c !== null ? c._debugHookTypes : null, Bd = -1, Nt = c !== null && c.type !== b.type, b.memoizedState = null, b.updateQueue = null, b.lanes = Sl, c !== null && c.memoizedState !== null ? Fl.current = JR : mu !== null ? Fl.current = zR : Fl.current = wR;
      var X = d(o, e);
      if (Te) {
        var K = 0;
        do {
          if (Te = !1, fe = 0, K >= L3)
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          K += 1, Nt = !1, kc = null, Mc = null, b.updateQueue = null, Bd = -1, Fl.current = HR, X = d(o, e);
        } while (Te);
      }
      Fl.current = eL, b._debugHookTypes = mu;
      var Y = kc !== null && kc.next !== null;
      if (AG = Sl, FZ = null, kc = null, Mc = null, Ll = null, mu = null, Bd = -1, c !== null && (c.flags & Js) !== (b.flags & Js) && // Disable this warning in legacy mode, because legacy Suspense is weird
      // and creates false positives. To make this work in legacy mode, we'd
      // need to mark fibers that commit in an incomplete state, somehow. For
      // now I'll disable the warning that most of the bugs that would trigger
      // it are either exclusive to concurrent mode or exist in both.
      (c.mode & pZ) !== Ql && m("Internal React error: Expected static flag was missing. Please notify the React team."), qp = !1, Y)
        throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
      return X;
    }
    function Ri() {
      var c = fe !== 0;
      return fe = 0, c;
    }
    function hR(c, b, d) {
      b.updateQueue = c.updateQueue, (b.mode & qu) !== Ql ? b.flags &= ~(jn | zs | xu | SZ) : b.flags &= ~(xu | SZ), c.lanes = _n(c.lanes, d);
    }
    function yR() {
      if (Fl.current = eL, qp) {
        for (var c = FZ.memoizedState; c !== null; ) {
          var b = c.queue;
          b !== null && (b.pending = null), c = c.next;
        }
        qp = !1;
      }
      AG = Sl, FZ = null, kc = null, Mc = null, mu = null, Bd = -1, Ll = null, UR = !1, Te = !1, fe = 0;
    }
    function bs() {
      var c = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
      };
      return Mc === null ? FZ.memoizedState = Mc = c : Mc = Mc.next = c, Mc;
    }
    function iu() {
      var c;
      if (kc === null) {
        var b = FZ.alternate;
        b !== null ? c = b.memoizedState : c = null;
      } else
        c = kc.next;
      var d;
      if (Mc === null ? d = FZ.memoizedState : d = Mc.next, d !== null)
        Mc = d, d = Mc.next, kc = c;
      else {
        if (c === null)
          throw new Error("Rendered more hooks than during the previous render.");
        kc = c;
        var o = {
          memoizedState: kc.memoizedState,
          baseState: kc.baseState,
          baseQueue: kc.baseQueue,
          queue: kc.queue,
          next: null
        };
        Mc === null ? FZ.memoizedState = Mc = o : Mc = Mc.next = o;
      }
      return Mc;
    }
    function SR() {
      return {
        lastEffect: null,
        stores: null
      };
    }
    function zt(c, b) {
      return typeof b == "function" ? b(c) : b;
    }
    function Jt(c, b, d) {
      var o = bs(), e;
      d !== void 0 ? e = d(b) : e = b, o.memoizedState = o.baseState = e;
      var L = {
        pending: null,
        interleaved: null,
        lanes: Sl,
        dispatch: null,
        lastRenderedReducer: c,
        lastRenderedState: e
      };
      o.queue = L;
      var X = L.dispatch = X3.bind(null, FZ, L);
      return [o.memoizedState, X];
    }
    function Ht(c, b, d) {
      var o = iu(), e = o.queue;
      if (e === null)
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      e.lastRenderedReducer = c;
      var L = kc, X = L.baseQueue, K = e.pending;
      if (K !== null) {
        if (X !== null) {
          var Y = X.next, N = K.next;
          X.next = N, K.next = Y;
        }
        L.baseQueue !== X && m("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."), L.baseQueue = X = K, e.pending = null;
      }
      if (X !== null) {
        var H = X.next, q = L.baseState, $ = null, sl = null, Gl = null, nl = H;
        do {
          var Ul = nl.lane;
          if (Zi(AG, Ul)) {
            if (Gl !== null) {
              var fl = {
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: Hc,
                action: nl.action,
                hasEagerState: nl.hasEagerState,
                eagerState: nl.eagerState,
                next: null
              };
              Gl = Gl.next = fl;
            }
            if (nl.hasEagerState)
              q = nl.eagerState;
            else {
              var hZ = nl.action;
              q = c(q, hZ);
            }
          } else {
            var Dl = {
              lane: Ul,
              action: nl.action,
              hasEagerState: nl.hasEagerState,
              eagerState: nl.eagerState,
              next: null
            };
            Gl === null ? (sl = Gl = Dl, $ = q) : Gl = Gl.next = Dl, FZ.lanes = mZ(FZ.lanes, Ul), ia(Ul);
          }
          nl = nl.next;
        } while (nl !== null && nl !== H);
        Gl === null ? $ = q : Gl.next = sl, Ob(q, o.memoizedState) || $e(), o.memoizedState = q, o.baseState = $, o.baseQueue = Gl, e.lastRenderedState = q;
      }
      var eZ = e.interleaved;
      if (eZ !== null) {
        var bl = eZ;
        do {
          var pl = bl.lane;
          FZ.lanes = mZ(FZ.lanes, pl), ia(pl), bl = bl.next;
        } while (bl !== eZ);
      } else X === null && (e.lanes = Sl);
      var ul = e.dispatch;
      return [o.memoizedState, ul];
    }
    function gt(c, b, d) {
      var o = iu(), e = o.queue;
      if (e === null)
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      e.lastRenderedReducer = c;
      var L = e.dispatch, X = e.pending, K = o.memoizedState;
      if (X !== null) {
        e.pending = null;
        var Y = X.next, N = Y;
        do {
          var H = N.action;
          K = c(K, H), N = N.next;
        } while (N !== Y);
        Ob(K, o.memoizedState) || $e(), o.memoizedState = K, o.baseQueue === null && (o.baseState = K), e.lastRenderedState = K;
      }
      return [K, L];
    }
    function Y_(c, b, d) {
    }
    function k_(c, b, d) {
    }
    function vt(c, b, d) {
      var o = FZ, e = bs(), L, X = Dc();
      if (X) {
        if (d === void 0)
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        L = d(), Wi || L !== d() && (m("The result of getServerSnapshot should be cached to avoid an infinite loop"), Wi = !0);
      } else {
        if (L = b(), !Wi) {
          var K = b();
          Ob(L, K) || (m("The result of getSnapshot should be cached to avoid an infinite loop"), Wi = !0);
        }
        var Y = UL();
        if (Y === null)
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        qn(Y, AG) || tR(o, b, L);
      }
      e.memoizedState = L;
      var N = {
        value: L,
        getSnapshot: b
      };
      return e.queue = N, bL(KR.bind(null, o, N, c), [c]), o.flags |= xu, Ee(Rc | jc, XR.bind(null, o, N, L, b), void 0, null), L;
    }
    function _p(c, b, d) {
      var o = FZ, e = iu(), L = b();
      if (!Wi) {
        var X = b();
        Ob(L, X) || (m("The result of getSnapshot should be cached to avoid an infinite loop"), Wi = !0);
      }
      var K = e.memoizedState, Y = !Ob(K, L);
      Y && (e.memoizedState = L, $e());
      var N = e.queue;
      if (De(KR.bind(null, o, N, c), [c]), N.getSnapshot !== b || Y || // Check if the susbcribe function changed. We can save some memory by
      // checking whether we scheduled a subscription effect above.
      Mc !== null && Mc.memoizedState.tag & Rc) {
        o.flags |= xu, Ee(Rc | jc, XR.bind(null, o, N, L, b), void 0, null);
        var H = UL();
        if (H === null)
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        qn(H, AG) || tR(o, b, L);
      }
      return L;
    }
    function tR(c, b, d) {
      c.flags |= Dn;
      var o = {
        getSnapshot: b,
        value: d
      }, e = FZ.updateQueue;
      if (e === null)
        e = SR(), FZ.updateQueue = e, e.stores = [o];
      else {
        var L = e.stores;
        L === null ? e.stores = [o] : L.push(o);
      }
    }
    function XR(c, b, d, o) {
      b.value = d, b.getSnapshot = o, WR(b) && VR(c);
    }
    function KR(c, b, d) {
      var o = function() {
        WR(b) && VR(c);
      };
      return d(o);
    }
    function WR(c) {
      var b = c.getSnapshot, d = c.value;
      try {
        var o = b();
        return !Ob(d, o);
      } catch {
        return !0;
      }
    }
    function VR(c) {
      var b = rb(c, ql);
      b !== null && rc(b, c, ql, jZ);
    }
    function lL(c) {
      var b = bs();
      typeof c == "function" && (c = c()), b.memoizedState = b.baseState = c;
      var d = {
        pending: null,
        interleaved: null,
        lanes: Sl,
        dispatch: null,
        lastRenderedReducer: zt,
        lastRenderedState: c
      };
      b.queue = d;
      var o = d.dispatch = K3.bind(null, FZ, d);
      return [b.memoizedState, o];
    }
    function Tt(c) {
      return Ht(zt);
    }
    function ft(c) {
      return gt(zt);
    }
    function Ee(c, b, d, o) {
      var e = {
        tag: c,
        create: b,
        destroy: d,
        deps: o,
        // Circular
        next: null
      }, L = FZ.updateQueue;
      if (L === null)
        L = SR(), FZ.updateQueue = L, L.lastEffect = e.next = e;
      else {
        var X = L.lastEffect;
        if (X === null)
          L.lastEffect = e.next = e;
        else {
          var K = X.next;
          X.next = e, e.next = K, L.lastEffect = e;
        }
      }
      return e;
    }
    function Et(c) {
      var b = bs();
      {
        var d = {
          current: c
        };
        return b.memoizedState = d, d;
      }
    }
    function ZL(c) {
      var b = iu();
      return b.memoizedState;
    }
    function Be(c, b, d, o) {
      var e = bs(), L = o === void 0 ? null : o;
      FZ.flags |= c, e.memoizedState = Ee(Rc | b, d, void 0, L);
    }
    function cL(c, b, d, o) {
      var e = iu(), L = o === void 0 ? null : o, X = void 0;
      if (kc !== null) {
        var K = kc.memoizedState;
        if (X = K.destroy, L !== null) {
          var Y = K.deps;
          if (wt(L, Y)) {
            e.memoizedState = Ee(b, d, X, L);
            return;
          }
        }
      }
      FZ.flags |= c, e.memoizedState = Ee(Rc | b, d, X, L);
    }
    function bL(c, b) {
      return (FZ.mode & qu) !== Ql ? Be(jn | xu | vy, jc, c, b) : Be(xu | vy, jc, c, b);
    }
    function De(c, b) {
      return cL(xu, jc, c, b);
    }
    function Bt(c, b) {
      return Be(SZ, cs, c, b);
    }
    function uL(c, b) {
      return cL(SZ, cs, c, b);
    }
    function Dt(c, b) {
      var d = SZ;
      return d |= FG, (FZ.mode & qu) !== Ql && (d |= zs), Be(d, Yc, c, b);
    }
    function sL(c, b) {
      return cL(SZ, Yc, c, b);
    }
    function xR(c, b) {
      if (typeof b == "function") {
        var d = b, o = c();
        return d(o), function() {
          d(null);
        };
      } else if (b != null) {
        var e = b;
        e.hasOwnProperty("current") || m("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(e).join(", ") + "}");
        var L = c();
        return e.current = L, function() {
          e.current = null;
        };
      }
    }
    function jt(c, b, d) {
      typeof b != "function" && m("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", b !== null ? typeof b : "null");
      var o = d != null ? d.concat([c]) : null, e = SZ;
      return e |= FG, (FZ.mode & qu) !== Ql && (e |= zs), Be(e, Yc, xR.bind(null, b, c), o);
    }
    function dL(c, b, d) {
      typeof b != "function" && m("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", b !== null ? typeof b : "null");
      var o = d != null ? d.concat([c]) : null;
      return cL(SZ, Yc, xR.bind(null, b, c), o);
    }
    function y3(c, b) {
    }
    var GL = y3;
    function Qt(c, b) {
      var d = bs(), o = b === void 0 ? null : b;
      return d.memoizedState = [c, o], c;
    }
    function mL(c, b) {
      var d = iu(), o = b === void 0 ? null : b, e = d.memoizedState;
      if (e !== null && o !== null) {
        var L = e[1];
        if (wt(o, L))
          return e[0];
      }
      return d.memoizedState = [c, o], c;
    }
    function Pt(c, b) {
      var d = bs(), o = b === void 0 ? null : b, e = c();
      return d.memoizedState = [e, o], e;
    }
    function iL(c, b) {
      var d = iu(), o = b === void 0 ? null : b, e = d.memoizedState;
      if (e !== null && o !== null) {
        var L = e[1];
        if (wt(o, L))
          return e[0];
      }
      var X = c();
      return d.memoizedState = [X, o], X;
    }
    function Ot(c) {
      var b = bs();
      return b.memoizedState = c, c;
    }
    function RR(c) {
      var b = iu(), d = kc, o = d.memoizedState;
      return kR(b, o, c);
    }
    function YR(c) {
      var b = iu();
      if (kc === null)
        return b.memoizedState = c, c;
      var d = kc.memoizedState;
      return kR(b, d, c);
    }
    function kR(c, b, d) {
      var o = !cw(AG);
      if (o) {
        if (!Ob(d, b)) {
          var e = V5();
          FZ.lanes = mZ(FZ.lanes, e), ia(e), c.baseState = !0;
        }
        return b;
      } else
        return c.baseState && (c.baseState = !1, $e()), c.memoizedState = d, d;
    }
    function S3(c, b, d) {
      var o = Yu();
      gc(ew(o, gs)), c(!0);
      var e = ve.transition;
      ve.transition = {};
      var L = ve.transition;
      ve.transition._updatedFibers = /* @__PURE__ */ new Set();
      try {
        c(!1), b();
      } finally {
        if (gc(o), ve.transition = e, e === null && L._updatedFibers) {
          var X = L._updatedFibers.size;
          X > 10 && i("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), L._updatedFibers.clear();
        }
      }
    }
    function At() {
      var c = lL(!1), b = c[0], d = c[1], o = S3.bind(null, d), e = bs();
      return e.memoizedState = o, [b, o];
    }
    function MR() {
      var c = Tt(), b = c[0], d = iu(), o = d.memoizedState;
      return [b, o];
    }
    function IR() {
      var c = ft(), b = c[0], d = iu(), o = d.memoizedState;
      return [b, o];
    }
    var UR = !1;
    function t3() {
      return UR;
    }
    function $t() {
      var c = bs(), b = UL(), d = b.identifierPrefix, o;
      if (Dc()) {
        var e = zH();
        o = ":" + d + "R" + e;
        var L = fe++;
        L > 0 && (o += "H" + L.toString(32)), o += ":";
      } else {
        var X = p3++;
        o = ":" + d + "r" + X.toString(32) + ":";
      }
      return c.memoizedState = o, o;
    }
    function oL() {
      var c = iu(), b = c.memoizedState;
      return b;
    }
    function X3(c, b, d) {
      typeof arguments[3] == "function" && m("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
      var o = Od(c), e = {
        lane: o,
        action: d,
        hasEagerState: !1,
        eagerState: null,
        next: null
      };
      if (CR(c))
        rR(b, e);
      else {
        var L = dR(c, b, e, o);
        if (L !== null) {
          var X = Xb();
          rc(L, c, o, X), FR(L, b, o);
        }
      }
      NR(c, o);
    }
    function K3(c, b, d) {
      typeof arguments[3] == "function" && m("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
      var o = Od(c), e = {
        lane: o,
        action: d,
        hasEagerState: !1,
        eagerState: null,
        next: null
      };
      if (CR(c))
        rR(b, e);
      else {
        var L = c.alternate;
        if (c.lanes === Sl && (L === null || L.lanes === Sl)) {
          var X = b.lastRenderedReducer;
          if (X !== null) {
            var K;
            K = Fl.current, Fl.current = Cu;
            try {
              var Y = b.lastRenderedState, N = X(Y, d);
              if (e.hasEagerState = !0, e.eagerState = N, Ob(N, Y)) {
                s3(c, b, e, o);
                return;
              }
            } catch {
            } finally {
              Fl.current = K;
            }
          }
        }
        var H = dR(c, b, e, o);
        if (H !== null) {
          var q = Xb();
          rc(H, c, o, q), FR(H, b, o);
        }
      }
      NR(c, o);
    }
    function CR(c) {
      var b = c.alternate;
      return c === FZ || b !== null && b === FZ;
    }
    function rR(c, b) {
      Te = qp = !0;
      var d = c.pending;
      d === null ? b.next = b : (b.next = d.next, d.next = b), c.pending = b;
    }
    function FR(c, b, d) {
      if (W5(d)) {
        var o = b.lanes;
        o = x5(o, c.pendingLanes);
        var e = mZ(o, d);
        b.lanes = e, hS(c, e);
      }
    }
    function NR(c, b, d) {
      Dy(c, b);
    }
    var eL = {
      readContext: Kc,
      useCallback: mb,
      useContext: mb,
      useEffect: mb,
      useImperativeHandle: mb,
      useInsertionEffect: mb,
      useLayoutEffect: mb,
      useMemo: mb,
      useReducer: mb,
      useRef: mb,
      useState: mb,
      useDebugValue: mb,
      useDeferredValue: mb,
      useTransition: mb,
      useMutableSource: mb,
      useSyncExternalStore: mb,
      useId: mb,
      unstable_isNewReconciler: O
    }, wR = null, zR = null, JR = null, HR = null, us = null, Cu = null, aL = null;
    {
      var qt = function() {
        m("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      }, _l = function() {
        m("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
      };
      wR = {
        readContext: function(c) {
          return Kc(c);
        },
        useCallback: function(c, b) {
          return Ll = "useCallback", MZ(), Vi(b), Qt(c, b);
        },
        useContext: function(c) {
          return Ll = "useContext", MZ(), Kc(c);
        },
        useEffect: function(c, b) {
          return Ll = "useEffect", MZ(), Vi(b), bL(c, b);
        },
        useImperativeHandle: function(c, b, d) {
          return Ll = "useImperativeHandle", MZ(), Vi(d), jt(c, b, d);
        },
        useInsertionEffect: function(c, b) {
          return Ll = "useInsertionEffect", MZ(), Vi(b), Bt(c, b);
        },
        useLayoutEffect: function(c, b) {
          return Ll = "useLayoutEffect", MZ(), Vi(b), Dt(c, b);
        },
        useMemo: function(c, b) {
          Ll = "useMemo", MZ(), Vi(b);
          var d = Fl.current;
          Fl.current = us;
          try {
            return Pt(c, b);
          } finally {
            Fl.current = d;
          }
        },
        useReducer: function(c, b, d) {
          Ll = "useReducer", MZ();
          var o = Fl.current;
          Fl.current = us;
          try {
            return Jt(c, b, d);
          } finally {
            Fl.current = o;
          }
        },
        useRef: function(c) {
          return Ll = "useRef", MZ(), Et(c);
        },
        useState: function(c) {
          Ll = "useState", MZ();
          var b = Fl.current;
          Fl.current = us;
          try {
            return lL(c);
          } finally {
            Fl.current = b;
          }
        },
        useDebugValue: function(c, b) {
          return Ll = "useDebugValue", MZ(), void 0;
        },
        useDeferredValue: function(c) {
          return Ll = "useDeferredValue", MZ(), Ot(c);
        },
        useTransition: function() {
          return Ll = "useTransition", MZ(), At();
        },
        useMutableSource: function(c, b, d) {
          return Ll = "useMutableSource", MZ(), void 0;
        },
        useSyncExternalStore: function(c, b, d) {
          return Ll = "useSyncExternalStore", MZ(), vt(c, b, d);
        },
        useId: function() {
          return Ll = "useId", MZ(), $t();
        },
        unstable_isNewReconciler: O
      }, zR = {
        readContext: function(c) {
          return Kc(c);
        },
        useCallback: function(c, b) {
          return Ll = "useCallback", Ml(), Qt(c, b);
        },
        useContext: function(c) {
          return Ll = "useContext", Ml(), Kc(c);
        },
        useEffect: function(c, b) {
          return Ll = "useEffect", Ml(), bL(c, b);
        },
        useImperativeHandle: function(c, b, d) {
          return Ll = "useImperativeHandle", Ml(), jt(c, b, d);
        },
        useInsertionEffect: function(c, b) {
          return Ll = "useInsertionEffect", Ml(), Bt(c, b);
        },
        useLayoutEffect: function(c, b) {
          return Ll = "useLayoutEffect", Ml(), Dt(c, b);
        },
        useMemo: function(c, b) {
          Ll = "useMemo", Ml();
          var d = Fl.current;
          Fl.current = us;
          try {
            return Pt(c, b);
          } finally {
            Fl.current = d;
          }
        },
        useReducer: function(c, b, d) {
          Ll = "useReducer", Ml();
          var o = Fl.current;
          Fl.current = us;
          try {
            return Jt(c, b, d);
          } finally {
            Fl.current = o;
          }
        },
        useRef: function(c) {
          return Ll = "useRef", Ml(), Et(c);
        },
        useState: function(c) {
          Ll = "useState", Ml();
          var b = Fl.current;
          Fl.current = us;
          try {
            return lL(c);
          } finally {
            Fl.current = b;
          }
        },
        useDebugValue: function(c, b) {
          return Ll = "useDebugValue", Ml(), void 0;
        },
        useDeferredValue: function(c) {
          return Ll = "useDeferredValue", Ml(), Ot(c);
        },
        useTransition: function() {
          return Ll = "useTransition", Ml(), At();
        },
        useMutableSource: function(c, b, d) {
          return Ll = "useMutableSource", Ml(), void 0;
        },
        useSyncExternalStore: function(c, b, d) {
          return Ll = "useSyncExternalStore", Ml(), vt(c, b, d);
        },
        useId: function() {
          return Ll = "useId", Ml(), $t();
        },
        unstable_isNewReconciler: O
      }, JR = {
        readContext: function(c) {
          return Kc(c);
        },
        useCallback: function(c, b) {
          return Ll = "useCallback", Ml(), mL(c, b);
        },
        useContext: function(c) {
          return Ll = "useContext", Ml(), Kc(c);
        },
        useEffect: function(c, b) {
          return Ll = "useEffect", Ml(), De(c, b);
        },
        useImperativeHandle: function(c, b, d) {
          return Ll = "useImperativeHandle", Ml(), dL(c, b, d);
        },
        useInsertionEffect: function(c, b) {
          return Ll = "useInsertionEffect", Ml(), uL(c, b);
        },
        useLayoutEffect: function(c, b) {
          return Ll = "useLayoutEffect", Ml(), sL(c, b);
        },
        useMemo: function(c, b) {
          Ll = "useMemo", Ml();
          var d = Fl.current;
          Fl.current = Cu;
          try {
            return iL(c, b);
          } finally {
            Fl.current = d;
          }
        },
        useReducer: function(c, b, d) {
          Ll = "useReducer", Ml();
          var o = Fl.current;
          Fl.current = Cu;
          try {
            return Ht(c, b, d);
          } finally {
            Fl.current = o;
          }
        },
        useRef: function(c) {
          return Ll = "useRef", Ml(), ZL();
        },
        useState: function(c) {
          Ll = "useState", Ml();
          var b = Fl.current;
          Fl.current = Cu;
          try {
            return Tt(c);
          } finally {
            Fl.current = b;
          }
        },
        useDebugValue: function(c, b) {
          return Ll = "useDebugValue", Ml(), GL();
        },
        useDeferredValue: function(c) {
          return Ll = "useDeferredValue", Ml(), RR(c);
        },
        useTransition: function() {
          return Ll = "useTransition", Ml(), MR();
        },
        useMutableSource: function(c, b, d) {
          return Ll = "useMutableSource", Ml(), void 0;
        },
        useSyncExternalStore: function(c, b, d) {
          return Ll = "useSyncExternalStore", Ml(), _p(c, b);
        },
        useId: function() {
          return Ll = "useId", Ml(), oL();
        },
        unstable_isNewReconciler: O
      }, HR = {
        readContext: function(c) {
          return Kc(c);
        },
        useCallback: function(c, b) {
          return Ll = "useCallback", Ml(), mL(c, b);
        },
        useContext: function(c) {
          return Ll = "useContext", Ml(), Kc(c);
        },
        useEffect: function(c, b) {
          return Ll = "useEffect", Ml(), De(c, b);
        },
        useImperativeHandle: function(c, b, d) {
          return Ll = "useImperativeHandle", Ml(), dL(c, b, d);
        },
        useInsertionEffect: function(c, b) {
          return Ll = "useInsertionEffect", Ml(), uL(c, b);
        },
        useLayoutEffect: function(c, b) {
          return Ll = "useLayoutEffect", Ml(), sL(c, b);
        },
        useMemo: function(c, b) {
          Ll = "useMemo", Ml();
          var d = Fl.current;
          Fl.current = aL;
          try {
            return iL(c, b);
          } finally {
            Fl.current = d;
          }
        },
        useReducer: function(c, b, d) {
          Ll = "useReducer", Ml();
          var o = Fl.current;
          Fl.current = aL;
          try {
            return gt(c, b, d);
          } finally {
            Fl.current = o;
          }
        },
        useRef: function(c) {
          return Ll = "useRef", Ml(), ZL();
        },
        useState: function(c) {
          Ll = "useState", Ml();
          var b = Fl.current;
          Fl.current = aL;
          try {
            return ft(c);
          } finally {
            Fl.current = b;
          }
        },
        useDebugValue: function(c, b) {
          return Ll = "useDebugValue", Ml(), GL();
        },
        useDeferredValue: function(c) {
          return Ll = "useDeferredValue", Ml(), YR(c);
        },
        useTransition: function() {
          return Ll = "useTransition", Ml(), IR();
        },
        useMutableSource: function(c, b, d) {
          return Ll = "useMutableSource", Ml(), void 0;
        },
        useSyncExternalStore: function(c, b, d) {
          return Ll = "useSyncExternalStore", Ml(), _p(c, b);
        },
        useId: function() {
          return Ll = "useId", Ml(), oL();
        },
        unstable_isNewReconciler: O
      }, us = {
        readContext: function(c) {
          return qt(), Kc(c);
        },
        useCallback: function(c, b) {
          return Ll = "useCallback", _l(), MZ(), Qt(c, b);
        },
        useContext: function(c) {
          return Ll = "useContext", _l(), MZ(), Kc(c);
        },
        useEffect: function(c, b) {
          return Ll = "useEffect", _l(), MZ(), bL(c, b);
        },
        useImperativeHandle: function(c, b, d) {
          return Ll = "useImperativeHandle", _l(), MZ(), jt(c, b, d);
        },
        useInsertionEffect: function(c, b) {
          return Ll = "useInsertionEffect", _l(), MZ(), Bt(c, b);
        },
        useLayoutEffect: function(c, b) {
          return Ll = "useLayoutEffect", _l(), MZ(), Dt(c, b);
        },
        useMemo: function(c, b) {
          Ll = "useMemo", _l(), MZ();
          var d = Fl.current;
          Fl.current = us;
          try {
            return Pt(c, b);
          } finally {
            Fl.current = d;
          }
        },
        useReducer: function(c, b, d) {
          Ll = "useReducer", _l(), MZ();
          var o = Fl.current;
          Fl.current = us;
          try {
            return Jt(c, b, d);
          } finally {
            Fl.current = o;
          }
        },
        useRef: function(c) {
          return Ll = "useRef", _l(), MZ(), Et(c);
        },
        useState: function(c) {
          Ll = "useState", _l(), MZ();
          var b = Fl.current;
          Fl.current = us;
          try {
            return lL(c);
          } finally {
            Fl.current = b;
          }
        },
        useDebugValue: function(c, b) {
          return Ll = "useDebugValue", _l(), MZ(), void 0;
        },
        useDeferredValue: function(c) {
          return Ll = "useDeferredValue", _l(), MZ(), Ot(c);
        },
        useTransition: function() {
          return Ll = "useTransition", _l(), MZ(), At();
        },
        useMutableSource: function(c, b, d) {
          return Ll = "useMutableSource", _l(), MZ(), void 0;
        },
        useSyncExternalStore: function(c, b, d) {
          return Ll = "useSyncExternalStore", _l(), MZ(), vt(c, b, d);
        },
        useId: function() {
          return Ll = "useId", _l(), MZ(), $t();
        },
        unstable_isNewReconciler: O
      }, Cu = {
        readContext: function(c) {
          return qt(), Kc(c);
        },
        useCallback: function(c, b) {
          return Ll = "useCallback", _l(), Ml(), mL(c, b);
        },
        useContext: function(c) {
          return Ll = "useContext", _l(), Ml(), Kc(c);
        },
        useEffect: function(c, b) {
          return Ll = "useEffect", _l(), Ml(), De(c, b);
        },
        useImperativeHandle: function(c, b, d) {
          return Ll = "useImperativeHandle", _l(), Ml(), dL(c, b, d);
        },
        useInsertionEffect: function(c, b) {
          return Ll = "useInsertionEffect", _l(), Ml(), uL(c, b);
        },
        useLayoutEffect: function(c, b) {
          return Ll = "useLayoutEffect", _l(), Ml(), sL(c, b);
        },
        useMemo: function(c, b) {
          Ll = "useMemo", _l(), Ml();
          var d = Fl.current;
          Fl.current = Cu;
          try {
            return iL(c, b);
          } finally {
            Fl.current = d;
          }
        },
        useReducer: function(c, b, d) {
          Ll = "useReducer", _l(), Ml();
          var o = Fl.current;
          Fl.current = Cu;
          try {
            return Ht(c, b, d);
          } finally {
            Fl.current = o;
          }
        },
        useRef: function(c) {
          return Ll = "useRef", _l(), Ml(), ZL();
        },
        useState: function(c) {
          Ll = "useState", _l(), Ml();
          var b = Fl.current;
          Fl.current = Cu;
          try {
            return Tt(c);
          } finally {
            Fl.current = b;
          }
        },
        useDebugValue: function(c, b) {
          return Ll = "useDebugValue", _l(), Ml(), GL();
        },
        useDeferredValue: function(c) {
          return Ll = "useDeferredValue", _l(), Ml(), RR(c);
        },
        useTransition: function() {
          return Ll = "useTransition", _l(), Ml(), MR();
        },
        useMutableSource: function(c, b, d) {
          return Ll = "useMutableSource", _l(), Ml(), void 0;
        },
        useSyncExternalStore: function(c, b, d) {
          return Ll = "useSyncExternalStore", _l(), Ml(), _p(c, b);
        },
        useId: function() {
          return Ll = "useId", _l(), Ml(), oL();
        },
        unstable_isNewReconciler: O
      }, aL = {
        readContext: function(c) {
          return qt(), Kc(c);
        },
        useCallback: function(c, b) {
          return Ll = "useCallback", _l(), Ml(), mL(c, b);
        },
        useContext: function(c) {
          return Ll = "useContext", _l(), Ml(), Kc(c);
        },
        useEffect: function(c, b) {
          return Ll = "useEffect", _l(), Ml(), De(c, b);
        },
        useImperativeHandle: function(c, b, d) {
          return Ll = "useImperativeHandle", _l(), Ml(), dL(c, b, d);
        },
        useInsertionEffect: function(c, b) {
          return Ll = "useInsertionEffect", _l(), Ml(), uL(c, b);
        },
        useLayoutEffect: function(c, b) {
          return Ll = "useLayoutEffect", _l(), Ml(), sL(c, b);
        },
        useMemo: function(c, b) {
          Ll = "useMemo", _l(), Ml();
          var d = Fl.current;
          Fl.current = Cu;
          try {
            return iL(c, b);
          } finally {
            Fl.current = d;
          }
        },
        useReducer: function(c, b, d) {
          Ll = "useReducer", _l(), Ml();
          var o = Fl.current;
          Fl.current = Cu;
          try {
            return gt(c, b, d);
          } finally {
            Fl.current = o;
          }
        },
        useRef: function(c) {
          return Ll = "useRef", _l(), Ml(), ZL();
        },
        useState: function(c) {
          Ll = "useState", _l(), Ml();
          var b = Fl.current;
          Fl.current = Cu;
          try {
            return ft(c);
          } finally {
            Fl.current = b;
          }
        },
        useDebugValue: function(c, b) {
          return Ll = "useDebugValue", _l(), Ml(), GL();
        },
        useDeferredValue: function(c) {
          return Ll = "useDeferredValue", _l(), Ml(), YR(c);
        },
        useTransition: function() {
          return Ll = "useTransition", _l(), Ml(), IR();
        },
        useMutableSource: function(c, b, d) {
          return Ll = "useMutableSource", _l(), Ml(), void 0;
        },
        useSyncExternalStore: function(c, b, d) {
          return Ll = "useSyncExternalStore", _l(), Ml(), _p(c, b);
        },
        useId: function() {
          return Ll = "useId", _l(), Ml(), oL();
        },
        unstable_isNewReconciler: O
      };
    }
    var Dd = Z.unstable_now, gR = 0, nL = -1, je = -1, pL = -1, _t = !1, LL = !1;
    function vR() {
      return _t;
    }
    function W3() {
      LL = !0;
    }
    function V3() {
      _t = !1, LL = !1;
    }
    function x3() {
      _t = LL, LL = !1;
    }
    function TR() {
      return gR;
    }
    function fR() {
      gR = Dd();
    }
    function lX(c) {
      je = Dd(), c.actualStartTime < 0 && (c.actualStartTime = Dd());
    }
    function ER(c) {
      je = -1;
    }
    function hL(c, b) {
      if (je >= 0) {
        var d = Dd() - je;
        c.actualDuration += d, b && (c.selfBaseDuration = d), je = -1;
      }
    }
    function ss(c) {
      if (nL >= 0) {
        var b = Dd() - nL;
        nL = -1;
        for (var d = c.return; d !== null; ) {
          switch (d.tag) {
            case h:
              var o = d.stateNode;
              o.effectDuration += b;
              return;
            case U:
              var e = d.stateNode;
              e.effectDuration += b;
              return;
          }
          d = d.return;
        }
      }
    }
    function ZX(c) {
      if (pL >= 0) {
        var b = Dd() - pL;
        pL = -1;
        for (var d = c.return; d !== null; ) {
          switch (d.tag) {
            case h:
              var o = d.stateNode;
              o !== null && (o.passiveEffectDuration += b);
              return;
            case U:
              var e = d.stateNode;
              e !== null && (e.passiveEffectDuration += b);
              return;
          }
          d = d.return;
        }
      }
    }
    function ds() {
      nL = Dd();
    }
    function cX() {
      pL = Dd();
    }
    function bX(c) {
      for (var b = c.child; b; )
        c.actualDuration += b.actualDuration, b = b.sibling;
    }
    function ru(c, b) {
      if (c && c.defaultProps) {
        var d = GZ({}, b), o = c.defaultProps;
        for (var e in o)
          d[e] === void 0 && (d[e] = o[e]);
        return d;
      }
      return b;
    }
    var uX = {}, sX, dX, GX, mX, iX, BR, yL, oX, eX, aX, Qe;
    {
      sX = /* @__PURE__ */ new Set(), dX = /* @__PURE__ */ new Set(), GX = /* @__PURE__ */ new Set(), mX = /* @__PURE__ */ new Set(), oX = /* @__PURE__ */ new Set(), iX = /* @__PURE__ */ new Set(), eX = /* @__PURE__ */ new Set(), aX = /* @__PURE__ */ new Set(), Qe = /* @__PURE__ */ new Set();
      var DR = /* @__PURE__ */ new Set();
      yL = function(c, b) {
        if (!(c === null || typeof c == "function")) {
          var d = b + "_" + c;
          DR.has(d) || (DR.add(d), m("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", b, c));
        }
      }, BR = function(c, b) {
        if (b === void 0) {
          var d = tZ(c) || "Component";
          iX.has(d) || (iX.add(d), m("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", d));
        }
      }, Object.defineProperty(uX, "_processChildContext", {
        enumerable: !1,
        value: function() {
          throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
      }), Object.freeze(uX);
    }
    function nX(c, b, d, o) {
      var e = c.memoizedState, L = d(o, e);
      {
        if (c.mode & Gc) {
          Jc(!0);
          try {
            L = d(o, e);
          } finally {
            Jc(!1);
          }
        }
        BR(b, L);
      }
      var X = L == null ? e : GZ({}, e, L);
      if (c.memoizedState = X, c.lanes === Sl) {
        var K = c.updateQueue;
        K.baseState = X;
      }
    }
    var pX = {
      isMounted: LN,
      enqueueSetState: function(c, b, d) {
        var o = Qm(c), e = Xb(), L = Od(o), X = js(e, L);
        X.payload = b, d != null && (yL(d, "setState"), X.callback = d);
        var K = Td(o, X, L);
        K !== null && (rc(K, o, L, e), jp(K, o, L)), Dy(o, L);
      },
      enqueueReplaceState: function(c, b, d) {
        var o = Qm(c), e = Xb(), L = Od(o), X = js(e, L);
        X.tag = mR, X.payload = b, d != null && (yL(d, "replaceState"), X.callback = d);
        var K = Td(o, X, L);
        K !== null && (rc(K, o, L, e), jp(K, o, L)), Dy(o, L);
      },
      enqueueForceUpdate: function(c, b) {
        var d = Qm(c), o = Xb(), e = Od(d), L = js(o, e);
        L.tag = Ep, b != null && (yL(b, "forceUpdate"), L.callback = b);
        var X = Td(d, L, e);
        X !== null && (rc(X, d, e, o), jp(X, d, e)), jN(d, e);
      }
    };
    function jR(c, b, d, o, e, L, X) {
      var K = c.stateNode;
      if (typeof K.shouldComponentUpdate == "function") {
        var Y = K.shouldComponentUpdate(o, L, X);
        {
          if (c.mode & Gc) {
            Jc(!0);
            try {
              Y = K.shouldComponentUpdate(o, L, X);
            } finally {
              Jc(!1);
            }
          }
          Y === void 0 && m("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", tZ(b) || "Component");
        }
        return Y;
      }
      return b.prototype && b.prototype.isPureReactComponent ? !Le(d, o) || !Le(e, L) : !0;
    }
    function R3(c, b, d) {
      var o = c.stateNode;
      {
        var e = tZ(b) || "Component", L = o.render;
        L || (b.prototype && typeof b.prototype.render == "function" ? m("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", e) : m("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", e)), o.getInitialState && !o.getInitialState.isReactClassApproved && !o.state && m("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", e), o.getDefaultProps && !o.getDefaultProps.isReactClassApproved && m("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", e), o.propTypes && m("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", e), o.contextType && m("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", e), b.childContextTypes && !Qe.has(b) && // Strict Mode has its own warning for legacy context, so we can skip
        // this one.
        (c.mode & Gc) === Ql && (Qe.add(b), m(`%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead

.Learn more about this warning here: https://reactjs.org/link/legacy-context`, e)), b.contextTypes && !Qe.has(b) && // Strict Mode has its own warning for legacy context, so we can skip
        // this one.
        (c.mode & Gc) === Ql && (Qe.add(b), m(`%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.

Learn more about this warning here: https://reactjs.org/link/legacy-context`, e)), o.contextTypes && m("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", e), b.contextType && b.contextTypes && !eX.has(b) && (eX.add(b), m("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", e)), typeof o.componentShouldUpdate == "function" && m("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", e), b.prototype && b.prototype.isPureReactComponent && typeof o.shouldComponentUpdate < "u" && m("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", tZ(b) || "A pure component"), typeof o.componentDidUnmount == "function" && m("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", e), typeof o.componentDidReceiveProps == "function" && m("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", e), typeof o.componentWillRecieveProps == "function" && m("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", e), typeof o.UNSAFE_componentWillRecieveProps == "function" && m("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", e);
        var X = o.props !== d;
        o.props !== void 0 && X && m("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", e, e), o.defaultProps && m("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", e, e), typeof o.getSnapshotBeforeUpdate == "function" && typeof o.componentDidUpdate != "function" && !GX.has(b) && (GX.add(b), m("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", tZ(b))), typeof o.getDerivedStateFromProps == "function" && m("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", e), typeof o.getDerivedStateFromError == "function" && m("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", e), typeof b.getSnapshotBeforeUpdate == "function" && m("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", e);
        var K = o.state;
        K && (typeof K != "object" || xZ(K)) && m("%s.state: must be set to an object or null", e), typeof o.getChildContext == "function" && typeof b.childContextTypes != "object" && m("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", e);
      }
    }
    function QR(c, b) {
      b.updater = pX, c.stateNode = b, oN(b, c), b._reactInternalInstance = uX;
    }
    function PR(c, b, d) {
      var o = !1, e = Ab, L = Ab, X = b.contextType;
      if ("contextType" in b) {
        var K = (
          // Allow null for conditional declaration
          X === null || X !== void 0 && X.$$typeof === yl && X._context === void 0
        );
        if (!K && !aX.has(b)) {
          aX.add(b);
          var Y = "";
          X === void 0 ? Y = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof X != "object" ? Y = " However, it is set to a " + typeof X + "." : X.$$typeof === P ? Y = " Did you accidentally pass the Context.Provider instead?" : X._context !== void 0 ? Y = " Did you accidentally pass the Context.Consumer instead?" : Y = " However, it is set to an object with keys {" + Object.keys(X).join(", ") + "}.", m("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", tZ(b) || "Component", Y);
        }
      }
      if (typeof X == "object" && X !== null)
        L = Kc(X);
      else {
        e = ei(c, b, !0);
        var N = b.contextTypes;
        o = N != null, L = o ? ai(c, e) : Ab;
      }
      var H = new b(d, L);
      if (c.mode & Gc) {
        Jc(!0);
        try {
          H = new b(d, L);
        } finally {
          Jc(!1);
        }
      }
      var q = c.memoizedState = H.state !== null && H.state !== void 0 ? H.state : null;
      QR(c, H);
      {
        if (typeof b.getDerivedStateFromProps == "function" && q === null) {
          var $ = tZ(b) || "Component";
          dX.has($) || (dX.add($), m("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", $, H.state === null ? "null" : "undefined", $));
        }
        if (typeof b.getDerivedStateFromProps == "function" || typeof H.getSnapshotBeforeUpdate == "function") {
          var sl = null, Gl = null, nl = null;
          if (typeof H.componentWillMount == "function" && H.componentWillMount.__suppressDeprecationWarning !== !0 ? sl = "componentWillMount" : typeof H.UNSAFE_componentWillMount == "function" && (sl = "UNSAFE_componentWillMount"), typeof H.componentWillReceiveProps == "function" && H.componentWillReceiveProps.__suppressDeprecationWarning !== !0 ? Gl = "componentWillReceiveProps" : typeof H.UNSAFE_componentWillReceiveProps == "function" && (Gl = "UNSAFE_componentWillReceiveProps"), typeof H.componentWillUpdate == "function" && H.componentWillUpdate.__suppressDeprecationWarning !== !0 ? nl = "componentWillUpdate" : typeof H.UNSAFE_componentWillUpdate == "function" && (nl = "UNSAFE_componentWillUpdate"), sl !== null || Gl !== null || nl !== null) {
            var Ul = tZ(b) || "Component", Dl = typeof b.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
            mX.has(Ul) || (mX.add(Ul), m(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, Ul, Dl, sl !== null ? `
  ` + sl : "", Gl !== null ? `
  ` + Gl : "", nl !== null ? `
  ` + nl : ""));
          }
        }
      }
      return o && J0(c, e, L), H;
    }
    function Y3(c, b) {
      var d = b.state;
      typeof b.componentWillMount == "function" && b.componentWillMount(), typeof b.UNSAFE_componentWillMount == "function" && b.UNSAFE_componentWillMount(), d !== b.state && (m("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", bZ(c) || "Component"), pX.enqueueReplaceState(b, b.state, null));
    }
    function OR(c, b, d, o) {
      var e = b.state;
      if (typeof b.componentWillReceiveProps == "function" && b.componentWillReceiveProps(d, o), typeof b.UNSAFE_componentWillReceiveProps == "function" && b.UNSAFE_componentWillReceiveProps(d, o), b.state !== e) {
        {
          var L = bZ(c) || "Component";
          sX.has(L) || (sX.add(L), m("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", L));
        }
        pX.enqueueReplaceState(b, b.state, null);
      }
    }
    function LX(c, b, d, o) {
      R3(c, b, d);
      var e = c.stateNode;
      e.props = d, e.state = c.memoizedState, e.refs = {}, xt(c);
      var L = b.contextType;
      if (typeof L == "object" && L !== null)
        e.context = Kc(L);
      else {
        var X = ei(c, b, !0);
        e.context = ai(c, X);
      }
      {
        if (e.state === d) {
          var K = tZ(b) || "Component";
          oX.has(K) || (oX.add(K), m("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", K));
        }
        c.mode & Gc && Iu.recordLegacyContextWarning(c, e), Iu.recordUnsafeLifecycleWarnings(c, e);
      }
      e.state = c.memoizedState;
      var Y = b.getDerivedStateFromProps;
      if (typeof Y == "function" && (nX(c, b, Y, d), e.state = c.memoizedState), typeof b.getDerivedStateFromProps != "function" && typeof e.getSnapshotBeforeUpdate != "function" && (typeof e.UNSAFE_componentWillMount == "function" || typeof e.componentWillMount == "function") && (Y3(c, e), Qp(c, d, e, o), e.state = c.memoizedState), typeof e.componentDidMount == "function") {
        var N = SZ;
        N |= FG, (c.mode & qu) !== Ql && (N |= zs), c.flags |= N;
      }
    }
    function k3(c, b, d, o) {
      var e = c.stateNode, L = c.memoizedProps;
      e.props = L;
      var X = e.context, K = b.contextType, Y = Ab;
      if (typeof K == "object" && K !== null)
        Y = Kc(K);
      else {
        var N = ei(c, b, !0);
        Y = ai(c, N);
      }
      var H = b.getDerivedStateFromProps, q = typeof H == "function" || typeof e.getSnapshotBeforeUpdate == "function";
      !q && (typeof e.UNSAFE_componentWillReceiveProps == "function" || typeof e.componentWillReceiveProps == "function") && (L !== d || X !== Y) && OR(c, e, d, Y), oR();
      var $ = c.memoizedState, sl = e.state = $;
      if (Qp(c, d, e, o), sl = c.memoizedState, L === d && $ === sl && !Mp() && !Pp()) {
        if (typeof e.componentDidMount == "function") {
          var Gl = SZ;
          Gl |= FG, (c.mode & qu) !== Ql && (Gl |= zs), c.flags |= Gl;
        }
        return !1;
      }
      typeof H == "function" && (nX(c, b, H, d), sl = c.memoizedState);
      var nl = Pp() || jR(c, b, L, d, $, sl, Y);
      if (nl) {
        if (!q && (typeof e.UNSAFE_componentWillMount == "function" || typeof e.componentWillMount == "function") && (typeof e.componentWillMount == "function" && e.componentWillMount(), typeof e.UNSAFE_componentWillMount == "function" && e.UNSAFE_componentWillMount()), typeof e.componentDidMount == "function") {
          var Ul = SZ;
          Ul |= FG, (c.mode & qu) !== Ql && (Ul |= zs), c.flags |= Ul;
        }
      } else {
        if (typeof e.componentDidMount == "function") {
          var Dl = SZ;
          Dl |= FG, (c.mode & qu) !== Ql && (Dl |= zs), c.flags |= Dl;
        }
        c.memoizedProps = d, c.memoizedState = sl;
      }
      return e.props = d, e.state = sl, e.context = Y, nl;
    }
    function M3(c, b, d, o, e) {
      var L = b.stateNode;
      iR(c, b);
      var X = b.memoizedProps, K = b.type === b.elementType ? X : ru(b.type, X);
      L.props = K;
      var Y = b.pendingProps, N = L.context, H = d.contextType, q = Ab;
      if (typeof H == "object" && H !== null)
        q = Kc(H);
      else {
        var $ = ei(b, d, !0);
        q = ai(b, $);
      }
      var sl = d.getDerivedStateFromProps, Gl = typeof sl == "function" || typeof L.getSnapshotBeforeUpdate == "function";
      !Gl && (typeof L.UNSAFE_componentWillReceiveProps == "function" || typeof L.componentWillReceiveProps == "function") && (X !== Y || N !== q) && OR(b, L, o, q), oR();
      var nl = b.memoizedState, Ul = L.state = nl;
      if (Qp(b, o, L, e), Ul = b.memoizedState, X === Y && nl === Ul && !Mp() && !Pp() && !_)
        return typeof L.componentDidUpdate == "function" && (X !== c.memoizedProps || nl !== c.memoizedState) && (b.flags |= SZ), typeof L.getSnapshotBeforeUpdate == "function" && (X !== c.memoizedProps || nl !== c.memoizedState) && (b.flags |= CG), !1;
      typeof sl == "function" && (nX(b, d, sl, o), Ul = b.memoizedState);
      var Dl = Pp() || jR(b, d, K, o, nl, Ul, q) || // TODO: In some cases, we'll end up checking if context has changed twice,
      // both before and after `shouldComponentUpdate` has been called. Not ideal,
      // but I'm loath to refactor this function. This only happens for memoized
      // components so it's not that common.
      _;
      return Dl ? (!Gl && (typeof L.UNSAFE_componentWillUpdate == "function" || typeof L.componentWillUpdate == "function") && (typeof L.componentWillUpdate == "function" && L.componentWillUpdate(o, Ul, q), typeof L.UNSAFE_componentWillUpdate == "function" && L.UNSAFE_componentWillUpdate(o, Ul, q)), typeof L.componentDidUpdate == "function" && (b.flags |= SZ), typeof L.getSnapshotBeforeUpdate == "function" && (b.flags |= CG)) : (typeof L.componentDidUpdate == "function" && (X !== c.memoizedProps || nl !== c.memoizedState) && (b.flags |= SZ), typeof L.getSnapshotBeforeUpdate == "function" && (X !== c.memoizedProps || nl !== c.memoizedState) && (b.flags |= CG), b.memoizedProps = o, b.memoizedState = Ul), L.props = o, L.state = Ul, L.context = q, Dl;
    }
    function $G(c, b) {
      return {
        value: c,
        source: b,
        stack: No(b),
        digest: null
      };
    }
    function hX(c, b, d) {
      return {
        value: c,
        source: null,
        stack: d ?? null,
        digest: b ?? null
      };
    }
    function I3(c, b) {
      return !0;
    }
    function yX(c, b) {
      try {
        var d = I3(c, b);
        if (d === !1)
          return;
        var o = b.value, e = b.source, L = b.stack, X = L !== null ? L : "";
        if (o != null && o._suppressLogging) {
          if (c.tag === p)
            return;
          console.error(o);
        }
        var K = e ? bZ(e) : null, Y = K ? "The above error occurred in the <" + K + "> component:" : "The above error occurred in one of your React components:", N;
        if (c.tag === h)
          N = `Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.`;
        else {
          var H = bZ(c) || "Anonymous";
          N = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + H + ".");
        }
        var q = Y + `
` + X + `

` + ("" + N);
        console.error(q);
      } catch ($) {
        setTimeout(function() {
          throw $;
        });
      }
    }
    var U3 = typeof WeakMap == "function" ? WeakMap : Map;
    function AR(c, b, d) {
      var o = js(jZ, d);
      o.tag = Wt, o.payload = {
        element: null
      };
      var e = b.value;
      return o.callback = function() {
        Wv(e), yX(c, b);
      }, o;
    }
    function SX(c, b, d) {
      var o = js(jZ, d);
      o.tag = Wt;
      var e = c.type.getDerivedStateFromError;
      if (typeof e == "function") {
        var L = b.value;
        o.payload = function() {
          return e(L);
        }, o.callback = function() {
          Gk(c), yX(c, b);
        };
      }
      var X = c.stateNode;
      return X !== null && typeof X.componentDidCatch == "function" && (o.callback = function() {
        Gk(c), yX(c, b), typeof e != "function" && Xv(this);
        var Y = b.value, N = b.stack;
        this.componentDidCatch(Y, {
          componentStack: N !== null ? N : ""
        }), typeof e != "function" && (jb(c.lanes, ql) || m("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", bZ(c) || "Unknown"));
      }), o;
    }
    function $R(c, b, d) {
      var o = c.pingCache, e;
      if (o === null ? (o = c.pingCache = new U3(), e = /* @__PURE__ */ new Set(), o.set(b, e)) : (e = o.get(b), e === void 0 && (e = /* @__PURE__ */ new Set(), o.set(b, e))), !e.has(d)) {
        e.add(d);
        var L = Vv.bind(null, c, b, d);
        Ru && oa(c, d), b.then(L, L);
      }
    }
    function C3(c, b, d, o) {
      var e = c.updateQueue;
      if (e === null) {
        var L = /* @__PURE__ */ new Set();
        L.add(d), c.updateQueue = L;
      } else
        e.add(d);
    }
    function r3(c, b) {
      var d = c.tag;
      if ((c.mode & pZ) === Ql && (d === n || d === k || d === D)) {
        var o = c.alternate;
        o ? (c.updateQueue = o.updateQueue, c.memoizedState = o.memoizedState, c.lanes = o.lanes) : (c.updateQueue = null, c.memoizedState = null);
      }
    }
    function qR(c) {
      var b = c;
      do {
        if (b.tag === w && a3(b))
          return b;
        b = b.return;
      } while (b !== null);
      return null;
    }
    function _R(c, b, d, o, e) {
      if ((c.mode & pZ) === Ql) {
        if (c === b)
          c.flags |= yb;
        else {
          if (c.flags |= RZ, d.flags |= Hy, d.flags &= ~(eN | jo), d.tag === p) {
            var L = d.alternate;
            if (L === null)
              d.tag = j;
            else {
              var X = js(jZ, ql);
              X.tag = Ep, Td(d, X, ql);
            }
          }
          d.lanes = mZ(d.lanes, ql);
        }
        return c;
      }
      return c.flags |= yb, c.lanes = e, c;
    }
    function F3(c, b, d, o, e) {
      if (d.flags |= jo, Ru && oa(c, e), o !== null && typeof o == "object" && typeof o.then == "function") {
        var L = o;
        r3(d), Dc() && d.mode & pZ && B0();
        var X = qR(b);
        if (X !== null) {
          X.flags &= ~Ns, _R(X, b, d, c, e), X.mode & pZ && $R(c, L, e), C3(X, c, L);
          return;
        } else {
          if (!Zw(e)) {
            $R(c, L, e), $X();
            return;
          }
          var K = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
          o = K;
        }
      } else if (Dc() && d.mode & pZ) {
        B0();
        var Y = qR(b);
        if (Y !== null) {
          (Y.flags & yb) === Pl && (Y.flags |= Ns), _R(Y, b, d, c, e), ot($G(o, d));
          return;
        }
      }
      o = $G(o, d), av(o);
      var N = b;
      do {
        switch (N.tag) {
          case h: {
            var H = o;
            N.flags |= yb;
            var q = le(e);
            N.lanes = mZ(N.lanes, q);
            var $ = AR(N, H, q);
            Rt(N, $);
            return;
          }
          case p:
            var sl = o, Gl = N.type, nl = N.stateNode;
            if ((N.flags & RZ) === Pl && (typeof Gl.getDerivedStateFromError == "function" || nl !== null && typeof nl.componentDidCatch == "function" && !qY(nl))) {
              N.flags |= yb;
              var Ul = le(e);
              N.lanes = mZ(N.lanes, Ul);
              var Dl = SX(N, sl, Ul);
              Rt(N, Dl);
              return;
            }
            break;
        }
        N = N.return;
      } while (N !== null);
    }
    function N3() {
      return null;
    }
    var Pe = u.ReactCurrentOwner, Fu = !1, tX, Oe, XX, KX, WX, qG, VX, SL, Ae;
    tX = {}, Oe = {}, XX = {}, KX = {}, WX = {}, qG = !1, VX = {}, SL = {}, Ae = {};
    function Sb(c, b, d, o) {
      c === null ? b.child = cR(b, null, d, o) : b.child = hi(b, c.child, d, o);
    }
    function w3(c, b, d, o) {
      b.child = hi(b, c.child, null, o), b.child = hi(b, null, d, o);
    }
    function lY(c, b, d, o, e) {
      if (b.type !== b.elementType) {
        var L = d.propTypes;
        L && ku(
          L,
          o,
          // Resolved props
          "prop",
          tZ(d)
        );
      }
      var X = d.render, K = b.ref, Y, N;
      Si(b, e), Po(b);
      {
        if (Pe.current = b, Bb(!0), Y = xi(c, b, X, o, K, e), N = Ri(), b.mode & Gc) {
          Jc(!0);
          try {
            Y = xi(c, b, X, o, K, e), N = Ri();
          } finally {
            Jc(!1);
          }
        }
        Bb(!1);
      }
      return $m(), c !== null && !Fu ? (hR(c, b, e), Qs(c, b, e)) : (Dc() && N && ut(b), b.flags |= Pm, Sb(c, b, Y, e), b.child);
    }
    function ZY(c, b, d, o, e) {
      if (c === null) {
        var L = d.type;
        if (vv(L) && d.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
        d.defaultProps === void 0) {
          var X = L;
          return X = Fi(L), b.tag = D, b.type = X, YX(b, L), cY(c, b, X, o, e);
        }
        {
          var K = L.propTypes;
          if (K && ku(
            K,
            o,
            // Resolved props
            "prop",
            tZ(L)
          ), d.defaultProps !== void 0) {
            var Y = tZ(L) || "Unknown";
            Ae[Y] || (m("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", Y), Ae[Y] = !0);
          }
        }
        var N = mK(d.type, null, o, b, b.mode, e);
        return N.ref = b.ref, N.return = b, b.child = N, N;
      }
      {
        var H = d.type, q = H.propTypes;
        q && ku(
          q,
          o,
          // Resolved props
          "prop",
          tZ(H)
        );
      }
      var $ = c.child, sl = rX(c, e);
      if (!sl) {
        var Gl = $.memoizedProps, nl = d.compare;
        if (nl = nl !== null ? nl : Le, nl(Gl, o) && c.ref === b.ref)
          return Qs(c, b, e);
      }
      b.flags |= Pm;
      var Ul = bm($, o);
      return Ul.ref = b.ref, Ul.return = b, b.child = Ul, Ul;
    }
    function cY(c, b, d, o, e) {
      if (b.type !== b.elementType) {
        var L = b.elementType;
        if (L.$$typeof === jl) {
          var X = L, K = X._payload, Y = X._init;
          try {
            L = Y(K);
          } catch {
            L = null;
          }
          var N = L && L.propTypes;
          N && ku(
            N,
            o,
            // Resolved (SimpleMemoComponent has no defaultProps)
            "prop",
            tZ(L)
          );
        }
      }
      if (c !== null) {
        var H = c.memoizedProps;
        if (Le(H, o) && c.ref === b.ref && // Prevent bailout if the implementation changed due to hot reload.
        b.type === c.type)
          if (Fu = !1, b.pendingProps = o = H, rX(c, e))
            (c.flags & Hy) !== Pl && (Fu = !0);
          else return b.lanes = c.lanes, Qs(c, b, e);
      }
      return xX(c, b, d, o, e);
    }
    function bY(c, b, d) {
      var o = b.pendingProps, e = o.children, L = c !== null ? c.memoizedState : null;
      if (o.mode === "hidden" || il)
        if ((b.mode & pZ) === Ql) {
          var X = {
            baseLanes: Sl,
            cachePool: null,
            transitions: null
          };
          b.memoizedState = X, CL(b, d);
        } else if (jb(d, Db)) {
          var q = {
            baseLanes: Sl,
            cachePool: null,
            transitions: null
          };
          b.memoizedState = q;
          var $ = L !== null ? L.baseLanes : d;
          CL(b, $);
        } else {
          var K = null, Y;
          if (L !== null) {
            var N = L.baseLanes;
            Y = mZ(N, d);
          } else
            Y = d;
          b.lanes = b.childLanes = Db;
          var H = {
            baseLanes: Y,
            cachePool: K,
            transitions: null
          };
          return b.memoizedState = H, b.updateQueue = null, CL(b, Y), null;
        }
      else {
        var sl;
        L !== null ? (sl = mZ(L.baseLanes, d), b.memoizedState = null) : sl = d, CL(b, sl);
      }
      return Sb(c, b, e, d), b.child;
    }
    function z3(c, b, d) {
      var o = b.pendingProps;
      return Sb(c, b, o, d), b.child;
    }
    function J3(c, b, d) {
      var o = b.pendingProps.children;
      return Sb(c, b, o, d), b.child;
    }
    function H3(c, b, d) {
      {
        b.flags |= SZ;
        {
          var o = b.stateNode;
          o.effectDuration = 0, o.passiveEffectDuration = 0;
        }
      }
      var e = b.pendingProps, L = e.children;
      return Sb(c, b, L, d), b.child;
    }
    function uY(c, b) {
      var d = b.ref;
      (c === null && d !== null || c !== null && c.ref !== d) && (b.flags |= Id, b.flags |= gy);
    }
    function xX(c, b, d, o, e) {
      if (b.type !== b.elementType) {
        var L = d.propTypes;
        L && ku(
          L,
          o,
          // Resolved props
          "prop",
          tZ(d)
        );
      }
      var X;
      {
        var K = ei(b, d, !0);
        X = ai(b, K);
      }
      var Y, N;
      Si(b, e), Po(b);
      {
        if (Pe.current = b, Bb(!0), Y = xi(c, b, d, o, X, e), N = Ri(), b.mode & Gc) {
          Jc(!0);
          try {
            Y = xi(c, b, d, o, X, e), N = Ri();
          } finally {
            Jc(!1);
          }
        }
        Bb(!1);
      }
      return $m(), c !== null && !Fu ? (hR(c, b, e), Qs(c, b, e)) : (Dc() && N && ut(b), b.flags |= Pm, Sb(c, b, Y, e), b.child);
    }
    function sY(c, b, d, o, e) {
      {
        switch (ZT(b)) {
          case !1: {
            var L = b.stateNode, X = b.type, K = new X(b.memoizedProps, L.context), Y = K.state;
            L.updater.enqueueSetState(L, Y, null);
            break;
          }
          case !0: {
            b.flags |= RZ, b.flags |= yb;
            var N = new Error("Simulated error coming from DevTools"), H = le(e);
            b.lanes = mZ(b.lanes, H);
            var q = SX(b, $G(N, b), H);
            Rt(b, q);
            break;
          }
        }
        if (b.type !== b.elementType) {
          var $ = d.propTypes;
          $ && ku(
            $,
            o,
            // Resolved props
            "prop",
            tZ(d)
          );
        }
      }
      var sl;
      Zs(d) ? (sl = !0, Up(b)) : sl = !1, Si(b, e);
      var Gl = b.stateNode, nl;
      Gl === null ? (XL(c, b), PR(b, d, o), LX(b, d, o, e), nl = !0) : c === null ? nl = k3(b, d, o, e) : nl = M3(c, b, d, o, e);
      var Ul = RX(c, b, d, nl, sl, e);
      {
        var Dl = b.stateNode;
        nl && Dl.props !== o && (qG || m("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", bZ(b) || "a component"), qG = !0);
      }
      return Ul;
    }
    function RX(c, b, d, o, e, L) {
      uY(c, b);
      var X = (b.flags & RZ) !== Pl;
      if (!o && !X)
        return e && v0(b, d, !1), Qs(c, b, L);
      var K = b.stateNode;
      Pe.current = b;
      var Y;
      if (X && typeof d.getDerivedStateFromError != "function")
        Y = null, ER();
      else {
        Po(b);
        {
          if (Bb(!0), Y = K.render(), b.mode & Gc) {
            Jc(!0);
            try {
              K.render();
            } finally {
              Jc(!1);
            }
          }
          Bb(!1);
        }
        $m();
      }
      return b.flags |= Pm, c !== null && X ? w3(c, b, Y, L) : Sb(c, b, Y, L), b.memoizedState = K.state, e && v0(b, d, !0), b.child;
    }
    function dY(c) {
      var b = c.stateNode;
      b.pendingContext ? H0(c, b.pendingContext, b.pendingContext !== b.context) : b.context && H0(c, b.context, !1), Yt(c, b.containerInfo);
    }
    function g3(c, b, d) {
      if (dY(b), c === null)
        throw new Error("Should have a current fiber. This is a bug in React.");
      var o = b.pendingProps, e = b.memoizedState, L = e.element;
      iR(c, b), Qp(b, o, null, d);
      var X = b.memoizedState;
      b.stateNode;
      var K = X.element;
      if (e.isDehydrated) {
        var Y = {
          element: K,
          isDehydrated: !1,
          cache: X.cache,
          pendingSuspenseBoundaries: X.pendingSuspenseBoundaries,
          transitions: X.transitions
        }, N = b.updateQueue;
        if (N.baseState = Y, b.memoizedState = Y, b.flags & Ns) {
          var H = $G(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), b);
          return GY(c, b, K, d, H);
        } else if (K !== L) {
          var q = $G(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), b);
          return GY(c, b, K, d, q);
        } else {
          fH(b);
          var $ = cR(b, null, K, d);
          b.child = $;
          for (var sl = $; sl; )
            sl.flags = sl.flags & ~Xc | ws, sl = sl.sibling;
        }
      } else {
        if (Li(), K === L)
          return Qs(c, b, d);
        Sb(c, b, K, d);
      }
      return b.child;
    }
    function GY(c, b, d, o, e) {
      return Li(), ot(e), b.flags |= Ns, Sb(c, b, d, o), b.child;
    }
    function v3(c, b, d) {
      nR(b), c === null && it(b);
      var o = b.type, e = b.pendingProps, L = c !== null ? c.memoizedProps : null, X = e.children, K = BS(o, e);
      return K ? X = null : L !== null && BS(o, L) && (b.flags |= Do), uY(c, b), Sb(c, b, X, d), b.child;
    }
    function T3(c, b) {
      return c === null && it(b), null;
    }
    function f3(c, b, d, o) {
      XL(c, b);
      var e = b.pendingProps, L = d, X = L._payload, K = L._init, Y = K(X);
      b.type = Y;
      var N = b.tag = Tv(Y), H = ru(Y, e), q;
      switch (N) {
        case n:
          return YX(b, Y), b.type = Y = Fi(Y), q = xX(null, b, Y, H, o), q;
        case p:
          return b.type = Y = cK(Y), q = sY(null, b, Y, H, o), q;
        case k:
          return b.type = Y = bK(Y), q = lY(null, b, Y, H, o), q;
        case z: {
          if (b.type !== b.elementType) {
            var $ = Y.propTypes;
            $ && ku(
              $,
              H,
              // Resolved for outer only
              "prop",
              tZ(Y)
            );
          }
          return q = ZY(
            null,
            b,
            Y,
            ru(Y.type, H),
            // The inner type can have defaults too
            o
          ), q;
        }
      }
      var sl = "";
      throw Y !== null && typeof Y == "object" && Y.$$typeof === jl && (sl = " Did you wrap a component in React.lazy() more than once?"), new Error("Element type is invalid. Received a promise that resolves to: " + Y + ". " + ("Lazy element type must resolve to a class or function." + sl));
    }
    function E3(c, b, d, o, e) {
      XL(c, b), b.tag = p;
      var L;
      return Zs(d) ? (L = !0, Up(b)) : L = !1, Si(b, e), PR(b, d, o), LX(b, d, o, e), RX(null, b, d, !0, L, e);
    }
    function B3(c, b, d, o) {
      XL(c, b);
      var e = b.pendingProps, L;
      {
        var X = ei(b, d, !1);
        L = ai(b, X);
      }
      Si(b, o);
      var K, Y;
      Po(b);
      {
        if (d.prototype && typeof d.prototype.render == "function") {
          var N = tZ(d) || "Unknown";
          tX[N] || (m("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", N, N), tX[N] = !0);
        }
        b.mode & Gc && Iu.recordLegacyContextWarning(b, null), Bb(!0), Pe.current = b, K = xi(null, b, d, e, L, o), Y = Ri(), Bb(!1);
      }
      if ($m(), b.flags |= Pm, typeof K == "object" && K !== null && typeof K.render == "function" && K.$$typeof === void 0) {
        var H = tZ(d) || "Unknown";
        Oe[H] || (m("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", H, H, H), Oe[H] = !0);
      }
      if (
        // Run these checks in production only if the flag is off.
        // Eventually we'll delete this branch altogether.
        typeof K == "object" && K !== null && typeof K.render == "function" && K.$$typeof === void 0
      ) {
        {
          var q = tZ(d) || "Unknown";
          Oe[q] || (m("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", q, q, q), Oe[q] = !0);
        }
        b.tag = p, b.memoizedState = null, b.updateQueue = null;
        var $ = !1;
        return Zs(d) ? ($ = !0, Up(b)) : $ = !1, b.memoizedState = K.state !== null && K.state !== void 0 ? K.state : null, xt(b), QR(b, K), LX(b, d, e, o), RX(null, b, d, !0, $, o);
      } else {
        if (b.tag = n, b.mode & Gc) {
          Jc(!0);
          try {
            K = xi(null, b, d, e, L, o), Y = Ri();
          } finally {
            Jc(!1);
          }
        }
        return Dc() && Y && ut(b), Sb(null, b, K, o), YX(b, d), b.child;
      }
    }
    function YX(c, b) {
      {
        if (b && b.childContextTypes && m("%s(...): childContextTypes cannot be defined on a function component.", b.displayName || b.name || "Component"), c.ref !== null) {
          var d = "", o = Rd();
          o && (d += `

Check the render method of \`` + o + "`.");
          var e = o || "", L = c._debugSource;
          L && (e = L.fileName + ":" + L.lineNumber), WX[e] || (WX[e] = !0, m("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", d));
        }
        if (b.defaultProps !== void 0) {
          var X = tZ(b) || "Unknown";
          Ae[X] || (m("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", X), Ae[X] = !0);
        }
        if (typeof b.getDerivedStateFromProps == "function") {
          var K = tZ(b) || "Unknown";
          KX[K] || (m("%s: Function components do not support getDerivedStateFromProps.", K), KX[K] = !0);
        }
        if (typeof b.contextType == "object" && b.contextType !== null) {
          var Y = tZ(b) || "Unknown";
          XX[Y] || (m("%s: Function components do not support contextType.", Y), XX[Y] = !0);
        }
      }
    }
    var kX = {
      dehydrated: null,
      treeContext: null,
      retryLane: Hc
    };
    function MX(c) {
      return {
        baseLanes: c,
        cachePool: N3(),
        transitions: null
      };
    }
    function D3(c, b) {
      var d = null;
      return {
        baseLanes: mZ(c.baseLanes, b),
        cachePool: d,
        transitions: c.transitions
      };
    }
    function j3(c, b, d, o) {
      if (b !== null) {
        var e = b.memoizedState;
        if (e === null)
          return !1;
      }
      return It(c, ge);
    }
    function Q3(c, b) {
      return _n(c.childLanes, b);
    }
    function mY(c, b, d) {
      var o = b.pendingProps;
      cT(b) && (b.flags |= RZ);
      var e = Uu.current, L = !1, X = (b.flags & RZ) !== Pl;
      if (X || j3(e, c) ? (L = !0, b.flags &= ~RZ) : (c === null || c.memoizedState !== null) && (e = e3(e, LR)), e = Xi(e), Ed(b, e), c === null) {
        it(b);
        var K = b.memoizedState;
        if (K !== null) {
          var Y = K.dehydrated;
          if (Y !== null)
            return q3(b, Y);
        }
        var N = o.children, H = o.fallback;
        if (L) {
          var q = P3(b, N, H, d), $ = b.child;
          return $.memoizedState = MX(d), b.memoizedState = kX, q;
        } else
          return IX(b, N);
      } else {
        var sl = c.memoizedState;
        if (sl !== null) {
          var Gl = sl.dehydrated;
          if (Gl !== null)
            return _3(c, b, X, o, Gl, sl, d);
        }
        if (L) {
          var nl = o.fallback, Ul = o.children, Dl = A3(c, b, Ul, nl, d), fl = b.child, hZ = c.child.memoizedState;
          return fl.memoizedState = hZ === null ? MX(d) : D3(hZ, d), fl.childLanes = Q3(c, d), b.memoizedState = kX, Dl;
        } else {
          var eZ = o.children, bl = O3(c, b, eZ, d);
          return b.memoizedState = null, bl;
        }
      }
    }
    function IX(c, b, d) {
      var o = c.mode, e = {
        mode: "visible",
        children: b
      }, L = UX(e, o);
      return L.return = c, c.child = L, L;
    }
    function P3(c, b, d, o) {
      var e = c.mode, L = c.child, X = {
        mode: "hidden",
        children: b
      }, K, Y;
      return (e & pZ) === Ql && L !== null ? (K = L, K.childLanes = Sl, K.pendingProps = X, c.mode & rZ && (K.actualDuration = 0, K.actualStartTime = -1, K.selfBaseDuration = 0, K.treeBaseDuration = 0), Y = $d(d, e, o, null)) : (K = UX(X, e), Y = $d(d, e, o, null)), K.return = c, Y.return = c, K.sibling = Y, c.child = K, Y;
    }
    function UX(c, b, d) {
      return ik(c, b, Sl, null);
    }
    function iY(c, b) {
      return bm(c, b);
    }
    function O3(c, b, d, o) {
      var e = c.child, L = e.sibling, X = iY(e, {
        mode: "visible",
        children: d
      });
      if ((b.mode & pZ) === Ql && (X.lanes = o), X.return = b, X.sibling = null, L !== null) {
        var K = b.deletions;
        K === null ? (b.deletions = [L], b.flags |= UG) : K.push(L);
      }
      return b.child = X, X;
    }
    function A3(c, b, d, o, e) {
      var L = b.mode, X = c.child, K = X.sibling, Y = {
        mode: "hidden",
        children: d
      }, N;
      if (
        // In legacy mode, we commit the primary tree as if it successfully
        // completed, even though it's in an inconsistent state.
        (L & pZ) === Ql && // Make sure we're on the second pass, i.e. the primary child fragment was
        // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        b.child !== X
      ) {
        var H = b.child;
        N = H, N.childLanes = Sl, N.pendingProps = Y, b.mode & rZ && (N.actualDuration = 0, N.actualStartTime = -1, N.selfBaseDuration = X.selfBaseDuration, N.treeBaseDuration = X.treeBaseDuration), b.deletions = null;
      } else
        N = iY(X, Y), N.subtreeFlags = X.subtreeFlags & Js;
      var q;
      return K !== null ? q = bm(K, o) : (q = $d(o, L, e, null), q.flags |= Xc), q.return = b, N.return = b, N.sibling = q, b.child = N, q;
    }
    function tL(c, b, d, o) {
      o !== null && ot(o), hi(b, c.child, null, d);
      var e = b.pendingProps, L = e.children, X = IX(b, L);
      return X.flags |= Xc, b.memoizedState = null, X;
    }
    function $3(c, b, d, o, e) {
      var L = b.mode, X = {
        mode: "visible",
        children: d
      }, K = UX(X, L), Y = $d(o, L, e, null);
      return Y.flags |= Xc, K.return = b, Y.return = b, K.sibling = Y, b.child = K, (b.mode & pZ) !== Ql && hi(b, c.child, null, e), Y;
    }
    function q3(c, b, d) {
      return (c.mode & pZ) === Ql ? (m("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components."), c.lanes = ql) : PS(b) ? c.lanes = zG : c.lanes = Db, null;
    }
    function _3(c, b, d, o, e, L, X) {
      if (d)
        if (b.flags & Ns) {
          b.flags &= ~Ns;
          var bl = hX(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
          return tL(c, b, X, bl);
        } else {
          if (b.memoizedState !== null)
            return b.child = c.child, b.flags |= RZ, null;
          var pl = o.children, ul = o.fallback, Xl = $3(c, b, pl, ul, X), Nl = b.child;
          return Nl.memoizedState = MX(X), b.memoizedState = kX, Xl;
        }
      else {
        if (vH(), (b.mode & pZ) === Ql)
          return tL(
            c,
            b,
            X,
            // TODO: When we delete legacy mode, we should make this error argument
            // required — every concurrent mode path that causes hydration to
            // de-opt to client rendering should have an error message.
            null
          );
        if (PS(e)) {
          var K, Y, N;
          {
            var H = bH(e);
            K = H.digest, Y = H.message, N = H.stack;
          }
          var q;
          Y ? q = new Error(Y) : q = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
          var $ = hX(q, K, N);
          return tL(c, b, X, $);
        }
        var sl = jb(X, c.childLanes);
        if (Fu || sl) {
          var Gl = UL();
          if (Gl !== null) {
            var nl = iw(Gl, X);
            if (nl !== Hc && nl !== L.retryLane) {
              L.retryLane = nl;
              var Ul = jZ;
              rb(c, nl), rc(Gl, c, nl, Ul);
            }
          }
          $X();
          var Dl = hX(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
          return tL(c, b, X, Dl);
        } else if (r0(e)) {
          b.flags |= RZ, b.child = c.child;
          var fl = xv.bind(null, c);
          return uH(e, fl), null;
        } else {
          EH(b, e, L.treeContext);
          var hZ = o.children, eZ = IX(b, hZ);
          return eZ.flags |= ws, eZ;
        }
      }
    }
    function oY(c, b, d) {
      c.lanes = mZ(c.lanes, b);
      var o = c.alternate;
      o !== null && (o.lanes = mZ(o.lanes, b)), Xt(c.return, b, d);
    }
    function lg(c, b, d) {
      for (var o = b; o !== null; ) {
        if (o.tag === w) {
          var e = o.memoizedState;
          e !== null && oY(o, d, c);
        } else if (o.tag === g)
          oY(o, d, c);
        else if (o.child !== null) {
          o.child.return = o, o = o.child;
          continue;
        }
        if (o === c)
          return;
        for (; o.sibling === null; ) {
          if (o.return === null || o.return === c)
            return;
          o = o.return;
        }
        o.sibling.return = o.return, o = o.sibling;
      }
    }
    function Zg(c) {
      for (var b = c, d = null; b !== null; ) {
        var o = b.alternate;
        o !== null && $p(o) === null && (d = b), b = b.sibling;
      }
      return d;
    }
    function cg(c) {
      if (c !== void 0 && c !== "forwards" && c !== "backwards" && c !== "together" && !VX[c])
        if (VX[c] = !0, typeof c == "string")
          switch (c.toLowerCase()) {
            case "together":
            case "forwards":
            case "backwards": {
              m('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', c, c.toLowerCase());
              break;
            }
            case "forward":
            case "backward": {
              m('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', c, c.toLowerCase());
              break;
            }
            default:
              m('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', c);
              break;
          }
        else
          m('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', c);
    }
    function bg(c, b) {
      c !== void 0 && !SL[c] && (c !== "collapsed" && c !== "hidden" ? (SL[c] = !0, m('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', c)) : b !== "forwards" && b !== "backwards" && (SL[c] = !0, m('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', c)));
    }
    function eY(c, b) {
      {
        var d = xZ(c), o = !d && typeof Lb(c) == "function";
        if (d || o) {
          var e = d ? "array" : "iterable";
          return m("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", e, b, e), !1;
        }
      }
      return !0;
    }
    function ug(c, b) {
      if ((b === "forwards" || b === "backwards") && c !== void 0 && c !== null && c !== !1)
        if (xZ(c)) {
          for (var d = 0; d < c.length; d++)
            if (!eY(c[d], d))
              return;
        } else {
          var o = Lb(c);
          if (typeof o == "function") {
            var e = o.call(c);
            if (e)
              for (var L = e.next(), X = 0; !L.done; L = e.next()) {
                if (!eY(L.value, X))
                  return;
                X++;
              }
          } else
            m('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', b);
        }
    }
    function CX(c, b, d, o, e) {
      var L = c.memoizedState;
      L === null ? c.memoizedState = {
        isBackwards: b,
        rendering: null,
        renderingStartTime: 0,
        last: o,
        tail: d,
        tailMode: e
      } : (L.isBackwards = b, L.rendering = null, L.renderingStartTime = 0, L.last = o, L.tail = d, L.tailMode = e);
    }
    function aY(c, b, d) {
      var o = b.pendingProps, e = o.revealOrder, L = o.tail, X = o.children;
      cg(e), bg(L, e), ug(X, e), Sb(c, b, X, d);
      var K = Uu.current, Y = It(K, ge);
      if (Y)
        K = Ut(K, ge), b.flags |= RZ;
      else {
        var N = c !== null && (c.flags & RZ) !== Pl;
        N && lg(b, b.child, d), K = Xi(K);
      }
      if (Ed(b, K), (b.mode & pZ) === Ql)
        b.memoizedState = null;
      else
        switch (e) {
          case "forwards": {
            var H = Zg(b.child), q;
            H === null ? (q = b.child, b.child = null) : (q = H.sibling, H.sibling = null), CX(
              b,
              !1,
              // isBackwards
              q,
              H,
              L
            );
            break;
          }
          case "backwards": {
            var $ = null, sl = b.child;
            for (b.child = null; sl !== null; ) {
              var Gl = sl.alternate;
              if (Gl !== null && $p(Gl) === null) {
                b.child = sl;
                break;
              }
              var nl = sl.sibling;
              sl.sibling = $, $ = sl, sl = nl;
            }
            CX(
              b,
              !0,
              // isBackwards
              $,
              null,
              // last
              L
            );
            break;
          }
          case "together": {
            CX(
              b,
              !1,
              // isBackwards
              null,
              // tail
              null,
              // last
              void 0
            );
            break;
          }
          default:
            b.memoizedState = null;
        }
      return b.child;
    }
    function sg(c, b, d) {
      Yt(b, b.stateNode.containerInfo);
      var o = b.pendingProps;
      return c === null ? b.child = hi(b, null, o, d) : Sb(c, b, o, d), b.child;
    }
    var nY = !1;
    function dg(c, b, d) {
      var o = b.type, e = o._context, L = b.pendingProps, X = b.memoizedProps, K = L.value;
      {
        "value" in L || nY || (nY = !0, m("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"));
        var Y = b.type.propTypes;
        Y && ku(Y, L, "prop", "Context.Provider");
      }
      if (sR(b, e, K), X !== null) {
        var N = X.value;
        if (Ob(N, K)) {
          if (X.children === L.children && !Mp())
            return Qs(c, b, d);
        } else
          c3(b, e, d);
      }
      var H = L.children;
      return Sb(c, b, H, d), b.child;
    }
    var pY = !1;
    function Gg(c, b, d) {
      var o = b.type;
      o._context === void 0 ? o !== o.Consumer && (pY || (pY = !0, m("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : o = o._context;
      var e = b.pendingProps, L = e.children;
      typeof L != "function" && m("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."), Si(b, d);
      var X = Kc(o);
      Po(b);
      var K;
      return Pe.current = b, Bb(!0), K = L(X), Bb(!1), $m(), b.flags |= Pm, Sb(c, b, K, d), b.child;
    }
    function $e() {
      Fu = !0;
    }
    function XL(c, b) {
      (b.mode & pZ) === Ql && c !== null && (c.alternate = null, b.alternate = null, b.flags |= Xc);
    }
    function Qs(c, b, d) {
      return c !== null && (b.dependencies = c.dependencies), ER(), ia(b.lanes), jb(d, b.childLanes) ? (l3(c, b), b.child) : null;
    }
    function mg(c, b, d) {
      {
        var o = b.return;
        if (o === null)
          throw new Error("Cannot swap the root fiber.");
        if (c.alternate = null, b.alternate = null, d.index = b.index, d.sibling = b.sibling, d.return = b.return, d.ref = b.ref, b === o.child)
          o.child = d;
        else {
          var e = o.child;
          if (e === null)
            throw new Error("Expected parent to have a child.");
          for (; e.sibling !== b; )
            if (e = e.sibling, e === null)
              throw new Error("Expected to find the previous sibling.");
          e.sibling = d;
        }
        var L = o.deletions;
        return L === null ? (o.deletions = [c], o.flags |= UG) : L.push(c), d.flags |= Xc, d;
      }
    }
    function rX(c, b) {
      var d = c.lanes;
      return !!jb(d, b);
    }
    function ig(c, b, d) {
      switch (b.tag) {
        case h:
          dY(b), b.stateNode, Li();
          break;
        case t:
          nR(b);
          break;
        case p: {
          var o = b.type;
          Zs(o) && Up(b);
          break;
        }
        case S:
          Yt(b, b.stateNode.containerInfo);
          break;
        case r: {
          var e = b.memoizedProps.value, L = b.type._context;
          sR(b, L, e);
          break;
        }
        case U:
          {
            var X = jb(d, b.childLanes);
            X && (b.flags |= SZ);
            {
              var K = b.stateNode;
              K.effectDuration = 0, K.passiveEffectDuration = 0;
            }
          }
          break;
        case w: {
          var Y = b.memoizedState;
          if (Y !== null) {
            if (Y.dehydrated !== null)
              return Ed(b, Xi(Uu.current)), b.flags |= RZ, null;
            var N = b.child, H = N.childLanes;
            if (jb(d, H))
              return mY(c, b, d);
            Ed(b, Xi(Uu.current));
            var q = Qs(c, b, d);
            return q !== null ? q.sibling : null;
          } else
            Ed(b, Xi(Uu.current));
          break;
        }
        case g: {
          var $ = (c.flags & RZ) !== Pl, sl = jb(d, b.childLanes);
          if ($) {
            if (sl)
              return aY(c, b, d);
            b.flags |= RZ;
          }
          var Gl = b.memoizedState;
          if (Gl !== null && (Gl.rendering = null, Gl.tail = null, Gl.lastEffect = null), Ed(b, Uu.current), sl)
            break;
          return null;
        }
        case J:
        case F:
          return b.lanes = Sl, bY(c, b, d);
      }
      return Qs(c, b, d);
    }
    function LY(c, b, d) {
      if (b._debugNeedsRemount && c !== null)
        return mg(c, b, mK(b.type, b.key, b.pendingProps, b._debugOwner || null, b.mode, b.lanes));
      if (c !== null) {
        var o = c.memoizedProps, e = b.pendingProps;
        if (o !== e || Mp() || // Force a re-render if the implementation changed due to hot reload:
        b.type !== c.type)
          Fu = !0;
        else {
          var L = rX(c, d);
          if (!L && // If this is the second pass of an error or suspense boundary, there
          // may not be work scheduled on `current`, so we check for this flag.
          (b.flags & RZ) === Pl)
            return Fu = !1, ig(c, b, d);
          (c.flags & Hy) !== Pl ? Fu = !0 : Fu = !1;
        }
      } else if (Fu = !1, Dc() && NH(b)) {
        var X = b.index, K = wH();
        E0(b, K, X);
      }
      switch (b.lanes = Sl, b.tag) {
        case y:
          return B3(c, b, b.type, d);
        case C: {
          var Y = b.elementType;
          return f3(c, b, Y, d);
        }
        case n: {
          var N = b.type, H = b.pendingProps, q = b.elementType === N ? H : ru(N, H);
          return xX(c, b, N, q, d);
        }
        case p: {
          var $ = b.type, sl = b.pendingProps, Gl = b.elementType === $ ? sl : ru($, sl);
          return sY(c, b, $, Gl, d);
        }
        case h:
          return g3(c, b, d);
        case t:
          return v3(c, b, d);
        case W:
          return T3(c, b);
        case w:
          return mY(c, b, d);
        case S:
          return sg(c, b, d);
        case k: {
          var nl = b.type, Ul = b.pendingProps, Dl = b.elementType === nl ? Ul : ru(nl, Ul);
          return lY(c, b, nl, Dl, d);
        }
        case V:
          return z3(c, b, d);
        case R:
          return J3(c, b, d);
        case U:
          return H3(c, b, d);
        case r:
          return dg(c, b, d);
        case x:
          return Gg(c, b, d);
        case z: {
          var fl = b.type, hZ = b.pendingProps, eZ = ru(fl, hZ);
          if (b.type !== b.elementType) {
            var bl = fl.propTypes;
            bl && ku(
              bl,
              eZ,
              // Resolved for outer only
              "prop",
              tZ(fl)
            );
          }
          return eZ = ru(fl.type, eZ), ZY(c, b, fl, eZ, d);
        }
        case D:
          return cY(c, b, b.type, b.pendingProps, d);
        case j: {
          var pl = b.type, ul = b.pendingProps, Xl = b.elementType === pl ? ul : ru(pl, ul);
          return E3(c, b, pl, Xl, d);
        }
        case g:
          return aY(c, b, d);
        case A:
          break;
        case J:
          return bY(c, b, d);
      }
      throw new Error("Unknown unit of work tag (" + b.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function Yi(c) {
      c.flags |= SZ;
    }
    function hY(c) {
      c.flags |= Id, c.flags |= gy;
    }
    var yY, FX, SY, tY;
    yY = function(c, b, d, o) {
      for (var e = b.child; e !== null; ) {
        if (e.tag === t || e.tag === W)
          CJ(c, e.stateNode);
        else if (e.tag !== S) {
          if (e.child !== null) {
            e.child.return = e, e = e.child;
            continue;
          }
        }
        if (e === b)
          return;
        for (; e.sibling === null; ) {
          if (e.return === null || e.return === b)
            return;
          e = e.return;
        }
        e.sibling.return = e.return, e = e.sibling;
      }
    }, FX = function(c, b) {
    }, SY = function(c, b, d, o, e) {
      var L = c.memoizedProps;
      if (L !== o) {
        var X = b.stateNode, K = kt(), Y = FJ(X, d, L, o, e, K);
        b.updateQueue = Y, Y && Yi(b);
      }
    }, tY = function(c, b, d, o) {
      d !== o && Yi(b);
    };
    function qe(c, b) {
      if (!Dc())
        switch (c.tailMode) {
          case "hidden": {
            for (var d = c.tail, o = null; d !== null; )
              d.alternate !== null && (o = d), d = d.sibling;
            o === null ? c.tail = null : o.sibling = null;
            break;
          }
          case "collapsed": {
            for (var e = c.tail, L = null; e !== null; )
              e.alternate !== null && (L = e), e = e.sibling;
            L === null ? !b && c.tail !== null ? c.tail.sibling = null : c.tail = null : L.sibling = null;
            break;
          }
        }
    }
    function Qc(c) {
      var b = c.alternate !== null && c.alternate.child === c.child, d = Sl, o = Pl;
      if (b) {
        if ((c.mode & rZ) !== Ql) {
          for (var Y = c.selfBaseDuration, N = c.child; N !== null; )
            d = mZ(d, mZ(N.lanes, N.childLanes)), o |= N.subtreeFlags & Js, o |= N.flags & Js, Y += N.treeBaseDuration, N = N.sibling;
          c.treeBaseDuration = Y;
        } else
          for (var H = c.child; H !== null; )
            d = mZ(d, mZ(H.lanes, H.childLanes)), o |= H.subtreeFlags & Js, o |= H.flags & Js, H.return = c, H = H.sibling;
        c.subtreeFlags |= o;
      } else {
        if ((c.mode & rZ) !== Ql) {
          for (var e = c.actualDuration, L = c.selfBaseDuration, X = c.child; X !== null; )
            d = mZ(d, mZ(X.lanes, X.childLanes)), o |= X.subtreeFlags, o |= X.flags, e += X.actualDuration, L += X.treeBaseDuration, X = X.sibling;
          c.actualDuration = e, c.treeBaseDuration = L;
        } else
          for (var K = c.child; K !== null; )
            d = mZ(d, mZ(K.lanes, K.childLanes)), o |= K.subtreeFlags, o |= K.flags, K.return = c, K = K.sibling;
        c.subtreeFlags |= o;
      }
      return c.childLanes = d, b;
    }
    function og(c, b, d) {
      if (PH() && (b.mode & pZ) !== Ql && (b.flags & RZ) === Pl)
        return A0(b), Li(), b.flags |= Ns | jo | yb, !1;
      var o = wp(b);
      if (d !== null && d.dehydrated !== null)
        if (c === null) {
          if (!o)
            throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
          if (jH(b), Qc(b), (b.mode & rZ) !== Ql) {
            var e = d !== null;
            if (e) {
              var L = b.child;
              L !== null && (b.treeBaseDuration -= L.treeBaseDuration);
            }
          }
          return !1;
        } else {
          if (Li(), (b.flags & RZ) === Pl && (b.memoizedState = null), b.flags |= SZ, Qc(b), (b.mode & rZ) !== Ql) {
            var X = d !== null;
            if (X) {
              var K = b.child;
              K !== null && (b.treeBaseDuration -= K.treeBaseDuration);
            }
          }
          return !1;
        }
      else
        return $0(), !0;
    }
    function XY(c, b, d) {
      var o = b.pendingProps;
      switch (st(b), b.tag) {
        case y:
        case C:
        case D:
        case n:
        case k:
        case V:
        case R:
        case U:
        case x:
        case z:
          return Qc(b), null;
        case p: {
          var e = b.type;
          return Zs(e) && Ip(b), Qc(b), null;
        }
        case h: {
          var L = b.stateNode;
          if (ti(b), Zt(b), rt(), L.pendingContext && (L.context = L.pendingContext, L.pendingContext = null), c === null || c.child === null) {
            var X = wp(b);
            if (X)
              Yi(b);
            else if (c !== null) {
              var K = c.memoizedState;
              // Check if this is a client root
              (!K.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
              (b.flags & Ns) !== Pl) && (b.flags |= CG, $0());
            }
          }
          return FX(c, b), Qc(b), null;
        }
        case t: {
          Mt(b);
          var Y = aR(), N = b.type;
          if (c !== null && b.stateNode != null)
            SY(c, b, N, o, Y), c.ref !== b.ref && hY(b);
          else {
            if (!o) {
              if (b.stateNode === null)
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              return Qc(b), null;
            }
            var H = kt(), q = wp(b);
            if (q)
              BH(b, Y, H) && Yi(b);
            else {
              var $ = UJ(N, o, Y, H, b);
              yY($, b, !1, !1), b.stateNode = $, rJ($, N, o, Y) && Yi(b);
            }
            b.ref !== null && hY(b);
          }
          return Qc(b), null;
        }
        case W: {
          var sl = o;
          if (c && b.stateNode != null) {
            var Gl = c.memoizedProps;
            tY(c, b, Gl, sl);
          } else {
            if (typeof sl != "string" && b.stateNode === null)
              throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
            var nl = aR(), Ul = kt(), Dl = wp(b);
            Dl ? DH(b) && Yi(b) : b.stateNode = NJ(sl, nl, Ul, b);
          }
          return Qc(b), null;
        }
        case w: {
          Ki(b);
          var fl = b.memoizedState;
          if (c === null || c.memoizedState !== null && c.memoizedState.dehydrated !== null) {
            var hZ = og(c, b, fl);
            if (!hZ)
              return b.flags & yb ? b : null;
          }
          if ((b.flags & RZ) !== Pl)
            return b.lanes = d, (b.mode & rZ) !== Ql && bX(b), b;
          var eZ = fl !== null, bl = c !== null && c.memoizedState !== null;
          if (eZ !== bl && eZ) {
            var pl = b.child;
            if (pl.flags |= rG, (b.mode & pZ) !== Ql) {
              var ul = c === null && (b.memoizedProps.unstable_avoidThisFallback !== !0 || !Zl);
              ul || It(Uu.current, LR) ? ev() : $X();
            }
          }
          var Xl = b.updateQueue;
          if (Xl !== null && (b.flags |= SZ), Qc(b), (b.mode & rZ) !== Ql && eZ) {
            var Nl = b.child;
            Nl !== null && (b.treeBaseDuration -= Nl.treeBaseDuration);
          }
          return null;
        }
        case S:
          return ti(b), FX(c, b), c === null && kH(b.stateNode.containerInfo), Qc(b), null;
        case r:
          var Cl = b.type._context;
          return tt(Cl, b), Qc(b), null;
        case j: {
          var Al = b.type;
          return Zs(Al) && Ip(b), Qc(b), null;
        }
        case g: {
          Ki(b);
          var lZ = b.memoizedState;
          if (lZ === null)
            return Qc(b), null;
          var NZ = (b.flags & RZ) !== Pl, WZ = lZ.rendering;
          if (WZ === null)
            if (NZ)
              qe(lZ, !1);
            else {
              var nc = nv() && (c === null || (c.flags & RZ) === Pl);
              if (!nc)
                for (var VZ = b.child; VZ !== null; ) {
                  var mc = $p(VZ);
                  if (mc !== null) {
                    NZ = !0, b.flags |= RZ, qe(lZ, !1);
                    var ib = mc.updateQueue;
                    return ib !== null && (b.updateQueue = ib, b.flags |= SZ), b.subtreeFlags = Pl, Z3(b, d), Ed(b, Ut(Uu.current, ge)), b.child;
                  }
                  VZ = VZ.sibling;
                }
              lZ.tail !== null && zc() > TY() && (b.flags |= RZ, NZ = !0, qe(lZ, !1), b.lanes = t5);
            }
          else {
            if (!NZ) {
              var qc = $p(WZ);
              if (qc !== null) {
                b.flags |= RZ, NZ = !0;
                var qb = qc.updateQueue;
                if (qb !== null && (b.updateQueue = qb, b.flags |= SZ), qe(lZ, !0), lZ.tail === null && lZ.tailMode === "hidden" && !WZ.alternate && !Dc())
                  return Qc(b), null;
              } else // The time it took to render last row is greater than the remaining
              // time we have to render. So rendering one more row would likely
              // exceed it.
              zc() * 2 - lZ.renderingStartTime > TY() && d !== Db && (b.flags |= RZ, NZ = !0, qe(lZ, !1), b.lanes = t5);
            }
            if (lZ.isBackwards)
              WZ.sibling = b.child, b.child = WZ;
            else {
              var Kb = lZ.last;
              Kb !== null ? Kb.sibling = WZ : b.child = WZ, lZ.last = WZ;
            }
          }
          if (lZ.tail !== null) {
            var Wb = lZ.tail;
            lZ.rendering = Wb, lZ.tail = Wb.sibling, lZ.renderingStartTime = zc(), Wb.sibling = null;
            var ob = Uu.current;
            return NZ ? ob = Ut(ob, ge) : ob = Xi(ob), Ed(b, ob), Wb;
          }
          return Qc(b), null;
        }
        case A:
          break;
        case J:
        case F: {
          AX(b);
          var qs = b.memoizedState, Ni = qs !== null;
          if (c !== null) {
            var pa = c.memoizedState, is = pa !== null;
            is !== Ni && // LegacyHidden doesn't do any hiding — it only pre-renders.
            !il && (b.flags |= rG);
          }
          return !Ni || (b.mode & pZ) === Ql ? Qc(b) : jb(ms, Db) && (Qc(b), b.subtreeFlags & (Xc | SZ) && (b.flags |= rG)), null;
        }
        case v:
          return null;
        case T:
          return null;
      }
      throw new Error("Unknown unit of work tag (" + b.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function eg(c, b, d) {
      switch (st(b), b.tag) {
        case p: {
          var o = b.type;
          Zs(o) && Ip(b);
          var e = b.flags;
          return e & yb ? (b.flags = e & ~yb | RZ, (b.mode & rZ) !== Ql && bX(b), b) : null;
        }
        case h: {
          b.stateNode, ti(b), Zt(b), rt();
          var L = b.flags;
          return (L & yb) !== Pl && (L & RZ) === Pl ? (b.flags = L & ~yb | RZ, b) : null;
        }
        case t:
          return Mt(b), null;
        case w: {
          Ki(b);
          var X = b.memoizedState;
          if (X !== null && X.dehydrated !== null) {
            if (b.alternate === null)
              throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
            Li();
          }
          var K = b.flags;
          return K & yb ? (b.flags = K & ~yb | RZ, (b.mode & rZ) !== Ql && bX(b), b) : null;
        }
        case g:
          return Ki(b), null;
        case S:
          return ti(b), null;
        case r:
          var Y = b.type._context;
          return tt(Y, b), null;
        case J:
        case F:
          return AX(b), null;
        case v:
          return null;
        default:
          return null;
      }
    }
    function KY(c, b, d) {
      switch (st(b), b.tag) {
        case p: {
          var o = b.type.childContextTypes;
          o != null && Ip(b);
          break;
        }
        case h: {
          b.stateNode, ti(b), Zt(b), rt();
          break;
        }
        case t: {
          Mt(b);
          break;
        }
        case S:
          ti(b);
          break;
        case w:
          Ki(b);
          break;
        case g:
          Ki(b);
          break;
        case r:
          var e = b.type._context;
          tt(e, b);
          break;
        case J:
        case F:
          AX(b);
          break;
      }
    }
    var WY = null;
    WY = /* @__PURE__ */ new Set();
    var KL = !1, Pc = !1, ag = typeof WeakSet == "function" ? WeakSet : Set, Hl = null, ki = null, Mi = null;
    function ng(c) {
      wy(null, function() {
        throw c;
      }), zy();
    }
    var pg = function(c, b) {
      if (b.props = c.memoizedProps, b.state = c.memoizedState, c.mode & rZ)
        try {
          ds(), b.componentWillUnmount();
        } finally {
          ss(c);
        }
      else
        b.componentWillUnmount();
    };
    function VY(c, b) {
      try {
        jd(Yc, c);
      } catch (d) {
        EZ(c, b, d);
      }
    }
    function NX(c, b, d) {
      try {
        pg(c, d);
      } catch (o) {
        EZ(c, b, o);
      }
    }
    function Lg(c, b, d) {
      try {
        d.componentDidMount();
      } catch (o) {
        EZ(c, b, o);
      }
    }
    function xY(c, b) {
      try {
        YY(c);
      } catch (d) {
        EZ(c, b, d);
      }
    }
    function Ii(c, b) {
      var d = c.ref;
      if (d !== null)
        if (typeof d == "function") {
          var o;
          try {
            if (kl && zl && c.mode & rZ)
              try {
                ds(), o = d(null);
              } finally {
                ss(c);
              }
            else
              o = d(null);
          } catch (e) {
            EZ(c, b, e);
          }
          typeof o == "function" && m("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", bZ(c));
        } else
          d.current = null;
    }
    function WL(c, b, d) {
      try {
        d();
      } catch (o) {
        EZ(c, b, o);
      }
    }
    var RY = !1;
    function hg(c, b) {
      MJ(c.containerInfo), Hl = b, yg();
      var d = RY;
      return RY = !1, d;
    }
    function yg() {
      for (; Hl !== null; ) {
        var c = Hl, b = c.child;
        (c.subtreeFlags & Ty) !== Pl && b !== null ? (b.return = c, Hl = b) : Sg();
      }
    }
    function Sg() {
      for (; Hl !== null; ) {
        var c = Hl;
        cc(c);
        try {
          tg(c);
        } catch (d) {
          EZ(c, c.return, d);
        }
        wc();
        var b = c.sibling;
        if (b !== null) {
          b.return = c.return, Hl = b;
          return;
        }
        Hl = c.return;
      }
    }
    function tg(c) {
      var b = c.alternate, d = c.flags;
      if ((d & CG) !== Pl) {
        switch (cc(c), c.tag) {
          case n:
          case k:
          case D:
            break;
          case p: {
            if (b !== null) {
              var o = b.memoizedProps, e = b.memoizedState, L = c.stateNode;
              c.type === c.elementType && !qG && (L.props !== c.memoizedProps && m("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", bZ(c) || "instance"), L.state !== c.memoizedState && m("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", bZ(c) || "instance"));
              var X = L.getSnapshotBeforeUpdate(c.elementType === c.type ? o : ru(c.type, o), e);
              {
                var K = WY;
                X === void 0 && !K.has(c.type) && (K.add(c.type), m("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", bZ(c)));
              }
              L.__reactInternalSnapshotBeforeUpdate = X;
            }
            break;
          }
          case h: {
            {
              var Y = c.stateNode;
              _J(Y.containerInfo);
            }
            break;
          }
          case t:
          case W:
          case S:
          case j:
            break;
          default:
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        wc();
      }
    }
    function Nu(c, b, d) {
      var o = b.updateQueue, e = o !== null ? o.lastEffect : null;
      if (e !== null) {
        var L = e.next, X = L;
        do {
          if ((X.tag & c) === c) {
            var K = X.destroy;
            X.destroy = void 0, K !== void 0 && ((c & jc) !== Fb ? NN(b) : (c & Yc) !== Fb && p5(b), (c & cs) !== Fb && ea(!0), WL(b, d, K), (c & cs) !== Fb && ea(!1), (c & jc) !== Fb ? wN() : (c & Yc) !== Fb && L5());
          }
          X = X.next;
        } while (X !== L);
      }
    }
    function jd(c, b) {
      var d = b.updateQueue, o = d !== null ? d.lastEffect : null;
      if (o !== null) {
        var e = o.next, L = e;
        do {
          if ((L.tag & c) === c) {
            (c & jc) !== Fb ? rN(b) : (c & Yc) !== Fb && zN(b);
            var X = L.create;
            (c & cs) !== Fb && ea(!0), L.destroy = X(), (c & cs) !== Fb && ea(!1), (c & jc) !== Fb ? FN() : (c & Yc) !== Fb && JN();
            {
              var K = L.destroy;
              if (K !== void 0 && typeof K != "function") {
                var Y = void 0;
                (L.tag & Yc) !== Pl ? Y = "useLayoutEffect" : (L.tag & cs) !== Pl ? Y = "useInsertionEffect" : Y = "useEffect";
                var N = void 0;
                K === null ? N = " You returned null. If your effect does not require clean up, return undefined (or nothing)." : typeof K.then == "function" ? N = `

It looks like you wrote ` + Y + `(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:

` + Y + `(() => {
  async function fetchData() {
    // You can await here
    const response = await MyAPI.getData(someId);
    // ...
  }
  fetchData();
}, [someId]); // Or [] if effect doesn't need props or state

Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching` : N = " You returned: " + K, m("%s must not return anything besides a function, which is used for clean-up.%s", Y, N);
              }
            }
          }
          L = L.next;
        } while (L !== e);
      }
    }
    function Xg(c, b) {
      if ((b.flags & SZ) !== Pl)
        switch (b.tag) {
          case U: {
            var d = b.stateNode.passiveEffectDuration, o = b.memoizedProps, e = o.id, L = o.onPostCommit, X = TR(), K = b.alternate === null ? "mount" : "update";
            vR() && (K = "nested-update"), typeof L == "function" && L(e, K, d, X);
            var Y = b.return;
            l: for (; Y !== null; ) {
              switch (Y.tag) {
                case h:
                  var N = Y.stateNode;
                  N.passiveEffectDuration += d;
                  break l;
                case U:
                  var H = Y.stateNode;
                  H.passiveEffectDuration += d;
                  break l;
              }
              Y = Y.return;
            }
            break;
          }
        }
    }
    function Kg(c, b, d, o) {
      if ((d.flags & Qo) !== Pl)
        switch (d.tag) {
          case n:
          case k:
          case D: {
            if (!Pc)
              if (d.mode & rZ)
                try {
                  ds(), jd(Yc | Rc, d);
                } finally {
                  ss(d);
                }
              else
                jd(Yc | Rc, d);
            break;
          }
          case p: {
            var e = d.stateNode;
            if (d.flags & SZ && !Pc)
              if (b === null)
                if (d.type === d.elementType && !qG && (e.props !== d.memoizedProps && m("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", bZ(d) || "instance"), e.state !== d.memoizedState && m("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", bZ(d) || "instance")), d.mode & rZ)
                  try {
                    ds(), e.componentDidMount();
                  } finally {
                    ss(d);
                  }
                else
                  e.componentDidMount();
              else {
                var L = d.elementType === d.type ? b.memoizedProps : ru(d.type, b.memoizedProps), X = b.memoizedState;
                if (d.type === d.elementType && !qG && (e.props !== d.memoizedProps && m("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", bZ(d) || "instance"), e.state !== d.memoizedState && m("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", bZ(d) || "instance")), d.mode & rZ)
                  try {
                    ds(), e.componentDidUpdate(L, X, e.__reactInternalSnapshotBeforeUpdate);
                  } finally {
                    ss(d);
                  }
                else
                  e.componentDidUpdate(L, X, e.__reactInternalSnapshotBeforeUpdate);
              }
            var K = d.updateQueue;
            K !== null && (d.type === d.elementType && !qG && (e.props !== d.memoizedProps && m("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", bZ(d) || "instance"), e.state !== d.memoizedState && m("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", bZ(d) || "instance")), eR(d, K, e));
            break;
          }
          case h: {
            var Y = d.updateQueue;
            if (Y !== null) {
              var N = null;
              if (d.child !== null)
                switch (d.child.tag) {
                  case t:
                    N = d.child.stateNode;
                    break;
                  case p:
                    N = d.child.stateNode;
                    break;
                }
              eR(d, Y, N);
            }
            break;
          }
          case t: {
            var H = d.stateNode;
            if (b === null && d.flags & SZ) {
              var q = d.type, $ = d.memoizedProps;
              gJ(H, q, $);
            }
            break;
          }
          case W:
            break;
          case S:
            break;
          case U: {
            {
              var sl = d.memoizedProps, Gl = sl.onCommit, nl = sl.onRender, Ul = d.stateNode.effectDuration, Dl = TR(), fl = b === null ? "mount" : "update";
              vR() && (fl = "nested-update"), typeof nl == "function" && nl(d.memoizedProps.id, fl, d.actualDuration, d.treeBaseDuration, d.actualStartTime, Dl);
              {
                typeof Gl == "function" && Gl(d.memoizedProps.id, fl, Ul, Dl), Sv(d);
                var hZ = d.return;
                l: for (; hZ !== null; ) {
                  switch (hZ.tag) {
                    case h:
                      var eZ = hZ.stateNode;
                      eZ.effectDuration += Ul;
                      break l;
                    case U:
                      var bl = hZ.stateNode;
                      bl.effectDuration += Ul;
                      break l;
                  }
                  hZ = hZ.return;
                }
              }
            }
            break;
          }
          case w: {
            Ig(c, d);
            break;
          }
          case g:
          case j:
          case A:
          case J:
          case F:
          case T:
            break;
          default:
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      Pc || d.flags & Id && YY(d);
    }
    function Wg(c) {
      switch (c.tag) {
        case n:
        case k:
        case D: {
          if (c.mode & rZ)
            try {
              ds(), VY(c, c.return);
            } finally {
              ss(c);
            }
          else
            VY(c, c.return);
          break;
        }
        case p: {
          var b = c.stateNode;
          typeof b.componentDidMount == "function" && Lg(c, c.return, b), xY(c, c.return);
          break;
        }
        case t: {
          xY(c, c.return);
          break;
        }
      }
    }
    function Vg(c, b) {
      for (var d = null, o = c; ; ) {
        if (o.tag === t) {
          if (d === null) {
            d = o;
            try {
              var e = o.stateNode;
              b ? OJ(e) : $J(o.stateNode, o.memoizedProps);
            } catch (X) {
              EZ(c, c.return, X);
            }
          }
        } else if (o.tag === W) {
          if (d === null)
            try {
              var L = o.stateNode;
              b ? AJ(L) : qJ(L, o.memoizedProps);
            } catch (X) {
              EZ(c, c.return, X);
            }
        } else if (!((o.tag === J || o.tag === F) && o.memoizedState !== null && o !== c)) {
          if (o.child !== null) {
            o.child.return = o, o = o.child;
            continue;
          }
        }
        if (o === c)
          return;
        for (; o.sibling === null; ) {
          if (o.return === null || o.return === c)
            return;
          d === o && (d = null), o = o.return;
        }
        d === o && (d = null), o.sibling.return = o.return, o = o.sibling;
      }
    }
    function YY(c) {
      var b = c.ref;
      if (b !== null) {
        var d = c.stateNode, o;
        switch (c.tag) {
          case t:
            o = d;
            break;
          default:
            o = d;
        }
        if (typeof b == "function") {
          var e;
          if (c.mode & rZ)
            try {
              ds(), e = b(o);
            } finally {
              ss(c);
            }
          else
            e = b(o);
          typeof e == "function" && m("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", bZ(c));
        } else
          b.hasOwnProperty("current") || m("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", bZ(c)), b.current = o;
      }
    }
    function xg(c) {
      var b = c.alternate;
      b !== null && (b.return = null), c.return = null;
    }
    function kY(c) {
      var b = c.alternate;
      b !== null && (c.alternate = null, kY(b));
      {
        if (c.child = null, c.deletions = null, c.sibling = null, c.tag === t) {
          var d = c.stateNode;
          d !== null && UH(d);
        }
        c.stateNode = null, c._debugOwner = null, c.return = null, c.dependencies = null, c.memoizedProps = null, c.memoizedState = null, c.pendingProps = null, c.stateNode = null, c.updateQueue = null;
      }
    }
    function Rg(c) {
      for (var b = c.return; b !== null; ) {
        if (MY(b))
          return b;
        b = b.return;
      }
      throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function MY(c) {
      return c.tag === t || c.tag === h || c.tag === S;
    }
    function IY(c) {
      var b = c;
      l: for (; ; ) {
        for (; b.sibling === null; ) {
          if (b.return === null || MY(b.return))
            return null;
          b = b.return;
        }
        for (b.sibling.return = b.return, b = b.sibling; b.tag !== t && b.tag !== W && b.tag !== E; ) {
          if (b.flags & Xc || b.child === null || b.tag === S)
            continue l;
          b.child.return = b, b = b.child;
        }
        if (!(b.flags & Xc))
          return b.stateNode;
      }
    }
    function Yg(c) {
      var b = Rg(c);
      switch (b.tag) {
        case t: {
          var d = b.stateNode;
          b.flags & Do && (C0(d), b.flags &= ~Do);
          var o = IY(c);
          zX(c, o, d);
          break;
        }
        case h:
        case S: {
          var e = b.stateNode.containerInfo, L = IY(c);
          wX(c, L, e);
          break;
        }
        default:
          throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    function wX(c, b, d) {
      var o = c.tag, e = o === t || o === W;
      if (e) {
        var L = c.stateNode;
        b ? DJ(d, L, b) : EJ(d, L);
      } else if (o !== S) {
        var X = c.child;
        if (X !== null) {
          wX(X, b, d);
          for (var K = X.sibling; K !== null; )
            wX(K, b, d), K = K.sibling;
        }
      }
    }
    function zX(c, b, d) {
      var o = c.tag, e = o === t || o === W;
      if (e) {
        var L = c.stateNode;
        b ? BJ(d, L, b) : fJ(d, L);
      } else if (o !== S) {
        var X = c.child;
        if (X !== null) {
          zX(X, b, d);
          for (var K = X.sibling; K !== null; )
            zX(K, b, d), K = K.sibling;
        }
      }
    }
    var Oc = null, wu = !1;
    function kg(c, b, d) {
      {
        var o = b;
        l: for (; o !== null; ) {
          switch (o.tag) {
            case t: {
              Oc = o.stateNode, wu = !1;
              break l;
            }
            case h: {
              Oc = o.stateNode.containerInfo, wu = !0;
              break l;
            }
            case S: {
              Oc = o.stateNode.containerInfo, wu = !0;
              break l;
            }
          }
          o = o.return;
        }
        if (Oc === null)
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        UY(c, b, d), Oc = null, wu = !1;
      }
      xg(d);
    }
    function Qd(c, b, d) {
      for (var o = d.child; o !== null; )
        UY(c, b, o), o = o.sibling;
    }
    function UY(c, b, d) {
      switch (MN(d), d.tag) {
        case t:
          Pc || Ii(d, b);
        case W: {
          {
            var o = Oc, e = wu;
            Oc = null, Qd(c, b, d), Oc = o, wu = e, Oc !== null && (wu ? QJ(Oc, d.stateNode) : jJ(Oc, d.stateNode));
          }
          return;
        }
        case E: {
          Oc !== null && (wu ? PJ(Oc, d.stateNode) : QS(Oc, d.stateNode));
          return;
        }
        case S: {
          {
            var L = Oc, X = wu;
            Oc = d.stateNode.containerInfo, wu = !0, Qd(c, b, d), Oc = L, wu = X;
          }
          return;
        }
        case n:
        case k:
        case z:
        case D: {
          if (!Pc) {
            var K = d.updateQueue;
            if (K !== null) {
              var Y = K.lastEffect;
              if (Y !== null) {
                var N = Y.next, H = N;
                do {
                  var q = H, $ = q.destroy, sl = q.tag;
                  $ !== void 0 && ((sl & cs) !== Fb ? WL(d, b, $) : (sl & Yc) !== Fb && (p5(d), d.mode & rZ ? (ds(), WL(d, b, $), ss(d)) : WL(d, b, $), L5())), H = H.next;
                } while (H !== N);
              }
            }
          }
          Qd(c, b, d);
          return;
        }
        case p: {
          if (!Pc) {
            Ii(d, b);
            var Gl = d.stateNode;
            typeof Gl.componentWillUnmount == "function" && NX(d, b, Gl);
          }
          Qd(c, b, d);
          return;
        }
        case A: {
          Qd(c, b, d);
          return;
        }
        case J: {
          if (
            // TODO: Remove this dead flag
            d.mode & pZ
          ) {
            var nl = Pc;
            Pc = nl || d.memoizedState !== null, Qd(c, b, d), Pc = nl;
          } else
            Qd(c, b, d);
          break;
        }
        default: {
          Qd(c, b, d);
          return;
        }
      }
    }
    function Mg(c) {
      c.memoizedState;
    }
    function Ig(c, b) {
      var d = b.memoizedState;
      if (d === null) {
        var o = b.alternate;
        if (o !== null) {
          var e = o.memoizedState;
          if (e !== null) {
            var L = e.dehydrated;
            L !== null && nH(L);
          }
        }
      }
    }
    function CY(c) {
      var b = c.updateQueue;
      if (b !== null) {
        c.updateQueue = null;
        var d = c.stateNode;
        d === null && (d = c.stateNode = new ag()), b.forEach(function(o) {
          var e = Rv.bind(null, c, o);
          if (!d.has(o)) {
            if (d.add(o), Ru)
              if (ki !== null && Mi !== null)
                oa(Mi, ki);
              else
                throw Error("Expected finished root and lanes to be set. This is a bug in React.");
            o.then(e, e);
          }
        });
      }
    }
    function Ug(c, b, d) {
      ki = d, Mi = c, cc(b), rY(b, c), cc(b), ki = null, Mi = null;
    }
    function zu(c, b, d) {
      var o = b.deletions;
      if (o !== null)
        for (var e = 0; e < o.length; e++) {
          var L = o[e];
          try {
            kg(c, b, L);
          } catch (Y) {
            EZ(L, b, Y);
          }
        }
      var X = rn();
      if (b.subtreeFlags & fy)
        for (var K = b.child; K !== null; )
          cc(K), rY(K, c), K = K.sibling;
      cc(X);
    }
    function rY(c, b, d) {
      var o = c.alternate, e = c.flags;
      switch (c.tag) {
        case n:
        case k:
        case z:
        case D: {
          if (zu(b, c), Gs(c), e & SZ) {
            try {
              Nu(cs | Rc, c, c.return), jd(cs | Rc, c);
            } catch (Al) {
              EZ(c, c.return, Al);
            }
            if (c.mode & rZ) {
              try {
                ds(), Nu(Yc | Rc, c, c.return);
              } catch (Al) {
                EZ(c, c.return, Al);
              }
              ss(c);
            } else
              try {
                Nu(Yc | Rc, c, c.return);
              } catch (Al) {
                EZ(c, c.return, Al);
              }
          }
          return;
        }
        case p: {
          zu(b, c), Gs(c), e & Id && o !== null && Ii(o, o.return);
          return;
        }
        case t: {
          zu(b, c), Gs(c), e & Id && o !== null && Ii(o, o.return);
          {
            if (c.flags & Do) {
              var L = c.stateNode;
              try {
                C0(L);
              } catch (Al) {
                EZ(c, c.return, Al);
              }
            }
            if (e & SZ) {
              var X = c.stateNode;
              if (X != null) {
                var K = c.memoizedProps, Y = o !== null ? o.memoizedProps : K, N = c.type, H = c.updateQueue;
                if (c.updateQueue = null, H !== null)
                  try {
                    vJ(X, H, N, Y, K, c);
                  } catch (Al) {
                    EZ(c, c.return, Al);
                  }
              }
            }
          }
          return;
        }
        case W: {
          if (zu(b, c), Gs(c), e & SZ) {
            if (c.stateNode === null)
              throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
            var q = c.stateNode, $ = c.memoizedProps, sl = o !== null ? o.memoizedProps : $;
            try {
              TJ(q, sl, $);
            } catch (Al) {
              EZ(c, c.return, Al);
            }
          }
          return;
        }
        case h: {
          if (zu(b, c), Gs(c), e & SZ && o !== null) {
            var Gl = o.memoizedState;
            if (Gl.isDehydrated)
              try {
                aH(b.containerInfo);
              } catch (Al) {
                EZ(c, c.return, Al);
              }
          }
          return;
        }
        case S: {
          zu(b, c), Gs(c);
          return;
        }
        case w: {
          zu(b, c), Gs(c);
          var nl = c.child;
          if (nl.flags & rG) {
            var Ul = nl.stateNode, Dl = nl.memoizedState, fl = Dl !== null;
            if (Ul.isHidden = fl, fl) {
              var hZ = nl.alternate !== null && nl.alternate.memoizedState !== null;
              hZ || ov();
            }
          }
          if (e & SZ) {
            try {
              Mg(c);
            } catch (Al) {
              EZ(c, c.return, Al);
            }
            CY(c);
          }
          return;
        }
        case J: {
          var eZ = o !== null && o.memoizedState !== null;
          if (
            // TODO: Remove this dead flag
            c.mode & pZ
          ) {
            var bl = Pc;
            Pc = bl || eZ, zu(b, c), Pc = bl;
          } else
            zu(b, c);
          if (Gs(c), e & rG) {
            var pl = c.stateNode, ul = c.memoizedState, Xl = ul !== null, Nl = c;
            if (pl.isHidden = Xl, Xl && !eZ && (Nl.mode & pZ) !== Ql) {
              Hl = Nl;
              for (var Cl = Nl.child; Cl !== null; )
                Hl = Cl, rg(Cl), Cl = Cl.sibling;
            }
            Vg(Nl, Xl);
          }
          return;
        }
        case g: {
          zu(b, c), Gs(c), e & SZ && CY(c);
          return;
        }
        case A:
          return;
        default: {
          zu(b, c), Gs(c);
          return;
        }
      }
    }
    function Gs(c) {
      var b = c.flags;
      if (b & Xc) {
        try {
          Yg(c);
        } catch (d) {
          EZ(c, c.return, d);
        }
        c.flags &= ~Xc;
      }
      b & ws && (c.flags &= ~ws);
    }
    function Cg(c, b, d) {
      ki = d, Mi = b, Hl = c, FY(c, b, d), ki = null, Mi = null;
    }
    function FY(c, b, d) {
      for (var o = (c.mode & pZ) !== Ql; Hl !== null; ) {
        var e = Hl, L = e.child;
        if (e.tag === J && o) {
          var X = e.memoizedState !== null, K = X || KL;
          if (K) {
            JX(c, b, d);
            continue;
          } else {
            var Y = e.alternate, N = Y !== null && Y.memoizedState !== null, H = N || Pc, q = KL, $ = Pc;
            KL = K, Pc = H, Pc && !$ && (Hl = e, Fg(e));
            for (var sl = L; sl !== null; )
              Hl = sl, FY(
                sl,
                // New root; bubble back up to here and stop.
                b,
                d
              ), sl = sl.sibling;
            Hl = e, KL = q, Pc = $, JX(c, b, d);
            continue;
          }
        }
        (e.subtreeFlags & Qo) !== Pl && L !== null ? (L.return = e, Hl = L) : JX(c, b, d);
      }
    }
    function JX(c, b, d) {
      for (; Hl !== null; ) {
        var o = Hl;
        if ((o.flags & Qo) !== Pl) {
          var e = o.alternate;
          cc(o);
          try {
            Kg(b, e, o, d);
          } catch (X) {
            EZ(o, o.return, X);
          }
          wc();
        }
        if (o === c) {
          Hl = null;
          return;
        }
        var L = o.sibling;
        if (L !== null) {
          L.return = o.return, Hl = L;
          return;
        }
        Hl = o.return;
      }
    }
    function rg(c) {
      for (; Hl !== null; ) {
        var b = Hl, d = b.child;
        switch (b.tag) {
          case n:
          case k:
          case z:
          case D: {
            if (b.mode & rZ)
              try {
                ds(), Nu(Yc, b, b.return);
              } finally {
                ss(b);
              }
            else
              Nu(Yc, b, b.return);
            break;
          }
          case p: {
            Ii(b, b.return);
            var o = b.stateNode;
            typeof o.componentWillUnmount == "function" && NX(b, b.return, o);
            break;
          }
          case t: {
            Ii(b, b.return);
            break;
          }
          case J: {
            var e = b.memoizedState !== null;
            if (e) {
              NY(c);
              continue;
            }
            break;
          }
        }
        d !== null ? (d.return = b, Hl = d) : NY(c);
      }
    }
    function NY(c) {
      for (; Hl !== null; ) {
        var b = Hl;
        if (b === c) {
          Hl = null;
          return;
        }
        var d = b.sibling;
        if (d !== null) {
          d.return = b.return, Hl = d;
          return;
        }
        Hl = b.return;
      }
    }
    function Fg(c) {
      for (; Hl !== null; ) {
        var b = Hl, d = b.child;
        if (b.tag === J) {
          var o = b.memoizedState !== null;
          if (o) {
            wY(c);
            continue;
          }
        }
        d !== null ? (d.return = b, Hl = d) : wY(c);
      }
    }
    function wY(c) {
      for (; Hl !== null; ) {
        var b = Hl;
        cc(b);
        try {
          Wg(b);
        } catch (o) {
          EZ(b, b.return, o);
        }
        if (wc(), b === c) {
          Hl = null;
          return;
        }
        var d = b.sibling;
        if (d !== null) {
          d.return = b.return, Hl = d;
          return;
        }
        Hl = b.return;
      }
    }
    function Ng(c, b, d, o) {
      Hl = b, wg(b, c, d, o);
    }
    function wg(c, b, d, o) {
      for (; Hl !== null; ) {
        var e = Hl, L = e.child;
        (e.subtreeFlags & Om) !== Pl && L !== null ? (L.return = e, Hl = L) : zg(c, b, d, o);
      }
    }
    function zg(c, b, d, o) {
      for (; Hl !== null; ) {
        var e = Hl;
        if ((e.flags & xu) !== Pl) {
          cc(e);
          try {
            Jg(b, e, d, o);
          } catch (X) {
            EZ(e, e.return, X);
          }
          wc();
        }
        if (e === c) {
          Hl = null;
          return;
        }
        var L = e.sibling;
        if (L !== null) {
          L.return = e.return, Hl = L;
          return;
        }
        Hl = e.return;
      }
    }
    function Jg(c, b, d, o) {
      switch (b.tag) {
        case n:
        case k:
        case D: {
          if (b.mode & rZ) {
            cX();
            try {
              jd(jc | Rc, b);
            } finally {
              ZX(b);
            }
          } else
            jd(jc | Rc, b);
          break;
        }
      }
    }
    function Hg(c) {
      Hl = c, gg();
    }
    function gg() {
      for (; Hl !== null; ) {
        var c = Hl, b = c.child;
        if ((Hl.flags & UG) !== Pl) {
          var d = c.deletions;
          if (d !== null) {
            for (var o = 0; o < d.length; o++) {
              var e = d[o];
              Hl = e, fg(e, c);
            }
            {
              var L = c.alternate;
              if (L !== null) {
                var X = L.child;
                if (X !== null) {
                  L.child = null;
                  do {
                    var K = X.sibling;
                    X.sibling = null, X = K;
                  } while (X !== null);
                }
              }
            }
            Hl = c;
          }
        }
        (c.subtreeFlags & Om) !== Pl && b !== null ? (b.return = c, Hl = b) : vg();
      }
    }
    function vg() {
      for (; Hl !== null; ) {
        var c = Hl;
        (c.flags & xu) !== Pl && (cc(c), Tg(c), wc());
        var b = c.sibling;
        if (b !== null) {
          b.return = c.return, Hl = b;
          return;
        }
        Hl = c.return;
      }
    }
    function Tg(c) {
      switch (c.tag) {
        case n:
        case k:
        case D: {
          c.mode & rZ ? (cX(), Nu(jc | Rc, c, c.return), ZX(c)) : Nu(jc | Rc, c, c.return);
          break;
        }
      }
    }
    function fg(c, b) {
      for (; Hl !== null; ) {
        var d = Hl;
        cc(d), Bg(d, b), wc();
        var o = d.child;
        o !== null ? (o.return = d, Hl = o) : Eg(c);
      }
    }
    function Eg(c) {
      for (; Hl !== null; ) {
        var b = Hl, d = b.sibling, o = b.return;
        if (kY(b), b === c) {
          Hl = null;
          return;
        }
        if (d !== null) {
          d.return = o, Hl = d;
          return;
        }
        Hl = o;
      }
    }
    function Bg(c, b) {
      switch (c.tag) {
        case n:
        case k:
        case D: {
          c.mode & rZ ? (cX(), Nu(jc, c, b), ZX(c)) : Nu(jc, c, b);
          break;
        }
      }
    }
    function Dg(c) {
      switch (c.tag) {
        case n:
        case k:
        case D: {
          try {
            jd(Yc | Rc, c);
          } catch (d) {
            EZ(c, c.return, d);
          }
          break;
        }
        case p: {
          var b = c.stateNode;
          try {
            b.componentDidMount();
          } catch (d) {
            EZ(c, c.return, d);
          }
          break;
        }
      }
    }
    function jg(c) {
      switch (c.tag) {
        case n:
        case k:
        case D: {
          try {
            jd(jc | Rc, c);
          } catch (b) {
            EZ(c, c.return, b);
          }
          break;
        }
      }
    }
    function Qg(c) {
      switch (c.tag) {
        case n:
        case k:
        case D: {
          try {
            Nu(Yc | Rc, c, c.return);
          } catch (d) {
            EZ(c, c.return, d);
          }
          break;
        }
        case p: {
          var b = c.stateNode;
          typeof b.componentWillUnmount == "function" && NX(c, c.return, b);
          break;
        }
      }
    }
    function Pg(c) {
      switch (c.tag) {
        case n:
        case k:
        case D:
          try {
            Nu(jc | Rc, c, c.return);
          } catch (b) {
            EZ(c, c.return, b);
          }
      }
    }
    if (typeof Symbol == "function" && Symbol.for) {
      var _e = Symbol.for;
      _e("selector.component"), _e("selector.has_pseudo_class"), _e("selector.role"), _e("selector.test_id"), _e("selector.text");
    }
    var Og = [];
    function Ag() {
      Og.forEach(function(c) {
        return c();
      });
    }
    var $g = u.ReactCurrentActQueue;
    function qg(c) {
      {
        var b = (
          // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
          typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0
        ), d = typeof jest < "u";
        return d && b !== !1;
      }
    }
    function zY() {
      {
        var c = (
          // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
          typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0
        );
        return !c && $g.current !== null && m("The current testing environment is not configured to support act(...)"), c;
      }
    }
    var _g = Math.ceil, HX = u.ReactCurrentDispatcher, gX = u.ReactCurrentOwner, Ac = u.ReactCurrentBatchConfig, Ju = u.ReactCurrentActQueue, Ic = (
      /*             */
      0
    ), JY = (
      /*               */
      1
    ), $c = (
      /*                */
      2
    ), ou = (
      /*                */
      4
    ), Ps = 0, la = 1, _G = 2, VL = 3, Za = 4, HY = 5, vX = 6, LZ = Ic, tb = null, bc = null, Uc = Sl, ms = Sl, TX = Jd(Sl), Cc = Ps, ca = null, xL = Sl, ba = Sl, RL = Sl, ua = null, Nb = null, fX = 0, gY = 500, vY = 1 / 0, lv = 500, Os = null;
    function sa() {
      vY = zc() + lv;
    }
    function TY() {
      return vY;
    }
    var YL = !1, EX = null, Ui = null, lm = !1, Pd = null, da = Sl, BX = [], DX = null, Zv = 50, Ga = 0, jX = null, QX = !1, kL = !1, cv = 50, Ci = 0, ML = null, ma = jZ, IL = Sl, fY = !1;
    function UL() {
      return tb;
    }
    function Xb() {
      return (LZ & ($c | ou)) !== Ic ? zc() : (ma !== jZ || (ma = zc()), ma);
    }
    function Od(c) {
      var b = c.mode;
      if ((b & pZ) === Ql)
        return ql;
      if ((LZ & $c) !== Ic && Uc !== Sl)
        return le(Uc);
      var d = $H() !== AH;
      if (d) {
        if (Ac.transition !== null) {
          var o = Ac.transition;
          o._updatedFibers || (o._updatedFibers = /* @__PURE__ */ new Set()), o._updatedFibers.add(c);
        }
        return IL === Hc && (IL = V5()), IL;
      }
      var e = Yu();
      if (e !== Hc)
        return e;
      var L = wJ();
      return L;
    }
    function bv(c) {
      var b = c.mode;
      return (b & pZ) === Ql ? ql : sw();
    }
    function rc(c, b, d, o) {
      kv(), fY && m("useInsertionEffect must not schedule updates."), QX && (kL = !0), Ze(c, d, o), (LZ & $c) !== Sl && c === tb ? Uv(b) : (Ru && Y5(c, b, d), Cv(b), c === tb && ((LZ & $c) === Ic && (ba = mZ(ba, d)), Cc === Za && Ad(c, Uc)), wb(c, o), d === ql && LZ === Ic && (b.mode & pZ) === Ql && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
      !Ju.isBatchingLegacy && (sa(), f0()));
    }
    function uv(c, b, d) {
      var o = c.current;
      o.lanes = b, Ze(c, b, d), wb(c, d);
    }
    function sv(c) {
      return (
        // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
        // decided not to enable it.
        (LZ & $c) !== Ic
      );
    }
    function wb(c, b) {
      var d = c.callbackNode;
      _N(c, b);
      var o = $n(c, c === tb ? Uc : Sl);
      if (o === Sl) {
        d !== null && uk(d), c.callbackNode = null, c.callbackPriority = Hc;
        return;
      }
      var e = HG(o), L = c.callbackPriority;
      if (L === e && // Special case related to `act`. If the currently scheduled task is a
      // Scheduler task, rather than an `act` task, cancel it and re-scheduled
      // on the `act` queue.
      !(Ju.current !== null && d !== lK)) {
        d == null && L !== ql && m("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
        return;
      }
      d != null && uk(d);
      var X;
      if (e === ql)
        c.tag === Hd ? (Ju.isBatchingLegacy !== null && (Ju.didScheduleLegacyUpdate = !0), FH(DY.bind(null, c))) : T0(DY.bind(null, c)), Ju.current !== null ? Ju.current.push(gd) : JJ(function() {
          (LZ & ($c | ou)) === Ic && gd();
        }), X = null;
      else {
        var K;
        switch (I5(o)) {
          case Qb:
            K = Qn;
            break;
          case gs:
            K = Ey;
            break;
          case vs:
            K = wG;
            break;
          case lp:
            K = By;
            break;
          default:
            K = wG;
            break;
        }
        X = ZK(K, EY.bind(null, c));
      }
      c.callbackPriority = e, c.callbackNode = X;
    }
    function EY(c, b) {
      if (V3(), ma = jZ, IL = Sl, (LZ & ($c | ou)) !== Ic)
        throw new Error("Should not already be working.");
      var d = c.callbackNode, o = $s();
      if (o && c.callbackNode !== d)
        return null;
      var e = $n(c, c === tb ? Uc : Sl);
      if (e === Sl)
        return null;
      var L = !qn(c, e) && !uw(c, e) && !b, X = L ? Lv(c, e) : rL(c, e);
      if (X !== Ps) {
        if (X === _G) {
          var K = aS(c);
          K !== Sl && (e = K, X = PX(c, K));
        }
        if (X === la) {
          var Y = ca;
          throw Zm(c, Sl), Ad(c, e), wb(c, zc()), Y;
        }
        if (X === vX)
          Ad(c, e);
        else {
          var N = !qn(c, e), H = c.current.alternate;
          if (N && !Gv(H)) {
            if (X = rL(c, e), X === _G) {
              var q = aS(c);
              q !== Sl && (e = q, X = PX(c, q));
            }
            if (X === la) {
              var $ = ca;
              throw Zm(c, Sl), Ad(c, e), wb(c, zc()), $;
            }
          }
          c.finishedWork = H, c.finishedLanes = e, dv(c, X, e);
        }
      }
      return wb(c, zc()), c.callbackNode === d ? EY.bind(null, c) : null;
    }
    function PX(c, b) {
      var d = ua;
      if (Zp(c)) {
        var o = Zm(c, b);
        o.flags |= Ns, YH(c.containerInfo);
      }
      var e = rL(c, b);
      if (e !== _G) {
        var L = Nb;
        Nb = d, L !== null && BY(L);
      }
      return e;
    }
    function BY(c) {
      Nb === null ? Nb = c : Nb.push.apply(Nb, c);
    }
    function dv(c, b, d) {
      switch (b) {
        case Ps:
        case la:
          throw new Error("Root did not complete. This is a bug in React.");
        case _G: {
          cm(c, Nb, Os);
          break;
        }
        case VL: {
          if (Ad(c, d), K5(d) && // do not delay if we're inside an act() scope
          !sk()) {
            var o = fX + gY - zc();
            if (o > 10) {
              var e = $n(c, Sl);
              if (e !== Sl)
                break;
              var L = c.suspendedLanes;
              if (!Zi(L, d)) {
                Xb(), R5(c, L);
                break;
              }
              c.timeoutHandle = DS(cm.bind(null, c, Nb, Os), o);
              break;
            }
          }
          cm(c, Nb, Os);
          break;
        }
        case Za: {
          if (Ad(c, d), bw(d))
            break;
          if (!sk()) {
            var X = $N(c, d), K = X, Y = zc() - K, N = Yv(Y) - Y;
            if (N > 10) {
              c.timeoutHandle = DS(cm.bind(null, c, Nb, Os), N);
              break;
            }
          }
          cm(c, Nb, Os);
          break;
        }
        case HY: {
          cm(c, Nb, Os);
          break;
        }
        default:
          throw new Error("Unknown root exit status.");
      }
    }
    function Gv(c) {
      for (var b = c; ; ) {
        if (b.flags & Dn) {
          var d = b.updateQueue;
          if (d !== null) {
            var o = d.stores;
            if (o !== null)
              for (var e = 0; e < o.length; e++) {
                var L = o[e], X = L.getSnapshot, K = L.value;
                try {
                  if (!Ob(X(), K))
                    return !1;
                } catch {
                  return !1;
                }
              }
          }
        }
        var Y = b.child;
        if (b.subtreeFlags & Dn && Y !== null) {
          Y.return = b, b = Y;
          continue;
        }
        if (b === c)
          return !0;
        for (; b.sibling === null; ) {
          if (b.return === null || b.return === c)
            return !0;
          b = b.return;
        }
        b.sibling.return = b.return, b = b.sibling;
      }
      return !0;
    }
    function Ad(c, b) {
      b = _n(b, RL), b = _n(b, ba), Gw(c, b);
    }
    function DY(c) {
      if (x3(), (LZ & ($c | ou)) !== Ic)
        throw new Error("Should not already be working.");
      $s();
      var b = $n(c, Sl);
      if (!jb(b, ql))
        return wb(c, zc()), null;
      var d = rL(c, b);
      if (c.tag !== Hd && d === _G) {
        var o = aS(c);
        o !== Sl && (b = o, d = PX(c, o));
      }
      if (d === la) {
        var e = ca;
        throw Zm(c, Sl), Ad(c, b), wb(c, zc()), e;
      }
      if (d === vX)
        throw new Error("Root did not complete. This is a bug in React.");
      var L = c.current.alternate;
      return c.finishedWork = L, c.finishedLanes = b, cm(c, Nb, Os), wb(c, zc()), null;
    }
    function mv(c, b) {
      b !== Sl && (hS(c, mZ(b, ql)), wb(c, zc()), (LZ & ($c | ou)) === Ic && (sa(), gd()));
    }
    function OX(c, b) {
      var d = LZ;
      LZ |= JY;
      try {
        return c(b);
      } finally {
        LZ = d, LZ === Ic && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
        !Ju.isBatchingLegacy && (sa(), f0());
      }
    }
    function iv(c, b, d, o, e) {
      var L = Yu(), X = Ac.transition;
      try {
        return Ac.transition = null, gc(Qb), c(b, d, o, e);
      } finally {
        gc(L), Ac.transition = X, LZ === Ic && sa();
      }
    }
    function As(c) {
      Pd !== null && Pd.tag === Hd && (LZ & ($c | ou)) === Ic && $s();
      var b = LZ;
      LZ |= JY;
      var d = Ac.transition, o = Yu();
      try {
        return Ac.transition = null, gc(Qb), c ? c() : void 0;
      } finally {
        gc(o), Ac.transition = d, LZ = b, (LZ & ($c | ou)) === Ic && gd();
      }
    }
    function jY() {
      return (LZ & ($c | ou)) !== Ic;
    }
    function CL(c, b) {
      Gb(TX, ms, c), ms = mZ(ms, b);
    }
    function AX(c) {
      ms = TX.current, db(TX, c);
    }
    function Zm(c, b) {
      c.finishedWork = null, c.finishedLanes = Sl;
      var d = c.timeoutHandle;
      if (d !== jS && (c.timeoutHandle = jS, zJ(d)), bc !== null)
        for (var o = bc.return; o !== null; ) {
          var e = o.alternate;
          KY(e, o), o = o.return;
        }
      tb = c;
      var L = bm(c.current, null);
      return bc = L, Uc = ms = b, Cc = Ps, ca = null, xL = Sl, ba = Sl, RL = Sl, ua = null, Nb = null, u3(), Iu.discardPendingWarnings(), L;
    }
    function QY(c, b) {
      do {
        var d = bc;
        try {
          if (Tp(), yR(), wc(), gX.current = null, d === null || d.return === null) {
            Cc = la, ca = b, bc = null;
            return;
          }
          if (kl && d.mode & rZ && hL(d, !0), Rl)
            if ($m(), b !== null && typeof b == "object" && typeof b.then == "function") {
              var o = b;
              gN(d, o, Uc);
            } else
              HN(d, b, Uc);
          F3(c, d.return, d, b, Uc), $Y(d);
        } catch (e) {
          b = e, bc === d && d !== null ? (d = d.return, bc = d) : d = bc;
          continue;
        }
        return;
      } while (!0);
    }
    function PY() {
      var c = HX.current;
      return HX.current = eL, c === null ? eL : c;
    }
    function OY(c) {
      HX.current = c;
    }
    function ov() {
      fX = zc();
    }
    function ia(c) {
      xL = mZ(c, xL);
    }
    function ev() {
      Cc === Ps && (Cc = VL);
    }
    function $X() {
      (Cc === Ps || Cc === VL || Cc === _G) && (Cc = Za), tb !== null && (nS(xL) || nS(ba)) && Ad(tb, Uc);
    }
    function av(c) {
      Cc !== Za && (Cc = _G), ua === null ? ua = [c] : ua.push(c);
    }
    function nv() {
      return Cc === Ps;
    }
    function rL(c, b) {
      var d = LZ;
      LZ |= $c;
      var o = PY();
      if (tb !== c || Uc !== b) {
        if (Ru) {
          var e = c.memoizedUpdaters;
          e.size > 0 && (oa(c, Uc), e.clear()), k5(c, b);
        }
        Os = M5(), Zm(c, b);
      }
      h5(b);
      do
        try {
          pv();
          break;
        } catch (L) {
          QY(c, L);
        }
      while (!0);
      if (Tp(), LZ = d, OY(o), bc !== null)
        throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
      return y5(), tb = null, Uc = Sl, Cc;
    }
    function pv() {
      for (; bc !== null; )
        AY(bc);
    }
    function Lv(c, b) {
      var d = LZ;
      LZ |= $c;
      var o = PY();
      if (tb !== c || Uc !== b) {
        if (Ru) {
          var e = c.memoizedUpdaters;
          e.size > 0 && (oa(c, Uc), e.clear()), k5(c, b);
        }
        Os = M5(), sa(), Zm(c, b);
      }
      h5(b);
      do
        try {
          hv();
          break;
        } catch (L) {
          QY(c, L);
        }
      while (!0);
      return Tp(), OY(o), LZ = d, bc !== null ? (BN(), Ps) : (y5(), tb = null, Uc = Sl, Cc);
    }
    function hv() {
      for (; bc !== null && !SN(); )
        AY(bc);
    }
    function AY(c) {
      var b = c.alternate;
      cc(c);
      var d;
      (c.mode & rZ) !== Ql ? (lX(c), d = qX(b, c, ms), hL(c, !0)) : d = qX(b, c, ms), wc(), c.memoizedProps = c.pendingProps, d === null ? $Y(c) : bc = d, gX.current = null;
    }
    function $Y(c) {
      var b = c;
      do {
        var d = b.alternate, o = b.return;
        if ((b.flags & jo) === Pl) {
          cc(b);
          var e = void 0;
          if ((b.mode & rZ) === Ql ? e = XY(d, b, ms) : (lX(b), e = XY(d, b, ms), hL(b, !1)), wc(), e !== null) {
            bc = e;
            return;
          }
        } else {
          var L = eg(d, b);
          if (L !== null) {
            L.flags &= aN, bc = L;
            return;
          }
          if ((b.mode & rZ) !== Ql) {
            hL(b, !1);
            for (var X = b.actualDuration, K = b.child; K !== null; )
              X += K.actualDuration, K = K.sibling;
            b.actualDuration = X;
          }
          if (o !== null)
            o.flags |= jo, o.subtreeFlags = Pl, o.deletions = null;
          else {
            Cc = vX, bc = null;
            return;
          }
        }
        var Y = b.sibling;
        if (Y !== null) {
          bc = Y;
          return;
        }
        b = o, bc = b;
      } while (b !== null);
      Cc === Ps && (Cc = HY);
    }
    function cm(c, b, d) {
      var o = Yu(), e = Ac.transition;
      try {
        Ac.transition = null, gc(Qb), yv(c, b, d, o);
      } finally {
        Ac.transition = e, gc(o);
      }
      return null;
    }
    function yv(c, b, d, o) {
      do
        $s();
      while (Pd !== null);
      if (Mv(), (LZ & ($c | ou)) !== Ic)
        throw new Error("Should not already be working.");
      var e = c.finishedWork, L = c.finishedLanes;
      if (CN(L), e === null)
        return n5(), null;
      if (L === Sl && m("root.finishedLanes should not be empty during a commit. This is a bug in React."), c.finishedWork = null, c.finishedLanes = Sl, e === c.current)
        throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
      c.callbackNode = null, c.callbackPriority = Hc;
      var X = mZ(e.lanes, e.childLanes);
      mw(c, X), c === tb && (tb = null, bc = null, Uc = Sl), ((e.subtreeFlags & Om) !== Pl || (e.flags & Om) !== Pl) && (lm || (lm = !0, DX = d, ZK(wG, function() {
        return $s(), null;
      })));
      var K = (e.subtreeFlags & (Ty | fy | Qo | Om)) !== Pl, Y = (e.flags & (Ty | fy | Qo | Om)) !== Pl;
      if (K || Y) {
        var N = Ac.transition;
        Ac.transition = null;
        var H = Yu();
        gc(Qb);
        var q = LZ;
        LZ |= ou, gX.current = null, hg(c, e), fR(), Ug(c, e, L), IJ(c.containerInfo), c.current = e, vN(L), Cg(e, c, L), TN(), tN(), LZ = q, gc(H), Ac.transition = N;
      } else
        c.current = e, fR();
      var $ = lm;
      if (lm ? (lm = !1, Pd = c, da = L) : (Ci = 0, ML = null), X = c.pendingLanes, X === Sl && (Ui = null), $ || Zk(c.current, !1), YN(e.stateNode, o), Ru && c.memoizedUpdaters.clear(), Ag(), wb(c, zc()), b !== null)
        for (var sl = c.onRecoverableError, Gl = 0; Gl < b.length; Gl++) {
          var nl = b[Gl], Ul = nl.stack, Dl = nl.digest;
          sl(nl.value, {
            componentStack: Ul,
            digest: Dl
          });
        }
      if (YL) {
        YL = !1;
        var fl = EX;
        throw EX = null, fl;
      }
      return jb(da, ql) && c.tag !== Hd && $s(), X = c.pendingLanes, jb(X, ql) ? (W3(), c === jX ? Ga++ : (Ga = 0, jX = c)) : Ga = 0, gd(), n5(), null;
    }
    function $s() {
      if (Pd !== null) {
        var c = I5(da), b = aw(vs, c), d = Ac.transition, o = Yu();
        try {
          return Ac.transition = null, gc(b), tv();
        } finally {
          gc(o), Ac.transition = d;
        }
      }
      return !1;
    }
    function Sv(c) {
      BX.push(c), lm || (lm = !0, ZK(wG, function() {
        return $s(), null;
      }));
    }
    function tv() {
      if (Pd === null)
        return !1;
      var c = DX;
      DX = null;
      var b = Pd, d = da;
      if (Pd = null, da = Sl, (LZ & ($c | ou)) !== Ic)
        throw new Error("Cannot flush passive effects while already rendering.");
      QX = !0, kL = !1, fN(d);
      var o = LZ;
      LZ |= ou, Hg(b.current), Ng(b, b.current, d, c);
      {
        var e = BX;
        BX = [];
        for (var L = 0; L < e.length; L++) {
          var X = e[L];
          Xg(b, X);
        }
      }
      EN(), Zk(b.current, !0), LZ = o, gd(), kL ? b === ML ? Ci++ : (Ci = 0, ML = b) : Ci = 0, QX = !1, kL = !1, kN(b);
      {
        var K = b.current.stateNode;
        K.effectDuration = 0, K.passiveEffectDuration = 0;
      }
      return !0;
    }
    function qY(c) {
      return Ui !== null && Ui.has(c);
    }
    function Xv(c) {
      Ui === null ? Ui = /* @__PURE__ */ new Set([c]) : Ui.add(c);
    }
    function Kv(c) {
      YL || (YL = !0, EX = c);
    }
    var Wv = Kv;
    function _Y(c, b, d) {
      var o = $G(d, b), e = AR(c, o, ql), L = Td(c, e, ql), X = Xb();
      L !== null && (Ze(L, ql, X), wb(L, X));
    }
    function EZ(c, b, d) {
      if (ng(d), ea(!1), c.tag === h) {
        _Y(c, c, d);
        return;
      }
      var o = null;
      for (o = b; o !== null; ) {
        if (o.tag === h) {
          _Y(o, c, d);
          return;
        } else if (o.tag === p) {
          var e = o.type, L = o.stateNode;
          if (typeof e.getDerivedStateFromError == "function" || typeof L.componentDidCatch == "function" && !qY(L)) {
            var X = $G(d, c), K = SX(o, X, ql), Y = Td(o, K, ql), N = Xb();
            Y !== null && (Ze(Y, ql, N), wb(Y, N));
            return;
          }
        }
        o = o.return;
      }
      m(`Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.

Error message:

%s`, d);
    }
    function Vv(c, b, d) {
      var o = c.pingCache;
      o !== null && o.delete(b);
      var e = Xb();
      R5(c, d), rv(c), tb === c && Zi(Uc, d) && (Cc === Za || Cc === VL && K5(Uc) && zc() - fX < gY ? Zm(c, Sl) : RL = mZ(RL, d)), wb(c, e);
    }
    function lk(c, b) {
      b === Hc && (b = bv(c));
      var d = Xb(), o = rb(c, b);
      o !== null && (Ze(o, b, d), wb(o, d));
    }
    function xv(c) {
      var b = c.memoizedState, d = Hc;
      b !== null && (d = b.retryLane), lk(c, d);
    }
    function Rv(c, b) {
      var d = Hc, o;
      switch (c.tag) {
        case w:
          o = c.stateNode;
          var e = c.memoizedState;
          e !== null && (d = e.retryLane);
          break;
        case g:
          o = c.stateNode;
          break;
        default:
          throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
      }
      o !== null && o.delete(b), lk(c, d);
    }
    function Yv(c) {
      return c < 120 ? 120 : c < 480 ? 480 : c < 1080 ? 1080 : c < 1920 ? 1920 : c < 3e3 ? 3e3 : c < 4320 ? 4320 : _g(c / 1960) * 1960;
    }
    function kv() {
      if (Ga > Zv)
        throw Ga = 0, jX = null, new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
      Ci > cv && (Ci = 0, ML = null, m("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."));
    }
    function Mv() {
      Iu.flushLegacyContextWarning(), Iu.flushPendingUnsafeLifecycleWarnings();
    }
    function Zk(c, b) {
      cc(c), FL(c, zs, Qg), b && FL(c, jn, Pg), FL(c, zs, Dg), b && FL(c, jn, jg), wc();
    }
    function FL(c, b, d) {
      for (var o = c, e = null; o !== null; ) {
        var L = o.subtreeFlags & b;
        o !== e && o.child !== null && L !== Pl ? o = o.child : ((o.flags & b) !== Pl && d(o), o.sibling !== null ? o = o.sibling : o = e = o.return);
      }
    }
    var NL = null;
    function ck(c) {
      {
        if ((LZ & $c) !== Ic || !(c.mode & pZ))
          return;
        var b = c.tag;
        if (b !== y && b !== h && b !== p && b !== n && b !== k && b !== z && b !== D)
          return;
        var d = bZ(c) || "ReactComponent";
        if (NL !== null) {
          if (NL.has(d))
            return;
          NL.add(d);
        } else
          NL = /* @__PURE__ */ new Set([d]);
        var o = ub;
        try {
          cc(c), m("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally {
          o ? cc(c) : wc();
        }
      }
    }
    var qX;
    {
      var Iv = null;
      qX = function(c, b, d) {
        var o = ok(Iv, b);
        try {
          return LY(c, b, d);
        } catch (L) {
          if (TH() || L !== null && typeof L == "object" && typeof L.then == "function")
            throw L;
          if (Tp(), yR(), KY(c, b), ok(b, o), b.mode & rZ && lX(b), wy(null, LY, null, c, b, d), mN()) {
            var e = zy();
            typeof e == "object" && e !== null && e._suppressLogging && typeof L == "object" && L !== null && !L._suppressLogging && (L._suppressLogging = !0);
          }
          throw L;
        }
      };
    }
    var bk = !1, _X;
    _X = /* @__PURE__ */ new Set();
    function Uv(c) {
      if (kG && !t3())
        switch (c.tag) {
          case n:
          case k:
          case D: {
            var b = bc && bZ(bc) || "Unknown", d = b;
            if (!_X.has(d)) {
              _X.add(d);
              var o = bZ(c) || "Unknown";
              m("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", o, b, b);
            }
            break;
          }
          case p: {
            bk || (m("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."), bk = !0);
            break;
          }
        }
    }
    function oa(c, b) {
      if (Ru) {
        var d = c.memoizedUpdaters;
        d.forEach(function(o) {
          Y5(c, o, b);
        });
      }
    }
    var lK = {};
    function ZK(c, b) {
      {
        var d = Ju.current;
        return d !== null ? (d.push(b), lK) : a5(c, b);
      }
    }
    function uk(c) {
      if (c !== lK)
        return yN(c);
    }
    function sk() {
      return Ju.current !== null;
    }
    function Cv(c) {
      {
        if (c.mode & pZ) {
          if (!zY())
            return;
        } else if (!qg() || LZ !== Ic || c.tag !== n && c.tag !== k && c.tag !== D)
          return;
        if (Ju.current === null) {
          var b = ub;
          try {
            cc(c), m(`An update to %s inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`, bZ(c));
          } finally {
            b ? cc(c) : wc();
          }
        }
      }
    }
    function rv(c) {
      c.tag !== Hd && zY() && Ju.current === null && m(`A suspended resource finished loading inside a test, but the event was not wrapped in act(...).

When testing, code that resolves suspended data should be wrapped into act(...):

act(() => {
  /* finish loading suspended data */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`);
    }
    function ea(c) {
      fY = c;
    }
    var eu = null, ri = null, Fv = function(c) {
      eu = c;
    };
    function Fi(c) {
      {
        if (eu === null)
          return c;
        var b = eu(c);
        return b === void 0 ? c : b.current;
      }
    }
    function cK(c) {
      return Fi(c);
    }
    function bK(c) {
      {
        if (eu === null)
          return c;
        var b = eu(c);
        if (b === void 0) {
          if (c != null && typeof c.render == "function") {
            var d = Fi(c.render);
            if (c.render !== d) {
              var o = {
                $$typeof: Kl,
                render: d
              };
              return c.displayName !== void 0 && (o.displayName = c.displayName), o;
            }
          }
          return c;
        }
        return b.current;
      }
    }
    function dk(c, b) {
      {
        if (eu === null)
          return !1;
        var d = c.elementType, o = b.type, e = !1, L = typeof o == "object" && o !== null ? o.$$typeof : null;
        switch (c.tag) {
          case p: {
            typeof o == "function" && (e = !0);
            break;
          }
          case n: {
            (typeof o == "function" || L === jl) && (e = !0);
            break;
          }
          case k: {
            (L === Kl || L === jl) && (e = !0);
            break;
          }
          case z:
          case D: {
            (L === aZ || L === jl) && (e = !0);
            break;
          }
          default:
            return !1;
        }
        if (e) {
          var X = eu(d);
          if (X !== void 0 && X === eu(o))
            return !0;
        }
        return !1;
      }
    }
    function Gk(c) {
      {
        if (eu === null || typeof WeakSet != "function")
          return;
        ri === null && (ri = /* @__PURE__ */ new WeakSet()), ri.add(c);
      }
    }
    var Nv = function(c, b) {
      {
        if (eu === null)
          return;
        var d = b.staleFamilies, o = b.updatedFamilies;
        $s(), As(function() {
          uK(c.current, o, d);
        });
      }
    }, wv = function(c, b) {
      {
        if (c.context !== Ab)
          return;
        $s(), As(function() {
          aa(b, c, null, null);
        });
      }
    };
    function uK(c, b, d) {
      {
        var o = c.alternate, e = c.child, L = c.sibling, X = c.tag, K = c.type, Y = null;
        switch (X) {
          case n:
          case D:
          case p:
            Y = K;
            break;
          case k:
            Y = K.render;
            break;
        }
        if (eu === null)
          throw new Error("Expected resolveFamily to be set during hot reload.");
        var N = !1, H = !1;
        if (Y !== null) {
          var q = eu(Y);
          q !== void 0 && (d.has(q) ? H = !0 : b.has(q) && (X === p ? H = !0 : N = !0));
        }
        if (ri !== null && (ri.has(c) || o !== null && ri.has(o)) && (H = !0), H && (c._debugNeedsRemount = !0), H || N) {
          var $ = rb(c, ql);
          $ !== null && rc($, c, ql, jZ);
        }
        e !== null && !H && uK(e, b, d), L !== null && uK(L, b, d);
      }
    }
    var zv = function(c, b) {
      {
        var d = /* @__PURE__ */ new Set(), o = new Set(b.map(function(e) {
          return e.current;
        }));
        return sK(c.current, o, d), d;
      }
    };
    function sK(c, b, d) {
      {
        var o = c.child, e = c.sibling, L = c.tag, X = c.type, K = null;
        switch (L) {
          case n:
          case D:
          case p:
            K = X;
            break;
          case k:
            K = X.render;
            break;
        }
        var Y = !1;
        K !== null && b.has(K) && (Y = !0), Y ? Jv(c, d) : o !== null && sK(o, b, d), e !== null && sK(e, b, d);
      }
    }
    function Jv(c, b) {
      {
        var d = Hv(c, b);
        if (d)
          return;
        for (var o = c; ; ) {
          switch (o.tag) {
            case t:
              b.add(o.stateNode);
              return;
            case S:
              b.add(o.stateNode.containerInfo);
              return;
            case h:
              b.add(o.stateNode.containerInfo);
              return;
          }
          if (o.return === null)
            throw new Error("Expected to reach root first.");
          o = o.return;
        }
      }
    }
    function Hv(c, b) {
      for (var d = c, o = !1; ; ) {
        if (d.tag === t)
          o = !0, b.add(d.stateNode);
        else if (d.child !== null) {
          d.child.return = d, d = d.child;
          continue;
        }
        if (d === c)
          return o;
        for (; d.sibling === null; ) {
          if (d.return === null || d.return === c)
            return o;
          d = d.return;
        }
        d.sibling.return = d.return, d = d.sibling;
      }
      return !1;
    }
    var dK;
    {
      dK = !1;
      try {
        var mk = Object.preventExtensions({});
      } catch {
        dK = !0;
      }
    }
    function gv(c, b, d, o) {
      this.tag = c, this.key = d, this.elementType = null, this.type = null, this.stateNode = null, this.return = null, this.child = null, this.sibling = null, this.index = 0, this.ref = null, this.pendingProps = b, this.memoizedProps = null, this.updateQueue = null, this.memoizedState = null, this.dependencies = null, this.mode = o, this.flags = Pl, this.subtreeFlags = Pl, this.deletions = null, this.lanes = Sl, this.childLanes = Sl, this.alternate = null, this.actualDuration = Number.NaN, this.actualStartTime = Number.NaN, this.selfBaseDuration = Number.NaN, this.treeBaseDuration = Number.NaN, this.actualDuration = 0, this.actualStartTime = -1, this.selfBaseDuration = 0, this.treeBaseDuration = 0, this._debugSource = null, this._debugOwner = null, this._debugNeedsRemount = !1, this._debugHookTypes = null, !dK && typeof Object.preventExtensions == "function" && Object.preventExtensions(this);
    }
    var $b = function(c, b, d, o) {
      return new gv(c, b, d, o);
    };
    function GK(c) {
      var b = c.prototype;
      return !!(b && b.isReactComponent);
    }
    function vv(c) {
      return typeof c == "function" && !GK(c) && c.defaultProps === void 0;
    }
    function Tv(c) {
      if (typeof c == "function")
        return GK(c) ? p : n;
      if (c != null) {
        var b = c.$$typeof;
        if (b === Kl)
          return k;
        if (b === aZ)
          return z;
      }
      return y;
    }
    function bm(c, b) {
      var d = c.alternate;
      d === null ? (d = $b(c.tag, b, c.key, c.mode), d.elementType = c.elementType, d.type = c.type, d.stateNode = c.stateNode, d._debugSource = c._debugSource, d._debugOwner = c._debugOwner, d._debugHookTypes = c._debugHookTypes, d.alternate = c, c.alternate = d) : (d.pendingProps = b, d.type = c.type, d.flags = Pl, d.subtreeFlags = Pl, d.deletions = null, d.actualDuration = 0, d.actualStartTime = -1), d.flags = c.flags & Js, d.childLanes = c.childLanes, d.lanes = c.lanes, d.child = c.child, d.memoizedProps = c.memoizedProps, d.memoizedState = c.memoizedState, d.updateQueue = c.updateQueue;
      var o = c.dependencies;
      switch (d.dependencies = o === null ? null : {
        lanes: o.lanes,
        firstContext: o.firstContext
      }, d.sibling = c.sibling, d.index = c.index, d.ref = c.ref, d.selfBaseDuration = c.selfBaseDuration, d.treeBaseDuration = c.treeBaseDuration, d._debugNeedsRemount = c._debugNeedsRemount, d.tag) {
        case y:
        case n:
        case D:
          d.type = Fi(c.type);
          break;
        case p:
          d.type = cK(c.type);
          break;
        case k:
          d.type = bK(c.type);
          break;
      }
      return d;
    }
    function fv(c, b) {
      c.flags &= Js | Xc;
      var d = c.alternate;
      if (d === null)
        c.childLanes = Sl, c.lanes = b, c.child = null, c.subtreeFlags = Pl, c.memoizedProps = null, c.memoizedState = null, c.updateQueue = null, c.dependencies = null, c.stateNode = null, c.selfBaseDuration = 0, c.treeBaseDuration = 0;
      else {
        c.childLanes = d.childLanes, c.lanes = d.lanes, c.child = d.child, c.subtreeFlags = Pl, c.deletions = null, c.memoizedProps = d.memoizedProps, c.memoizedState = d.memoizedState, c.updateQueue = d.updateQueue, c.type = d.type;
        var o = d.dependencies;
        c.dependencies = o === null ? null : {
          lanes: o.lanes,
          firstContext: o.firstContext
        }, c.selfBaseDuration = d.selfBaseDuration, c.treeBaseDuration = d.treeBaseDuration;
      }
      return c;
    }
    function Ev(c, b, d) {
      var o;
      return c === Cp ? (o = pZ, b === !0 && (o |= Gc, o |= qu)) : o = Ql, Ru && (o |= rZ), $b(h, null, null, o);
    }
    function mK(c, b, d, o, e, L) {
      var X = y, K = c;
      if (typeof c == "function")
        GK(c) ? (X = p, K = cK(K)) : K = Fi(K);
      else if (typeof c == "string")
        X = t;
      else
        l: switch (c) {
          case bu:
            return $d(d.children, e, L, b);
          case Ms:
            X = R, e |= Gc, (e & pZ) !== Ql && (e |= qu);
            break;
          case Pu:
            return Bv(d, e, L, b);
          case Bl:
            return Dv(d, e, L, b);
          case oZ:
            return jv(d, e, L, b);
          case JZ:
            return ik(d, e, L, b);
          case DZ:
          case dZ:
          case xc:
          case uu:
          case ac:
          default: {
            if (typeof c == "object" && c !== null)
              switch (c.$$typeof) {
                case P:
                  X = r;
                  break l;
                case yl:
                  X = x;
                  break l;
                case Kl:
                  X = k, K = bK(K);
                  break l;
                case aZ:
                  X = z;
                  break l;
                case jl:
                  X = C, K = null;
                  break l;
              }
            var Y = "";
            {
              (c === void 0 || typeof c == "object" && c !== null && Object.keys(c).length === 0) && (Y += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
              var N = o ? bZ(o) : null;
              N && (Y += `

Check the render method of \`` + N + "`.");
            }
            throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (c == null ? c : typeof c) + "." + Y));
          }
        }
      var H = $b(X, d, b, e);
      return H.elementType = c, H.type = K, H.lanes = L, H._debugOwner = o, H;
    }
    function iK(c, b, d) {
      var o = null;
      o = c._owner;
      var e = c.type, L = c.key, X = c.props, K = mK(e, L, X, o, b, d);
      return K._debugSource = c._source, K._debugOwner = c._owner, K;
    }
    function $d(c, b, d, o) {
      var e = $b(V, c, o, b);
      return e.lanes = d, e;
    }
    function Bv(c, b, d, o) {
      typeof c.id != "string" && m('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof c.id);
      var e = $b(U, c, o, b | rZ);
      return e.elementType = Pu, e.lanes = d, e.stateNode = {
        effectDuration: 0,
        passiveEffectDuration: 0
      }, e;
    }
    function Dv(c, b, d, o) {
      var e = $b(w, c, o, b);
      return e.elementType = Bl, e.lanes = d, e;
    }
    function jv(c, b, d, o) {
      var e = $b(g, c, o, b);
      return e.elementType = oZ, e.lanes = d, e;
    }
    function ik(c, b, d, o) {
      var e = $b(J, c, o, b);
      e.elementType = JZ, e.lanes = d;
      var L = {
        isHidden: !1
      };
      return e.stateNode = L, e;
    }
    function oK(c, b, d) {
      var o = $b(W, c, null, b);
      return o.lanes = d, o;
    }
    function Qv() {
      var c = $b(t, null, null, Ql);
      return c.elementType = "DELETED", c;
    }
    function Pv(c) {
      var b = $b(E, null, null, Ql);
      return b.stateNode = c, b;
    }
    function eK(c, b, d) {
      var o = c.children !== null ? c.children : [], e = $b(S, o, c.key, b);
      return e.lanes = d, e.stateNode = {
        containerInfo: c.containerInfo,
        pendingChildren: null,
        // Used by persistent updates
        implementation: c.implementation
      }, e;
    }
    function ok(c, b) {
      return c === null && (c = $b(y, null, null, Ql)), c.tag = b.tag, c.key = b.key, c.elementType = b.elementType, c.type = b.type, c.stateNode = b.stateNode, c.return = b.return, c.child = b.child, c.sibling = b.sibling, c.index = b.index, c.ref = b.ref, c.pendingProps = b.pendingProps, c.memoizedProps = b.memoizedProps, c.updateQueue = b.updateQueue, c.memoizedState = b.memoizedState, c.dependencies = b.dependencies, c.mode = b.mode, c.flags = b.flags, c.subtreeFlags = b.subtreeFlags, c.deletions = b.deletions, c.lanes = b.lanes, c.childLanes = b.childLanes, c.alternate = b.alternate, c.actualDuration = b.actualDuration, c.actualStartTime = b.actualStartTime, c.selfBaseDuration = b.selfBaseDuration, c.treeBaseDuration = b.treeBaseDuration, c._debugSource = b._debugSource, c._debugOwner = b._debugOwner, c._debugNeedsRemount = b._debugNeedsRemount, c._debugHookTypes = b._debugHookTypes, c;
    }
    function Ov(c, b, d, o, e) {
      this.tag = b, this.containerInfo = c, this.pendingChildren = null, this.current = null, this.pingCache = null, this.finishedWork = null, this.timeoutHandle = jS, this.context = null, this.pendingContext = null, this.callbackNode = null, this.callbackPriority = Hc, this.eventTimes = LS(Sl), this.expirationTimes = LS(jZ), this.pendingLanes = Sl, this.suspendedLanes = Sl, this.pingedLanes = Sl, this.expiredLanes = Sl, this.mutableReadLanes = Sl, this.finishedLanes = Sl, this.entangledLanes = Sl, this.entanglements = LS(Sl), this.identifierPrefix = o, this.onRecoverableError = e, this.mutableSourceEagerHydrationData = null, this.effectDuration = 0, this.passiveEffectDuration = 0;
      {
        this.memoizedUpdaters = /* @__PURE__ */ new Set();
        for (var L = this.pendingUpdatersLaneMap = [], X = 0; X < jy; X++)
          L.push(/* @__PURE__ */ new Set());
      }
      switch (b) {
        case Cp:
          this._debugRootType = d ? "hydrateRoot()" : "createRoot()";
          break;
        case Hd:
          this._debugRootType = d ? "hydrate()" : "render()";
          break;
      }
    }
    function ek(c, b, d, o, e, L, X, K, Y, N) {
      var H = new Ov(c, b, d, K, Y), q = Ev(b, L);
      H.current = q, q.stateNode = H;
      {
        var $ = {
          element: o,
          isDehydrated: d,
          cache: null,
          // not enabled yet
          transitions: null,
          pendingSuspenseBoundaries: null
        };
        q.memoizedState = $;
      }
      return xt(q), H;
    }
    var aK = "18.3.1";
    function Av(c, b, d) {
      var o = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      return Zb(o), {
        // This tag allow us to uniquely identify this as a React Portal
        $$typeof: Eb,
        key: o == null ? null : "" + o,
        children: c,
        containerInfo: b,
        implementation: d
      };
    }
    var nK, pK;
    nK = !1, pK = {};
    function ak(c) {
      if (!c)
        return Ab;
      var b = Qm(c), d = rH(b);
      if (b.tag === p) {
        var o = b.type;
        if (Zs(o))
          return g0(b, o, d);
      }
      return d;
    }
    function $v(c, b) {
      {
        var d = Qm(c);
        if (d === void 0) {
          if (typeof c.render == "function")
            throw new Error("Unable to find node on an unmounted component.");
          var o = Object.keys(c).join(",");
          throw new Error("Argument appears to not be a ReactComponent. Keys: " + o);
        }
        var e = i5(d);
        if (e === null)
          return null;
        if (e.mode & Gc) {
          var L = bZ(d) || "Component";
          if (!pK[L]) {
            pK[L] = !0;
            var X = ub;
            try {
              cc(e), d.mode & Gc ? m("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", b, b, L) : m("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", b, b, L);
            } finally {
              X ? cc(X) : wc();
            }
          }
        }
        return e.stateNode;
      }
    }
    function nk(c, b, d, o, e, L, X, K) {
      var Y = !1, N = null;
      return ek(c, b, Y, N, d, o, e, L, X);
    }
    function pk(c, b, d, o, e, L, X, K, Y, N) {
      var H = !0, q = ek(d, o, H, c, e, L, X, K, Y);
      q.context = ak(null);
      var $ = q.current, sl = Xb(), Gl = Od($), nl = js(sl, Gl);
      return nl.callback = b ?? null, Td($, nl, Gl), uv(q, Gl, sl), q;
    }
    function aa(c, b, d, o) {
      RN(b, c);
      var e = b.current, L = Xb(), X = Od(e);
      DN(X);
      var K = ak(d);
      b.context === null ? b.context = K : b.pendingContext = K, kG && ub !== null && !nK && (nK = !0, m(`Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.

Check the render method of %s.`, bZ(ub) || "Unknown"));
      var Y = js(L, X);
      Y.payload = {
        element: c
      }, o = o === void 0 ? null : o, o !== null && (typeof o != "function" && m("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", o), Y.callback = o);
      var N = Td(e, Y, X);
      return N !== null && (rc(N, e, X, L), jp(N, e, X)), X;
    }
    function wL(c) {
      var b = c.current;
      if (!b.child)
        return null;
      switch (b.child.tag) {
        case t:
          return b.child.stateNode;
        default:
          return b.child.stateNode;
      }
    }
    function qv(c) {
      switch (c.tag) {
        case h: {
          var b = c.stateNode;
          if (Zp(b)) {
            var d = lw(b);
            mv(b, d);
          }
          break;
        }
        case w: {
          As(function() {
            var e = rb(c, ql);
            if (e !== null) {
              var L = Xb();
              rc(e, c, ql, L);
            }
          });
          var o = ql;
          LK(c, o);
          break;
        }
      }
    }
    function Lk(c, b) {
      var d = c.memoizedState;
      d !== null && d.dehydrated !== null && (d.retryLane = dw(d.retryLane, b));
    }
    function LK(c, b) {
      Lk(c, b);
      var d = c.alternate;
      d && Lk(d, b);
    }
    function _v(c) {
      if (c.tag === w) {
        var b = $o, d = rb(c, b);
        if (d !== null) {
          var o = Xb();
          rc(d, c, b, o);
        }
        LK(c, b);
      }
    }
    function lT(c) {
      if (c.tag === w) {
        var b = Od(c), d = rb(c, b);
        if (d !== null) {
          var o = Xb();
          rc(d, c, b, o);
        }
        LK(c, b);
      }
    }
    function hk(c) {
      var b = hN(c);
      return b === null ? null : b.stateNode;
    }
    var yk = function(c) {
      return null;
    };
    function ZT(c) {
      return yk(c);
    }
    var Sk = function(c) {
      return !1;
    };
    function cT(c) {
      return Sk(c);
    }
    var tk = null, Xk = null, Kk = null, Wk = null, Vk = null, xk = null, Rk = null, Yk = null, kk = null;
    {
      var Mk = function(c, b, d) {
        var o = b[d], e = xZ(c) ? c.slice() : GZ({}, c);
        return d + 1 === b.length ? (xZ(e) ? e.splice(o, 1) : delete e[o], e) : (e[o] = Mk(c[o], b, d + 1), e);
      }, Ik = function(c, b) {
        return Mk(c, b, 0);
      }, Uk = function(c, b, d, o) {
        var e = b[o], L = xZ(c) ? c.slice() : GZ({}, c);
        if (o + 1 === b.length) {
          var X = d[o];
          L[X] = L[e], xZ(L) ? L.splice(e, 1) : delete L[e];
        } else
          L[e] = Uk(
            // $FlowFixMe number or string is fine here
            c[e],
            b,
            d,
            o + 1
          );
        return L;
      }, Ck = function(c, b, d) {
        if (b.length !== d.length) {
          i("copyWithRename() expects paths of the same length");
          return;
        } else
          for (var o = 0; o < d.length - 1; o++)
            if (b[o] !== d[o]) {
              i("copyWithRename() expects paths to be the same except for the deepest key");
              return;
            }
        return Uk(c, b, d, 0);
      }, rk = function(c, b, d, o) {
        if (d >= b.length)
          return o;
        var e = b[d], L = xZ(c) ? c.slice() : GZ({}, c);
        return L[e] = rk(c[e], b, d + 1, o), L;
      }, Fk = function(c, b, d) {
        return rk(c, b, 0, d);
      }, hK = function(c, b) {
        for (var d = c.memoizedState; d !== null && b > 0; )
          d = d.next, b--;
        return d;
      };
      tk = function(c, b, d, o) {
        var e = hK(c, b);
        if (e !== null) {
          var L = Fk(e.memoizedState, d, o);
          e.memoizedState = L, e.baseState = L, c.memoizedProps = GZ({}, c.memoizedProps);
          var X = rb(c, ql);
          X !== null && rc(X, c, ql, jZ);
        }
      }, Xk = function(c, b, d) {
        var o = hK(c, b);
        if (o !== null) {
          var e = Ik(o.memoizedState, d);
          o.memoizedState = e, o.baseState = e, c.memoizedProps = GZ({}, c.memoizedProps);
          var L = rb(c, ql);
          L !== null && rc(L, c, ql, jZ);
        }
      }, Kk = function(c, b, d, o) {
        var e = hK(c, b);
        if (e !== null) {
          var L = Ck(e.memoizedState, d, o);
          e.memoizedState = L, e.baseState = L, c.memoizedProps = GZ({}, c.memoizedProps);
          var X = rb(c, ql);
          X !== null && rc(X, c, ql, jZ);
        }
      }, Wk = function(c, b, d) {
        c.pendingProps = Fk(c.memoizedProps, b, d), c.alternate && (c.alternate.pendingProps = c.pendingProps);
        var o = rb(c, ql);
        o !== null && rc(o, c, ql, jZ);
      }, Vk = function(c, b) {
        c.pendingProps = Ik(c.memoizedProps, b), c.alternate && (c.alternate.pendingProps = c.pendingProps);
        var d = rb(c, ql);
        d !== null && rc(d, c, ql, jZ);
      }, xk = function(c, b, d) {
        c.pendingProps = Ck(c.memoizedProps, b, d), c.alternate && (c.alternate.pendingProps = c.pendingProps);
        var o = rb(c, ql);
        o !== null && rc(o, c, ql, jZ);
      }, Rk = function(c) {
        var b = rb(c, ql);
        b !== null && rc(b, c, ql, jZ);
      }, Yk = function(c) {
        yk = c;
      }, kk = function(c) {
        Sk = c;
      };
    }
    function bT(c) {
      var b = i5(c);
      return b === null ? null : b.stateNode;
    }
    function uT(c) {
      return null;
    }
    function sT() {
      return ub;
    }
    function dT(c) {
      var b = c.findFiberByHostInstance, d = u.ReactCurrentDispatcher;
      return xN({
        bundleType: c.bundleType,
        version: c.version,
        rendererPackageName: c.rendererPackageName,
        rendererConfig: c.rendererConfig,
        overrideHookState: tk,
        overrideHookStateDeletePath: Xk,
        overrideHookStateRenamePath: Kk,
        overrideProps: Wk,
        overridePropsDeletePath: Vk,
        overridePropsRenamePath: xk,
        setErrorHandler: Yk,
        setSuspenseHandler: kk,
        scheduleUpdate: Rk,
        currentDispatcherRef: d,
        findHostInstanceByFiber: bT,
        findFiberByHostInstance: b || uT,
        // React Refresh
        findHostInstancesForRefresh: zv,
        scheduleRefresh: Nv,
        scheduleRoot: wv,
        setRefreshHandler: Fv,
        // Enables DevTools to append owner stacks to error messages in DEV mode.
        getCurrentFiber: sT,
        // Enables DevTools to detect reconciler version rather than renderer version
        // which may not match for third party renderers.
        reconcilerVersion: aK
      });
    }
    var Nk = typeof reportError == "function" ? (
      // In modern browsers, reportError will dispatch an error event,
      // emulating an uncaught JavaScript error.
      reportError
    ) : function(c) {
      console.error(c);
    };
    function yK(c) {
      this._internalRoot = c;
    }
    zL.prototype.render = yK.prototype.render = function(c) {
      var b = this._internalRoot;
      if (b === null)
        throw new Error("Cannot update an unmounted root.");
      {
        typeof arguments[1] == "function" ? m("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().") : JL(arguments[1]) ? m("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.") : typeof arguments[1] < "u" && m("You passed a second argument to root.render(...) but it only accepts one argument.");
        var d = b.containerInfo;
        if (d.nodeType !== tc) {
          var o = hk(b.current);
          o && o.parentNode !== d && m("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
        }
      }
      aa(c, b, null, null);
    }, zL.prototype.unmount = yK.prototype.unmount = function() {
      typeof arguments[0] == "function" && m("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
      var c = this._internalRoot;
      if (c !== null) {
        this._internalRoot = null;
        var b = c.containerInfo;
        jY() && m("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."), As(function() {
          aa(null, c, null, null);
        }), N0(b);
      }
    };
    function GT(c, b) {
      if (!JL(c))
        throw new Error("createRoot(...): Target container is not a DOM element.");
      wk(c);
      var d = !1, o = !1, e = "", L = Nk;
      b != null && (b.hydrate ? i("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.") : typeof b == "object" && b !== null && b.$$typeof === fb && m(`You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:

  let root = createRoot(domContainer);
  root.render(<App />);`), b.unstable_strictMode === !0 && (d = !0), b.identifierPrefix !== void 0 && (e = b.identifierPrefix), b.onRecoverableError !== void 0 && (L = b.onRecoverableError), b.transitionCallbacks !== void 0 && b.transitionCallbacks);
      var X = nk(c, Cp, null, d, o, e, L);
      xp(X.current, c);
      var K = c.nodeType === tc ? c.parentNode : c;
      return Se(K), new yK(X);
    }
    function zL(c) {
      this._internalRoot = c;
    }
    function mT(c) {
      c && Vw(c);
    }
    zL.prototype.unstable_scheduleHydration = mT;
    function iT(c, b, d) {
      if (!JL(c))
        throw new Error("hydrateRoot(...): Target container is not a DOM element.");
      wk(c), b === void 0 && m("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
      var o = d ?? null, e = d != null && d.hydratedSources || null, L = !1, X = !1, K = "", Y = Nk;
      d != null && (d.unstable_strictMode === !0 && (L = !0), d.identifierPrefix !== void 0 && (K = d.identifierPrefix), d.onRecoverableError !== void 0 && (Y = d.onRecoverableError));
      var N = pk(b, null, c, Cp, o, L, X, K, Y);
      if (xp(N.current, c), Se(c), e)
        for (var H = 0; H < e.length; H++) {
          var q = e[H];
          n3(N, q);
        }
      return new zL(N);
    }
    function JL(c) {
      return !!(c && (c.nodeType === Ub || c.nodeType === Fs || c.nodeType === xy || !ol));
    }
    function na(c) {
      return !!(c && (c.nodeType === Ub || c.nodeType === Fs || c.nodeType === xy || c.nodeType === tc && c.nodeValue === " react-mount-point-unstable "));
    }
    function wk(c) {
      c.nodeType === Ub && c.tagName && c.tagName.toUpperCase() === "BODY" && m("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app."), Ie(c) && (c._reactRootContainer ? m("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.") : m("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."));
    }
    var oT = u.ReactCurrentOwner, zk;
    zk = function(c) {
      if (c._reactRootContainer && c.nodeType !== tc) {
        var b = hk(c._reactRootContainer.current);
        b && b.parentNode !== c && m("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
      }
      var d = !!c._reactRootContainer, o = SK(c), e = !!(o && zd(o));
      e && !d && m("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render."), c.nodeType === Ub && c.tagName && c.tagName.toUpperCase() === "BODY" && m("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function SK(c) {
      return c ? c.nodeType === Fs ? c.documentElement : c.firstChild : null;
    }
    function Jk() {
    }
    function eT(c, b, d, o, e) {
      if (e) {
        if (typeof o == "function") {
          var L = o;
          o = function() {
            var $ = wL(X);
            L.call($);
          };
        }
        var X = pk(
          b,
          o,
          c,
          Hd,
          null,
          // hydrationCallbacks
          !1,
          // isStrictMode
          !1,
          // concurrentUpdatesByDefaultOverride,
          "",
          // identifierPrefix
          Jk
        );
        c._reactRootContainer = X, xp(X.current, c);
        var K = c.nodeType === tc ? c.parentNode : c;
        return Se(K), As(), X;
      } else {
        for (var Y; Y = c.lastChild; )
          c.removeChild(Y);
        if (typeof o == "function") {
          var N = o;
          o = function() {
            var $ = wL(H);
            N.call($);
          };
        }
        var H = nk(
          c,
          Hd,
          null,
          // hydrationCallbacks
          !1,
          // isStrictMode
          !1,
          // concurrentUpdatesByDefaultOverride,
          "",
          // identifierPrefix
          Jk
        );
        c._reactRootContainer = H, xp(H.current, c);
        var q = c.nodeType === tc ? c.parentNode : c;
        return Se(q), As(function() {
          aa(b, H, d, o);
        }), H;
      }
    }
    function aT(c, b) {
      c !== null && typeof c != "function" && m("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", b, c);
    }
    function HL(c, b, d, o, e) {
      zk(d), aT(e === void 0 ? null : e, "render");
      var L = d._reactRootContainer, X;
      if (!L)
        X = eT(d, b, c, e, o);
      else {
        if (X = L, typeof e == "function") {
          var K = e;
          e = function() {
            var Y = wL(X);
            K.call(Y);
          };
        }
        aa(b, X, c, e);
      }
      return wL(X);
    }
    var Hk = !1;
    function nT(c) {
      {
        Hk || (Hk = !0, m("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node"));
        var b = oT.current;
        if (b !== null && b.stateNode !== null) {
          var d = b.stateNode._warnedAboutRefsInRender;
          d || m("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", tZ(b.type) || "A component"), b.stateNode._warnedAboutRefsInRender = !0;
        }
      }
      return c == null ? null : c.nodeType === Ub ? c : $v(c, "findDOMNode");
    }
    function pT(c, b, d) {
      if (m("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !na(b))
        throw new Error("Target container is not a DOM element.");
      {
        var o = Ie(b) && b._reactRootContainer === void 0;
        o && m("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
      }
      return HL(null, c, b, !0, d);
    }
    function LT(c, b, d) {
      if (m("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !na(b))
        throw new Error("Target container is not a DOM element.");
      {
        var o = Ie(b) && b._reactRootContainer === void 0;
        o && m("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
      }
      return HL(null, c, b, !1, d);
    }
    function hT(c, b, d, o) {
      if (m("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !na(d))
        throw new Error("Target container is not a DOM element.");
      if (c == null || !iN(c))
        throw new Error("parentComponent must be a valid React Component");
      return HL(c, b, d, !1, o);
    }
    var gk = !1;
    function yT(c) {
      if (gk || (gk = !0, m("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot")), !na(c))
        throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
      {
        var b = Ie(c) && c._reactRootContainer === void 0;
        b && m("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
      }
      if (c._reactRootContainer) {
        {
          var d = SK(c), o = d && !zd(d);
          o && m("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
        }
        return As(function() {
          HL(null, null, c, !1, function() {
            c._reactRootContainer = null, N0(c);
          });
        }), !0;
      } else {
        {
          var e = SK(c), L = !!(e && zd(e)), X = c.nodeType === Ub && na(c.parentNode) && !!c.parentNode._reactRootContainer;
          L && m("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", X ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
        }
        return !1;
      }
    }
    nw(qv), Lw(_v), hw(lT), yw(Yu), Sw(ow), (typeof Map != "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
    Map.prototype == null || typeof Map.prototype.forEach != "function" || typeof Set != "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
    Set.prototype == null || typeof Set.prototype.clear != "function" || typeof Set.prototype.forEach != "function") && m("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"), qF(tJ), ZN(OX, iv, As);
    function ST(c, b) {
      var d = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      if (!JL(b))
        throw new Error("Target container is not a DOM element.");
      return Av(c, b, null, d);
    }
    function tT(c, b, d, o) {
      return hT(c, b, d, o);
    }
    var tK = {
      usingClientEntryPoint: !1,
      // Keep in sync with ReactTestUtils.js.
      // This is an array for better minification.
      Events: [zd, oi, Rp, $x, qx, OX]
    };
    function XT(c, b) {
      return tK.usingClientEntryPoint || m('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".'), GT(c, b);
    }
    function KT(c, b, d) {
      return tK.usingClientEntryPoint || m('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".'), iT(c, b, d);
    }
    function WT(c) {
      return jY() && m("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."), As(c);
    }
    var VT = dT({
      findFiberByHostInstance: fG,
      bundleType: 1,
      version: aK,
      rendererPackageName: "react-dom"
    });
    if (!VT && wl && window.top === window.self && (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1)) {
      var vk = window.location.protocol;
      /^(https?|file):$/.test(vk) && console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (vk === "file:" ? `
You might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq` : ""), "font-weight:bold");
    }
    zb.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tK, zb.createPortal = ST, zb.createRoot = XT, zb.findDOMNode = nT, zb.flushSync = WT, zb.hydrate = pT, zb.hydrateRoot = KT, zb.render = LT, zb.unmountComponentAtNode = yT, zb.unstable_batchedUpdates = OX, zb.unstable_renderSubtreeIntoContainer = tT, zb.version = aK, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
  }(), zb;
}
BI.exports = UT();
var xo = BI.exports;
const DI = /* @__PURE__ */ wh(xo);
var hV, Qk = xo;
{
  var Pk = Qk.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  hV = function(l, Z) {
    Pk.usingClientEntryPoint = !0;
    try {
      return Qk.createRoot(l, Z);
    } finally {
      Pk.usingClientEntryPoint = !1;
    }
  };
}
class yV {
  get childNodes() {
    throw new Error("childNodes is not supported");
  }
  clone() {
    let Z = new yV(this.type, this.key);
    return Z.value = this.value, Z.level = this.level, Z.hasChildNodes = this.hasChildNodes, Z.rendered = this.rendered, Z.textValue = this.textValue, Z["aria-label"] = this["aria-label"], Z.index = this.index, Z.parentKey = this.parentKey, Z.prevKey = this.prevKey, Z.nextKey = this.nextKey, Z.firstChildKey = this.firstChildKey, Z.lastChildKey = this.lastChildKey, Z.props = this.props, Z.render = this.render, Z;
  }
  constructor(Z, u) {
    this.value = null, this.level = 0, this.hasChildNodes = !1, this.rendered = null, this.textValue = "", this["aria-label"] = void 0, this.index = 0, this.parentKey = null, this.prevKey = null, this.nextKey = null, this.firstChildKey = null, this.lastChildKey = null, this.props = {}, this.type = Z, this.key = u;
  }
}
class CT {
  get size() {
    return this.keyMap.size;
  }
  getKeys() {
    return this.keyMap.keys();
  }
  *[Symbol.iterator]() {
    let Z = this.firstKey != null ? this.keyMap.get(this.firstKey) : void 0;
    for (; Z; )
      yield Z, Z = Z.nextKey != null ? this.keyMap.get(Z.nextKey) : void 0;
  }
  getChildren(Z) {
    let u = this.keyMap;
    return {
      *[Symbol.iterator]() {
        let s = u.get(Z), G = (s == null ? void 0 : s.firstChildKey) != null ? u.get(s.firstChildKey) : null;
        for (; G; )
          yield G, G = G.nextKey != null ? u.get(G.nextKey) : void 0;
      }
    };
  }
  getKeyBefore(Z) {
    let u = this.keyMap.get(Z);
    if (!u) return null;
    if (u.prevKey != null) {
      for (u = this.keyMap.get(u.prevKey); u && u.type !== "item" && u.lastChildKey != null; ) u = this.keyMap.get(u.lastChildKey);
      var s;
      return (s = u == null ? void 0 : u.key) !== null && s !== void 0 ? s : null;
    }
    return u.parentKey;
  }
  getKeyAfter(Z) {
    let u = this.keyMap.get(Z);
    if (!u) return null;
    if (u.type !== "item" && u.firstChildKey != null) return u.firstChildKey;
    for (; u; ) {
      if (u.nextKey != null) return u.nextKey;
      if (u.parentKey != null) u = this.keyMap.get(u.parentKey);
      else return null;
    }
    return null;
  }
  getFirstKey() {
    return this.firstKey;
  }
  getLastKey() {
    let Z = this.lastKey != null ? this.keyMap.get(this.lastKey) : null;
    for (; (Z == null ? void 0 : Z.lastChildKey) != null; ) Z = this.keyMap.get(Z.lastChildKey);
    var u;
    return (u = Z == null ? void 0 : Z.key) !== null && u !== void 0 ? u : null;
  }
  getItem(Z) {
    var u;
    return (u = this.keyMap.get(Z)) !== null && u !== void 0 ? u : null;
  }
  at() {
    throw new Error("Not implemented");
  }
  clone() {
    let Z = this.constructor, u = new Z();
    return u.keyMap = new Map(this.keyMap), u.firstKey = this.firstKey, u.lastKey = this.lastKey, u;
  }
  addNode(Z) {
    if (this.frozen) throw new Error("Cannot add a node to a frozen collection");
    this.keyMap.set(Z.key, Z);
  }
  removeNode(Z) {
    if (this.frozen) throw new Error("Cannot remove a node to a frozen collection");
    this.keyMap.delete(Z);
  }
  commit(Z, u, s = !1) {
    if (this.frozen) throw new Error("Cannot commit a frozen collection");
    this.firstKey = Z, this.lastKey = u, this.frozen = !s;
  }
  constructor() {
    this.keyMap = /* @__PURE__ */ new Map(), this.firstKey = null, this.lastKey = null, this.frozen = !1;
  }
}
class jI {
  *[Symbol.iterator]() {
    let Z = this.firstChild;
    for (; Z; )
      yield Z, Z = Z.nextSibling;
  }
  get firstChild() {
    return this._firstChild;
  }
  set firstChild(Z) {
    this._firstChild = Z, this.ownerDocument.markDirty(this);
  }
  get lastChild() {
    return this._lastChild;
  }
  set lastChild(Z) {
    this._lastChild = Z, this.ownerDocument.markDirty(this);
  }
  get previousSibling() {
    return this._previousSibling;
  }
  set previousSibling(Z) {
    this._previousSibling = Z, this.ownerDocument.markDirty(this);
  }
  get nextSibling() {
    return this._nextSibling;
  }
  set nextSibling(Z) {
    this._nextSibling = Z, this.ownerDocument.markDirty(this);
  }
  get parentNode() {
    return this._parentNode;
  }
  set parentNode(Z) {
    this._parentNode = Z, this.ownerDocument.markDirty(this);
  }
  get isConnected() {
    var Z;
    return ((Z = this.parentNode) === null || Z === void 0 ? void 0 : Z.isConnected) || !1;
  }
  appendChild(Z) {
    this.ownerDocument.startTransaction(), Z.parentNode && Z.parentNode.removeChild(Z), this.firstChild == null && (this.firstChild = Z), this.lastChild ? (this.lastChild.nextSibling = Z, Z.index = this.lastChild.index + 1, Z.previousSibling = this.lastChild) : (Z.previousSibling = null, Z.index = 0), Z.parentNode = this, Z.nextSibling = null, this.lastChild = Z, this.ownerDocument.markDirty(this), Z.hasSetProps && this.ownerDocument.addNode(Z), this.ownerDocument.endTransaction(), this.ownerDocument.queueUpdate();
  }
  insertBefore(Z, u) {
    if (u == null) return this.appendChild(Z);
    this.ownerDocument.startTransaction(), Z.parentNode && Z.parentNode.removeChild(Z), Z.nextSibling = u, Z.previousSibling = u.previousSibling, Z.index = u.index, this.firstChild === u ? this.firstChild = Z : u.previousSibling && (u.previousSibling.nextSibling = Z), u.previousSibling = Z, Z.parentNode = u.parentNode;
    let s = u;
    for (; s; )
      s.index++, s = s.nextSibling;
    Z.hasSetProps && this.ownerDocument.addNode(Z), this.ownerDocument.endTransaction(), this.ownerDocument.queueUpdate();
  }
  removeChild(Z) {
    if (Z.parentNode !== this || !this.ownerDocument.isMounted) return;
    this.ownerDocument.startTransaction();
    let u = Z.nextSibling;
    for (; u; )
      u.index--, u = u.nextSibling;
    Z.nextSibling && (Z.nextSibling.previousSibling = Z.previousSibling), Z.previousSibling && (Z.previousSibling.nextSibling = Z.nextSibling), this.firstChild === Z && (this.firstChild = Z.nextSibling), this.lastChild === Z && (this.lastChild = Z.previousSibling), Z.parentNode = null, Z.nextSibling = null, Z.previousSibling = null, Z.index = 0, this.ownerDocument.removeNode(Z), this.ownerDocument.endTransaction(), this.ownerDocument.queueUpdate();
  }
  addEventListener() {
  }
  removeEventListener() {
  }
  constructor(Z) {
    this._firstChild = null, this._lastChild = null, this._previousSibling = null, this._nextSibling = null, this._parentNode = null, this.ownerDocument = Z;
  }
}
class Ja extends jI {
  get index() {
    return this._index;
  }
  set index(Z) {
    this._index = Z, this.ownerDocument.markDirty(this);
  }
  get level() {
    return this.parentNode instanceof Ja ? this.parentNode.level + (this.node.type === "item" ? 1 : 0) : 0;
  }
  updateNode() {
    var Z, u, s, G;
    let i = this.ownerDocument.getMutableNode(this);
    i.index = this.index, i.level = this.level, i.parentKey = this.parentNode instanceof Ja ? this.parentNode.node.key : null;
    var m;
    i.prevKey = (m = (Z = this.previousSibling) === null || Z === void 0 ? void 0 : Z.node.key) !== null && m !== void 0 ? m : null;
    var a;
    i.nextKey = (a = (u = this.nextSibling) === null || u === void 0 ? void 0 : u.node.key) !== null && a !== void 0 ? a : null, i.hasChildNodes = !!this.firstChild;
    var n;
    i.firstChildKey = (n = (s = this.firstChild) === null || s === void 0 ? void 0 : s.node.key) !== null && n !== void 0 ? n : null;
    var p;
    i.lastChildKey = (p = (G = this.lastChild) === null || G === void 0 ? void 0 : G.node.key) !== null && p !== void 0 ? p : null;
  }
  setProps(Z, u, s, G) {
    let i = this.ownerDocument.getMutableNode(this), { value: m, textValue: a, id: n, ...p } = Z;
    if (p.ref = u, i.props = p, i.rendered = s, i.render = G, i.value = m, i.textValue = a || (typeof p.children == "string" ? p.children : "") || Z["aria-label"] || "", n != null && n !== i.key) {
      if (this.hasSetProps) throw new Error("Cannot change the id of an item");
      i.key = n;
    }
    this.hasSetProps || (this.ownerDocument.addNode(this), this.ownerDocument.endTransaction(), this.hasSetProps = !0), this.ownerDocument.queueUpdate();
  }
  get style() {
    return {};
  }
  hasAttribute() {
  }
  setAttribute() {
  }
  setAttributeNS() {
  }
  removeAttribute() {
  }
  constructor(Z, u) {
    super(u), this.nodeType = 8, this._index = 0, this.hasSetProps = !1, this.node = new yV(Z, `react-aria-${++u.nodeId}`), this.ownerDocument.startTransaction();
  }
}
class rT extends jI {
  get isConnected() {
    return this.isMounted;
  }
  createElement(Z) {
    return new Ja(Z, this);
  }
  /**
  * Lazily gets a mutable instance of a Node. If the node has already
  * been cloned during this update cycle, it just returns the existing one.
  */
  getMutableNode(Z) {
    let u = Z.node;
    return this.mutatedNodes.has(Z) || (u = Z.node.clone(), this.mutatedNodes.add(Z), Z.node = u), this.markDirty(Z), u;
  }
  getMutableCollection() {
    return !this.isSSR && !this.collectionMutated && (this.collection = this.collection.clone(), this.collectionMutated = !0), this.collection;
  }
  markDirty(Z) {
    this.dirtyNodes.add(Z);
  }
  startTransaction() {
    this.transactionCount++;
  }
  endTransaction() {
    this.transactionCount--;
  }
  addNode(Z) {
    let u = this.getMutableCollection();
    if (!u.getItem(Z.node.key)) {
      u.addNode(Z.node);
      for (let s of Z) this.addNode(s);
    }
    this.markDirty(Z);
  }
  removeNode(Z) {
    for (let s of Z) this.removeNode(s);
    this.getMutableCollection().removeNode(Z.node.key), this.markDirty(Z);
  }
  /** Finalizes the collection update, updating all nodes and freezing the collection. */
  getCollection() {
    return this.transactionCount > 0 ? this.collection : (this.updateCollection(), this.collection);
  }
  updateCollection() {
    for (let i of this.dirtyNodes) i instanceof Ja && i.isConnected && i.updateNode();
    if (this.dirtyNodes.clear(), this.mutatedNodes.size || this.collectionMutated) {
      var Z, u;
      let i = this.getMutableCollection();
      for (let m of this.mutatedNodes) m.isConnected && i.addNode(m.node);
      var s, G;
      i.commit((s = (Z = this.firstChild) === null || Z === void 0 ? void 0 : Z.node.key) !== null && s !== void 0 ? s : null, (G = (u = this.lastChild) === null || u === void 0 ? void 0 : u.node.key) !== null && G !== void 0 ? G : null, this.isSSR), this.mutatedNodes.clear();
    }
    this.collectionMutated = !1;
  }
  queueUpdate() {
    if (!(this.dirtyNodes.size === 0 || this.transactionCount > 0))
      for (let Z of this.subscriptions) Z();
  }
  subscribe(Z) {
    return this.subscriptions.add(Z), () => this.subscriptions.delete(Z);
  }
  resetAfterSSR() {
    this.isSSR && (this.isSSR = !1, this.firstChild = null, this.lastChild = null, this.nodeId = 0);
  }
  constructor(Z) {
    super(null), this.nodeType = 11, this.ownerDocument = this, this.dirtyNodes = /* @__PURE__ */ new Set(), this.isSSR = !1, this.nodeId = 0, this.nodesByProps = /* @__PURE__ */ new WeakMap(), this.isMounted = !0, this.mutatedNodes = /* @__PURE__ */ new Set(), this.subscriptions = /* @__PURE__ */ new Set(), this.transactionCount = 0, this.collection = Z, this.collectionMutated = !0;
  }
}
function QI(l) {
  let { children: Z, items: u, idScope: s, addIdAndValue: G, dependencies: i = [] } = l, m = M.useMemo(() => /* @__PURE__ */ new WeakMap(), i);
  return M.useMemo(() => {
    if (u && typeof Z == "function") {
      let p = [];
      for (let y of u) {
        let h = m.get(y);
        if (!h) {
          h = Z(y);
          var a, n;
          let S = (n = (a = h.props.id) !== null && a !== void 0 ? a : y.key) !== null && n !== void 0 ? n : y.id;
          if (S == null) throw new Error("Could not determine key for item");
          s && (S = s + ":" + S), h = M.cloneElement(h, G ? {
            key: S,
            id: S,
            value: y
          } : {
            key: S
          }), m.set(y, h);
        }
        p.push(h);
      }
      return p;
    } else if (typeof Z != "function") return Z;
  }, [
    Z,
    u,
    m,
    s,
    G
  ]);
}
var PI = { NODE_ENV: '"production"' };
const oh = {
  prefix: String(Math.round(Math.random() * 1e10)),
  current: 0
}, OI = /* @__PURE__ */ tl.createContext(oh), FT = /* @__PURE__ */ tl.createContext(!1);
let NT = !!(typeof window < "u" && window.document && window.document.createElement), VK = /* @__PURE__ */ new WeakMap();
function wT(l = !1) {
  let Z = M.useContext(OI), u = M.useRef(null);
  if (u.current === null && !l) {
    var s, G;
    let i = (G = tl.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || G === void 0 || (s = G.ReactCurrentOwner) === null || s === void 0 ? void 0 : s.current;
    if (i) {
      let m = VK.get(i);
      m == null ? VK.set(i, {
        id: Z.current,
        state: i.memoizedState
      }) : i.memoizedState !== m.state && (Z.current = m.id, VK.delete(i));
    }
    u.current = ++Z.current;
  }
  return u.current;
}
function zT(l) {
  let Z = M.useContext(OI);
  Z === oh && !NT && console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
  let u = wT(!!l), s = Z === oh && PI.NODE_ENV === "test" ? "react-aria" : `react-aria${Z.prefix}`;
  return l || `${s}-${u}`;
}
function JT(l) {
  let Z = tl.useId(), [u] = M.useState(Mm()), s = u || PI.NODE_ENV === "test" ? "react-aria" : `react-aria${oh.prefix}`;
  return l || `${s}-${Z}`;
}
const HT = typeof tl.useId == "function" ? JT : zT;
function gT() {
  return !1;
}
function vT() {
  return !0;
}
function TT(l) {
  return () => {
  };
}
function Mm() {
  return typeof tl.useSyncExternalStore == "function" ? tl.useSyncExternalStore(TT, gT, vT) : M.useContext(FT);
}
if (typeof HTMLTemplateElement < "u") {
  const l = Object.getOwnPropertyDescriptor(Node.prototype, "firstChild").get;
  Object.defineProperty(HTMLTemplateElement.prototype, "firstChild", {
    configurable: !0,
    enumerable: !0,
    get: function() {
      return this.dataset.reactAriaHidden ? this.content.firstChild : l.call(this);
    }
  });
}
const eh = /* @__PURE__ */ M.createContext(!1), fT = typeof DocumentFragment < "u" ? new DocumentFragment() : null;
function ET(l) {
  let Z = M.useContext(eh), u = Mm();
  if (Z)
    return /* @__PURE__ */ tl.createElement(tl.Fragment, null, l.children);
  let s = /* @__PURE__ */ tl.createElement(eh.Provider, {
    value: !0
  }, l.children);
  return u ? /* @__PURE__ */ tl.createElement("template", {
    "data-react-aria-hidden": !0
  }, s) : /* @__PURE__ */ xo.createPortal(s, fT);
}
function BT(l) {
  let Z = (u, s) => M.useContext(eh) ? null : l(u, s);
  return Z.displayName = l.displayName || l.name, M.forwardRef(Z);
}
function DT() {
  return M.useContext(eh);
}
const PZ = typeof document < "u" ? tl.useLayoutEffect : () => {
};
function gb(l) {
  const Z = M.useRef(null);
  return PZ(() => {
    Z.current = l;
  }, [
    l
  ]), M.useCallback((...u) => {
    const s = Z.current;
    return s == null ? void 0 : s(...u);
  }, []);
}
function jT(l) {
  let [Z, u] = M.useState(l), s = M.useRef(null), G = gb(() => {
    if (!s.current) return;
    let m = s.current.next();
    if (m.done) {
      s.current = null;
      return;
    }
    Z === m.value ? G() : u(m.value);
  });
  PZ(() => {
    s.current && G();
  });
  let i = gb((m) => {
    s.current = m(Z), G();
  });
  return [
    Z,
    i
  ];
}
let QT = !!(typeof window < "u" && window.document && window.document.createElement), uG = /* @__PURE__ */ new Map();
function ad(l) {
  let [Z, u] = M.useState(l), s = M.useRef(null), G = HT(Z), i = M.useCallback((m) => {
    s.current = m;
  }, []);
  return QT && (uG.has(G) && !uG.get(G).includes(i) ? uG.set(G, [
    ...uG.get(G),
    i
  ]) : uG.set(G, [
    i
  ])), PZ(() => {
    let m = G;
    return () => {
      uG.delete(m);
    };
  }, [
    G
  ]), M.useEffect(() => {
    let m = s.current;
    m && (s.current = null, u(m));
  }), G;
}
function PT(l, Z) {
  if (l === Z) return l;
  let u = uG.get(l);
  if (u)
    return u.forEach((G) => G(Z)), Z;
  let s = uG.get(Z);
  return s ? (s.forEach((G) => G(l)), l) : Z;
}
function xK(l = []) {
  let Z = ad(), [u, s] = jT(Z), G = M.useCallback(() => {
    s(function* () {
      yield Z, yield document.getElementById(Z) ? Z : void 0;
    });
  }, [
    Z,
    s
  ]);
  return PZ(G, [
    Z,
    G,
    ...l
  ]), u;
}
function Ha(...l) {
  return (...Z) => {
    for (let u of l) typeof u == "function" && u(...Z);
  };
}
const _Z = (l) => {
  var Z;
  return (Z = l == null ? void 0 : l.ownerDocument) !== null && Z !== void 0 ? Z : document;
}, Eu = (l) => l && "window" in l && l.window === l ? l : _Z(l).defaultView || window;
function AI(l) {
  var Z, u, s = "";
  if (typeof l == "string" || typeof l == "number") s += l;
  else if (typeof l == "object") if (Array.isArray(l)) {
    var G = l.length;
    for (Z = 0; Z < G; Z++) l[Z] && (u = AI(l[Z])) && (s && (s += " "), s += u);
  } else for (u in l) l[u] && (s && (s += " "), s += u);
  return s;
}
function OT() {
  for (var l, Z, u = 0, s = "", G = arguments.length; u < G; u++) (l = arguments[u]) && (Z = AI(l)) && (s && (s += " "), s += Z);
  return s;
}
function HZ(...l) {
  let Z = {
    ...l[0]
  };
  for (let u = 1; u < l.length; u++) {
    let s = l[u];
    for (let G in s) {
      let i = Z[G], m = s[G];
      typeof i == "function" && typeof m == "function" && // This is a lot faster than a regex.
      G[0] === "o" && G[1] === "n" && G.charCodeAt(2) >= /* 'A' */
      65 && G.charCodeAt(2) <= /* 'Z' */
      90 ? Z[G] = Ha(i, m) : (G === "className" || G === "UNSAFE_className") && typeof i == "string" && typeof m == "string" ? Z[G] = OT(i, m) : G === "id" && i && m ? Z.id = PT(i, m) : Z[G] = m !== void 0 ? m : i;
    }
  }
  return Z;
}
function AT(...l) {
  return l.length === 1 && l[0] ? l[0] : (Z) => {
    for (let u of l)
      typeof u == "function" ? u(Z) : u != null && (u.current = Z);
  };
}
const $T = /* @__PURE__ */ new Set([
  "id"
]), qT = /* @__PURE__ */ new Set([
  "aria-label",
  "aria-labelledby",
  "aria-describedby",
  "aria-details"
]), _T = /* @__PURE__ */ new Set([
  "href",
  "hrefLang",
  "target",
  "rel",
  "download",
  "ping",
  "referrerPolicy"
]), lf = /^(data-.*)$/;
function Su(l, Z = {}) {
  let { labelable: u, isLink: s, propNames: G } = Z, i = {};
  for (const m in l) Object.prototype.hasOwnProperty.call(l, m) && ($T.has(m) || u && qT.has(m) || s && _T.has(m) || G != null && G.has(m) || lf.test(m)) && (i[m] = l[m]);
  return i;
}
function Ls(l) {
  if (Zf()) l.focus({
    preventScroll: !0
  });
  else {
    let Z = cf(l);
    l.focus(), bf(Z);
  }
}
let vL = null;
function Zf() {
  if (vL == null) {
    vL = !1;
    try {
      document.createElement("div").focus({
        get preventScroll() {
          return vL = !0, !0;
        }
      });
    } catch {
    }
  }
  return vL;
}
function cf(l) {
  let Z = l.parentNode, u = [], s = document.scrollingElement || document.documentElement;
  for (; Z instanceof HTMLElement && Z !== s; )
    (Z.offsetHeight < Z.scrollHeight || Z.offsetWidth < Z.scrollWidth) && u.push({
      element: Z,
      scrollTop: Z.scrollTop,
      scrollLeft: Z.scrollLeft
    }), Z = Z.parentNode;
  return s instanceof HTMLElement && u.push({
    element: s,
    scrollTop: s.scrollTop,
    scrollLeft: s.scrollLeft
  }), u;
}
function bf(l) {
  for (let { element: Z, scrollTop: u, scrollLeft: s } of l)
    Z.scrollTop = u, Z.scrollLeft = s;
}
function zh(l) {
  var Z;
  return typeof window > "u" || window.navigator == null ? !1 : ((Z = window.navigator.userAgentData) === null || Z === void 0 ? void 0 : Z.brands.some((u) => l.test(u.brand))) || l.test(window.navigator.userAgent);
}
function SV(l) {
  var Z;
  return typeof window < "u" && window.navigator != null ? l.test(((Z = window.navigator.userAgentData) === null || Z === void 0 ? void 0 : Z.platform) || window.navigator.platform) : !1;
}
function hd(l) {
  let Z = null;
  return () => (Z == null && (Z = l()), Z);
}
const Sm = hd(function() {
  return SV(/^Mac/i);
}), uf = hd(function() {
  return SV(/^iPhone/i);
}), $I = hd(function() {
  return SV(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
  Sm() && navigator.maxTouchPoints > 1;
}), Jh = hd(function() {
  return uf() || $I();
}), sf = hd(function() {
  return Sm() || Jh();
}), qI = hd(function() {
  return zh(/AppleWebKit/i) && !df();
}), df = hd(function() {
  return zh(/Chrome/i);
}), _I = hd(function() {
  return zh(/Android/i);
}), Gf = hd(function() {
  return zh(/Firefox/i);
}), mf = /* @__PURE__ */ M.createContext({
  isNative: !0,
  open: af,
  useHref: (l) => l
});
function nn() {
  return M.useContext(mf);
}
function of(l, Z) {
  let u = l.getAttribute("target");
  return (!u || u === "_self") && l.origin === location.origin && !l.hasAttribute("download") && !Z.metaKey && // open in new tab (mac)
  !Z.ctrlKey && // open in new tab (windows)
  !Z.altKey && // download
  !Z.shiftKey;
}
function tm(l, Z, u = !0) {
  var s, G;
  let { metaKey: i, ctrlKey: m, altKey: a, shiftKey: n } = Z;
  Gf() && (!((G = window.event) === null || G === void 0 || (s = G.type) === null || s === void 0) && s.startsWith("key")) && l.target === "_blank" && (Sm() ? i = !0 : m = !0);
  let p = qI() && Sm() && !$I() ? new KeyboardEvent("keydown", {
    keyIdentifier: "Enter",
    metaKey: i,
    ctrlKey: m,
    altKey: a,
    shiftKey: n
  }) : new MouseEvent("click", {
    metaKey: i,
    ctrlKey: m,
    altKey: a,
    shiftKey: n,
    bubbles: !0,
    cancelable: !0
  });
  tm.isOpening = u, Ls(l), l.dispatchEvent(p), tm.isOpening = !1;
}
tm.isOpening = !1;
function ef(l, Z) {
  if (l instanceof HTMLAnchorElement) Z(l);
  else if (l.hasAttribute("data-href")) {
    let u = document.createElement("a");
    u.href = l.getAttribute("data-href"), l.hasAttribute("data-target") && (u.target = l.getAttribute("data-target")), l.hasAttribute("data-rel") && (u.rel = l.getAttribute("data-rel")), l.hasAttribute("data-download") && (u.download = l.getAttribute("data-download")), l.hasAttribute("data-ping") && (u.ping = l.getAttribute("data-ping")), l.hasAttribute("data-referrer-policy") && (u.referrerPolicy = l.getAttribute("data-referrer-policy")), l.appendChild(u), Z(u), l.removeChild(u);
  }
}
function af(l, Z) {
  ef(l, (u) => tm(u, Z));
}
function l1(l) {
  let Z = nn();
  var u;
  const s = Z.useHref((u = l == null ? void 0 : l.href) !== null && u !== void 0 ? u : "");
  return {
    href: l != null && l.href ? s : void 0,
    target: l == null ? void 0 : l.target,
    rel: l == null ? void 0 : l.rel,
    download: l == null ? void 0 : l.download,
    ping: l == null ? void 0 : l.ping,
    referrerPolicy: l == null ? void 0 : l.referrerPolicy
  };
}
let gi = /* @__PURE__ */ new Map(), iW = /* @__PURE__ */ new Set();
function Ok() {
  if (typeof window > "u") return;
  function l(s) {
    return "propertyName" in s;
  }
  let Z = (s) => {
    if (!l(s) || !s.target) return;
    let G = gi.get(s.target);
    G || (G = /* @__PURE__ */ new Set(), gi.set(s.target, G), s.target.addEventListener("transitioncancel", u, {
      once: !0
    })), G.add(s.propertyName);
  }, u = (s) => {
    if (!l(s) || !s.target) return;
    let G = gi.get(s.target);
    if (G && (G.delete(s.propertyName), G.size === 0 && (s.target.removeEventListener("transitioncancel", u), gi.delete(s.target)), gi.size === 0)) {
      for (let i of iW) i();
      iW.clear();
    }
  };
  document.body.addEventListener("transitionrun", Z), document.body.addEventListener("transitionend", u);
}
typeof document < "u" && (document.readyState !== "loading" ? Ok() : document.addEventListener("DOMContentLoaded", Ok));
function Z1(l) {
  requestAnimationFrame(() => {
    gi.size === 0 ? l() : iW.add(l);
  });
}
function pn() {
  let l = M.useRef(/* @__PURE__ */ new Map()), Z = M.useCallback((G, i, m, a) => {
    let n = a != null && a.once ? (...p) => {
      l.current.delete(m), m(...p);
    } : m;
    l.current.set(m, {
      type: i,
      eventTarget: G,
      fn: n,
      options: a
    }), G.addEventListener(i, m, a);
  }, []), u = M.useCallback((G, i, m, a) => {
    var n;
    let p = ((n = l.current.get(m)) === null || n === void 0 ? void 0 : n.fn) || m;
    G.removeEventListener(i, p, a), l.current.delete(m);
  }, []), s = M.useCallback(() => {
    l.current.forEach((G, i) => {
      u(G.eventTarget, G.type, i, G.options);
    });
  }, [
    u
  ]);
  return M.useEffect(() => s, [
    s
  ]), {
    addGlobalListener: Z,
    removeGlobalListener: u,
    removeAllGlobalListeners: s
  };
}
function c1(l, Z) {
  let { id: u, "aria-label": s, "aria-labelledby": G } = l;
  return u = ad(u), G && s ? G = [
    .../* @__PURE__ */ new Set([
      u,
      ...G.trim().split(/\s+/)
    ])
  ].join(" ") : G && (G = G.trim().split(/\s+/).join(" ")), !s && !G && Z && (s = Z), {
    id: u,
    "aria-label": s,
    "aria-labelledby": G
  };
}
function tV(l) {
  const Z = M.useRef(null);
  return M.useMemo(() => ({
    get current() {
      return Z.current;
    },
    set current(u) {
      Z.current = u, typeof l == "function" ? l(u) : l && (l.current = u);
    }
  }), [
    l
  ]);
}
function nf() {
  return typeof window.ResizeObserver < "u";
}
function oW(l) {
  const { ref: Z, box: u, onResize: s } = l;
  M.useEffect(() => {
    let G = Z == null ? void 0 : Z.current;
    if (G)
      if (nf()) {
        const i = new window.ResizeObserver((m) => {
          m.length && s();
        });
        return i.observe(G, {
          box: u
        }), () => {
          G && i.unobserve(G);
        };
      } else
        return window.addEventListener("resize", s, !1), () => {
          window.removeEventListener("resize", s, !1);
        };
  }, [
    s,
    Z,
    u
  ]);
}
function XV(l, Z) {
  PZ(() => {
    if (l && l.ref && Z)
      return l.ref.current = Z.current, () => {
        l.ref && (l.ref.current = null);
      };
  });
}
function ga(l, Z) {
  let u = window.getComputedStyle(l), s = /(auto|scroll)/.test(u.overflow + u.overflowX + u.overflowY);
  return s && Z && (s = l.scrollHeight !== l.clientHeight || l.scrollWidth !== l.clientWidth), s;
}
function b1(l, Z) {
  let u = l;
  for (ga(u, Z) && (u = u.parentElement); u && !ga(u, Z); ) u = u.parentElement;
  return u || document.scrollingElement || document.documentElement;
}
function pf(l, Z) {
  const u = [];
  for (; l && l !== document.documentElement; )
    ga(l, Z) && u.push(l), l = l.parentElement;
  return u;
}
let Lf = 0;
const RK = /* @__PURE__ */ new Map();
function hf(l) {
  let [Z, u] = M.useState();
  return PZ(() => {
    if (!l) return;
    let s = RK.get(l);
    if (s)
      u(s.element.id);
    else {
      let G = `react-aria-description-${Lf++}`;
      u(G);
      let i = document.createElement("div");
      i.id = G, i.style.display = "none", i.textContent = l, document.body.appendChild(i), s = {
        refCount: 0,
        element: i
      }, RK.set(l, s);
    }
    return s.refCount++, () => {
      s && --s.refCount === 0 && (s.element.remove(), RK.delete(l));
    };
  }, [
    l
  ]), {
    "aria-describedby": l ? Z : void 0
  };
}
function Ak(l, Z, u, s) {
  let G = gb(u), i = u == null;
  M.useEffect(() => {
    if (i || !l.current) return;
    let m = l.current;
    return m.addEventListener(Z, G, s), () => {
      m.removeEventListener(Z, G, s);
    };
  }, [
    l,
    Z,
    s,
    i,
    G
  ]);
}
function u1(l, Z) {
  let u = $k(l, Z, "left"), s = $k(l, Z, "top"), G = Z.offsetWidth, i = Z.offsetHeight, m = l.scrollLeft, a = l.scrollTop, { borderTopWidth: n, borderLeftWidth: p } = getComputedStyle(l), y = l.scrollLeft + parseInt(p, 10), h = l.scrollTop + parseInt(n, 10), S = y + l.clientWidth, t = h + l.clientHeight;
  u <= m ? m = u - parseInt(p, 10) : u + G > S && (m += u + G - S), s <= h ? a = s - parseInt(n, 10) : s + i > t && (a += s + i - t), l.scrollLeft = m, l.scrollTop = a;
}
function $k(l, Z, u) {
  const s = u === "left" ? "offsetLeft" : "offsetTop";
  let G = 0;
  for (; Z.offsetParent && (G += Z[s], Z.offsetParent !== l); ) {
    if (Z.offsetParent.contains(l)) {
      G -= l[s];
      break;
    }
    Z = Z.offsetParent;
  }
  return G;
}
function qk(l, Z) {
  if (document.contains(l)) {
    let m = document.scrollingElement || document.documentElement;
    if (window.getComputedStyle(m).overflow === "hidden") {
      let n = pf(l);
      for (let p of n) u1(p, l);
    } else {
      var u;
      let { left: n, top: p } = l.getBoundingClientRect();
      l == null || (u = l.scrollIntoView) === null || u === void 0 || u.call(l, {
        block: "nearest"
      });
      let { left: y, top: h } = l.getBoundingClientRect();
      if (Math.abs(n - y) > 1 || Math.abs(p - h) > 1) {
        var s, G, i;
        Z == null || (G = Z.containingElement) === null || G === void 0 || (s = G.scrollIntoView) === null || s === void 0 || s.call(G, {
          block: "center",
          inline: "center"
        }), (i = l.scrollIntoView) === null || i === void 0 || i.call(l, {
          block: "nearest"
        });
      }
    }
  }
}
function eW(l) {
  return l.mozInputSource === 0 && l.isTrusted ? !0 : _I() && l.pointerType ? l.type === "click" && l.buttons === 1 : l.detail === 0 && !l.pointerType;
}
function yf(l) {
  return !_I() && l.width === 0 && l.height === 0 || l.width === 1 && l.height === 1 && l.pressure === 0 && l.detail === 0 && l.pointerType === "mouse";
}
function Sf(l, Z, u) {
  let s = M.useRef(Z), G = gb(() => {
    u && u(s.current);
  });
  M.useEffect(() => {
    var i;
    let m = l == null || (i = l.current) === null || i === void 0 ? void 0 : i.form;
    return m == null || m.addEventListener("reset", G), () => {
      m == null || m.removeEventListener("reset", G);
    };
  }, [
    l,
    G
  ]);
}
function Hh(l, Z, u) {
  let [s, G] = M.useState(l || Z), i = M.useRef(l !== void 0), m = l !== void 0;
  M.useEffect(() => {
    let p = i.current;
    p !== m && console.warn(`WARN: A component changed from ${p ? "controlled" : "uncontrolled"} to ${m ? "controlled" : "uncontrolled"}.`), i.current = m;
  }, [
    m
  ]);
  let a = m ? l : s, n = M.useCallback((p, ...y) => {
    let h = (S, ...t) => {
      u && (Object.is(a, S) || u(S, ...t)), m || (a = S);
    };
    typeof p == "function" ? (console.warn("We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320"), G((t, ...W) => {
      let V = p(m ? a : t, ...W);
      return h(V, ...y), m ? t : V;
    })) : (m || G(p), h(p, ...y));
  }, [
    m,
    a,
    u
  ]);
  return [
    a,
    n
  ];
}
function eo(l, Z = -1 / 0, u = 1 / 0) {
  return Math.min(Math.max(l, Z), u);
}
function TL(l, Z) {
  let u = l, s = Z.toString(), G = s.indexOf("."), i = G >= 0 ? s.length - G : 0;
  if (i > 0) {
    let m = Math.pow(10, i);
    u = Math.round(u * m) / m;
  }
  return u;
}
function ha(l, Z, u, s) {
  Z = Number(Z), u = Number(u);
  let G = (l - (isNaN(Z) ? 0 : Z)) % s, i = TL(Math.abs(G) * 2 >= s ? l + Math.sign(G) * (s - Math.abs(G)) : l - G, s);
  return isNaN(Z) ? !isNaN(u) && i > u && (i = Math.floor(TL(u / s, s)) * s) : i < Z ? i = Z : !isNaN(u) && i > u && (i = Z + Math.floor(TL((u - Z) / s, s)) * s), i = TL(i, s), i;
}
var YK = { exports: {} }, kK = {}, _k;
function tf() {
  if (_k) return kK;
  _k = 1;
  /**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  return function() {
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var l = M, Z = l.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function u(k) {
      {
        for (var U = arguments.length, w = new Array(U > 1 ? U - 1 : 0), z = 1; z < U; z++)
          w[z - 1] = arguments[z];
        s("error", k, w);
      }
    }
    function s(k, U, w) {
      {
        var z = Z.ReactDebugCurrentFrame, D = z.getStackAddendum();
        D !== "" && (U += "%s", w = w.concat([D]));
        var C = w.map(function(j) {
          return String(j);
        });
        C.unshift("Warning: " + U), Function.prototype.apply.call(console[k], console, C);
      }
    }
    function G(k, U) {
      return k === U && (k !== 0 || 1 / k === 1 / U) || k !== k && U !== U;
    }
    var i = typeof Object.is == "function" ? Object.is : G, m = l.useState, a = l.useEffect, n = l.useLayoutEffect, p = l.useDebugValue, y = !1, h = !1;
    function S(k, U, w) {
      y || l.startTransition !== void 0 && (y = !0, u("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."));
      var z = U();
      if (!h) {
        var D = U();
        i(z, D) || (u("The result of getSnapshot should be cached to avoid an infinite loop"), h = !0);
      }
      var C = m({
        inst: {
          value: z,
          getSnapshot: U
        }
      }), j = C[0].inst, E = C[1];
      return n(function() {
        j.value = z, j.getSnapshot = U, t(j) && E({
          inst: j
        });
      }, [k, z, U]), a(function() {
        t(j) && E({
          inst: j
        });
        var g = function() {
          t(j) && E({
            inst: j
          });
        };
        return k(g);
      }, [k]), p(z), z;
    }
    function t(k) {
      var U = k.getSnapshot, w = k.value;
      try {
        var z = U();
        return !i(w, z);
      } catch {
        return !0;
      }
    }
    function W(k, U, w) {
      return U();
    }
    var V = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", R = !V, x = R ? W : S, r = l.useSyncExternalStore !== void 0 ? l.useSyncExternalStore : x;
    kK.useSyncExternalStore = r, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
  }(), kK;
}
var l2;
function s1() {
  return l2 || (l2 = 1, YK.exports = tf()), YK.exports;
}
var Xf = s1();
const d1 = /* @__PURE__ */ M.createContext(!1), va = /* @__PURE__ */ M.createContext(null);
function Kf(l) {
  if (M.useContext(va))
    return l.content;
  let { collection: u, document: s } = Rf(l.createCollection);
  return /* @__PURE__ */ tl.createElement(tl.Fragment, null, /* @__PURE__ */ tl.createElement(ET, null, /* @__PURE__ */ tl.createElement(va.Provider, {
    value: s
  }, l.content)), /* @__PURE__ */ tl.createElement(Wf, {
    render: l.children,
    collection: u
  }));
}
function Wf({ collection: l, render: Z }) {
  return Z(l);
}
function Vf(l, Z, u) {
  let s = Mm(), G = M.useRef(s);
  G.current = s;
  let i = M.useCallback(() => G.current ? u() : Z(), [
    Z,
    u
  ]);
  return Xf.useSyncExternalStore(l, i);
}
const xf = typeof tl.useSyncExternalStore == "function" ? tl.useSyncExternalStore : Vf;
function Rf(l) {
  let [Z] = M.useState(() => new rT((l == null ? void 0 : l()) || new CT())), u = M.useCallback((m) => Z.subscribe(m), [
    Z
  ]), s = M.useCallback(() => {
    let m = Z.getCollection();
    return Z.isSSR && Z.resetAfterSSR(), m;
  }, [
    Z
  ]), G = M.useCallback(() => (Z.isSSR = !0, Z.getCollection()), [
    Z
  ]), i = xf(u, s, G);
  return PZ(() => (Z.isMounted = !0, () => {
    Z.isMounted = !1;
  }), [
    Z
  ]), {
    collection: i,
    document: Z
  };
}
const aW = /* @__PURE__ */ M.createContext(null);
function Yf(l, Z, u, s, G, i) {
  let m = M.useCallback((n) => {
    n == null || n.setProps(Z, u, s, i);
  }, [
    Z,
    u,
    s,
    i
  ]), a = M.useContext(aW);
  if (a) {
    let n = a.ownerDocument.nodesByProps.get(Z);
    return n || (n = a.ownerDocument.createElement(l), n.setProps(Z, u, s, i), a.appendChild(n), a.ownerDocument.updateCollection(), a.ownerDocument.nodesByProps.set(Z, n)), G ? /* @__PURE__ */ tl.createElement(aW.Provider, {
      value: n
    }, G) : null;
  }
  return /* @__PURE__ */ tl.createElement(l, {
    ref: m
  }, G);
}
function G1(l, Z) {
  let u = ({ node: G }) => Z(G.props, G.props.ref, G), s = M.forwardRef((G, i) => {
    if (!M.useContext(d1)) {
      if (Z.length >= 3) throw new Error(Z.name + " cannot be rendered outside a collection.");
      return Z(G, i);
    }
    return Yf(l, G, i, "children" in G ? G.children : null, null, (a) => /* @__PURE__ */ tl.createElement(u, {
      node: a
    }));
  });
  return s.displayName = Z.name, s;
}
function kf(l) {
  return QI({
    ...l,
    addIdAndValue: !0
  });
}
const Z2 = /* @__PURE__ */ M.createContext(null);
function Mf(l) {
  let Z = M.useContext(Z2), u = ((Z == null ? void 0 : Z.dependencies) || []).concat(l.dependencies), s = l.idScope || (Z == null ? void 0 : Z.idScope), G = kf({
    ...l,
    idScope: s,
    dependencies: u
  });
  return M.useContext(va) && (G = /* @__PURE__ */ tl.createElement(If, null, G)), Z = M.useMemo(() => ({
    dependencies: u,
    idScope: s
  }), [
    s,
    ...u
  ]), /* @__PURE__ */ tl.createElement(Z2.Provider, {
    value: Z
  }, G);
}
function If({ children: l }) {
  let Z = M.useContext(va), u = M.useMemo(() => /* @__PURE__ */ tl.createElement(va.Provider, {
    value: null
  }, /* @__PURE__ */ tl.createElement(d1.Provider, {
    value: !0
  }, l)), [
    l
  ]);
  return Mm() ? /* @__PURE__ */ tl.createElement(aW.Provider, {
    value: Z
  }, u) : /* @__PURE__ */ xo.createPortal(u, Z);
}
const Uf = /* @__PURE__ */ M.createContext(null), Cf = {
  CollectionRoot({ collection: l, renderDropIndicator: Z }) {
    return c2(l, null, Z);
  },
  CollectionBranch({ collection: l, parent: Z, renderDropIndicator: u }) {
    return c2(l, Z, u);
  }
};
function c2(l, Z, u) {
  return QI({
    items: Z ? l.getChildren(Z.key) : l,
    dependencies: [
      u
    ],
    children(s) {
      var G;
      let i = s.render(s);
      if (!u || s.type !== "item") return i;
      let m = s.key, a = l.getKeyAfter(m);
      return /* @__PURE__ */ tl.createElement(tl.Fragment, null, u({
        type: "item",
        key: m,
        dropPosition: "before"
      }), i, (a == null || ((G = l.getItem(a)) === null || G === void 0 ? void 0 : G.type) !== "item") && u({
        type: "item",
        key: m,
        dropPosition: "after"
      }));
    }
  });
}
const m1 = /* @__PURE__ */ M.createContext(Cf);
function rf(l) {
  return M.useMemo(() => l != null ? /* @__PURE__ */ new Set([
    l
  ]) : null, [
    l
  ]);
}
const b2 = Symbol("default");
function Ln({ values: l, children: Z }) {
  for (let [u, s] of l)
    Z = /* @__PURE__ */ tl.createElement(u.Provider, {
      value: s
    }, Z);
  return Z;
}
function Ks(l) {
  let { className: Z, style: u, children: s, defaultClassName: G, defaultChildren: i, defaultStyle: m, values: a } = l;
  return M.useMemo(() => {
    let n, p, y;
    return typeof Z == "function" ? n = Z({
      ...a,
      defaultClassName: G
    }) : n = Z, typeof u == "function" ? p = u({
      ...a,
      defaultStyle: m || {}
    }) : p = u, typeof s == "function" ? y = s({
      ...a,
      defaultChildren: i
    }) : s == null ? y = i : y = s, {
      className: n ?? G,
      style: p || m ? {
        ...m,
        ...p
      } : void 0,
      children: y ?? i,
      "data-rac": ""
    };
  }, [
    Z,
    u,
    s,
    G,
    i,
    m,
    a
  ]);
}
function nW(l, Z) {
  return (u) => Z(typeof l == "function" ? l(u) : l, u);
}
function gh(l, Z) {
  let u = M.useContext(l);
  if (Z === null)
    return null;
  if (u && typeof u == "object" && "slots" in u && u.slots) {
    let s = new Intl.ListFormat().format(Object.keys(u.slots).map((i) => `"${i}"`));
    if (!Z && !u.slots[b2]) throw new Error(`A slot prop is required. Valid slot names are ${s}.`);
    let G = Z || b2;
    if (!u.slots[G])
      throw new Error(`Invalid slot "${Z}". Valid slot names are ${s}.`);
    return u.slots[G];
  }
  return u;
}
function yd(l, Z, u) {
  let s = gh(u, l.slot) || {}, { ref: G, ...i } = s, m = tV(M.useMemo(() => AT(Z, G), [
    Z,
    G
  ])), a = HZ(i, l);
  return "style" in i && i.style && "style" in l && l.style && (typeof i.style == "function" || typeof l.style == "function" ? a.style = (n) => {
    let p = typeof i.style == "function" ? i.style(n) : i.style, y = {
      ...n.defaultStyle,
      ...p
    }, h = typeof l.style == "function" ? l.style({
      ...n,
      defaultStyle: y
    }) : l.style;
    return {
      ...y,
      ...h
    };
  } : a.style = {
    ...i.style,
    ...l.style
  }), [
    a,
    m
  ];
}
function KV() {
  let [l, Z] = M.useState(!0), u = M.useRef(!1), s = M.useCallback((G) => {
    u.current = !0, Z(!!G);
  }, []);
  return PZ(() => {
    u.current || Z(!1);
  }, []), [
    s,
    l
  ];
}
function Ff(l, Z = !0) {
  let [u, s] = M.useState(!0);
  return i1(l, u && Z, M.useCallback(() => s(!1), [])), u && Z;
}
function Nf(l, Z) {
  let [u, s] = M.useState(!1), [G, i] = M.useState("idle");
  return !Z && l.current && G === "idle" && (u = !0, s(!0), i("exiting")), !l.current && G === "exited" && i("idle"), i1(l, u, M.useCallback(() => {
    i("exited"), s(!1);
  }, [])), u;
}
function i1(l, Z, u) {
  let s = M.useRef(null);
  Z && l.current && (s.current = window.getComputedStyle(l.current).animation), PZ(() => {
    if (Z && l.current) {
      let G = window.getComputedStyle(l.current);
      if (G.animationName && G.animationName !== "none" && G.animation !== s.current) {
        let i = (a) => {
          a.target === l.current && (m.removeEventListener("animationend", i), DI.flushSync(() => {
            u();
          }));
        }, m = l.current;
        return m.addEventListener("animationend", i), () => {
          m.removeEventListener("animationend", i);
        };
      } else u();
    }
  }, [
    l,
    Z,
    u
  ]);
}
function I_(l) {
  const Z = /^(data-.*)$/;
  let u = {};
  for (const s in l) Z.test(s) || (u[s] = l[s]);
  return u;
}
let Ti = "default", pW = "", sh = /* @__PURE__ */ new WeakMap();
function LW(l) {
  if (Jh()) {
    if (Ti === "default") {
      const Z = _Z(l);
      pW = Z.documentElement.style.webkitUserSelect, Z.documentElement.style.webkitUserSelect = "none";
    }
    Ti = "disabled";
  } else (l instanceof HTMLElement || l instanceof SVGElement) && (sh.set(l, l.style.userSelect), l.style.userSelect = "none");
}
function ka(l) {
  if (Jh()) {
    if (Ti !== "disabled") return;
    Ti = "restoring", setTimeout(() => {
      Z1(() => {
        if (Ti === "restoring") {
          const Z = _Z(l);
          Z.documentElement.style.webkitUserSelect === "none" && (Z.documentElement.style.webkitUserSelect = pW || ""), pW = "", Ti = "default";
        }
      });
    }, 300);
  } else if ((l instanceof HTMLElement || l instanceof SVGElement) && l && sh.has(l)) {
    let Z = sh.get(l);
    l.style.userSelect === "none" && (l.style.userSelect = Z), l.getAttribute("style") === "" && l.removeAttribute("style"), sh.delete(l);
  }
}
const Ta = tl.createContext({
  register: () => {
  }
});
Ta.displayName = "PressResponderContext";
function wf(l, Z) {
  return Z.get ? Z.get.call(l) : Z.value;
}
function o1(l, Z, u) {
  if (!Z.has(l)) throw new TypeError("attempted to " + u + " private field on non-instance");
  return Z.get(l);
}
function zf(l, Z) {
  var u = o1(l, Z, "get");
  return wf(l, u);
}
function Jf(l, Z) {
  if (Z.has(l))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Hf(l, Z, u) {
  Jf(l, Z), Z.set(l, u);
}
function gf(l, Z, u) {
  if (Z.set) Z.set.call(l, u);
  else {
    if (!Z.writable)
      throw new TypeError("attempted to set read only private field");
    Z.value = u;
  }
}
function u2(l, Z, u) {
  var s = o1(l, Z, "set");
  return gf(l, s, u), u;
}
function vf(l) {
  let Z = M.useContext(Ta);
  if (Z) {
    let { register: u, ...s } = Z;
    l = HZ(s, l), u();
  }
  return XV(Z, l.ref), l;
}
var fL = /* @__PURE__ */ new WeakMap();
class EL {
  continuePropagation() {
    u2(this, fL, !1);
  }
  get shouldStopPropagation() {
    return zf(this, fL);
  }
  constructor(Z, u, s, G) {
    Hf(this, fL, {
      writable: !0,
      value: void 0
    }), u2(this, fL, !0);
    var i;
    let m = (i = G == null ? void 0 : G.target) !== null && i !== void 0 ? i : s.currentTarget;
    const a = m == null ? void 0 : m.getBoundingClientRect();
    let n, p = 0, y, h = null;
    s.clientX != null && s.clientY != null && (y = s.clientX, h = s.clientY), a && (y != null && h != null ? (n = y - a.left, p = h - a.top) : (n = a.width / 2, p = a.height / 2)), this.type = Z, this.pointerType = u, this.target = s.currentTarget, this.shiftKey = s.shiftKey, this.metaKey = s.metaKey, this.ctrlKey = s.ctrlKey, this.altKey = s.altKey, this.x = n, this.y = p;
  }
}
const s2 = Symbol("linkClicked");
function hn(l) {
  let {
    onPress: Z,
    onPressChange: u,
    onPressStart: s,
    onPressEnd: G,
    onPressUp: i,
    isDisabled: m,
    isPressed: a,
    preventFocusOnPress: n,
    shouldCancelOnPointerExit: p,
    allowTextSelectionOnPress: y,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ref: h,
    ...S
  } = vf(l), [t, W] = M.useState(!1), V = M.useRef({
    isPressed: !1,
    ignoreEmulatedMouseEvents: !1,
    ignoreClickAfterPress: !1,
    didFirePressStart: !1,
    isTriggeringEvent: !1,
    activePointerId: null,
    target: null,
    isOverTarget: !1,
    pointerType: null
  }), { addGlobalListener: R, removeAllGlobalListeners: x } = pn(), r = gb((C, j) => {
    let E = V.current;
    if (m || E.didFirePressStart) return !1;
    let g = !0;
    if (E.isTriggeringEvent = !0, s) {
      let A = new EL("pressstart", j, C);
      s(A), g = A.shouldStopPropagation;
    }
    return u && u(!0), E.isTriggeringEvent = !1, E.didFirePressStart = !0, W(!0), g;
  }), k = gb((C, j, E = !0) => {
    let g = V.current;
    if (!g.didFirePressStart) return !1;
    g.ignoreClickAfterPress = !0, g.didFirePressStart = !1, g.isTriggeringEvent = !0;
    let A = !0;
    if (G) {
      let J = new EL("pressend", j, C);
      G(J), A = J.shouldStopPropagation;
    }
    if (u && u(!1), W(!1), Z && E && !m) {
      let J = new EL("press", j, C);
      Z(J), A && (A = J.shouldStopPropagation);
    }
    return g.isTriggeringEvent = !1, A;
  }), U = gb((C, j) => {
    let E = V.current;
    if (m) return !1;
    if (i) {
      E.isTriggeringEvent = !0;
      let g = new EL("pressup", j, C);
      return i(g), E.isTriggeringEvent = !1, g.shouldStopPropagation;
    }
    return !0;
  }), w = gb((C) => {
    let j = V.current;
    j.isPressed && j.target && (j.isOverTarget && j.pointerType != null && k(_s(j.target, C), j.pointerType, !1), j.isPressed = !1, j.isOverTarget = !1, j.activePointerId = null, j.pointerType = null, x(), y || ka(j.target));
  }), z = gb((C) => {
    p && w(C);
  }), D = M.useMemo(() => {
    let C = V.current, j = {
      onKeyDown(g) {
        if (MK(g.nativeEvent, g.currentTarget) && g.currentTarget.contains(g.target)) {
          var A;
          G2(g.target, g.key) && g.preventDefault();
          let J = !0;
          if (!C.isPressed && !g.repeat) {
            C.target = g.currentTarget, C.isPressed = !0, J = r(g, "keyboard");
            let F = g.currentTarget, v = (T) => {
              MK(T, F) && !T.repeat && F.contains(T.target) && C.target && U(_s(C.target, T), "keyboard");
            };
            R(_Z(g.currentTarget), "keyup", Ha(v, E), !0);
          }
          J && g.stopPropagation(), g.metaKey && Sm() && ((A = C.metaKeyEvents) === null || A === void 0 || A.set(g.key, g.nativeEvent));
        } else g.key === "Meta" && (C.metaKeyEvents = /* @__PURE__ */ new Map());
      },
      onClick(g) {
        if (!(g && !g.currentTarget.contains(g.target)) && g && g.button === 0 && !C.isTriggeringEvent && !tm.isOpening) {
          let A = !0;
          if (m && g.preventDefault(), !C.ignoreClickAfterPress && !C.ignoreEmulatedMouseEvents && !C.isPressed && (C.pointerType === "virtual" || eW(g.nativeEvent))) {
            !m && !n && Ls(g.currentTarget);
            let J = r(g, "virtual"), F = U(g, "virtual"), v = k(g, "virtual");
            A = J && F && v;
          }
          C.ignoreEmulatedMouseEvents = !1, C.ignoreClickAfterPress = !1, A && g.stopPropagation();
        }
      }
    }, E = (g) => {
      var A;
      if (C.isPressed && C.target && MK(g, C.target)) {
        var J;
        G2(g.target, g.key) && g.preventDefault();
        let v = g.target;
        k(_s(C.target, g), "keyboard", C.target.contains(v)), x(), g.key !== "Enter" && WV(C.target) && C.target.contains(v) && !g[s2] && (g[s2] = !0, tm(C.target, g, !1)), C.isPressed = !1, (J = C.metaKeyEvents) === null || J === void 0 || J.delete(g.key);
      } else if (g.key === "Meta" && (!((A = C.metaKeyEvents) === null || A === void 0) && A.size)) {
        var F;
        let v = C.metaKeyEvents;
        C.metaKeyEvents = void 0;
        for (let T of v.values()) (F = C.target) === null || F === void 0 || F.dispatchEvent(new KeyboardEvent("keyup", T));
      }
    };
    if (typeof PointerEvent < "u") {
      j.onPointerDown = (v) => {
        if (v.button !== 0 || !v.currentTarget.contains(v.target)) return;
        if (yf(v.nativeEvent)) {
          C.pointerType = "virtual";
          return;
        }
        IK(v.currentTarget) && v.preventDefault(), C.pointerType = v.pointerType;
        let T = !0;
        C.isPressed || (C.isPressed = !0, C.isOverTarget = !0, C.activePointerId = v.pointerId, C.target = v.currentTarget, !m && !n && Ls(v.currentTarget), y || LW(C.target), T = r(v, C.pointerType), R(_Z(v.currentTarget), "pointermove", g, !1), R(_Z(v.currentTarget), "pointerup", A, !1), R(_Z(v.currentTarget), "pointercancel", F, !1)), T && v.stopPropagation();
      }, j.onMouseDown = (v) => {
        v.currentTarget.contains(v.target) && v.button === 0 && (IK(v.currentTarget) && v.preventDefault(), v.stopPropagation());
      }, j.onPointerUp = (v) => {
        !v.currentTarget.contains(v.target) || C.pointerType === "virtual" || v.button === 0 && wi(v, v.currentTarget) && U(v, C.pointerType || v.pointerType);
      };
      let g = (v) => {
        v.pointerId === C.activePointerId && (C.target && wi(v, C.target) ? !C.isOverTarget && C.pointerType != null && (C.isOverTarget = !0, r(_s(C.target, v), C.pointerType)) : C.target && C.isOverTarget && C.pointerType != null && (C.isOverTarget = !1, k(_s(C.target, v), C.pointerType, !1), z(v)));
      }, A = (v) => {
        v.pointerId === C.activePointerId && C.isPressed && v.button === 0 && C.target && (wi(v, C.target) && C.pointerType != null ? k(_s(C.target, v), C.pointerType) : C.isOverTarget && C.pointerType != null && k(_s(C.target, v), C.pointerType, !1), C.isPressed = !1, C.isOverTarget = !1, C.activePointerId = null, C.pointerType = null, x(), y || ka(C.target), "ontouchend" in C.target && v.pointerType !== "mouse" && R(C.target, "touchend", J, {
          once: !0
        }));
      }, J = (v) => {
        e1(v.target) && v.preventDefault();
      }, F = (v) => {
        w(v);
      };
      j.onDragStart = (v) => {
        v.currentTarget.contains(v.target) && w(v);
      };
    } else {
      j.onMouseDown = (J) => {
        if (J.button !== 0 || !J.currentTarget.contains(J.target)) return;
        if (IK(J.currentTarget) && J.preventDefault(), C.ignoreEmulatedMouseEvents) {
          J.stopPropagation();
          return;
        }
        C.isPressed = !0, C.isOverTarget = !0, C.target = J.currentTarget, C.pointerType = eW(J.nativeEvent) ? "virtual" : "mouse", !m && !n && Ls(J.currentTarget), r(J, C.pointerType) && J.stopPropagation(), R(_Z(J.currentTarget), "mouseup", g, !1);
      }, j.onMouseEnter = (J) => {
        if (!J.currentTarget.contains(J.target)) return;
        let F = !0;
        C.isPressed && !C.ignoreEmulatedMouseEvents && C.pointerType != null && (C.isOverTarget = !0, F = r(J, C.pointerType)), F && J.stopPropagation();
      }, j.onMouseLeave = (J) => {
        if (!J.currentTarget.contains(J.target)) return;
        let F = !0;
        C.isPressed && !C.ignoreEmulatedMouseEvents && C.pointerType != null && (C.isOverTarget = !1, F = k(J, C.pointerType, !1), z(J)), F && J.stopPropagation();
      }, j.onMouseUp = (J) => {
        J.currentTarget.contains(J.target) && !C.ignoreEmulatedMouseEvents && J.button === 0 && U(J, C.pointerType || "mouse");
      };
      let g = (J) => {
        if (J.button === 0) {
          if (C.isPressed = !1, x(), C.ignoreEmulatedMouseEvents) {
            C.ignoreEmulatedMouseEvents = !1;
            return;
          }
          C.target && wi(J, C.target) && C.pointerType != null ? k(_s(C.target, J), C.pointerType) : C.target && C.isOverTarget && C.pointerType != null && k(_s(C.target, J), C.pointerType, !1), C.isOverTarget = !1;
        }
      };
      j.onTouchStart = (J) => {
        if (!J.currentTarget.contains(J.target)) return;
        let F = Tf(J.nativeEvent);
        if (!F) return;
        C.activePointerId = F.identifier, C.ignoreEmulatedMouseEvents = !0, C.isOverTarget = !0, C.isPressed = !0, C.target = J.currentTarget, C.pointerType = "touch", !m && !n && Ls(J.currentTarget), y || LW(C.target), r(qd(C.target, J), C.pointerType) && J.stopPropagation(), R(Eu(J.currentTarget), "scroll", A, !0);
      }, j.onTouchMove = (J) => {
        if (!J.currentTarget.contains(J.target)) return;
        if (!C.isPressed) {
          J.stopPropagation();
          return;
        }
        let F = d2(J.nativeEvent, C.activePointerId), v = !0;
        F && wi(F, J.currentTarget) ? !C.isOverTarget && C.pointerType != null && (C.isOverTarget = !0, v = r(qd(C.target, J), C.pointerType)) : C.isOverTarget && C.pointerType != null && (C.isOverTarget = !1, v = k(qd(C.target, J), C.pointerType, !1), z(qd(C.target, J))), v && J.stopPropagation();
      }, j.onTouchEnd = (J) => {
        if (!J.currentTarget.contains(J.target)) return;
        if (!C.isPressed) {
          J.stopPropagation();
          return;
        }
        let F = d2(J.nativeEvent, C.activePointerId), v = !0;
        F && wi(F, J.currentTarget) && C.pointerType != null ? (U(qd(C.target, J), C.pointerType), v = k(qd(C.target, J), C.pointerType)) : C.isOverTarget && C.pointerType != null && (v = k(qd(C.target, J), C.pointerType, !1)), v && J.stopPropagation(), C.isPressed = !1, C.activePointerId = null, C.isOverTarget = !1, C.ignoreEmulatedMouseEvents = !0, C.target && !y && ka(C.target), x();
      }, j.onTouchCancel = (J) => {
        J.currentTarget.contains(J.target) && (J.stopPropagation(), C.isPressed && w(qd(C.target, J)));
      };
      let A = (J) => {
        C.isPressed && J.target.contains(C.target) && w({
          currentTarget: C.target,
          shiftKey: !1,
          ctrlKey: !1,
          metaKey: !1,
          altKey: !1
        });
      };
      j.onDragStart = (J) => {
        J.currentTarget.contains(J.target) && w(J);
      };
    }
    return j;
  }, [
    R,
    m,
    n,
    x,
    y,
    w,
    z,
    k,
    r,
    U
  ]);
  return M.useEffect(() => () => {
    var C;
    y || ka((C = V.current.target) !== null && C !== void 0 ? C : void 0);
  }, [
    y
  ]), {
    isPressed: a || t,
    pressProps: HZ(S, D)
  };
}
function WV(l) {
  return l.tagName === "A" && l.hasAttribute("href");
}
function MK(l, Z) {
  const { key: u, code: s } = l, G = Z, i = G.getAttribute("role");
  return (u === "Enter" || u === " " || u === "Spacebar" || s === "Space") && !(G instanceof Eu(G).HTMLInputElement && !a1(G, u) || G instanceof Eu(G).HTMLTextAreaElement || G.isContentEditable) && // Links should only trigger with Enter key
  !((i === "link" || !i && WV(G)) && u !== "Enter");
}
function Tf(l) {
  const { targetTouches: Z } = l;
  return Z.length > 0 ? Z[0] : null;
}
function d2(l, Z) {
  const u = l.changedTouches;
  for (let s = 0; s < u.length; s++) {
    const G = u[s];
    if (G.identifier === Z) return G;
  }
  return null;
}
function qd(l, Z) {
  let u = 0, s = 0;
  return Z.targetTouches && Z.targetTouches.length === 1 && (u = Z.targetTouches[0].clientX, s = Z.targetTouches[0].clientY), {
    currentTarget: l,
    shiftKey: Z.shiftKey,
    ctrlKey: Z.ctrlKey,
    metaKey: Z.metaKey,
    altKey: Z.altKey,
    clientX: u,
    clientY: s
  };
}
function _s(l, Z) {
  let u = Z.clientX, s = Z.clientY;
  return {
    currentTarget: l,
    shiftKey: Z.shiftKey,
    ctrlKey: Z.ctrlKey,
    metaKey: Z.metaKey,
    altKey: Z.altKey,
    clientX: u,
    clientY: s
  };
}
function ff(l) {
  let Z = 0, u = 0;
  return l.width !== void 0 ? Z = l.width / 2 : l.radiusX !== void 0 && (Z = l.radiusX), l.height !== void 0 ? u = l.height / 2 : l.radiusY !== void 0 && (u = l.radiusY), {
    top: l.clientY - u,
    right: l.clientX + Z,
    bottom: l.clientY + u,
    left: l.clientX - Z
  };
}
function Ef(l, Z) {
  return !(l.left > Z.right || Z.left > l.right || l.top > Z.bottom || Z.top > l.bottom);
}
function wi(l, Z) {
  let u = Z.getBoundingClientRect(), s = ff(l);
  return Ef(u, s);
}
function IK(l) {
  return !(l instanceof HTMLElement) || !l.hasAttribute("draggable");
}
function e1(l) {
  return l instanceof HTMLInputElement ? !1 : l instanceof HTMLButtonElement ? l.type !== "submit" && l.type !== "reset" : !WV(l);
}
function G2(l, Z) {
  return l instanceof HTMLInputElement ? !a1(l, Z) : e1(l);
}
const Bf = /* @__PURE__ */ new Set([
  "checkbox",
  "radio",
  "range",
  "color",
  "file",
  "image",
  "button",
  "submit",
  "reset"
]);
function a1(l, Z) {
  return l.type === "checkbox" || l.type === "radio" ? Z === " " : Bf.has(l.type);
}
const Df = /* @__PURE__ */ tl.forwardRef(({ children: l, ...Z }, u) => {
  let s = M.useRef(!1), G = M.useContext(Ta);
  u = tV(u || (G == null ? void 0 : G.ref));
  let i = HZ(G || {}, {
    ...Z,
    ref: u,
    register() {
      s.current = !0, G && G.register();
    }
  });
  return XV(G, u), M.useEffect(() => {
    s.current || (console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component."), s.current = !0);
  }, []), /* @__PURE__ */ tl.createElement(Ta.Provider, {
    value: i
  }, l);
});
function jf({ children: l }) {
  let Z = M.useMemo(() => ({
    register: () => {
    }
  }), []);
  return /* @__PURE__ */ tl.createElement(Ta.Provider, {
    value: Z
  }, l);
}
class Qf {
  isDefaultPrevented() {
    return this.nativeEvent.defaultPrevented;
  }
  preventDefault() {
    this.defaultPrevented = !0, this.nativeEvent.preventDefault();
  }
  stopPropagation() {
    this.nativeEvent.stopPropagation(), this.isPropagationStopped = () => !0;
  }
  isPropagationStopped() {
    return !1;
  }
  persist() {
  }
  constructor(Z, u) {
    this.nativeEvent = u, this.target = u.target, this.currentTarget = u.currentTarget, this.relatedTarget = u.relatedTarget, this.bubbles = u.bubbles, this.cancelable = u.cancelable, this.defaultPrevented = u.defaultPrevented, this.eventPhase = u.eventPhase, this.isTrusted = u.isTrusted, this.timeStamp = u.timeStamp, this.type = Z;
  }
}
function n1(l) {
  let Z = M.useRef({
    isFocused: !1,
    observer: null
  });
  PZ(() => {
    const s = Z.current;
    return () => {
      s.observer && (s.observer.disconnect(), s.observer = null);
    };
  }, []);
  let u = gb((s) => {
    l == null || l(s);
  });
  return M.useCallback((s) => {
    if (s.target instanceof HTMLButtonElement || s.target instanceof HTMLInputElement || s.target instanceof HTMLTextAreaElement || s.target instanceof HTMLSelectElement) {
      Z.current.isFocused = !0;
      let G = s.target, i = (m) => {
        Z.current.isFocused = !1, G.disabled && u(new Qf("blur", m)), Z.current.observer && (Z.current.observer.disconnect(), Z.current.observer = null);
      };
      G.addEventListener("focusout", i, {
        once: !0
      }), Z.current.observer = new MutationObserver(() => {
        if (Z.current.isFocused && G.disabled) {
          var m;
          (m = Z.current.observer) === null || m === void 0 || m.disconnect();
          let a = G === document.activeElement ? null : document.activeElement;
          G.dispatchEvent(new FocusEvent("blur", {
            relatedTarget: a
          })), G.dispatchEvent(new FocusEvent("focusout", {
            bubbles: !0,
            relatedTarget: a
          }));
        }
      }), Z.current.observer.observe(G, {
        attributes: !0,
        attributeFilter: [
          "disabled"
        ]
      });
    }
  }, [
    u
  ]);
}
function VV(l) {
  let { isDisabled: Z, onFocus: u, onBlur: s, onFocusChange: G } = l;
  const i = M.useCallback((n) => {
    if (n.target === n.currentTarget)
      return s && s(n), G && G(!1), !0;
  }, [
    s,
    G
  ]), m = n1(i), a = M.useCallback((n) => {
    const p = _Z(n.target);
    n.target === n.currentTarget && p.activeElement === n.target && (u && u(n), G && G(!0), m(n));
  }, [
    G,
    u,
    m
  ]);
  return {
    focusProps: {
      onFocus: !Z && (u || G || s) ? a : void 0,
      onBlur: !Z && (s || G) ? i : void 0
    }
  };
}
let nd = null, fa = /* @__PURE__ */ new Set(), Fa = /* @__PURE__ */ new Map(), Xm = !1, hW = !1;
const Pf = {
  Tab: !0,
  Escape: !0
};
function vh(l, Z) {
  for (let u of fa) u(l, Z);
}
function Of(l) {
  return !(l.metaKey || !Sm() && l.altKey || l.ctrlKey || l.key === "Control" || l.key === "Shift" || l.key === "Meta");
}
function ah(l) {
  Xm = !0, Of(l) && (nd = "keyboard", vh("keyboard", l));
}
function Lu(l) {
  nd = "pointer", (l.type === "mousedown" || l.type === "pointerdown") && (Xm = !0, vh("pointer", l));
}
function p1(l) {
  eW(l) && (Xm = !0, nd = "virtual");
}
function L1(l) {
  l.target === window || l.target === document || (!Xm && !hW && (nd = "virtual", vh("virtual", l)), Xm = !1, hW = !1);
}
function h1() {
  Xm = !1, hW = !0;
}
function nh(l) {
  if (typeof window > "u" || Fa.get(Eu(l))) return;
  const Z = Eu(l), u = _Z(l);
  let s = Z.HTMLElement.prototype.focus;
  Z.HTMLElement.prototype.focus = function() {
    Xm = !0, s.apply(this, arguments);
  }, u.addEventListener("keydown", ah, !0), u.addEventListener("keyup", ah, !0), u.addEventListener("click", p1, !0), Z.addEventListener("focus", L1, !0), Z.addEventListener("blur", h1, !1), typeof PointerEvent < "u" ? (u.addEventListener("pointerdown", Lu, !0), u.addEventListener("pointermove", Lu, !0), u.addEventListener("pointerup", Lu, !0)) : (u.addEventListener("mousedown", Lu, !0), u.addEventListener("mousemove", Lu, !0), u.addEventListener("mouseup", Lu, !0)), Z.addEventListener("beforeunload", () => {
    y1(l);
  }, {
    once: !0
  }), Fa.set(Z, {
    focus: s
  });
}
const y1 = (l, Z) => {
  const u = Eu(l), s = _Z(l);
  Z && s.removeEventListener("DOMContentLoaded", Z), Fa.has(u) && (u.HTMLElement.prototype.focus = Fa.get(u).focus, s.removeEventListener("keydown", ah, !0), s.removeEventListener("keyup", ah, !0), s.removeEventListener("click", p1, !0), u.removeEventListener("focus", L1, !0), u.removeEventListener("blur", h1, !1), typeof PointerEvent < "u" ? (s.removeEventListener("pointerdown", Lu, !0), s.removeEventListener("pointermove", Lu, !0), s.removeEventListener("pointerup", Lu, !0)) : (s.removeEventListener("mousedown", Lu, !0), s.removeEventListener("mousemove", Lu, !0), s.removeEventListener("mouseup", Lu, !0)), Fa.delete(u));
};
function Af(l) {
  const Z = _Z(l);
  let u;
  return Z.readyState !== "loading" ? nh(l) : (u = () => {
    nh(l);
  }, Z.addEventListener("DOMContentLoaded", u)), () => y1(l, u);
}
typeof document < "u" && Af();
function xV() {
  return nd !== "pointer";
}
function yW() {
  return nd;
}
function $f(l) {
  nd = l, vh(l, null);
}
function U_() {
  nh();
  let [l, Z] = M.useState(nd);
  return M.useEffect(() => {
    let u = () => {
      Z(nd);
    };
    return fa.add(u), () => {
      fa.delete(u);
    };
  }, []), Mm() ? null : l;
}
const qf = /* @__PURE__ */ new Set([
  "checkbox",
  "radio",
  "range",
  "color",
  "file",
  "image",
  "button",
  "submit",
  "reset"
]);
function _f(l, Z, u) {
  var s;
  const G = typeof window < "u" ? Eu(u == null ? void 0 : u.target).HTMLInputElement : HTMLInputElement, i = typeof window < "u" ? Eu(u == null ? void 0 : u.target).HTMLTextAreaElement : HTMLTextAreaElement, m = typeof window < "u" ? Eu(u == null ? void 0 : u.target).HTMLElement : HTMLElement, a = typeof window < "u" ? Eu(u == null ? void 0 : u.target).KeyboardEvent : KeyboardEvent;
  return l = l || (u == null ? void 0 : u.target) instanceof G && !qf.has(u == null || (s = u.target) === null || s === void 0 ? void 0 : s.type) || (u == null ? void 0 : u.target) instanceof i || (u == null ? void 0 : u.target) instanceof m && (u == null ? void 0 : u.target.isContentEditable), !(l && Z === "keyboard" && u instanceof a && !Pf[u.key]);
}
function lE(l, Z, u) {
  nh(), M.useEffect(() => {
    let s = (G, i) => {
      _f(!!(u != null && u.isTextInput), G, i) && l(xV());
    };
    return fa.add(s), () => {
      fa.delete(s);
    };
  }, Z);
}
function RV(l) {
  let { isDisabled: Z, onBlurWithin: u, onFocusWithin: s, onFocusWithinChange: G } = l, i = M.useRef({
    isFocusWithin: !1
  }), m = M.useCallback((p) => {
    i.current.isFocusWithin && !p.currentTarget.contains(p.relatedTarget) && (i.current.isFocusWithin = !1, u && u(p), G && G(!1));
  }, [
    u,
    G,
    i
  ]), a = n1(m), n = M.useCallback((p) => {
    !i.current.isFocusWithin && document.activeElement === p.target && (s && s(p), G && G(!0), i.current.isFocusWithin = !0, a(p));
  }, [
    s,
    G,
    a
  ]);
  return Z ? {
    focusWithinProps: {
      // These should not have been null, that would conflict in mergeProps
      onFocus: void 0,
      onBlur: void 0
    }
  } : {
    focusWithinProps: {
      onFocus: n,
      onBlur: m
    }
  };
}
let ph = !1, UK = 0;
function SW() {
  ph = !0, setTimeout(() => {
    ph = !1;
  }, 50);
}
function m2(l) {
  l.pointerType === "touch" && SW();
}
function ZE() {
  if (!(typeof document > "u"))
    return typeof PointerEvent < "u" ? document.addEventListener("pointerup", m2) : document.addEventListener("touchend", SW), UK++, () => {
      UK--, !(UK > 0) && (typeof PointerEvent < "u" ? document.removeEventListener("pointerup", m2) : document.removeEventListener("touchend", SW));
    };
}
function Ro(l) {
  let { onHoverStart: Z, onHoverChange: u, onHoverEnd: s, isDisabled: G } = l, [i, m] = M.useState(!1), a = M.useRef({
    isHovered: !1,
    ignoreEmulatedMouseEvents: !1,
    pointerType: "",
    target: null
  }).current;
  M.useEffect(ZE, []);
  let { hoverProps: n, triggerHoverEnd: p } = M.useMemo(() => {
    let y = (t, W) => {
      if (a.pointerType = W, G || W === "touch" || a.isHovered || !t.currentTarget.contains(t.target)) return;
      a.isHovered = !0;
      let V = t.currentTarget;
      a.target = V, Z && Z({
        type: "hoverstart",
        target: V,
        pointerType: W
      }), u && u(!0), m(!0);
    }, h = (t, W) => {
      if (a.pointerType = "", a.target = null, W === "touch" || !a.isHovered) return;
      a.isHovered = !1;
      let V = t.currentTarget;
      s && s({
        type: "hoverend",
        target: V,
        pointerType: W
      }), u && u(!1), m(!1);
    }, S = {};
    return typeof PointerEvent < "u" ? (S.onPointerEnter = (t) => {
      ph && t.pointerType === "mouse" || y(t, t.pointerType);
    }, S.onPointerLeave = (t) => {
      !G && t.currentTarget.contains(t.target) && h(t, t.pointerType);
    }) : (S.onTouchStart = () => {
      a.ignoreEmulatedMouseEvents = !0;
    }, S.onMouseEnter = (t) => {
      !a.ignoreEmulatedMouseEvents && !ph && y(t, "mouse"), a.ignoreEmulatedMouseEvents = !1;
    }, S.onMouseLeave = (t) => {
      !G && t.currentTarget.contains(t.target) && h(t, "mouse");
    }), {
      hoverProps: S,
      triggerHoverEnd: h
    };
  }, [
    Z,
    u,
    s,
    G,
    a
  ]);
  return M.useEffect(() => {
    G && p({
      currentTarget: a.target
    }, a.pointerType);
  }, [
    G
  ]), {
    hoverProps: n,
    isHovered: i
  };
}
function S1(l) {
  let { ref: Z, onInteractOutside: u, isDisabled: s, onInteractOutsideStart: G } = l, i = M.useRef({
    isPointerDown: !1,
    ignoreEmulatedMouseEvents: !1
  }), m = gb((n) => {
    u && BL(n, Z) && (G && G(n), i.current.isPointerDown = !0);
  }), a = gb((n) => {
    u && u(n);
  });
  M.useEffect(() => {
    let n = i.current;
    if (s) return;
    const p = Z.current, y = _Z(p);
    if (typeof PointerEvent < "u") {
      let h = (S) => {
        n.isPointerDown && BL(S, Z) && a(S), n.isPointerDown = !1;
      };
      return y.addEventListener("pointerdown", m, !0), y.addEventListener("pointerup", h, !0), () => {
        y.removeEventListener("pointerdown", m, !0), y.removeEventListener("pointerup", h, !0);
      };
    } else {
      let h = (t) => {
        n.ignoreEmulatedMouseEvents ? n.ignoreEmulatedMouseEvents = !1 : n.isPointerDown && BL(t, Z) && a(t), n.isPointerDown = !1;
      }, S = (t) => {
        n.ignoreEmulatedMouseEvents = !0, n.isPointerDown && BL(t, Z) && a(t), n.isPointerDown = !1;
      };
      return y.addEventListener("mousedown", m, !0), y.addEventListener("mouseup", h, !0), y.addEventListener("touchstart", m, !0), y.addEventListener("touchend", S, !0), () => {
        y.removeEventListener("mousedown", m, !0), y.removeEventListener("mouseup", h, !0), y.removeEventListener("touchstart", m, !0), y.removeEventListener("touchend", S, !0);
      };
    }
  }, [
    Z,
    s,
    m,
    a
  ]);
}
function BL(l, Z) {
  if (l.button > 0) return !1;
  if (l.target) {
    const u = l.target.ownerDocument;
    if (!u || !u.documentElement.contains(l.target) || l.target.closest("[data-react-aria-top-layer]")) return !1;
  }
  return Z.current && !Z.current.contains(l.target);
}
function i2(l) {
  if (!l) return;
  let Z = !0;
  return (u) => {
    let s = {
      ...u,
      preventDefault() {
        u.preventDefault();
      },
      isDefaultPrevented() {
        return u.isDefaultPrevented();
      },
      stopPropagation() {
        console.error("stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.");
      },
      continuePropagation() {
        Z = !1;
      }
    };
    l(s), Z && u.stopPropagation();
  };
}
function YV(l) {
  return {
    keyboardProps: l.isDisabled ? {} : {
      onKeyDown: i2(l.onKeyDown),
      onKeyUp: i2(l.onKeyUp)
    }
  };
}
function t1(l) {
  let { onMoveStart: Z, onMove: u, onMoveEnd: s } = l, G = M.useRef({
    didMove: !1,
    lastPosition: null,
    id: null
  }), { addGlobalListener: i, removeGlobalListener: m } = pn(), a = gb((y, h, S, t) => {
    S === 0 && t === 0 || (G.current.didMove || (G.current.didMove = !0, Z == null || Z({
      type: "movestart",
      pointerType: h,
      shiftKey: y.shiftKey,
      metaKey: y.metaKey,
      ctrlKey: y.ctrlKey,
      altKey: y.altKey
    })), u == null || u({
      type: "move",
      pointerType: h,
      deltaX: S,
      deltaY: t,
      shiftKey: y.shiftKey,
      metaKey: y.metaKey,
      ctrlKey: y.ctrlKey,
      altKey: y.altKey
    }));
  }), n = gb((y, h) => {
    ka(), G.current.didMove && (s == null || s({
      type: "moveend",
      pointerType: h,
      shiftKey: y.shiftKey,
      metaKey: y.metaKey,
      ctrlKey: y.ctrlKey,
      altKey: y.altKey
    }));
  });
  return {
    moveProps: M.useMemo(() => {
      let y = {}, h = () => {
        LW(), G.current.didMove = !1;
      };
      if (typeof PointerEvent > "u") {
        let t = (x) => {
          if (x.button === 0) {
            var r, k, U, w;
            a(x, "mouse", x.pageX - ((U = (r = G.current.lastPosition) === null || r === void 0 ? void 0 : r.pageX) !== null && U !== void 0 ? U : 0), x.pageY - ((w = (k = G.current.lastPosition) === null || k === void 0 ? void 0 : k.pageY) !== null && w !== void 0 ? w : 0)), G.current.lastPosition = {
              pageX: x.pageX,
              pageY: x.pageY
            };
          }
        }, W = (x) => {
          x.button === 0 && (n(x, "mouse"), m(window, "mousemove", t, !1), m(window, "mouseup", W, !1));
        };
        y.onMouseDown = (x) => {
          x.button === 0 && (h(), x.stopPropagation(), x.preventDefault(), G.current.lastPosition = {
            pageX: x.pageX,
            pageY: x.pageY
          }, i(window, "mousemove", t, !1), i(window, "mouseup", W, !1));
        };
        let V = (x) => {
          let r = [
            ...x.changedTouches
          ].findIndex(({ identifier: D }) => D === G.current.id);
          if (r >= 0) {
            var k, U;
            let { pageX: D, pageY: C } = x.changedTouches[r];
            var w, z;
            a(x, "touch", D - ((w = (k = G.current.lastPosition) === null || k === void 0 ? void 0 : k.pageX) !== null && w !== void 0 ? w : 0), C - ((z = (U = G.current.lastPosition) === null || U === void 0 ? void 0 : U.pageY) !== null && z !== void 0 ? z : 0)), G.current.lastPosition = {
              pageX: D,
              pageY: C
            };
          }
        }, R = (x) => {
          [
            ...x.changedTouches
          ].findIndex(({ identifier: k }) => k === G.current.id) >= 0 && (n(x, "touch"), G.current.id = null, m(window, "touchmove", V), m(window, "touchend", R), m(window, "touchcancel", R));
        };
        y.onTouchStart = (x) => {
          if (x.changedTouches.length === 0 || G.current.id != null) return;
          let { pageX: r, pageY: k, identifier: U } = x.changedTouches[0];
          h(), x.stopPropagation(), x.preventDefault(), G.current.lastPosition = {
            pageX: r,
            pageY: k
          }, G.current.id = U, i(window, "touchmove", V, !1), i(window, "touchend", R, !1), i(window, "touchcancel", R, !1);
        };
      } else {
        let t = (V) => {
          if (V.pointerId === G.current.id) {
            var R, x;
            let U = V.pointerType || "mouse";
            var r, k;
            a(V, U, V.pageX - ((r = (R = G.current.lastPosition) === null || R === void 0 ? void 0 : R.pageX) !== null && r !== void 0 ? r : 0), V.pageY - ((k = (x = G.current.lastPosition) === null || x === void 0 ? void 0 : x.pageY) !== null && k !== void 0 ? k : 0)), G.current.lastPosition = {
              pageX: V.pageX,
              pageY: V.pageY
            };
          }
        }, W = (V) => {
          if (V.pointerId === G.current.id) {
            let R = V.pointerType || "mouse";
            n(V, R), G.current.id = null, m(window, "pointermove", t, !1), m(window, "pointerup", W, !1), m(window, "pointercancel", W, !1);
          }
        };
        y.onPointerDown = (V) => {
          V.button === 0 && G.current.id == null && (h(), V.stopPropagation(), V.preventDefault(), G.current.lastPosition = {
            pageX: V.pageX,
            pageY: V.pageY
          }, G.current.id = V.pointerId, i(window, "pointermove", t, !1), i(window, "pointerup", W, !1), i(window, "pointercancel", W, !1));
        };
      }
      let S = (t, W, V) => {
        h(), a(t, "keyboard", W, V), n(t, "keyboard");
      };
      return y.onKeyDown = (t) => {
        switch (t.key) {
          case "Left":
          case "ArrowLeft":
            t.preventDefault(), t.stopPropagation(), S(t, -1, 0);
            break;
          case "Right":
          case "ArrowRight":
            t.preventDefault(), t.stopPropagation(), S(t, 1, 0);
            break;
          case "Up":
          case "ArrowUp":
            t.preventDefault(), t.stopPropagation(), S(t, 0, -1);
            break;
          case "Down":
          case "ArrowDown":
            t.preventDefault(), t.stopPropagation(), S(t, 0, 1);
            break;
        }
      }, y;
    }, [
      G,
      i,
      m,
      a,
      n
    ])
  };
}
const cE = 500;
function X1(l) {
  let { isDisabled: Z, onLongPressStart: u, onLongPressEnd: s, onLongPress: G, threshold: i = cE, accessibilityDescription: m } = l;
  const a = M.useRef(void 0);
  let { addGlobalListener: n, removeGlobalListener: p } = pn(), { pressProps: y } = hn({
    isDisabled: Z,
    onPressStart(S) {
      if (S.continuePropagation(), (S.pointerType === "mouse" || S.pointerType === "touch") && (u && u({
        ...S,
        type: "longpressstart"
      }), a.current = setTimeout(() => {
        S.target.dispatchEvent(new PointerEvent("pointercancel", {
          bubbles: !0
        })), G && G({
          ...S,
          type: "longpress"
        }), a.current = void 0;
      }, i), S.pointerType === "touch")) {
        let t = (W) => {
          W.preventDefault();
        };
        n(S.target, "contextmenu", t, {
          once: !0
        }), n(window, "pointerup", () => {
          setTimeout(() => {
            p(S.target, "contextmenu", t);
          }, 30);
        }, {
          once: !0
        });
      }
    },
    onPressEnd(S) {
      a.current && clearTimeout(a.current), s && (S.pointerType === "mouse" || S.pointerType === "touch") && s({
        ...S,
        type: "longpressend"
      });
    }
  }), h = hf(G && !Z ? m : void 0);
  return {
    longPressProps: HZ(y, h)
  };
}
function Ea(l) {
  const Z = _Z(l);
  if (yW() === "virtual") {
    let u = Z.activeElement;
    Z1(() => {
      Z.activeElement === u && l.isConnected && Ls(l);
    });
  } else Ls(l);
}
function bE(l) {
  const Z = Eu(l);
  if (!(l instanceof Z.HTMLElement) && !(l instanceof Z.SVGElement)) return !1;
  let { display: u, visibility: s } = l.style, G = u !== "none" && s !== "hidden" && s !== "collapse";
  if (G) {
    const { getComputedStyle: i } = l.ownerDocument.defaultView;
    let { display: m, visibility: a } = i(l);
    G = m !== "none" && a !== "hidden" && a !== "collapse";
  }
  return G;
}
function uE(l, Z) {
  return !l.hasAttribute("hidden") && // Ignore HiddenSelect when tree walking.
  !l.hasAttribute("data-react-aria-prevent-focus") && (l.nodeName === "DETAILS" && Z && Z.nodeName !== "SUMMARY" ? l.hasAttribute("open") : !0);
}
function K1(l, Z) {
  return l.nodeName !== "#comment" && bE(l) && uE(l, Z) && (!l.parentElement || K1(l.parentElement, l));
}
const o2 = /* @__PURE__ */ tl.createContext(null), tW = "react-aria-focus-scope-restore";
let QZ = null;
function W1(l) {
  let { children: Z, contain: u, restoreFocus: s, autoFocus: G } = l, i = M.useRef(null), m = M.useRef(null), a = M.useRef([]), { parentNode: n } = M.useContext(o2) || {}, p = M.useMemo(() => new KW({
    scopeRef: a
  }), [
    a
  ]);
  PZ(() => {
    let S = n || Wc.root;
    if (Wc.getTreeNode(S.scopeRef) && QZ && !hh(QZ, S.scopeRef)) {
      let t = Wc.getTreeNode(QZ);
      t && (S = t);
    }
    S.addChild(p), Wc.addNode(p);
  }, [
    p,
    n
  ]), PZ(() => {
    let S = Wc.getTreeNode(a);
    S && (S.contain = !!u);
  }, [
    u
  ]), PZ(() => {
    var S;
    let t = (S = i.current) === null || S === void 0 ? void 0 : S.nextSibling, W = [], V = (R) => R.stopPropagation();
    for (; t && t !== m.current; )
      W.push(t), t.addEventListener(tW, V), t = t.nextSibling;
    return a.current = W, () => {
      for (let R of W) R.removeEventListener(tW, V);
    };
  }, [
    Z
  ]), eE(a, s, u), mE(a, u), nE(a, s, u), oE(a, G), M.useEffect(() => {
    const S = _Z(a.current ? a.current[0] : void 0).activeElement;
    let t = null;
    if (ab(S, a.current)) {
      for (let W of Wc.traverse()) W.scopeRef && ab(S, W.scopeRef.current) && (t = W);
      t === Wc.getTreeNode(a) && (QZ = t.scopeRef);
    }
  }, [
    a
  ]), PZ(() => () => {
    var S, t, W;
    let V = (W = (t = Wc.getTreeNode(a)) === null || t === void 0 || (S = t.parent) === null || S === void 0 ? void 0 : S.scopeRef) !== null && W !== void 0 ? W : null;
    (a === QZ || hh(a, QZ)) && (!V || Wc.getTreeNode(V)) && (QZ = V), Wc.removeTreeNode(a);
  }, [
    a
  ]);
  let y = M.useMemo(() => sE(a), []), h = M.useMemo(() => ({
    focusManager: y,
    parentNode: p
  }), [
    p,
    y
  ]);
  return /* @__PURE__ */ tl.createElement(o2.Provider, {
    value: h
  }, /* @__PURE__ */ tl.createElement("span", {
    "data-focus-scope-start": !0,
    hidden: !0,
    ref: i
  }), Z, /* @__PURE__ */ tl.createElement("span", {
    "data-focus-scope-end": !0,
    hidden: !0,
    ref: m
  }));
}
function sE(l) {
  return {
    focusNext(Z = {}) {
      let u = l.current, { from: s, tabbable: G, wrap: i, accept: m } = Z, a = s || _Z(u[0]).activeElement, n = u[0].previousElementSibling, p = sm(u), y = sd(p, {
        tabbable: G,
        accept: m
      }, u);
      y.currentNode = ab(a, u) ? a : n;
      let h = y.nextNode();
      return !h && i && (y.currentNode = n, h = y.nextNode()), h && ud(h, !0), h;
    },
    focusPrevious(Z = {}) {
      let u = l.current, { from: s, tabbable: G, wrap: i, accept: m } = Z, a = s || _Z(u[0]).activeElement, n = u[u.length - 1].nextElementSibling, p = sm(u), y = sd(p, {
        tabbable: G,
        accept: m
      }, u);
      y.currentNode = ab(a, u) ? a : n;
      let h = y.previousNode();
      return !h && i && (y.currentNode = n, h = y.previousNode()), h && ud(h, !0), h;
    },
    focusFirst(Z = {}) {
      let u = l.current, { tabbable: s, accept: G } = Z, i = sm(u), m = sd(i, {
        tabbable: s,
        accept: G
      }, u);
      m.currentNode = u[0].previousElementSibling;
      let a = m.nextNode();
      return a && ud(a, !0), a;
    },
    focusLast(Z = {}) {
      let u = l.current, { tabbable: s, accept: G } = Z, i = sm(u), m = sd(i, {
        tabbable: s,
        accept: G
      }, u);
      m.currentNode = u[u.length - 1].nextElementSibling;
      let a = m.previousNode();
      return a && ud(a, !0), a;
    }
  };
}
const kV = [
  "input:not([disabled]):not([type=hidden])",
  "select:not([disabled])",
  "textarea:not([disabled])",
  "button:not([disabled])",
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  "[contenteditable]"
], dE = kV.join(":not([hidden]),") + ",[tabindex]:not([disabled]):not([hidden])";
kV.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
const GE = kV.join(':not([hidden]):not([tabindex="-1"]),');
function sm(l) {
  return l[0].parentElement;
}
function Ma(l) {
  let Z = Wc.getTreeNode(QZ);
  for (; Z && Z.scopeRef !== l; ) {
    if (Z.contain) return !1;
    Z = Z.parent;
  }
  return !0;
}
function mE(l, Z) {
  let u = M.useRef(void 0), s = M.useRef(void 0);
  PZ(() => {
    let G = l.current;
    if (!Z) {
      s.current && (cancelAnimationFrame(s.current), s.current = void 0);
      return;
    }
    const i = _Z(G ? G[0] : void 0);
    let m = (p) => {
      if (p.key !== "Tab" || p.altKey || p.ctrlKey || p.metaKey || !Ma(l) || p.isComposing) return;
      let y = i.activeElement, h = l.current;
      if (!h || !ab(y, h)) return;
      let S = sm(h), t = sd(S, {
        tabbable: !0
      }, h);
      if (!y) return;
      t.currentNode = y;
      let W = p.shiftKey ? t.previousNode() : t.nextNode();
      W || (t.currentNode = p.shiftKey ? h[h.length - 1].nextElementSibling : h[0].previousElementSibling, W = p.shiftKey ? t.previousNode() : t.nextNode()), p.preventDefault(), W && ud(W, !0);
    }, a = (p) => {
      (!QZ || hh(QZ, l)) && ab(p.target, l.current) ? (QZ = l, u.current = p.target) : Ma(l) && !Lh(p.target, l) ? u.current ? u.current.focus() : QZ && QZ.current && XW(QZ.current) : Ma(l) && (u.current = p.target);
    }, n = (p) => {
      s.current && cancelAnimationFrame(s.current), s.current = requestAnimationFrame(() => {
        if (i.activeElement && Ma(l) && !Lh(i.activeElement, l))
          if (QZ = l, i.body.contains(p.target)) {
            var y;
            u.current = p.target, (y = u.current) === null || y === void 0 || y.focus();
          } else QZ.current && XW(QZ.current);
      });
    };
    return i.addEventListener("keydown", m, !1), i.addEventListener("focusin", a, !1), G == null || G.forEach((p) => p.addEventListener("focusin", a, !1)), G == null || G.forEach((p) => p.addEventListener("focusout", n, !1)), () => {
      i.removeEventListener("keydown", m, !1), i.removeEventListener("focusin", a, !1), G == null || G.forEach((p) => p.removeEventListener("focusin", a, !1)), G == null || G.forEach((p) => p.removeEventListener("focusout", n, !1));
    };
  }, [
    l,
    Z
  ]), PZ(() => () => {
    s.current && cancelAnimationFrame(s.current);
  }, [
    s
  ]);
}
function V1(l) {
  return Lh(l);
}
function ab(l, Z) {
  return !l || !Z ? !1 : Z.some((u) => u.contains(l));
}
function Lh(l, Z = null) {
  if (l instanceof Element && l.closest("[data-react-aria-top-layer]")) return !0;
  for (let { scopeRef: u } of Wc.traverse(Wc.getTreeNode(Z)))
    if (u && ab(l, u.current)) return !0;
  return !1;
}
function iE(l) {
  return Lh(l, QZ);
}
function hh(l, Z) {
  var u;
  let s = (u = Wc.getTreeNode(Z)) === null || u === void 0 ? void 0 : u.parent;
  for (; s; ) {
    if (s.scopeRef === l) return !0;
    s = s.parent;
  }
  return !1;
}
function ud(l, Z = !1) {
  if (l != null && !Z) try {
    Ea(l);
  } catch {
  }
  else if (l != null) try {
    l.focus();
  } catch {
  }
}
function x1(l, Z = !0) {
  let u = l[0].previousElementSibling, s = sm(l), G = sd(s, {
    tabbable: Z
  }, l);
  G.currentNode = u;
  let i = G.nextNode();
  return Z && !i && (s = sm(l), G = sd(s, {
    tabbable: !1
  }, l), G.currentNode = u, i = G.nextNode()), i;
}
function XW(l, Z = !0) {
  ud(x1(l, Z));
}
function oE(l, Z) {
  const u = tl.useRef(Z);
  M.useEffect(() => {
    if (u.current) {
      QZ = l;
      const s = _Z(l.current ? l.current[0] : void 0);
      !ab(s.activeElement, QZ.current) && l.current && XW(l.current);
    }
    u.current = !1;
  }, [
    l
  ]);
}
function eE(l, Z, u) {
  PZ(() => {
    if (Z || u) return;
    let s = l.current;
    const G = _Z(s ? s[0] : void 0);
    let i = (m) => {
      let a = m.target;
      ab(a, l.current) ? QZ = l : V1(a) || (QZ = null);
    };
    return G.addEventListener("focusin", i, !1), s == null || s.forEach((m) => m.addEventListener("focusin", i, !1)), () => {
      G.removeEventListener("focusin", i, !1), s == null || s.forEach((m) => m.removeEventListener("focusin", i, !1));
    };
  }, [
    l,
    Z,
    u
  ]);
}
function aE(l) {
  let Z = Wc.getTreeNode(QZ);
  for (; Z && Z.scopeRef !== l; ) {
    if (Z.nodeToRestore) return !1;
    Z = Z.parent;
  }
  return (Z == null ? void 0 : Z.scopeRef) === l;
}
function nE(l, Z, u) {
  const s = M.useRef(typeof document < "u" ? _Z(l.current ? l.current[0] : void 0).activeElement : null);
  PZ(() => {
    let G = l.current;
    const i = _Z(G ? G[0] : void 0);
    if (!Z || u) return;
    let m = () => {
      (!QZ || hh(QZ, l)) && ab(i.activeElement, l.current) && (QZ = l);
    };
    return i.addEventListener("focusin", m, !1), G == null || G.forEach((a) => a.addEventListener("focusin", m, !1)), () => {
      i.removeEventListener("focusin", m, !1), G == null || G.forEach((a) => a.removeEventListener("focusin", m, !1));
    };
  }, [
    l,
    u
  ]), PZ(() => {
    const G = _Z(l.current ? l.current[0] : void 0);
    if (!Z) return;
    let i = (m) => {
      if (m.key !== "Tab" || m.altKey || m.ctrlKey || m.metaKey || !Ma(l) || m.isComposing) return;
      let a = G.activeElement;
      if (!ab(a, l.current)) return;
      let n = Wc.getTreeNode(l);
      if (!n) return;
      let p = n.nodeToRestore, y = sd(G.body, {
        tabbable: !0
      });
      y.currentNode = a;
      let h = m.shiftKey ? y.previousNode() : y.nextNode();
      if ((!p || !G.body.contains(p) || p === G.body) && (p = void 0, n.nodeToRestore = void 0), (!h || !ab(h, l.current)) && p) {
        y.currentNode = p;
        do
          h = m.shiftKey ? y.previousNode() : y.nextNode();
        while (ab(h, l.current));
        m.preventDefault(), m.stopPropagation(), h ? ud(h, !0) : V1(p) ? ud(p, !0) : a.blur();
      }
    };
    return u || G.addEventListener("keydown", i, !0), () => {
      u || G.removeEventListener("keydown", i, !0);
    };
  }, [
    l,
    Z,
    u
  ]), PZ(() => {
    const G = _Z(l.current ? l.current[0] : void 0);
    if (!Z) return;
    let i = Wc.getTreeNode(l);
    if (i) {
      var m;
      return i.nodeToRestore = (m = s.current) !== null && m !== void 0 ? m : void 0, () => {
        let a = Wc.getTreeNode(l);
        if (!a) return;
        let n = a.nodeToRestore;
        if (Z && n && // eslint-disable-next-line react-hooks/exhaustive-deps
        (ab(G.activeElement, l.current) || G.activeElement === G.body && aE(l))) {
          let p = Wc.clone();
          requestAnimationFrame(() => {
            if (G.activeElement === G.body) {
              let y = p.getTreeNode(l);
              for (; y; ) {
                if (y.nodeToRestore && y.nodeToRestore.isConnected) {
                  e2(y.nodeToRestore);
                  return;
                }
                y = y.parent;
              }
              for (y = p.getTreeNode(l); y; ) {
                if (y.scopeRef && y.scopeRef.current && Wc.getTreeNode(y.scopeRef)) {
                  let h = x1(y.scopeRef.current, !0);
                  e2(h);
                  return;
                }
                y = y.parent;
              }
            }
          });
        }
      };
    }
  }, [
    l,
    Z
  ]);
}
function e2(l) {
  l.dispatchEvent(new CustomEvent(tW, {
    bubbles: !0,
    cancelable: !0
  })) && ud(l);
}
function sd(l, Z, u) {
  let s = Z != null && Z.tabbable ? GE : dE, G = _Z(l).createTreeWalker(l, NodeFilter.SHOW_ELEMENT, {
    acceptNode(i) {
      var m;
      return !(Z == null || (m = Z.from) === null || m === void 0) && m.contains(i) ? NodeFilter.FILTER_REJECT : i.matches(s) && K1(i) && (!u || ab(i, u)) && (!(Z != null && Z.accept) || Z.accept(i)) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  return Z != null && Z.from && (G.currentNode = Z.from), G;
}
class MV {
  get size() {
    return this.fastMap.size;
  }
  getTreeNode(Z) {
    return this.fastMap.get(Z);
  }
  addTreeNode(Z, u, s) {
    let G = this.fastMap.get(u ?? null);
    if (!G) return;
    let i = new KW({
      scopeRef: Z
    });
    G.addChild(i), i.parent = G, this.fastMap.set(Z, i), s && (i.nodeToRestore = s);
  }
  addNode(Z) {
    this.fastMap.set(Z.scopeRef, Z);
  }
  removeTreeNode(Z) {
    if (Z === null) return;
    let u = this.fastMap.get(Z);
    if (!u) return;
    let s = u.parent;
    for (let i of this.traverse()) i !== u && u.nodeToRestore && i.nodeToRestore && u.scopeRef && u.scopeRef.current && ab(i.nodeToRestore, u.scopeRef.current) && (i.nodeToRestore = u.nodeToRestore);
    let G = u.children;
    s && (s.removeChild(u), G.size > 0 && G.forEach((i) => s && s.addChild(i))), this.fastMap.delete(u.scopeRef);
  }
  // Pre Order Depth First
  *traverse(Z = this.root) {
    if (Z.scopeRef != null && (yield Z), Z.children.size > 0) for (let u of Z.children) yield* this.traverse(u);
  }
  clone() {
    var Z;
    let u = new MV();
    var s;
    for (let G of this.traverse()) u.addTreeNode(G.scopeRef, (s = (Z = G.parent) === null || Z === void 0 ? void 0 : Z.scopeRef) !== null && s !== void 0 ? s : null, G.nodeToRestore);
    return u;
  }
  constructor() {
    this.fastMap = /* @__PURE__ */ new Map(), this.root = new KW({
      scopeRef: null
    }), this.fastMap.set(null, this.root);
  }
}
class KW {
  addChild(Z) {
    this.children.add(Z), Z.parent = this;
  }
  removeChild(Z) {
    this.children.delete(Z), Z.parent = void 0;
  }
  constructor(Z) {
    this.children = /* @__PURE__ */ new Set(), this.contain = !1, this.scopeRef = Z.scopeRef;
  }
}
let Wc = new MV();
function Th(l = {}) {
  let { autoFocus: Z = !1, isTextInput: u, within: s } = l, G = M.useRef({
    isFocused: !1,
    isFocusVisible: Z || xV()
  }), [i, m] = M.useState(!1), [a, n] = M.useState(() => G.current.isFocused && G.current.isFocusVisible), p = M.useCallback(() => n(G.current.isFocused && G.current.isFocusVisible), []), y = M.useCallback((t) => {
    G.current.isFocused = t, m(t), p();
  }, [
    p
  ]);
  lE((t) => {
    G.current.isFocusVisible = t, p();
  }, [], {
    isTextInput: u
  });
  let { focusProps: h } = VV({
    isDisabled: s,
    onFocusChange: y
  }), { focusWithinProps: S } = RV({
    isDisabled: !s,
    onFocusWithinChange: y
  });
  return {
    isFocused: i,
    isFocusVisible: a,
    focusProps: s ? S : h
  };
}
let pE = /* @__PURE__ */ tl.createContext(null);
function LE(l) {
  let Z = M.useContext(pE) || {};
  XV(Z, l);
  let { ref: u, ...s } = Z;
  return s;
}
function IV(l, Z) {
  let { focusProps: u } = VV(l), { keyboardProps: s } = YV(l), G = HZ(u, s), i = LE(Z), m = l.isDisabled ? {} : i, a = M.useRef(l.autoFocus);
  return M.useEffect(() => {
    a.current && Z.current && Ea(Z.current), a.current = !1;
  }, [
    Z
  ]), {
    focusableProps: HZ({
      ...G,
      tabIndex: l.excludeFromTabOrder && !l.isDisabled ? -1 : void 0
    }, m)
  };
}
function hE(l, Z) {
  let {
    elementType: u = "a",
    onPress: s,
    onPressStart: G,
    onPressEnd: i,
    // @ts-ignore
    onClick: m,
    isDisabled: a,
    ...n
  } = l, p = {};
  u !== "a" && (p = {
    role: "link",
    tabIndex: a ? void 0 : 0
  });
  let { focusableProps: y } = IV(l, Z), { pressProps: h, isPressed: S } = hn({
    onPress: s,
    onPressStart: G,
    onPressEnd: i,
    isDisabled: a,
    ref: Z
  }), t = Su(n, {
    labelable: !0
  }), W = HZ(y, h), V = nn(), R = l1(l);
  return {
    isPressed: S,
    linkProps: HZ(t, R, {
      ...W,
      ...p,
      "aria-disabled": a || void 0,
      "aria-current": l["aria-current"],
      onClick: (x) => {
        var r;
        (r = h.onClick) === null || r === void 0 || r.call(h, x), m && (m(x), console.warn("onClick is deprecated, please use onPress")), !V.isNative && x.currentTarget instanceof HTMLAnchorElement && x.currentTarget.href && // If props are applied to a router Link component, it may have already prevented default.
        !x.isDefaultPrevented() && of(x.currentTarget, x) && l.href && (x.preventDefault(), V.open(x.currentTarget, x, l.href, l.routerOptions));
      }
    })
  };
}
const yE = /* @__PURE__ */ new Set([
  "Arab",
  "Syrc",
  "Samr",
  "Mand",
  "Thaa",
  "Mend",
  "Nkoo",
  "Adlm",
  "Rohg",
  "Hebr"
]), SE = /* @__PURE__ */ new Set([
  "ae",
  "ar",
  "arc",
  "bcc",
  "bqi",
  "ckb",
  "dv",
  "fa",
  "glk",
  "he",
  "ku",
  "mzn",
  "nqo",
  "pnb",
  "ps",
  "sd",
  "ug",
  "ur",
  "yi"
]);
function tE(l) {
  if (Intl.Locale) {
    let u = new Intl.Locale(l).maximize(), s = typeof u.getTextInfo == "function" ? u.getTextInfo() : u.textInfo;
    if (s) return s.direction === "rtl";
    if (u.script) return yE.has(u.script);
  }
  let Z = l.split("-")[0];
  return SE.has(Z);
}
const XE = Symbol.for("react-aria.i18n.locale");
function R1() {
  let l = typeof window < "u" && window[XE] || typeof navigator < "u" && (navigator.language || navigator.userLanguage) || "en-US";
  try {
    Intl.DateTimeFormat.supportedLocalesOf([
      l
    ]);
  } catch {
    l = "en-US";
  }
  return {
    locale: l,
    direction: tE(l) ? "rtl" : "ltr"
  };
}
let WW = R1(), Ia = /* @__PURE__ */ new Set();
function a2() {
  WW = R1();
  for (let l of Ia) l(WW);
}
function KE() {
  let l = Mm(), [Z, u] = M.useState(WW);
  return M.useEffect(() => (Ia.size === 0 && window.addEventListener("languagechange", a2), Ia.add(u), () => {
    Ia.delete(u), Ia.size === 0 && window.removeEventListener("languagechange", a2);
  }), []), l ? {
    locale: "en-US",
    direction: "ltr"
  } : Z;
}
const WE = /* @__PURE__ */ tl.createContext(null);
function Im() {
  let l = KE();
  return M.useContext(WE) || l;
}
const VE = Symbol.for("react-aria.i18n.locale"), xE = Symbol.for("react-aria.i18n.strings");
let zi;
class fh {
  /** Returns a localized string for the given key and locale. */
  getStringForLocale(Z, u) {
    let G = this.getStringsForLocale(u)[Z];
    if (!G) throw new Error(`Could not find intl message ${Z} in ${u} locale`);
    return G;
  }
  /** Returns all localized strings for the given locale. */
  getStringsForLocale(Z) {
    let u = this.strings[Z];
    return u || (u = RE(Z, this.strings, this.defaultLocale), this.strings[Z] = u), u;
  }
  static getGlobalDictionaryForPackage(Z) {
    if (typeof window > "u") return null;
    let u = window[VE];
    if (zi === void 0) {
      let G = window[xE];
      if (!G) return null;
      zi = {};
      for (let i in G) zi[i] = new fh({
        [u]: G[i]
      }, u);
    }
    let s = zi == null ? void 0 : zi[Z];
    if (!s) throw new Error(`Strings for package "${Z}" were not included by LocalizedStringProvider. Please add it to the list passed to createLocalizedStringDictionary.`);
    return s;
  }
  constructor(Z, u = "en-US") {
    this.strings = Object.fromEntries(Object.entries(Z).filter(([, s]) => s)), this.defaultLocale = u;
  }
}
function RE(l, Z, u = "en-US") {
  if (Z[l]) return Z[l];
  let s = YE(l);
  if (Z[s]) return Z[s];
  for (let G in Z)
    if (G.startsWith(s + "-")) return Z[G];
  return Z[u];
}
function YE(l) {
  return Intl.Locale ? new Intl.Locale(l).language : l.split("-")[0];
}
const n2 = /* @__PURE__ */ new Map(), p2 = /* @__PURE__ */ new Map();
class kE {
  /** Formats a localized string for the given key with the provided variables. */
  format(Z, u) {
    let s = this.strings.getStringForLocale(Z, this.locale);
    return typeof s == "function" ? s(u, this) : s;
  }
  plural(Z, u, s = "cardinal") {
    let G = u["=" + Z];
    if (G) return typeof G == "function" ? G() : G;
    let i = this.locale + ":" + s, m = n2.get(i);
    m || (m = new Intl.PluralRules(this.locale, {
      type: s
    }), n2.set(i, m));
    let a = m.select(Z);
    return G = u[a] || u.other, typeof G == "function" ? G() : G;
  }
  number(Z) {
    let u = p2.get(this.locale);
    return u || (u = new Intl.NumberFormat(this.locale), p2.set(this.locale, u)), u.format(Z);
  }
  select(Z, u) {
    let s = Z[u] || Z.other;
    return typeof s == "function" ? s() : s;
  }
  constructor(Z, u) {
    this.locale = Z, this.strings = u;
  }
}
const L2 = /* @__PURE__ */ new WeakMap();
function ME(l) {
  let Z = L2.get(l);
  return Z || (Z = new fh(l), L2.set(l, Z)), Z;
}
function IE(l, Z) {
  return Z && fh.getGlobalDictionaryForPackage(Z) || ME(l);
}
function Y1(l, Z) {
  let { locale: u } = Im(), s = IE(l, Z);
  return M.useMemo(() => new kE(u, s), [
    u,
    s
  ]);
}
let CK = /* @__PURE__ */ new Map(), VW = !1;
try {
  VW = new Intl.NumberFormat("de-DE", {
    signDisplay: "exceptZero"
  }).resolvedOptions().signDisplay === "exceptZero";
} catch {
}
let yh = !1;
try {
  yh = new Intl.NumberFormat("de-DE", {
    style: "unit",
    unit: "degree"
  }).resolvedOptions().style === "unit";
} catch {
}
const k1 = {
  degree: {
    narrow: {
      default: "°",
      "ja-JP": " 度",
      "zh-TW": "度",
      "sl-SI": " °"
    }
  }
};
class UE {
  /** Formats a number value as a string, according to the locale and options provided to the constructor. */
  format(Z) {
    let u = "";
    if (!VW && this.options.signDisplay != null ? u = rE(this.numberFormatter, this.options.signDisplay, Z) : u = this.numberFormatter.format(Z), this.options.style === "unit" && !yh) {
      var s;
      let { unit: G, unitDisplay: i = "short", locale: m } = this.resolvedOptions();
      if (!G) return u;
      let a = (s = k1[G]) === null || s === void 0 ? void 0 : s[i];
      u += a[m] || a.default;
    }
    return u;
  }
  /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */
  formatToParts(Z) {
    return this.numberFormatter.formatToParts(Z);
  }
  /** Formats a number range as a string. */
  formatRange(Z, u) {
    if (typeof this.numberFormatter.formatRange == "function")
      return this.numberFormatter.formatRange(Z, u);
    if (u < Z) throw new RangeError("End date must be >= start date");
    return `${this.format(Z)} – ${this.format(u)}`;
  }
  /** Formats a number range as an array of parts. */
  formatRangeToParts(Z, u) {
    if (typeof this.numberFormatter.formatRangeToParts == "function")
      return this.numberFormatter.formatRangeToParts(Z, u);
    if (u < Z) throw new RangeError("End date must be >= start date");
    let s = this.numberFormatter.formatToParts(Z), G = this.numberFormatter.formatToParts(u);
    return [
      ...s.map((i) => ({
        ...i,
        source: "startRange"
      })),
      {
        type: "literal",
        value: " – ",
        source: "shared"
      },
      ...G.map((i) => ({
        ...i,
        source: "endRange"
      }))
    ];
  }
  /** Returns the resolved formatting options based on the values passed to the constructor. */
  resolvedOptions() {
    let Z = this.numberFormatter.resolvedOptions();
    return !VW && this.options.signDisplay != null && (Z = {
      ...Z,
      signDisplay: this.options.signDisplay
    }), !yh && this.options.style === "unit" && (Z = {
      ...Z,
      style: "unit",
      unit: this.options.unit,
      unitDisplay: this.options.unitDisplay
    }), Z;
  }
  constructor(Z, u = {}) {
    this.numberFormatter = CE(Z, u), this.options = u;
  }
}
function CE(l, Z = {}) {
  let { numberingSystem: u } = Z;
  if (u && l.includes("-nu-") && (l.includes("-u-") || (l += "-u-"), l += `-nu-${u}`), Z.style === "unit" && !yh) {
    var s;
    let { unit: m, unitDisplay: a = "short" } = Z;
    if (!m) throw new Error('unit option must be provided with style: "unit"');
    if (!(!((s = k1[m]) === null || s === void 0) && s[a])) throw new Error(`Unsupported unit ${m} with unitDisplay = ${a}`);
    Z = {
      ...Z,
      style: "decimal"
    };
  }
  let G = l + (Z ? Object.entries(Z).sort((m, a) => m[0] < a[0] ? -1 : 1).join() : "");
  if (CK.has(G)) return CK.get(G);
  let i = new Intl.NumberFormat(l, Z);
  return CK.set(G, i), i;
}
function rE(l, Z, u) {
  if (Z === "auto") return l.format(u);
  if (Z === "never") return l.format(Math.abs(u));
  {
    let s = !1;
    if (Z === "always" ? s = u > 0 || Object.is(u, 0) : Z === "exceptZero" && (Object.is(u, -0) || Object.is(u, 0) ? u = Math.abs(u) : s = u > 0), s) {
      let G = l.format(-u), i = l.format(u), m = G.replace(i, "").replace(/\u200e|\u061C/, "");
      return [
        ...m
      ].length !== 1 && console.warn("@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case"), G.replace(i, "!!!").replace(m, "+").replace("!!!", i);
    } else return l.format(u);
  }
}
function FE(l = {}) {
  let { locale: Z } = Im();
  return M.useMemo(() => new UE(Z, l), [
    Z,
    l
  ]);
}
let rK = /* @__PURE__ */ new Map();
function NE(l) {
  let { locale: Z } = Im(), u = Z + (l ? Object.entries(l).sort((G, i) => G[0] < i[0] ? -1 : 1).join() : "");
  if (rK.has(u)) return rK.get(u);
  let s = new Intl.Collator(Z, l);
  return rK.set(u, s), s;
}
function wE(l, Z) {
  let {
    elementType: u = "button",
    isDisabled: s,
    onPress: G,
    onPressStart: i,
    onPressEnd: m,
    onPressUp: a,
    onPressChange: n,
    preventFocusOnPress: p,
    allowFocusWhenDisabled: y,
    // @ts-ignore
    onClick: h,
    href: S,
    target: t,
    rel: W,
    type: V = "button"
  } = l, R;
  u === "button" ? R = {
    type: V,
    disabled: s
  } : R = {
    role: "button",
    tabIndex: s ? void 0 : 0,
    href: u === "a" && s ? void 0 : S,
    target: u === "a" ? t : void 0,
    type: u === "input" ? V : void 0,
    disabled: u === "input" ? s : void 0,
    "aria-disabled": !s || u === "input" ? void 0 : s,
    rel: u === "a" ? W : void 0
  };
  let { pressProps: x, isPressed: r } = hn({
    onPressStart: i,
    onPressEnd: m,
    onPressChange: n,
    onPress: G,
    onPressUp: a,
    isDisabled: s,
    preventFocusOnPress: p,
    ref: Z
  }), { focusableProps: k } = IV(l, Z);
  y && (k.tabIndex = s ? -1 : k.tabIndex);
  let U = HZ(k, x, Su(l, {
    labelable: !0
  }));
  return {
    isPressed: r,
    buttonProps: HZ(R, U, {
      "aria-haspopup": l["aria-haspopup"],
      "aria-expanded": l["aria-expanded"],
      "aria-controls": l["aria-controls"],
      "aria-pressed": l["aria-pressed"],
      onClick: (w) => {
        h && (h(w), console.warn("onClick is deprecated, please use onPress"));
      }
    })
  };
}
const M1 = 7e3;
let os = null;
function h2(l, Z = "assertive", u = M1) {
  os ? os.announce(l, Z, u) : (os = new zE(), (typeof IS_REACT_ACT_ENVIRONMENT == "boolean" ? IS_REACT_ACT_ENVIRONMENT : typeof jest < "u") ? os.announce(l, Z, u) : setTimeout(() => {
    os != null && os.isAttached() && (os == null || os.announce(l, Z, u));
  }, 100));
}
class zE {
  isAttached() {
    var Z;
    return (Z = this.node) === null || Z === void 0 ? void 0 : Z.isConnected;
  }
  createLog(Z) {
    let u = document.createElement("div");
    return u.setAttribute("role", "log"), u.setAttribute("aria-live", Z), u.setAttribute("aria-relevant", "additions"), u;
  }
  destroy() {
    this.node && (document.body.removeChild(this.node), this.node = null);
  }
  announce(Z, u = "assertive", s = M1) {
    var G, i;
    if (!this.node) return;
    let m = document.createElement("div");
    typeof Z == "object" ? (m.setAttribute("role", "img"), m.setAttribute("aria-labelledby", Z["aria-labelledby"])) : m.textContent = Z, u === "assertive" ? (G = this.assertiveLog) === null || G === void 0 || G.appendChild(m) : (i = this.politeLog) === null || i === void 0 || i.appendChild(m), Z !== "" && setTimeout(() => {
      m.remove();
    }, s);
  }
  clear(Z) {
    this.node && ((!Z || Z === "assertive") && this.assertiveLog && (this.assertiveLog.innerHTML = ""), (!Z || Z === "polite") && this.politeLog && (this.politeLog.innerHTML = ""));
  }
  constructor() {
    this.node = null, this.assertiveLog = null, this.politeLog = null, typeof document < "u" && (this.node = document.createElement("div"), this.node.dataset.liveAnnouncer = "true", Object.assign(this.node.style, {
      border: 0,
      clip: "rect(0 0 0 0)",
      clipPath: "inset(50%)",
      height: "1px",
      margin: "-1px",
      overflow: "hidden",
      padding: 0,
      position: "absolute",
      width: "1px",
      whiteSpace: "nowrap"
    }), this.assertiveLog = this.createLog("assertive"), this.node.appendChild(this.assertiveLog), this.politeLog = this.createLog("polite"), this.node.appendChild(this.politeLog), document.body.prepend(this.node));
  }
}
function I1(l) {
  let { id: Z, label: u, "aria-labelledby": s, "aria-label": G, labelElementType: i = "label" } = l;
  Z = ad(Z);
  let m = ad(), a = {};
  u ? (s = s ? `${m} ${s}` : m, a = {
    id: m,
    htmlFor: i === "label" ? Z : void 0
  }) : !s && !G && console.warn("If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility");
  let n = c1({
    id: Z,
    "aria-label": G,
    "aria-labelledby": s
  });
  return {
    labelProps: a,
    fieldProps: n
  };
}
const JE = 0, HE = 100, gE = 1;
function vE(l) {
  const { isDisabled: Z = !1, minValue: u = JE, maxValue: s = HE, numberFormatter: G, step: i = gE, orientation: m = "horizontal" } = l;
  let a = M.useMemo(() => {
    let Zl = (s - u) / 10;
    return Zl = ha(Zl, 0, Zl + i, i), Math.max(Zl, i);
  }, [
    i,
    s,
    u
  ]), n = M.useCallback((Zl) => Zl == null ? void 0 : Zl.map((ol, Wl) => {
    let ml = Wl === 0 ? u : ol[Wl - 1], Rl = Wl === Zl.length - 1 ? s : ol[Wl + 1];
    return ha(ol, ml, Rl, i);
  }), [
    u,
    s,
    i
  ]), p = M.useMemo(() => n(S2(l.value)), [
    l.value
  ]), y = M.useMemo(() => {
    var Zl;
    return n((Zl = S2(l.defaultValue)) !== null && Zl !== void 0 ? Zl : [
      u
    ]);
  }, [
    l.defaultValue,
    u
  ]), h = t2(l.value, l.defaultValue, l.onChange), S = t2(l.value, l.defaultValue, l.onChangeEnd);
  const [t, W] = Hh(p, y, h), [V, R] = M.useState(new Array(t.length).fill(!1)), x = M.useRef(new Array(t.length).fill(!0)), [r, k] = M.useState(void 0), U = M.useRef(t), w = M.useRef(V);
  let z = (Zl) => {
    U.current = Zl, W(Zl);
  }, D = (Zl) => {
    w.current = Zl, R(Zl);
  };
  function C(Zl) {
    return (Zl - u) / (s - u);
  }
  function j(Zl) {
    return Zl === 0 ? u : t[Zl - 1];
  }
  function E(Zl) {
    return Zl === t.length - 1 ? s : t[Zl + 1];
  }
  function g(Zl) {
    return x.current[Zl];
  }
  function A(Zl, ol) {
    x.current[Zl] = ol;
  }
  function J(Zl, ol) {
    if (Z || !g(Zl)) return;
    const Wl = j(Zl), ml = E(Zl);
    ol = ha(ol, Wl, ml, i);
    let Rl = y2(U.current, Zl, ol);
    z(Rl);
  }
  function F(Zl, ol) {
    if (Z || !g(Zl)) return;
    ol && (U.current = t);
    const Wl = w.current[Zl];
    w.current = y2(w.current, Zl, ol), D(w.current), S && Wl && !w.current.some(Boolean) && S(U.current);
  }
  function v(Zl) {
    return G.format(Zl);
  }
  function T(Zl, ol) {
    J(Zl, O(ol));
  }
  function f(Zl) {
    return Math.round((Zl - u) / i) * i + u;
  }
  function O(Zl) {
    const ol = Zl * (s - u) + u;
    return eo(f(ol), u, s);
  }
  function _(Zl, ol = 1) {
    let Wl = Math.max(ol, i);
    J(Zl, ha(t[Zl] + Wl, u, s, i));
  }
  function il(Zl, ol = 1) {
    let Wl = Math.max(ol, i);
    J(Zl, ha(t[Zl] - Wl, u, s, i));
  }
  return {
    values: t,
    getThumbValue: (Zl) => t[Zl],
    setThumbValue: J,
    setThumbPercent: T,
    isThumbDragging: (Zl) => V[Zl],
    setThumbDragging: F,
    focusedThumb: r,
    setFocusedThumb: k,
    getThumbPercent: (Zl) => C(t[Zl]),
    getValuePercent: C,
    getThumbValueLabel: (Zl) => v(t[Zl]),
    getFormattedValue: v,
    getThumbMinValue: j,
    getThumbMaxValue: E,
    getPercentValue: O,
    isThumbEditable: g,
    setThumbEditable: A,
    incrementThumb: _,
    decrementThumb: il,
    step: i,
    pageSize: a,
    orientation: m,
    isDisabled: Z
  };
}
function y2(l, Z, u) {
  return l[Z] === u ? l : [
    ...l.slice(0, Z),
    u,
    ...l.slice(Z + 1)
  ];
}
function S2(l) {
  if (l != null)
    return Array.isArray(l) ? l : [
      l
    ];
}
function t2(l, Z, u) {
  return (s) => {
    typeof l == "number" || typeof Z == "number" ? u == null || u(s[0]) : u == null || u(s);
  };
}
const X2 = {
  border: 0,
  clip: "rect(0 0 0 0)",
  clipPath: "inset(50%)",
  height: "1px",
  margin: "-1px",
  overflow: "hidden",
  padding: 0,
  position: "absolute",
  width: "1px",
  whiteSpace: "nowrap"
};
function TE(l = {}) {
  let { style: Z, isFocusable: u } = l, [s, G] = M.useState(!1), { focusWithinProps: i } = RV({
    isDisabled: !u,
    onFocusWithinChange: (a) => G(a)
  }), m = M.useMemo(() => s ? Z : Z ? {
    ...X2,
    ...Z
  } : X2, [
    s
  ]);
  return {
    visuallyHiddenProps: {
      ...i,
      style: m
    }
  };
}
function U1(l) {
  let { children: Z, elementType: u = "div", isFocusable: s, style: G, ...i } = l, { visuallyHiddenProps: m } = TE(l);
  return /* @__PURE__ */ tl.createElement(u, HZ(i, m), Z);
}
const UV = /* @__PURE__ */ new WeakMap();
function xW(l, Z) {
  let u = UV.get(l);
  if (!u) throw new Error("Unknown slider state");
  return `${u.id}-${Z}`;
}
function fE(l, Z, u) {
  let { labelProps: s, fieldProps: G } = I1(l), i = l.orientation === "vertical";
  var m;
  UV.set(Z, {
    id: (m = s.id) !== null && m !== void 0 ? m : G.id,
    "aria-describedby": l["aria-describedby"],
    "aria-details": l["aria-details"]
  });
  let { direction: a } = Im(), { addGlobalListener: n, removeGlobalListener: p } = pn();
  const y = M.useRef(null), h = a === "rtl", S = M.useRef(null), { moveProps: t } = t1({
    onMoveStart() {
      S.current = null;
    },
    onMove({ deltaX: x, deltaY: r }) {
      let { height: k, width: U } = u.current.getBoundingClientRect(), w = i ? k : U;
      S.current == null && (S.current = Z.getThumbPercent(y.current) * w);
      let z = i ? r : x;
      if ((i || h) && (z = -z), S.current += z, y.current != null && u.current) {
        const D = eo(S.current / w, 0, 1);
        Z.setThumbPercent(y.current, D);
      }
    },
    onMoveEnd() {
      y.current != null && (Z.setThumbDragging(y.current, !1), y.current = null);
    }
  });
  let W = M.useRef(void 0), V = (x, r, k, U) => {
    if (u.current && !l.isDisabled && Z.values.every((w, z) => !Z.isThumbDragging(z))) {
      let { height: w, width: z, top: D, left: C } = u.current.getBoundingClientRect(), j = i ? w : z, J = ((i ? U : k) - (i ? D : C)) / j;
      (a === "rtl" || i) && (J = 1 - J);
      let F = Z.getPercentValue(J), v, T = Z.values.findIndex((f) => F - f < 0);
      if (T === 0) v = T;
      else if (T === -1) v = Z.values.length - 1;
      else {
        let f = Z.values[T - 1], O = Z.values[T];
        Math.abs(f - F) < Math.abs(O - F) ? v = T - 1 : v = T;
      }
      v >= 0 && Z.isThumbEditable(v) ? (x.preventDefault(), y.current = v, Z.setFocusedThumb(v), W.current = r, Z.setThumbDragging(y.current, !0), Z.setThumbValue(v, F), n(window, "mouseup", R, !1), n(window, "touchend", R, !1), n(window, "pointerup", R, !1)) : y.current = null;
    }
  }, R = (x) => {
    var r, k;
    ((k = x.pointerId) !== null && k !== void 0 ? k : (r = x.changedTouches) === null || r === void 0 ? void 0 : r[0].identifier) === W.current && (y.current != null && (Z.setThumbDragging(y.current, !1), y.current = null), p(window, "mouseup", R, !1), p(window, "touchend", R, !1), p(window, "pointerup", R, !1));
  };
  return "htmlFor" in s && s.htmlFor && (delete s.htmlFor, s.onClick = () => {
    var x;
    (x = document.getElementById(xW(Z, 0))) === null || x === void 0 || x.focus(), $f("keyboard");
  }), {
    labelProps: s,
    // The root element of the Slider will have role="group" to group together
    // all the thumb inputs in the Slider.  The label of the Slider will
    // be used to label the group.
    groupProps: {
      role: "group",
      ...G
    },
    trackProps: HZ({
      onMouseDown(x) {
        x.button !== 0 || x.altKey || x.ctrlKey || x.metaKey || V(x, void 0, x.clientX, x.clientY);
      },
      onPointerDown(x) {
        x.pointerType === "mouse" && (x.button !== 0 || x.altKey || x.ctrlKey || x.metaKey) || V(x, x.pointerId, x.clientX, x.clientY);
      },
      onTouchStart(x) {
        V(x, x.changedTouches[0].identifier, x.changedTouches[0].clientX, x.changedTouches[0].clientY);
      },
      style: {
        position: "relative",
        touchAction: "none"
      }
    }, t),
    outputProps: {
      htmlFor: Z.values.map((x, r) => xW(Z, r)).join(" "),
      "aria-live": "off"
    }
  };
}
function EE(l, Z) {
  let { index: u = 0, isRequired: s, validationState: G, isInvalid: i, trackRef: m, inputRef: a, orientation: n = Z.orientation, name: p } = l, y = l.isDisabled || Z.isDisabled, h = n === "vertical", { direction: S } = Im(), { addGlobalListener: t, removeGlobalListener: W } = pn(), V = UV.get(Z);
  var R;
  const { labelProps: x, fieldProps: r } = I1({
    ...l,
    id: xW(Z, u),
    "aria-labelledby": `${V.id} ${(R = l["aria-labelledby"]) !== null && R !== void 0 ? R : ""}`.trim()
  }), k = Z.values[u], U = M.useCallback(() => {
    a.current && Ls(a.current);
  }, [
    a
  ]), w = Z.focusedThumb === u;
  M.useEffect(() => {
    w && U();
  }, [
    w,
    U
  ]);
  let z = S === "rtl", D = M.useRef(null), { keyboardProps: C } = YV({
    onKeyDown(T) {
      let { getThumbMaxValue: f, getThumbMinValue: O, decrementThumb: _, incrementThumb: il, setThumbValue: Zl, setThumbDragging: ol, pageSize: Wl } = Z;
      if (!/^(PageUp|PageDown|Home|End)$/.test(T.key)) {
        T.continuePropagation();
        return;
      }
      switch (T.preventDefault(), ol(u, !0), T.key) {
        case "PageUp":
          il(u, Wl);
          break;
        case "PageDown":
          _(u, Wl);
          break;
        case "Home":
          Zl(u, O(u));
          break;
        case "End":
          Zl(u, f(u));
          break;
      }
      ol(u, !1);
    }
  }), { moveProps: j } = t1({
    onMoveStart() {
      D.current = null, Z.setThumbDragging(u, !0);
    },
    onMove({ deltaX: T, deltaY: f, pointerType: O, shiftKey: _ }) {
      const { getThumbPercent: il, setThumbPercent: Zl, decrementThumb: ol, incrementThumb: Wl, step: ml, pageSize: Rl } = Z;
      let { width: kl, height: zl } = m.current.getBoundingClientRect(), Vl = h ? zl : kl;
      if (D.current == null && (D.current = il(u) * Vl), O === "keyboard")
        T > 0 && z || T < 0 && !z || f > 0 ? ol(u, _ ? Rl : ml) : Wl(u, _ ? Rl : ml);
      else {
        let el = h ? f : T;
        (h || z) && (el = -el), D.current += el, Zl(u, eo(D.current / Vl, 0, 1));
      }
    },
    onMoveEnd() {
      Z.setThumbDragging(u, !1);
    }
  });
  Z.setThumbEditable(u, !y);
  const { focusableProps: E } = IV(HZ(l, {
    onFocus: () => Z.setFocusedThumb(u),
    onBlur: () => Z.setFocusedThumb(void 0)
  }), a);
  let g = M.useRef(void 0), A = (T) => {
    U(), g.current = T, Z.setThumbDragging(u, !0), t(window, "mouseup", J, !1), t(window, "touchend", J, !1), t(window, "pointerup", J, !1);
  }, J = (T) => {
    var f, O;
    ((O = T.pointerId) !== null && O !== void 0 ? O : (f = T.changedTouches) === null || f === void 0 ? void 0 : f[0].identifier) === g.current && (U(), Z.setThumbDragging(u, !1), W(window, "mouseup", J, !1), W(window, "touchend", J, !1), W(window, "pointerup", J, !1));
  }, F = Z.getThumbPercent(u);
  (h || S === "rtl") && (F = 1 - F);
  let v = y ? {} : HZ(C, j, {
    onMouseDown: (T) => {
      T.button !== 0 || T.altKey || T.ctrlKey || T.metaKey || A();
    },
    onPointerDown: (T) => {
      T.button !== 0 || T.altKey || T.ctrlKey || T.metaKey || A(T.pointerId);
    },
    onTouchStart: (T) => {
      A(T.changedTouches[0].identifier);
    }
  });
  return Sf(a, k, (T) => {
    Z.setThumbValue(u, T);
  }), {
    inputProps: HZ(E, r, {
      type: "range",
      tabIndex: y ? void 0 : 0,
      min: Z.getThumbMinValue(u),
      max: Z.getThumbMaxValue(u),
      step: Z.step,
      value: k,
      name: p,
      disabled: y,
      "aria-orientation": n,
      "aria-valuetext": Z.getThumbValueLabel(u),
      "aria-required": s || void 0,
      "aria-invalid": i || G === "invalid" || void 0,
      "aria-errormessage": l["aria-errormessage"],
      "aria-describedby": [
        V["aria-describedby"],
        l["aria-describedby"]
      ].filter(Boolean).join(" "),
      "aria-details": [
        V["aria-details"],
        l["aria-details"]
      ].filter(Boolean).join(" "),
      onChange: (T) => {
        Z.setThumbValue(u, parseFloat(T.target.value));
      }
    }),
    thumbProps: {
      ...v,
      style: {
        position: "absolute",
        [h ? "top" : "left"]: `${F * 100}%`,
        transform: "translate(-50%, -50%)",
        touchAction: "none"
      }
    },
    labelProps: x,
    isDragging: Z.isThumbDragging(u),
    isDisabled: y,
    isFocused: w
  };
}
const hs = {
  top: "top",
  bottom: "top",
  left: "left",
  right: "left"
}, Sh = {
  top: "bottom",
  bottom: "top",
  left: "right",
  right: "left"
}, BE = {
  top: "left",
  left: "top"
}, RW = {
  top: "height",
  left: "width"
}, C1 = {
  width: "totalWidth",
  height: "totalHeight"
}, DL = {};
let Jb = typeof document < "u" && window.visualViewport;
function K2(l) {
  let Z = 0, u = 0, s = 0, G = 0, i = 0, m = 0, a = {}, n = (Jb == null ? void 0 : Jb.scale) > 1;
  if (l.tagName === "BODY") {
    let h = document.documentElement;
    s = h.clientWidth, G = h.clientHeight;
    var p;
    Z = (p = Jb == null ? void 0 : Jb.width) !== null && p !== void 0 ? p : s;
    var y;
    u = (y = Jb == null ? void 0 : Jb.height) !== null && y !== void 0 ? y : G, a.top = h.scrollTop || l.scrollTop, a.left = h.scrollLeft || l.scrollLeft, Jb && (i = Jb.offsetTop, m = Jb.offsetLeft);
  } else
    ({ width: Z, height: u, top: i, left: m } = Di(l)), a.top = l.scrollTop, a.left = l.scrollLeft, s = Z, G = u;
  return qI() && (l.tagName === "BODY" || l.tagName === "HTML") && n && (a.top = 0, a.left = 0, i = Jb.pageTop, m = Jb.pageLeft), {
    width: Z,
    height: u,
    totalWidth: s,
    totalHeight: G,
    scroll: a,
    top: i,
    left: m
  };
}
function DE(l) {
  return {
    top: l.scrollTop,
    left: l.scrollLeft,
    width: l.scrollWidth,
    height: l.scrollHeight
  };
}
function W2(l, Z, u, s, G, i, m) {
  let a = G.scroll[l], n = s[RW[l]], p = s.scroll[hs[l]] + i, y = n + s.scroll[hs[l]] - i, h = Z - a + m[l] - s[hs[l]], S = Z - a + u + m[l] - s[hs[l]];
  return h < p ? p - h : S > y ? Math.max(y - S, p - h) : 0;
}
function jE(l) {
  let Z = window.getComputedStyle(l);
  return {
    top: parseInt(Z.marginTop, 10) || 0,
    bottom: parseInt(Z.marginBottom, 10) || 0,
    left: parseInt(Z.marginLeft, 10) || 0,
    right: parseInt(Z.marginRight, 10) || 0
  };
}
function V2(l) {
  if (DL[l]) return DL[l];
  let [Z, u] = l.split(" "), s = hs[Z] || "right", G = BE[s];
  hs[u] || (u = "center");
  let i = RW[s], m = RW[G];
  return DL[l] = {
    placement: Z,
    crossPlacement: u,
    axis: s,
    crossAxis: G,
    size: i,
    crossSize: m
  }, DL[l];
}
function FK(l, Z, u, s, G, i, m, a, n, p) {
  let { placement: y, crossPlacement: h, axis: S, crossAxis: t, size: W, crossSize: V } = s, R = {};
  R[t] = l[t], h === "center" ? R[t] += (l[V] - u[V]) / 2 : h !== t && (R[t] += l[V] - u[V]), R[t] += i;
  const x = l[t] - u[V] + n + p, r = l[t] + l[V] - n - p;
  if (R[t] = eo(R[t], x, r), y === S) {
    const k = a ? m[W] : Z[C1[W]];
    R[Sh[S]] = Math.floor(k - l[S] + G);
  } else R[S] = Math.floor(l[S] + l[W] + G);
  return R;
}
function QE(l, Z, u, s, G, i, m, a) {
  const n = s ? u.height : Z[C1.height];
  let p = l.top != null ? u.top + l.top : u.top + (n - l.bottom - m), y = a !== "top" ? (
    // We want the distance between the top of the overlay to the bottom of the boundary
    Math.max(0, Z.height + Z.top + Z.scroll.top - p - (G.top + G.bottom + i))
  ) : Math.max(0, p + m - (Z.top + Z.scroll.top) - (G.top + G.bottom + i));
  return Math.min(Z.height - i * 2, y);
}
function x2(l, Z, u, s, G, i) {
  let { placement: m, axis: a, size: n } = i;
  return m === a ? Math.max(0, u[a] - l[a] - l.scroll[a] + Z[a] - s[a] - s[Sh[a]] - G) : Math.max(0, l[n] + l[a] + l.scroll[a] - Z[a] - u[a] - u[n] - s[a] - s[Sh[a]] - G);
}
function PE(l, Z, u, s, G, i, m, a, n, p, y, h, S, t, W, V) {
  let R = V2(l), { size: x, crossAxis: r, crossSize: k, placement: U, crossPlacement: w } = R, z = FK(Z, a, u, R, y, h, p, S, W, V), D = y, C = x2(a, p, Z, G, i + y, R);
  if (m && s[x] > C) {
    let il = V2(`${Sh[U]} ${w}`), Zl = FK(Z, a, u, il, y, h, p, S, W, V);
    x2(a, p, Z, G, i + y, il) > C && (R = il, z = Zl, D = y);
  }
  let j = "bottom";
  R.axis === "top" ? R.placement === "top" ? j = "top" : R.placement === "bottom" && (j = "bottom") : R.crossAxis === "top" && (R.crossPlacement === "top" ? j = "bottom" : R.crossPlacement === "bottom" && (j = "top"));
  let E = W2(r, z[r], u[k], a, n, i, p);
  z[r] += E;
  let g = QE(z, a, p, S, G, i, u.height, j);
  t && t < g && (g = t), u.height = Math.min(u.height, g), z = FK(Z, a, u, R, D, h, p, S, W, V), E = W2(r, z[r], u[k], a, n, i, p), z[r] += E;
  let A = {}, J = Z[r] + 0.5 * Z[k] - z[r] - G[hs[r]];
  const F = W / 2 + V, v = hs[r] === "left" ? G.left + G.right : G.top + G.bottom, T = u[k] - v - W / 2 - V, f = Z[r] + W / 2 - (z[r] + G[hs[r]]), O = Z[r] + Z[k] - W / 2 - (z[r] + G[hs[r]]), _ = eo(J, f, O);
  return A[r] = eo(_, F, T), {
    position: z,
    maxHeight: g,
    arrowOffsetLeft: A.left,
    arrowOffsetTop: A.top,
    placement: R.placement
  };
}
function OE(l) {
  let { placement: Z, targetNode: u, overlayNode: s, scrollNode: G, padding: i, shouldFlip: m, boundaryElement: a, offset: n, crossOffset: p, maxHeight: y, arrowSize: h = 0, arrowBoundaryOffset: S = 0 } = l, t = s instanceof HTMLElement ? AE(s) : document.documentElement, W = t === document.documentElement;
  const V = window.getComputedStyle(t).position;
  let R = !!V && V !== "static", x = W ? Di(u) : R2(u, t);
  if (!W) {
    let { marginTop: C, marginLeft: j } = window.getComputedStyle(u);
    x.top += parseInt(C, 10) || 0, x.left += parseInt(j, 10) || 0;
  }
  let r = Di(s), k = jE(s);
  r.width += k.left + k.right, r.height += k.top + k.bottom;
  let U = DE(G), w = K2(a), z = K2(t), D = a.tagName === "BODY" ? Di(t) : R2(t, a);
  return t.tagName === "HTML" && a.tagName === "BODY" && (z.scroll.top = 0, z.scroll.left = 0), PE(Z, x, r, U, k, i, m, w, z, D, n, p, R, y, h, S);
}
function Di(l) {
  let { top: Z, left: u, width: s, height: G } = l.getBoundingClientRect(), { scrollTop: i, scrollLeft: m, clientTop: a, clientLeft: n } = document.documentElement;
  return {
    top: Z + i - a,
    left: u + m - n,
    width: s,
    height: G
  };
}
function R2(l, Z) {
  let u = window.getComputedStyle(l), s;
  if (u.position === "fixed") {
    let { top: G, left: i, width: m, height: a } = l.getBoundingClientRect();
    s = {
      top: G,
      left: i,
      width: m,
      height: a
    };
  } else {
    s = Di(l);
    let G = Di(Z), i = window.getComputedStyle(Z);
    G.top += (parseInt(i.borderTopWidth, 10) || 0) - Z.scrollTop, G.left += (parseInt(i.borderLeftWidth, 10) || 0) - Z.scrollLeft, s.top -= G.top, s.left -= G.left;
  }
  return s.top -= parseInt(u.marginTop, 10) || 0, s.left -= parseInt(u.marginLeft, 10) || 0, s;
}
function AE(l) {
  let Z = l.offsetParent;
  if (Z && Z === document.body && window.getComputedStyle(Z).position === "static" && !Y2(Z) && (Z = document.documentElement), Z == null)
    for (Z = l.parentElement; Z && !Y2(Z); ) Z = Z.parentElement;
  return Z || document.documentElement;
}
function Y2(l) {
  let Z = window.getComputedStyle(l);
  return Z.transform !== "none" || /transform|perspective/.test(Z.willChange) || Z.filter !== "none" || Z.contain === "paint" || // @ts-ignore
  "backdropFilter" in Z && Z.backdropFilter !== "none" || // @ts-ignore
  "WebkitBackdropFilter" in Z && Z.WebkitBackdropFilter !== "none";
}
const r1 = /* @__PURE__ */ new WeakMap();
function $E(l) {
  let { triggerRef: Z, isOpen: u, onClose: s } = l;
  M.useEffect(() => {
    if (!u || s === null) return;
    let G = (i) => {
      let m = i.target;
      if (!Z.current || m instanceof Node && !m.contains(Z.current) || i.target instanceof HTMLInputElement || i.target instanceof HTMLTextAreaElement) return;
      let a = s || r1.get(Z.current);
      a && a();
    };
    return window.addEventListener("scroll", G, !0), () => {
      window.removeEventListener("scroll", G, !0);
    };
  }, [
    u,
    s,
    Z
  ]);
}
let pc = typeof document < "u" && window.visualViewport;
function qE(l) {
  let { direction: Z } = Im(), { arrowSize: u = 0, targetRef: s, overlayRef: G, scrollRef: i = G, placement: m = "bottom", containerPadding: a = 12, shouldFlip: n = !0, boundaryElement: p = typeof document < "u" ? document.body : null, offset: y = 0, crossOffset: h = 0, shouldUpdatePosition: S = !0, isOpen: t = !0, onClose: W, maxHeight: V, arrowBoundaryOffset: R = 0 } = l, [x, r] = M.useState({
    position: {},
    arrowOffsetLeft: void 0,
    arrowOffsetTop: void 0,
    maxHeight: void 0,
    placement: void 0
  }), k = [
    S,
    m,
    G.current,
    s.current,
    i.current,
    a,
    n,
    p,
    y,
    h,
    t,
    Z,
    V,
    R,
    u
  ], U = M.useRef(pc == null ? void 0 : pc.scale);
  M.useEffect(() => {
    t && (U.current = pc == null ? void 0 : pc.scale);
  }, [
    t
  ]);
  let w = M.useCallback(() => {
    if (S === !1 || !t || !G.current || !s.current || !p || (pc == null ? void 0 : pc.scale) !== U.current) return;
    let j = null;
    if (i.current && i.current.contains(document.activeElement)) {
      let F = document.activeElement.getBoundingClientRect(), v = i.current.getBoundingClientRect();
      j = {
        type: "top",
        offset: F.top - v.top
      }, j.offset > v.height / 2 && (j.type = "bottom", j.offset = F.bottom - v.bottom);
    }
    let E = G.current;
    if (!V && G.current) {
      var g;
      E.style.top = "0px", E.style.bottom = "";
      var A;
      E.style.maxHeight = ((A = (g = window.visualViewport) === null || g === void 0 ? void 0 : g.height) !== null && A !== void 0 ? A : window.innerHeight) + "px";
    }
    let J = OE({
      placement: l4(m, Z),
      overlayNode: G.current,
      targetNode: s.current,
      scrollNode: i.current || G.current,
      padding: a,
      shouldFlip: n,
      boundaryElement: p,
      offset: y,
      crossOffset: h,
      maxHeight: V,
      arrowSize: u,
      arrowBoundaryOffset: R
    });
    if (E.style.top = "", E.style.bottom = "", E.style.left = "", E.style.right = "", Object.keys(J.position).forEach((F) => E.style[F] = J.position[F] + "px"), E.style.maxHeight = J.maxHeight != null ? J.maxHeight + "px" : void 0, j) {
      let F = document.activeElement.getBoundingClientRect(), v = i.current.getBoundingClientRect(), T = F[j.type] - v[j.type];
      i.current.scrollTop += T - j.offset;
    }
    r(J);
  }, k);
  PZ(w, k), _E(w), oW({
    ref: G,
    onResize: w
  }), oW({
    ref: s,
    onResize: w
  });
  let z = M.useRef(!1);
  PZ(() => {
    let j, E = () => {
      z.current = !0, clearTimeout(j), j = setTimeout(() => {
        z.current = !1;
      }, 500), w();
    }, g = () => {
      z.current && E();
    };
    return pc == null || pc.addEventListener("resize", E), pc == null || pc.addEventListener("scroll", g), () => {
      pc == null || pc.removeEventListener("resize", E), pc == null || pc.removeEventListener("scroll", g);
    };
  }, [
    w
  ]);
  let D = M.useCallback(() => {
    z.current || W();
  }, [
    W,
    z
  ]);
  $E({
    triggerRef: s,
    isOpen: t,
    onClose: W && D
  });
  var C;
  return {
    overlayProps: {
      style: {
        position: "absolute",
        zIndex: 1e5,
        ...x.position,
        maxHeight: (C = x.maxHeight) !== null && C !== void 0 ? C : "100vh"
      }
    },
    placement: x.placement,
    arrowProps: {
      "aria-hidden": "true",
      role: "presentation",
      style: {
        left: x.arrowOffsetLeft,
        top: x.arrowOffsetTop
      }
    },
    updatePosition: w
  };
}
function _E(l) {
  PZ(() => (window.addEventListener("resize", l, !1), () => {
    window.removeEventListener("resize", l, !1);
  }), [
    l
  ]);
}
function l4(l, Z) {
  return Z === "rtl" ? l.replace("start", "right").replace("end", "left") : l.replace("start", "left").replace("end", "right");
}
const ld = [];
function Z4(l, Z) {
  let { onClose: u, shouldCloseOnBlur: s, isOpen: G, isDismissable: i = !1, isKeyboardDismissDisabled: m = !1, shouldCloseOnInteractOutside: a } = l;
  M.useEffect(() => (G && ld.push(Z), () => {
    let W = ld.indexOf(Z);
    W >= 0 && ld.splice(W, 1);
  }), [
    G,
    Z
  ]);
  let n = () => {
    ld[ld.length - 1] === Z && u && u();
  }, p = (W) => {
    (!a || a(W.target)) && ld[ld.length - 1] === Z && (W.stopPropagation(), W.preventDefault());
  }, y = (W) => {
    (!a || a(W.target)) && (ld[ld.length - 1] === Z && (W.stopPropagation(), W.preventDefault()), n());
  }, h = (W) => {
    W.key === "Escape" && !m && !W.nativeEvent.isComposing && (W.stopPropagation(), W.preventDefault(), n());
  };
  S1({
    ref: Z,
    onInteractOutside: i && G ? y : null,
    onInteractOutsideStart: p
  });
  let { focusWithinProps: S } = RV({
    isDisabled: !s,
    onBlurWithin: (W) => {
      !W.relatedTarget || iE(W.relatedTarget) || (!a || a(W.relatedTarget)) && u();
    }
  }), t = (W) => {
    W.target === W.currentTarget && W.preventDefault();
  };
  return {
    overlayProps: {
      onKeyDown: h,
      ...S
    },
    underlayProps: {
      onPointerDown: t
    }
  };
}
function c4(l, Z, u) {
  let { type: s } = l, { isOpen: G } = Z;
  M.useEffect(() => {
    u && u.current && r1.set(u.current, Z.close);
  });
  let i;
  s === "menu" ? i = !0 : s === "listbox" && (i = "listbox");
  let m = ad();
  return {
    triggerProps: {
      "aria-haspopup": i,
      "aria-expanded": G,
      "aria-controls": G ? m : null,
      onPress: Z.toggle
    },
    overlayProps: {
      id: m
    }
  };
}
const NK = typeof document < "u" && window.visualViewport, b4 = /* @__PURE__ */ new Set([
  "checkbox",
  "radio",
  "range",
  "color",
  "file",
  "image",
  "button",
  "submit",
  "reset"
]);
let jL = 0, wK;
function u4(l = {}) {
  let { isDisabled: Z } = l;
  PZ(() => {
    if (!Z)
      return jL++, jL === 1 && (Jh() ? wK = d4() : wK = s4()), () => {
        jL--, jL === 0 && wK();
      };
  }, [
    Z
  ]);
}
function s4() {
  return Ha(fi(document.documentElement, "paddingRight", `${window.innerWidth - document.documentElement.clientWidth}px`), fi(document.documentElement, "overflow", "hidden"));
}
function d4() {
  let l, Z, u = (p) => {
    l = b1(p.target, !0), !(l === document.documentElement && l === document.body) && l instanceof HTMLElement && window.getComputedStyle(l).overscrollBehavior === "auto" && (Z = fi(l, "overscrollBehavior", "contain"));
  }, s = (p) => {
    if (!l || l === document.documentElement || l === document.body) {
      p.preventDefault();
      return;
    }
    l.scrollHeight === l.clientHeight && l.scrollWidth === l.clientWidth && p.preventDefault();
  }, G = (p) => {
    let y = p.target;
    M2(y) && y !== document.activeElement && (p.preventDefault(), a(), y.style.transform = "translateY(-2000px)", y.focus(), requestAnimationFrame(() => {
      y.style.transform = "";
    })), Z && Z();
  }, i = (p) => {
    let y = p.target;
    M2(y) && (a(), y.style.transform = "translateY(-2000px)", requestAnimationFrame(() => {
      y.style.transform = "", NK && (NK.height < window.innerHeight ? requestAnimationFrame(() => {
        k2(y);
      }) : NK.addEventListener("resize", () => k2(y), {
        once: !0
      }));
    }));
  }, m = null, a = () => {
    if (m) return;
    let p = () => {
      window.scrollTo(0, 0);
    }, y = window.pageXOffset, h = window.pageYOffset;
    m = Ha(ya(window, "scroll", p), fi(document.documentElement, "paddingRight", `${window.innerWidth - document.documentElement.clientWidth}px`), fi(document.documentElement, "overflow", "hidden"), fi(document.body, "marginTop", `-${h}px`), () => {
      window.scrollTo(y, h);
    }), window.scrollTo(0, 0);
  }, n = Ha(ya(document, "touchstart", u, {
    passive: !1,
    capture: !0
  }), ya(document, "touchmove", s, {
    passive: !1,
    capture: !0
  }), ya(document, "touchend", G, {
    passive: !1,
    capture: !0
  }), ya(document, "focus", i, !0));
  return () => {
    Z == null || Z(), m == null || m(), n();
  };
}
function fi(l, Z, u) {
  let s = l.style[Z];
  return l.style[Z] = u, () => {
    l.style[Z] = s;
  };
}
function ya(l, Z, u, s) {
  return l.addEventListener(Z, u, s), () => {
    l.removeEventListener(Z, u, s);
  };
}
function k2(l) {
  let Z = document.scrollingElement || document.documentElement;
  for (; l && l !== Z; ) {
    let u = b1(l);
    if (u !== document.documentElement && u !== document.body && u !== l) {
      let s = u.getBoundingClientRect().top, G = l.getBoundingClientRect().top;
      G > s + l.clientHeight && (u.scrollTop += G - s);
    }
    l = u.parentElement;
  }
}
function M2(l) {
  return l instanceof HTMLInputElement && !b4.has(l.type) || l instanceof HTMLTextAreaElement || l instanceof HTMLElement && l.isContentEditable;
}
var F1 = {};
F1 = {
  dismiss: "تجاهل"
};
var N1 = {};
N1 = {
  dismiss: "Отхвърляне"
};
var w1 = {};
w1 = {
  dismiss: "Odstranit"
};
var z1 = {};
z1 = {
  dismiss: "Luk"
};
var J1 = {};
J1 = {
  dismiss: "Schließen"
};
var H1 = {};
H1 = {
  dismiss: "Απόρριψη"
};
var g1 = {};
g1 = {
  dismiss: "Dismiss"
};
var v1 = {};
v1 = {
  dismiss: "Descartar"
};
var T1 = {};
T1 = {
  dismiss: "Lõpeta"
};
var f1 = {};
f1 = {
  dismiss: "Hylkää"
};
var E1 = {};
E1 = {
  dismiss: "Rejeter"
};
var B1 = {};
B1 = {
  dismiss: "התעלם"
};
var D1 = {};
D1 = {
  dismiss: "Odbaci"
};
var j1 = {};
j1 = {
  dismiss: "Elutasítás"
};
var Q1 = {};
Q1 = {
  dismiss: "Ignora"
};
var P1 = {};
P1 = {
  dismiss: "閉じる"
};
var O1 = {};
O1 = {
  dismiss: "무시"
};
var A1 = {};
A1 = {
  dismiss: "Atmesti"
};
var $1 = {};
$1 = {
  dismiss: "Nerādīt"
};
var q1 = {};
q1 = {
  dismiss: "Lukk"
};
var _1 = {};
_1 = {
  dismiss: "Negeren"
};
var l9 = {};
l9 = {
  dismiss: "Zignoruj"
};
var Z9 = {};
Z9 = {
  dismiss: "Descartar"
};
var c9 = {};
c9 = {
  dismiss: "Dispensar"
};
var b9 = {};
b9 = {
  dismiss: "Revocare"
};
var u9 = {};
u9 = {
  dismiss: "Пропустить"
};
var s9 = {};
s9 = {
  dismiss: "Zrušiť"
};
var d9 = {};
d9 = {
  dismiss: "Opusti"
};
var G9 = {};
G9 = {
  dismiss: "Odbaci"
};
var m9 = {};
m9 = {
  dismiss: "Avvisa"
};
var i9 = {};
i9 = {
  dismiss: "Kapat"
};
var o9 = {};
o9 = {
  dismiss: "Скасувати"
};
var e9 = {};
e9 = {
  dismiss: "取消"
};
var a9 = {};
a9 = {
  dismiss: "關閉"
};
var n9 = {};
n9 = {
  "ar-AE": F1,
  "bg-BG": N1,
  "cs-CZ": w1,
  "da-DK": z1,
  "de-DE": J1,
  "el-GR": H1,
  "en-US": g1,
  "es-ES": v1,
  "et-EE": T1,
  "fi-FI": f1,
  "fr-FR": E1,
  "he-IL": B1,
  "hr-HR": D1,
  "hu-HU": j1,
  "it-IT": Q1,
  "ja-JP": P1,
  "ko-KR": O1,
  "lt-LT": A1,
  "lv-LV": $1,
  "nb-NO": q1,
  "nl-NL": _1,
  "pl-PL": l9,
  "pt-BR": Z9,
  "pt-PT": c9,
  "ro-RO": b9,
  "ru-RU": u9,
  "sk-SK": s9,
  "sl-SI": d9,
  "sr-SP": G9,
  "sv-SE": m9,
  "tr-TR": i9,
  "uk-UA": o9,
  "zh-CN": e9,
  "zh-TW": a9
};
function G4(l) {
  return l && l.__esModule ? l.default : l;
}
function I2(l) {
  let { onDismiss: Z, ...u } = l, s = Y1(G4(n9), "@react-aria/overlays"), G = c1(u, s.format("dismiss")), i = () => {
    Z && Z();
  };
  return /* @__PURE__ */ tl.createElement(U1, null, /* @__PURE__ */ tl.createElement("button", {
    ...G,
    tabIndex: -1,
    onClick: i,
    style: {
      width: 1,
      height: 1
    }
  }));
}
let Sa = /* @__PURE__ */ new WeakMap(), au = [];
function m4(l, Z = document.body) {
  let u = new Set(l), s = /* @__PURE__ */ new Set(), G = (n) => {
    for (let S of n.querySelectorAll("[data-live-announcer], [data-react-aria-top-layer]")) u.add(S);
    let p = (S) => {
      if (u.has(S) || s.has(S.parentElement) && S.parentElement.getAttribute("role") !== "row") return NodeFilter.FILTER_REJECT;
      for (let t of u)
        if (S.contains(t)) return NodeFilter.FILTER_SKIP;
      return NodeFilter.FILTER_ACCEPT;
    }, y = document.createTreeWalker(n, NodeFilter.SHOW_ELEMENT, {
      acceptNode: p
    }), h = p(n);
    if (h === NodeFilter.FILTER_ACCEPT && i(n), h !== NodeFilter.FILTER_REJECT) {
      let S = y.nextNode();
      for (; S != null; )
        i(S), S = y.nextNode();
    }
  }, i = (n) => {
    var p;
    let y = (p = Sa.get(n)) !== null && p !== void 0 ? p : 0;
    n.getAttribute("aria-hidden") === "true" && y === 0 || (y === 0 && n.setAttribute("aria-hidden", "true"), s.add(n), Sa.set(n, y + 1));
  };
  au.length && au[au.length - 1].disconnect(), G(Z);
  let m = new MutationObserver((n) => {
    for (let p of n)
      if (!(p.type !== "childList" || p.addedNodes.length === 0) && ![
        ...u,
        ...s
      ].some((y) => y.contains(p.target))) {
        for (let y of p.removedNodes) y instanceof Element && (u.delete(y), s.delete(y));
        for (let y of p.addedNodes)
          (y instanceof HTMLElement || y instanceof SVGElement) && (y.dataset.liveAnnouncer === "true" || y.dataset.reactAriaTopLayer === "true") ? u.add(y) : y instanceof Element && G(y);
      }
  });
  m.observe(Z, {
    childList: !0,
    subtree: !0
  });
  let a = {
    observe() {
      m.observe(Z, {
        childList: !0,
        subtree: !0
      });
    },
    disconnect() {
      m.disconnect();
    }
  };
  return au.push(a), () => {
    m.disconnect();
    for (let n of s) {
      let p = Sa.get(n);
      p === 1 ? (n.removeAttribute("aria-hidden"), Sa.delete(n)) : Sa.set(n, p - 1);
    }
    a === au[au.length - 1] ? (au.pop(), au.length && au[au.length - 1].observe()) : au.splice(au.indexOf(a), 1);
  };
}
function i4(l, Z) {
  let { triggerRef: u, popoverRef: s, isNonModal: G, isKeyboardDismissDisabled: i, shouldCloseOnInteractOutside: m, ...a } = l, { overlayProps: n, underlayProps: p } = Z4({
    isOpen: Z.isOpen,
    onClose: Z.close,
    shouldCloseOnBlur: !0,
    isDismissable: !G,
    isKeyboardDismissDisabled: i,
    shouldCloseOnInteractOutside: m
  }, s), { overlayProps: y, arrowProps: h, placement: S } = qE({
    ...a,
    targetRef: u,
    overlayRef: s,
    isOpen: Z.isOpen,
    onClose: G ? Z.close : null
  });
  return u4({
    isDisabled: G || !Z.isOpen
  }), PZ(() => {
    if (Z.isOpen && !G && s.current) return m4([
      s.current
    ]);
  }, [
    G,
    Z.isOpen,
    s
  ]), {
    popoverProps: HZ(n, y),
    arrowProps: h,
    underlayProps: p,
    placement: S
  };
}
const o4 = /* @__PURE__ */ M.createContext({});
function e4() {
  var l;
  return (l = M.useContext(o4)) !== null && l !== void 0 ? l : {};
}
const a4 = /* @__PURE__ */ tl.createContext(null);
function n4(l) {
  let Z = Mm(), { portalContainer: u = Z ? null : document.body, isExiting: s } = l, [G, i] = M.useState(!1), m = M.useMemo(() => ({
    contain: G,
    setContain: i
  }), [
    G,
    i
  ]), { getContainer: a } = e4();
  if (!l.portalContainer && a && (u = a()), !u) return null;
  let n = l.children;
  return l.disableFocusManagement || (n = /* @__PURE__ */ tl.createElement(W1, {
    restoreFocus: !0,
    contain: G && !s
  }, n)), n = /* @__PURE__ */ tl.createElement(a4.Provider, {
    value: m
  }, /* @__PURE__ */ tl.createElement(jf, null, n)), /* @__PURE__ */ DI.createPortal(n, u);
}
function YW(l) {
  return sf() ? l.altKey : l.ctrlKey;
}
function vi(l) {
  return Sm() ? l.metaKey : l.ctrlKey;
}
const p4 = 1e3;
function L4(l) {
  let { keyboardDelegate: Z, selectionManager: u, onTypeSelect: s } = l, G = M.useRef({
    search: "",
    timeout: null
  }).current, i = (m) => {
    let a = h4(m.key);
    if (!a || m.ctrlKey || m.metaKey || !m.currentTarget.contains(m.target)) return;
    a === " " && G.search.trim().length > 0 && (m.preventDefault(), "continuePropagation" in m || m.stopPropagation()), G.search += a;
    let n = Z.getKeyForSearch(G.search, u.focusedKey);
    n == null && (n = Z.getKeyForSearch(G.search)), n != null && (u.setFocusedKey(n), s && s(n)), clearTimeout(G.timeout), G.timeout = setTimeout(() => {
      G.search = "";
    }, p4);
  };
  return {
    typeSelectProps: {
      // Using a capturing listener to catch the keydown event before
      // other hooks in order to handle the Spacebar event.
      onKeyDownCapture: Z.getKeyForSearch ? i : null
    }
  };
}
function h4(l) {
  return l.length === 1 || !/^[A-Z]/i.test(l) ? l : "";
}
function y4(l) {
  let { selectionManager: Z, keyboardDelegate: u, ref: s, autoFocus: G = !1, shouldFocusWrap: i = !1, disallowEmptySelection: m = !1, disallowSelectAll: a = !1, selectOnFocus: n = Z.selectionBehavior === "replace", disallowTypeAhead: p = !1, shouldUseVirtualFocus: y, allowsTabNavigation: h = !1, isVirtualized: S, scrollRef: t = s, linkBehavior: W = "action" } = l, { direction: V } = Im(), R = nn(), x = (E) => {
    if (E.altKey && E.key === "Tab" && E.preventDefault(), !s.current.contains(E.target)) return;
    const g = (ml, Rl) => {
      if (ml != null) {
        if (Z.isLink(ml) && W === "selection" && n && !YW(E)) {
          xo.flushSync(() => {
            Z.setFocusedKey(ml, Rl);
          });
          let kl = t.current.querySelector(`[data-key="${CSS.escape(ml.toString())}"]`), zl = Z.getItemProps(ml);
          R.open(kl, E, zl.href, zl.routerOptions);
          return;
        }
        if (Z.setFocusedKey(ml, Rl), Z.isLink(ml) && W === "override") return;
        E.shiftKey && Z.selectionMode === "multiple" ? Z.extendSelection(ml) : n && !YW(E) && Z.replaceSelection(ml);
      }
    };
    switch (E.key) {
      case "ArrowDown":
        if (u.getKeyBelow) {
          var A, J, F;
          let ml = Z.focusedKey != null ? (A = u.getKeyBelow) === null || A === void 0 ? void 0 : A.call(u, Z.focusedKey) : (J = u.getFirstKey) === null || J === void 0 ? void 0 : J.call(u);
          ml == null && i && (ml = (F = u.getFirstKey) === null || F === void 0 ? void 0 : F.call(u, Z.focusedKey)), ml != null && (E.preventDefault(), g(ml));
        }
        break;
      case "ArrowUp":
        if (u.getKeyAbove) {
          var v, T, f;
          let ml = Z.focusedKey != null ? (v = u.getKeyAbove) === null || v === void 0 ? void 0 : v.call(u, Z.focusedKey) : (T = u.getLastKey) === null || T === void 0 ? void 0 : T.call(u);
          ml == null && i && (ml = (f = u.getLastKey) === null || f === void 0 ? void 0 : f.call(u, Z.focusedKey)), ml != null && (E.preventDefault(), g(ml));
        }
        break;
      case "ArrowLeft":
        if (u.getKeyLeftOf) {
          var O, _, il;
          let ml = (O = u.getKeyLeftOf) === null || O === void 0 ? void 0 : O.call(u, Z.focusedKey);
          ml == null && i && (ml = V === "rtl" ? (_ = u.getFirstKey) === null || _ === void 0 ? void 0 : _.call(u, Z.focusedKey) : (il = u.getLastKey) === null || il === void 0 ? void 0 : il.call(u, Z.focusedKey)), ml != null && (E.preventDefault(), g(ml, V === "rtl" ? "first" : "last"));
        }
        break;
      case "ArrowRight":
        if (u.getKeyRightOf) {
          var Zl, ol, Wl;
          let ml = (Zl = u.getKeyRightOf) === null || Zl === void 0 ? void 0 : Zl.call(u, Z.focusedKey);
          ml == null && i && (ml = V === "rtl" ? (ol = u.getLastKey) === null || ol === void 0 ? void 0 : ol.call(u, Z.focusedKey) : (Wl = u.getFirstKey) === null || Wl === void 0 ? void 0 : Wl.call(u, Z.focusedKey)), ml != null && (E.preventDefault(), g(ml, V === "rtl" ? "last" : "first"));
        }
        break;
      case "Home":
        if (u.getFirstKey) {
          E.preventDefault();
          let ml = u.getFirstKey(Z.focusedKey, vi(E));
          Z.setFocusedKey(ml), vi(E) && E.shiftKey && Z.selectionMode === "multiple" ? Z.extendSelection(ml) : n && Z.replaceSelection(ml);
        }
        break;
      case "End":
        if (u.getLastKey) {
          E.preventDefault();
          let ml = u.getLastKey(Z.focusedKey, vi(E));
          Z.setFocusedKey(ml), vi(E) && E.shiftKey && Z.selectionMode === "multiple" ? Z.extendSelection(ml) : n && Z.replaceSelection(ml);
        }
        break;
      case "PageDown":
        if (u.getKeyPageBelow) {
          let ml = u.getKeyPageBelow(Z.focusedKey);
          ml != null && (E.preventDefault(), g(ml));
        }
        break;
      case "PageUp":
        if (u.getKeyPageAbove) {
          let ml = u.getKeyPageAbove(Z.focusedKey);
          ml != null && (E.preventDefault(), g(ml));
        }
        break;
      case "a":
        vi(E) && Z.selectionMode === "multiple" && a !== !0 && (E.preventDefault(), Z.selectAll());
        break;
      case "Escape":
        !m && Z.selectedKeys.size !== 0 && (E.stopPropagation(), E.preventDefault(), Z.clearSelection());
        break;
      case "Tab":
        if (!h) {
          if (E.shiftKey) s.current.focus();
          else {
            let ml = sd(s.current, {
              tabbable: !0
            }), Rl, kl;
            do
              kl = ml.lastChild(), kl && (Rl = kl);
            while (kl);
            Rl && !Rl.contains(document.activeElement) && Ls(Rl);
          }
          break;
        }
    }
  }, r = M.useRef({
    top: 0,
    left: 0
  });
  Ak(t, "scroll", S ? null : () => {
    r.current = {
      top: t.current.scrollTop,
      left: t.current.scrollLeft
    };
  });
  let k = (E) => {
    if (Z.isFocused) {
      E.currentTarget.contains(E.target) || Z.setFocused(!1);
      return;
    }
    if (E.currentTarget.contains(E.target)) {
      if (Z.setFocused(!0), Z.focusedKey == null) {
        let J = (v) => {
          v != null && (Z.setFocusedKey(v), n && Z.replaceSelection(v));
        }, F = E.relatedTarget;
        var g, A;
        F && E.currentTarget.compareDocumentPosition(F) & Node.DOCUMENT_POSITION_FOLLOWING ? J((g = Z.lastSelectedKey) !== null && g !== void 0 ? g : u.getLastKey()) : J((A = Z.firstSelectedKey) !== null && A !== void 0 ? A : u.getFirstKey());
      } else S || (t.current.scrollTop = r.current.top, t.current.scrollLeft = r.current.left);
      if (Z.focusedKey != null) {
        let J = t.current.querySelector(`[data-key="${CSS.escape(Z.focusedKey.toString())}"]`);
        J && (J.contains(document.activeElement) || Ls(J), yW() === "keyboard" && qk(J, {
          containingElement: s.current
        }));
      }
    }
  }, U = (E) => {
    E.currentTarget.contains(E.relatedTarget) || Z.setFocused(!1);
  };
  const w = M.useRef(G);
  M.useEffect(() => {
    if (w.current) {
      let E = null;
      G === "first" && (E = u.getFirstKey()), G === "last" && (E = u.getLastKey());
      let g = Z.selectedKeys;
      if (g.size) {
        for (let A of g) if (Z.canSelectItem(A)) {
          E = A;
          break;
        }
      }
      Z.setFocused(!0), Z.setFocusedKey(E), E == null && !y && Ea(s.current);
    }
  }, []);
  let z = M.useRef(Z.focusedKey);
  M.useEffect(() => {
    if (Z.isFocused && Z.focusedKey != null && (Z.focusedKey !== z.current || w.current) && (t != null && t.current)) {
      let E = yW(), g = s.current.querySelector(`[data-key="${CSS.escape(Z.focusedKey.toString())}"]`);
      if (!g)
        return;
      (E === "keyboard" || w.current) && (u1(t.current, g), E !== "virtual" && qk(g, {
        containingElement: s.current
      }));
    }
    !y && Z.isFocused && Z.focusedKey == null && z.current != null && Ea(s.current), z.current = Z.focusedKey, w.current = !1;
  }), Ak(s, "react-aria-focus-scope-restore", (E) => {
    E.preventDefault(), Z.setFocused(!0);
  });
  let D = {
    onKeyDown: x,
    onFocus: k,
    onBlur: U,
    onMouseDown(E) {
      t.current === E.target && E.preventDefault();
    }
  }, { typeSelectProps: C } = L4({
    keyboardDelegate: u,
    selectionManager: Z
  });
  p || (D = HZ(C, D));
  let j;
  return y || (j = Z.focusedKey == null ? 0 : -1), {
    collectionProps: {
      ...D,
      tabIndex: j
    }
  };
}
function S4(l) {
  let { selectionManager: Z, key: u, ref: s, shouldSelectOnPressUp: G, shouldUseVirtualFocus: i, focus: m, isDisabled: a, onAction: n, allowsDifferentPressOrigin: p, linkBehavior: y = "action" } = l, h = nn(), S = (f) => {
    if (f.pointerType === "keyboard" && YW(f)) Z.toggleSelection(u);
    else {
      if (Z.selectionMode === "none") return;
      if (Z.isLink(u)) {
        if (y === "selection") {
          let O = Z.getItemProps(u);
          h.open(s.current, f, O.href, O.routerOptions), Z.setSelectedKeys(Z.selectedKeys);
          return;
        } else if (y === "override" || y === "none") return;
      }
      Z.selectionMode === "single" ? Z.isSelected(u) && !Z.disallowEmptySelection ? Z.toggleSelection(u) : Z.replaceSelection(u) : f && f.shiftKey ? Z.extendSelection(u) : Z.selectionBehavior === "toggle" || f && (vi(f) || f.pointerType === "touch" || f.pointerType === "virtual") ? Z.toggleSelection(u) : Z.replaceSelection(u);
    }
  };
  M.useEffect(() => {
    u === Z.focusedKey && Z.isFocused && !i && (m ? m() : document.activeElement !== s.current && Ea(s.current));
  }, [
    s,
    u,
    Z.focusedKey,
    Z.childFocusStrategy,
    Z.isFocused,
    i
  ]), a = a || Z.isDisabled(u);
  let t = {};
  !i && !a ? t = {
    tabIndex: u === Z.focusedKey ? 0 : -1,
    onFocus(f) {
      f.target === s.current && Z.setFocusedKey(u);
    }
  } : a && (t.onMouseDown = (f) => {
    f.preventDefault();
  });
  let W = Z.isLink(u) && y === "override", V = Z.isLink(u) && y !== "selection" && y !== "none", R = !a && Z.canSelectItem(u) && !W, x = (n || V) && !a, r = x && (Z.selectionBehavior === "replace" ? !R : !R || Z.isEmpty), k = x && R && Z.selectionBehavior === "replace", U = r || k, w = M.useRef(null), z = U && R, D = M.useRef(!1), C = M.useRef(!1), j = (f) => {
    if (n && n(), V) {
      let O = Z.getItemProps(u);
      h.open(s.current, f, O.href, O.routerOptions);
    }
  }, E = {};
  G ? (E.onPressStart = (f) => {
    w.current = f.pointerType, D.current = z, f.pointerType === "keyboard" && (!U || C2()) && S(f);
  }, p ? (E.onPressUp = r ? null : (f) => {
    f.pointerType !== "keyboard" && R && S(f);
  }, E.onPress = r ? j : null) : E.onPress = (f) => {
    if (r || k && f.pointerType !== "mouse") {
      if (f.pointerType === "keyboard" && !U2()) return;
      j(f);
    } else f.pointerType !== "keyboard" && R && S(f);
  }) : (E.onPressStart = (f) => {
    w.current = f.pointerType, D.current = z, C.current = r, R && (f.pointerType === "mouse" && !r || f.pointerType === "keyboard" && (!x || C2())) && S(f);
  }, E.onPress = (f) => {
    (f.pointerType === "touch" || f.pointerType === "pen" || f.pointerType === "virtual" || f.pointerType === "keyboard" && U && U2() || f.pointerType === "mouse" && C.current) && (U ? j(f) : R && S(f));
  }), t["data-key"] = u, E.preventFocusOnPress = i;
  let { pressProps: g, isPressed: A } = hn(E), J = k ? (f) => {
    w.current === "mouse" && (f.stopPropagation(), f.preventDefault(), j(f));
  } : void 0, { longPressProps: F } = X1({
    isDisabled: !z,
    onLongPress(f) {
      f.pointerType === "touch" && (S(f), Z.setSelectionBehavior("toggle"));
    }
  }), v = (f) => {
    w.current === "touch" && D.current && f.preventDefault();
  }, T = Z.isLink(u) ? (f) => {
    tm.isOpening || f.preventDefault();
  } : void 0;
  return {
    itemProps: HZ(t, R || r ? g : {}, z ? F : {}, {
      onDoubleClick: J,
      onDragStartCapture: v,
      onClick: T
    }),
    isPressed: A,
    isSelected: Z.isSelected(u),
    isFocused: Z.isFocused && Z.focusedKey === u,
    isDisabled: a,
    allowsSelection: R,
    hasAction: U
  };
}
function U2() {
  let l = window.event;
  return (l == null ? void 0 : l.key) === "Enter";
}
function C2() {
  let l = window.event;
  return (l == null ? void 0 : l.key) === " " || (l == null ? void 0 : l.code) === "Space";
}
class r2 {
  getItemRect(Z) {
    let u = this.ref.current, s = Z != null ? u.querySelector(`[data-key="${CSS.escape(Z.toString())}"]`) : null;
    if (!s) return null;
    let G = u.getBoundingClientRect(), i = s.getBoundingClientRect();
    return {
      x: i.left - G.left + u.scrollLeft,
      y: i.top - G.top + u.scrollTop,
      width: i.width,
      height: i.height
    };
  }
  getContentSize() {
    let Z = this.ref.current;
    return {
      width: Z.scrollWidth,
      height: Z.scrollHeight
    };
  }
  getVisibleRect() {
    let Z = this.ref.current;
    return {
      x: Z.scrollLeft,
      y: Z.scrollTop,
      width: Z.offsetWidth,
      height: Z.offsetHeight
    };
  }
  constructor(Z) {
    this.ref = Z;
  }
}
class t4 {
  isDisabled(Z) {
    var u;
    return this.disabledBehavior === "all" && (((u = Z.props) === null || u === void 0 ? void 0 : u.isDisabled) || this.disabledKeys.has(Z.key));
  }
  findNextNonDisabled(Z, u) {
    for (; Z != null; ) {
      let s = this.collection.getItem(Z);
      if ((s == null ? void 0 : s.type) === "item" && !this.isDisabled(s)) return Z;
      Z = u(Z);
    }
    return null;
  }
  getNextKey(Z) {
    return Z = this.collection.getKeyAfter(Z), this.findNextNonDisabled(Z, (u) => this.collection.getKeyAfter(u));
  }
  getPreviousKey(Z) {
    return Z = this.collection.getKeyBefore(Z), this.findNextNonDisabled(Z, (u) => this.collection.getKeyBefore(u));
  }
  findKey(Z, u, s) {
    let G = this.layoutDelegate.getItemRect(Z);
    if (!G) return null;
    let i = G;
    do
      Z = u(Z), G = this.layoutDelegate.getItemRect(Z);
    while (G && s(i, G));
    return Z;
  }
  isSameRow(Z, u) {
    return Z.y === u.y || Z.x !== u.x;
  }
  isSameColumn(Z, u) {
    return Z.x === u.x || Z.y !== u.y;
  }
  getKeyBelow(Z) {
    return this.layout === "grid" && this.orientation === "vertical" ? this.findKey(Z, (u) => this.getNextKey(u), this.isSameRow) : this.getNextKey(Z);
  }
  getKeyAbove(Z) {
    return this.layout === "grid" && this.orientation === "vertical" ? this.findKey(Z, (u) => this.getPreviousKey(u), this.isSameRow) : this.getPreviousKey(Z);
  }
  getNextColumn(Z, u) {
    return u ? this.getPreviousKey(Z) : this.getNextKey(Z);
  }
  getKeyRightOf(Z) {
    let u = this.direction === "ltr" ? "getKeyRightOf" : "getKeyLeftOf";
    return this.layoutDelegate[u] ? (Z = this.layoutDelegate[u](Z), this.findNextNonDisabled(Z, (s) => this.layoutDelegate[u](s))) : this.layout === "grid" ? this.orientation === "vertical" ? this.getNextColumn(Z, this.direction === "rtl") : this.findKey(Z, (s) => this.getNextColumn(s, this.direction === "rtl"), this.isSameColumn) : this.orientation === "horizontal" ? this.getNextColumn(Z, this.direction === "rtl") : null;
  }
  getKeyLeftOf(Z) {
    let u = this.direction === "ltr" ? "getKeyLeftOf" : "getKeyRightOf";
    return this.layoutDelegate[u] ? (Z = this.layoutDelegate[u](Z), this.findNextNonDisabled(Z, (s) => this.layoutDelegate[u](s))) : this.layout === "grid" ? this.orientation === "vertical" ? this.getNextColumn(Z, this.direction === "ltr") : this.findKey(Z, (s) => this.getNextColumn(s, this.direction === "ltr"), this.isSameColumn) : this.orientation === "horizontal" ? this.getNextColumn(Z, this.direction === "ltr") : null;
  }
  getFirstKey() {
    let Z = this.collection.getFirstKey();
    return this.findNextNonDisabled(Z, (u) => this.collection.getKeyAfter(u));
  }
  getLastKey() {
    let Z = this.collection.getLastKey();
    return this.findNextNonDisabled(Z, (u) => this.collection.getKeyBefore(u));
  }
  getKeyPageAbove(Z) {
    let u = this.ref.current, s = this.layoutDelegate.getItemRect(Z);
    if (!s) return null;
    if (!ga(u)) return this.getFirstKey();
    if (this.orientation === "horizontal") {
      let G = Math.max(0, s.x + s.width - this.layoutDelegate.getVisibleRect().width);
      for (; s && s.x > G; )
        Z = this.getKeyAbove(Z), s = Z == null ? null : this.layoutDelegate.getItemRect(Z);
    } else {
      let G = Math.max(0, s.y + s.height - this.layoutDelegate.getVisibleRect().height);
      for (; s && s.y > G; )
        Z = this.getKeyAbove(Z), s = Z == null ? null : this.layoutDelegate.getItemRect(Z);
    }
    return Z ?? this.getFirstKey();
  }
  getKeyPageBelow(Z) {
    let u = this.ref.current, s = this.layoutDelegate.getItemRect(Z);
    if (!s) return null;
    if (!ga(u)) return this.getLastKey();
    if (this.orientation === "horizontal") {
      let G = Math.min(this.layoutDelegate.getContentSize().width, s.y - s.width + this.layoutDelegate.getVisibleRect().width);
      for (; s && s.x < G; )
        Z = this.getKeyBelow(Z), s = Z == null ? null : this.layoutDelegate.getItemRect(Z);
    } else {
      let G = Math.min(this.layoutDelegate.getContentSize().height, s.y - s.height + this.layoutDelegate.getVisibleRect().height);
      for (; s && s.y < G; )
        Z = this.getKeyBelow(Z), s = Z == null ? null : this.layoutDelegate.getItemRect(Z);
    }
    return Z ?? this.getLastKey();
  }
  getKeyForSearch(Z, u) {
    if (!this.collator) return null;
    let s = this.collection, G = u || this.getFirstKey();
    for (; G != null; ) {
      let i = s.getItem(G), m = i.textValue.slice(0, Z.length);
      if (i.textValue && this.collator.compare(m, Z) === 0) return G;
      G = this.getNextKey(G);
    }
    return null;
  }
  constructor(...Z) {
    if (Z.length === 1) {
      let u = Z[0];
      this.collection = u.collection, this.ref = u.ref, this.collator = u.collator, this.disabledKeys = u.disabledKeys || /* @__PURE__ */ new Set(), this.disabledBehavior = u.disabledBehavior || "all", this.orientation = u.orientation || "vertical", this.direction = u.direction, this.layout = u.layout || "stack", this.layoutDelegate = u.layoutDelegate || new r2(u.ref);
    } else
      this.collection = Z[0], this.disabledKeys = Z[1], this.ref = Z[2], this.collator = Z[3], this.layout = "stack", this.orientation = "vertical", this.disabledBehavior = "all", this.layoutDelegate = new r2(this.ref);
    this.layout === "stack" && this.orientation === "vertical" && (this.getKeyLeftOf = void 0, this.getKeyRightOf = void 0);
  }
}
function X4(l) {
  let { selectionManager: Z, collection: u, disabledKeys: s, ref: G, keyboardDelegate: i, layoutDelegate: m } = l, a = NE({
    usage: "search",
    sensitivity: "base"
  }), n = Z.disabledBehavior, p = M.useMemo(() => i || new t4({
    collection: u,
    disabledKeys: s,
    disabledBehavior: n,
    ref: G,
    collator: a,
    layoutDelegate: m
  }), [
    i,
    m,
    u,
    s,
    G,
    a,
    n
  ]), { collectionProps: y } = y4({
    ...l,
    ref: G,
    selectionManager: Z,
    keyboardDelegate: p
  });
  return {
    listProps: y
  };
}
class K4 {
  build(Z, u) {
    return this.context = u, F2(() => this.iterateCollection(Z));
  }
  *iterateCollection(Z) {
    let { children: u, items: s } = Z;
    if (tl.isValidElement(u) && u.type === tl.Fragment) yield* this.iterateCollection({
      children: u.props.children,
      items: s
    });
    else if (typeof u == "function") {
      if (!s) throw new Error("props.children was a function but props.items is missing");
      for (let G of Z.items) yield* this.getFullNode({
        value: G
      }, {
        renderer: u
      });
    } else {
      let G = [];
      tl.Children.forEach(u, (m) => {
        G.push(m);
      });
      let i = 0;
      for (let m of G) {
        let a = this.getFullNode({
          element: m,
          index: i
        }, {});
        for (let n of a)
          i++, yield n;
      }
    }
  }
  getKey(Z, u, s, G) {
    if (Z.key != null) return Z.key;
    if (u.type === "cell" && u.key != null) return `${G}${u.key}`;
    let i = u.value;
    if (i != null) {
      var m;
      let a = (m = i.key) !== null && m !== void 0 ? m : i.id;
      if (a == null) throw new Error("No key found for item");
      return a;
    }
    return G ? `${G}.${u.index}` : `$.${u.index}`;
  }
  getChildState(Z, u) {
    return {
      renderer: u.renderer || Z.renderer
    };
  }
  *getFullNode(Z, u, s, G) {
    if (tl.isValidElement(Z.element) && Z.element.type === tl.Fragment) {
      let n = [];
      tl.Children.forEach(Z.element.props.children, (y) => {
        n.push(y);
      });
      let p = Z.index;
      for (const y of n) yield* this.getFullNode({
        element: y,
        index: p++
      }, u, s, G);
      return;
    }
    let i = Z.element;
    if (!i && Z.value && u && u.renderer) {
      let n = this.cache.get(Z.value);
      if (n && (!n.shouldInvalidate || !n.shouldInvalidate(this.context))) {
        n.index = Z.index, n.parentKey = G ? G.key : null, yield n;
        return;
      }
      i = u.renderer(Z.value);
    }
    if (tl.isValidElement(i)) {
      let n = i.type;
      if (typeof n != "function" && typeof n.getCollectionNode != "function") {
        let S = typeof i.type == "function" ? i.type.name : i.type;
        throw new Error(`Unknown element <${S}> in collection.`);
      }
      let p = n.getCollectionNode(i.props, this.context), y = Z.index, h = p.next();
      for (; !h.done && h.value; ) {
        let S = h.value;
        Z.index = y;
        let t = S.key;
        t || (t = S.element ? null : this.getKey(i, Z, u, s));
        let V = [
          ...this.getFullNode({
            ...S,
            key: t,
            index: y,
            wrapper: W4(Z.wrapper, S.wrapper)
          }, this.getChildState(u, S), s ? `${s}${i.key}` : i.key, G)
        ];
        for (let R of V) {
          if (R.value = S.value || Z.value, R.value && this.cache.set(R.value, R), Z.type && R.type !== Z.type) throw new Error(`Unsupported type <${zK(R.type)}> in <${zK(G.type)}>. Only <${zK(Z.type)}> is supported.`);
          y++, yield R;
        }
        h = p.next(V);
      }
      return;
    }
    if (Z.key == null) return;
    let m = this, a = {
      type: Z.type,
      props: Z.props,
      key: Z.key,
      parentKey: G ? G.key : null,
      value: Z.value,
      level: G ? G.level + 1 : 0,
      index: Z.index,
      rendered: Z.rendered,
      textValue: Z.textValue,
      "aria-label": Z["aria-label"],
      wrapper: Z.wrapper,
      shouldInvalidate: Z.shouldInvalidate,
      hasChildNodes: Z.hasChildNodes,
      childNodes: F2(function* () {
        if (!Z.hasChildNodes) return;
        let n = 0;
        for (let p of Z.childNodes()) {
          p.key != null && (p.key = `${a.key}${p.key}`), p.index = n;
          let y = m.getFullNode(p, m.getChildState(u, p), a.key, a);
          for (let h of y)
            n++, yield h;
        }
      })
    };
    yield a;
  }
  constructor() {
    this.cache = /* @__PURE__ */ new WeakMap();
  }
}
function F2(l) {
  let Z = [], u = null;
  return {
    *[Symbol.iterator]() {
      for (let s of Z) yield s;
      u || (u = l());
      for (let s of u)
        Z.push(s), yield s;
    }
  };
}
function W4(l, Z) {
  if (l && Z) return (u) => l(Z(u));
  if (l) return l;
  if (Z) return Z;
}
function zK(l) {
  return l[0].toUpperCase() + l.slice(1);
}
function V4(l, Z, u) {
  let s = M.useMemo(() => new K4(), []), { children: G, items: i, collection: m } = l;
  return M.useMemo(() => {
    if (m) return m;
    let n = s.build({
      children: G,
      items: i
    }, u);
    return Z(n);
  }, [
    s,
    G,
    i,
    m,
    u,
    Z
  ]);
}
function p9(l, Z) {
  return typeof Z.getChildren == "function" ? Z.getChildren(l.key) : l.childNodes;
}
function x4(l) {
  return R4(l);
}
function R4(l, Z) {
  for (let u of l)
    return u;
}
function JK(l, Z, u) {
  if (Z.parentKey === u.parentKey) return Z.index - u.index;
  let s = [
    ...N2(l, Z),
    Z
  ], G = [
    ...N2(l, u),
    u
  ], i = s.slice(0, G.length).findIndex((m, a) => m !== G[a]);
  return i !== -1 ? (Z = s[i], u = G[i], Z.index - u.index) : s.findIndex((m) => m === u) >= 0 ? 1 : (G.findIndex((m) => m === Z) >= 0, -1);
}
function N2(l, Z) {
  let u = [];
  for (; (Z == null ? void 0 : Z.parentKey) != null; )
    Z = l.getItem(Z.parentKey), u.unshift(Z);
  return u;
}
const w2 = /* @__PURE__ */ new WeakMap();
function Y4(l) {
  let Z = w2.get(l);
  if (Z != null) return Z;
  Z = 0;
  let u = (s) => {
    for (let G of s) G.type === "section" ? u(p9(G, l)) : Z++;
  };
  return u(l), w2.set(l, Z), Z;
}
var L9 = {};
L9 = {
  longPressMessage: "اضغط مطولاً أو اضغط على Alt + السهم لأسفل لفتح القائمة"
};
var h9 = {};
h9 = {
  longPressMessage: "Натиснете продължително или натиснете Alt+ стрелка надолу, за да отворите менюто"
};
var y9 = {};
y9 = {
  longPressMessage: "Dlouhým stiskem nebo stisknutím kláves Alt + šipka dolů otevřete nabídku"
};
var S9 = {};
S9 = {
  longPressMessage: "Langt tryk eller tryk på Alt + pil ned for at åbne menuen"
};
var t9 = {};
t9 = {
  longPressMessage: "Drücken Sie lange oder drücken Sie Alt + Nach-unten, um das Menü zu öffnen"
};
var X9 = {};
X9 = {
  longPressMessage: "Πιέστε παρατεταμένα ή πατήστε Alt + κάτω βέλος για να ανοίξετε το μενού"
};
var K9 = {};
K9 = {
  longPressMessage: "Long press or press Alt + ArrowDown to open menu"
};
var W9 = {};
W9 = {
  longPressMessage: "Mantenga pulsado o pulse Alt + flecha abajo para abrir el menú"
};
var V9 = {};
V9 = {
  longPressMessage: "Menüü avamiseks vajutage pikalt või vajutage klahve Alt + allanool"
};
var x9 = {};
x9 = {
  longPressMessage: "Avaa valikko painamalla pohjassa tai näppäinyhdistelmällä Alt + Alanuoli"
};
var R9 = {};
R9 = {
  longPressMessage: "Appuyez de manière prolongée ou appuyez sur Alt + Flèche vers le bas pour ouvrir le menu."
};
var Y9 = {};
Y9 = {
  longPressMessage: "לחץ לחיצה ארוכה או הקש Alt + ArrowDown כדי לפתוח את התפריט"
};
var k9 = {};
k9 = {
  longPressMessage: "Dugo pritisnite ili pritisnite Alt + strelicu prema dolje za otvaranje izbornika"
};
var M9 = {};
M9 = {
  longPressMessage: "Nyomja meg hosszan, vagy nyomja meg az Alt + lefele nyíl gombot a menü megnyitásához"
};
var I9 = {};
I9 = {
  longPressMessage: "Premere a lungo o premere Alt + Freccia giù per aprire il menu"
};
var U9 = {};
U9 = {
  longPressMessage: "長押しまたは Alt+下矢印キーでメニューを開く"
};
var C9 = {};
C9 = {
  longPressMessage: "길게 누르거나 Alt + 아래쪽 화살표를 눌러 메뉴 열기"
};
var r9 = {};
r9 = {
  longPressMessage: "Norėdami atidaryti meniu, nuspaudę palaikykite arba paspauskite „Alt + ArrowDown“."
};
var F9 = {};
F9 = {
  longPressMessage: "Lai atvērtu izvēlni, turiet nospiestu vai nospiediet taustiņu kombināciju Alt + lejupvērstā bultiņa"
};
var N9 = {};
N9 = {
  longPressMessage: "Langt trykk eller trykk Alt + PilNed for å åpne menyen"
};
var w9 = {};
w9 = {
  longPressMessage: "Druk lang op Alt + pijl-omlaag of druk op Alt om het menu te openen"
};
var z9 = {};
z9 = {
  longPressMessage: "Naciśnij i przytrzymaj lub naciśnij klawisze Alt + Strzałka w dół, aby otworzyć menu"
};
var J9 = {};
J9 = {
  longPressMessage: "Pressione e segure ou pressione Alt + Seta para baixo para abrir o menu"
};
var H9 = {};
H9 = {
  longPressMessage: "Prima continuamente ou prima Alt + Seta Para Baixo para abrir o menu"
};
var g9 = {};
g9 = {
  longPressMessage: "Apăsați lung sau apăsați pe Alt + săgeată în jos pentru a deschide meniul"
};
var v9 = {};
v9 = {
  longPressMessage: "Нажмите и удерживайте или нажмите Alt + Стрелка вниз, чтобы открыть меню"
};
var T9 = {};
T9 = {
  longPressMessage: "Ponuku otvoríte dlhým stlačením alebo stlačením klávesu Alt + klávesu so šípkou nadol"
};
var f9 = {};
f9 = {
  longPressMessage: "Za odprtje menija pritisnite in držite gumb ali pritisnite Alt+puščica navzdol"
};
var E9 = {};
E9 = {
  longPressMessage: "Dugo pritisnite ili pritisnite Alt + strelicu prema dole da otvorite meni"
};
var B9 = {};
B9 = {
  longPressMessage: "Håll nedtryckt eller tryck på Alt + pil nedåt för att öppna menyn"
};
var D9 = {};
D9 = {
  longPressMessage: "Menüyü açmak için uzun basın veya Alt + Aşağı Ok tuşuna basın"
};
var j9 = {};
j9 = {
  longPressMessage: "Довго або звичайно натисніть комбінацію клавіш Alt і стрілка вниз, щоб відкрити меню"
};
var Q9 = {};
Q9 = {
  longPressMessage: "长按或按 Alt + 向下方向键以打开菜单"
};
var P9 = {};
P9 = {
  longPressMessage: "長按或按 Alt+向下鍵以開啟功能表"
};
var O9 = {};
O9 = {
  "ar-AE": L9,
  "bg-BG": h9,
  "cs-CZ": y9,
  "da-DK": S9,
  "de-DE": t9,
  "el-GR": X9,
  "en-US": K9,
  "es-ES": W9,
  "et-EE": V9,
  "fi-FI": x9,
  "fr-FR": R9,
  "he-IL": Y9,
  "hr-HR": k9,
  "hu-HU": M9,
  "it-IT": I9,
  "ja-JP": U9,
  "ko-KR": C9,
  "lt-LT": r9,
  "lv-LV": F9,
  "nb-NO": N9,
  "nl-NL": w9,
  "pl-PL": z9,
  "pt-BR": J9,
  "pt-PT": H9,
  "ro-RO": g9,
  "ru-RU": v9,
  "sk-SK": T9,
  "sl-SI": f9,
  "sr-SP": E9,
  "sv-SE": B9,
  "tr-TR": D9,
  "uk-UA": j9,
  "zh-CN": Q9,
  "zh-TW": P9
};
function k4(l) {
  return l && l.__esModule ? l.default : l;
}
function M4(l, Z, u) {
  let { type: s = "menu", isDisabled: G, trigger: i = "press" } = l, m = ad(), { triggerProps: a, overlayProps: n } = c4({
    type: s
  }, Z, u), p = (t) => {
    if (!G && !(i === "longPress" && !t.altKey) && u && u.current)
      switch (t.key) {
        case "Enter":
        case " ":
          if (i === "longPress") return;
        case "ArrowDown":
          "continuePropagation" in t || t.stopPropagation(), t.preventDefault(), Z.toggle("first");
          break;
        case "ArrowUp":
          "continuePropagation" in t || t.stopPropagation(), t.preventDefault(), Z.toggle("last");
          break;
        default:
          "continuePropagation" in t && t.continuePropagation();
      }
  }, y = Y1(k4(O9), "@react-aria/menu"), { longPressProps: h } = X1({
    isDisabled: G || i !== "longPress",
    accessibilityDescription: y.format("longPressMessage"),
    onLongPressStart() {
      Z.close();
    },
    onLongPress() {
      Z.open("first");
    }
  }), S = {
    onPressStart(t) {
      t.pointerType !== "touch" && t.pointerType !== "keyboard" && !G && Z.open(t.pointerType === "virtual" ? "first" : null);
    },
    onPress(t) {
      t.pointerType === "touch" && !G && Z.toggle();
    }
  };
  return delete a.onPress, {
    menuTriggerProps: {
      ...a,
      ...i === "press" ? S : h,
      id: m,
      onKeyDown: p
    },
    menuProps: {
      ...n,
      "aria-labelledby": m,
      autoFocus: Z.focusStrategy || !0,
      onClose: Z.close
    }
  };
}
const A9 = /* @__PURE__ */ new WeakMap();
function I4(l, Z, u) {
  let { shouldFocusWrap: s = !0, onKeyDown: G, onKeyUp: i, ...m } = l;
  !l["aria-label"] && !l["aria-labelledby"] && console.warn("An aria-label or aria-labelledby prop is required for accessibility.");
  let a = Su(l, {
    labelable: !0
  }), { listProps: n } = X4({
    ...m,
    ref: u,
    selectionManager: Z.selectionManager,
    collection: Z.collection,
    disabledKeys: Z.disabledKeys,
    shouldFocusWrap: s,
    linkBehavior: "override"
  });
  return A9.set(Z, {
    onClose: l.onClose,
    onAction: l.onAction
  }), {
    menuProps: HZ(a, {
      onKeyDown: G,
      onKeyUp: i
    }, {
      role: "menu",
      ...n,
      onKeyDown: (p) => {
        p.key !== "Escape" && n.onKeyDown(p);
      }
    })
  };
}
function U4(l, Z, u) {
  let { id: s, key: G, closeOnSelect: i, isVirtualized: m, "aria-haspopup": a, onPressStart: n, onPressUp: p, onPress: y, onPressChange: h, onPressEnd: S, onHoverStart: t, onHoverChange: W, onHoverEnd: V, onKeyDown: R, onKeyUp: x, onFocus: r, onFocusChange: k, onBlur: U } = l, w = !!a;
  var z;
  let D = (z = l.isDisabled) !== null && z !== void 0 ? z : Z.selectionManager.isDisabled(G);
  var C;
  let j = (C = l.isSelected) !== null && C !== void 0 ? C : Z.selectionManager.isSelected(G), E = A9.get(Z), g = Z.collection.getItem(G), A = l.onClose || E.onClose, J = nn(), F = (hl) => {
    var cl;
    if (!w) {
      if (!(g == null || (cl = g.props) === null || cl === void 0) && cl.onAction ? g.props.onAction() : l.onAction && l.onAction(G), E.onAction) {
        let wl = E.onAction;
        wl(G);
      }
      hl.target instanceof HTMLAnchorElement && J.open(hl.target, hl, g.props.href, g.props.routerOptions);
    }
  }, v = "menuitem";
  w || (Z.selectionManager.selectionMode === "single" ? v = "menuitemradio" : Z.selectionManager.selectionMode === "multiple" && (v = "menuitemcheckbox"));
  let T = xK(), f = xK(), O = xK(), _ = {
    id: s,
    "aria-disabled": D || void 0,
    role: v,
    "aria-label": l["aria-label"],
    "aria-labelledby": T,
    "aria-describedby": [
      f,
      O
    ].filter(Boolean).join(" ") || void 0,
    "aria-controls": l["aria-controls"],
    "aria-haspopup": a,
    "aria-expanded": l["aria-expanded"]
  };
  Z.selectionManager.selectionMode !== "none" && !w && (_["aria-checked"] = j), m && (_["aria-posinset"] = g == null ? void 0 : g.index, _["aria-setsize"] = Y4(Z.collection));
  let il = (hl) => {
    hl.pointerType === "keyboard" && F(hl), n == null || n(hl);
  }, Zl = (hl) => {
    hl.pointerType !== "keyboard" && (F(hl), !w && A && (i ?? (Z.selectionManager.selectionMode !== "multiple" || Z.selectionManager.isLink(G))) && A()), p == null || p(hl);
  }, { itemProps: ol, isFocused: Wl } = S4({
    selectionManager: Z.selectionManager,
    key: G,
    ref: u,
    shouldSelectOnPressUp: !0,
    allowsDifferentPressOrigin: !0,
    // Disable all handling of links in useSelectable item
    // because we handle it ourselves. The behavior of menus
    // is slightly different from other collections because
    // actions are performed on key down rather than key up.
    linkBehavior: "none"
  }), { pressProps: ml, isPressed: Rl } = hn({
    onPressStart: il,
    onPress: y,
    onPressUp: Zl,
    onPressChange: h,
    onPressEnd: S,
    isDisabled: D
  }), { hoverProps: kl } = Ro({
    isDisabled: D,
    onHoverStart(hl) {
      xV() || (Z.selectionManager.setFocused(!0), Z.selectionManager.setFocusedKey(G)), t == null || t(hl);
    },
    onHoverChange: W,
    onHoverEnd: V
  }), { keyboardProps: zl } = YV({
    onKeyDown: (hl) => {
      if (hl.repeat) {
        hl.continuePropagation();
        return;
      }
      switch (hl.key) {
        case " ":
          !D && Z.selectionManager.selectionMode === "none" && !w && i !== !1 && A && A();
          break;
        case "Enter":
          !D && i !== !1 && !w && A && A();
          break;
        default:
          w || hl.continuePropagation(), R == null || R(hl);
          break;
      }
    },
    onKeyUp: x
  }), { focusProps: Vl } = VV({
    onBlur: U,
    onFocus: r,
    onFocusChange: k
  }), el = Su(g.props);
  delete el.id;
  let xl = l1(g.props);
  return {
    menuItemProps: {
      ..._,
      ...HZ(el, xl, w ? {
        onFocus: ol.onFocus,
        "data-key": ol["data-key"]
      } : ol, ml, kl, zl, Vl),
      tabIndex: ol.tabIndex != null ? -1 : void 0
    },
    labelProps: {
      id: T
    },
    descriptionProps: {
      id: f
    },
    keyboardShortcutProps: {
      id: O
    },
    isFocused: Wl,
    isSelected: j,
    isPressed: Rl,
    isDisabled: D
  };
}
function C4(l) {
  let { heading: Z, "aria-label": u } = l, s = ad();
  return {
    itemProps: {
      role: "presentation"
    },
    headingProps: Z ? {
      // Techincally, menus cannot contain headings according to ARIA.
      // We hide the heading from assistive technology, using role="presentation",
      // and only use it as a label for the nested group.
      id: s,
      role: "presentation"
    } : {},
    groupProps: {
      role: "group",
      "aria-label": u,
      "aria-labelledby": Z ? s : void 0
    }
  };
}
function r4(l) {
  let Z = Su(l, {
    labelable: !0
  }), u;
  return l.orientation === "vertical" && (u = "vertical"), l.elementType !== "hr" ? {
    separatorProps: {
      ...Z,
      role: "separator",
      "aria-orientation": u
    }
  } : {
    separatorProps: Z
  };
}
const F4 = /* @__PURE__ */ M.createContext(null);
function N4(l, Z) {
  [l, Z] = yd(l, Z, F4);
  let u = l.href && !l.isDisabled ? "a" : "span", { linkProps: s, isPressed: G } = hE({
    ...l,
    elementType: u
  }, Z), { hoverProps: i, isHovered: m } = Ro(l), { focusProps: a, isFocused: n, isFocusVisible: p } = Th(), y = Ks({
    ...l,
    defaultClassName: "react-aria-Link",
    values: {
      isCurrent: !!l["aria-current"],
      isDisabled: l.isDisabled || !1,
      isPressed: G,
      isHovered: m,
      isFocused: n,
      isFocusVisible: p
    }
  });
  return /* @__PURE__ */ tl.createElement(u, {
    ref: Z,
    slot: l.slot || void 0,
    ...HZ(y, s, i, a),
    "data-focused": n || void 0,
    "data-hovered": m || void 0,
    "data-pressed": G || void 0,
    "data-focus-visible": p || void 0,
    "data-current": !!l["aria-current"] || void 0,
    "data-disabled": l.isDisabled || void 0
  }, y.children);
}
const w4 = /* @__PURE__ */ M.forwardRef(N4), $9 = /* @__PURE__ */ M.createContext({}), z4 = /* @__PURE__ */ M.createContext(null), J4 = /* @__PURE__ */ new Set([
  "form",
  "formAction",
  "formEncType",
  "formMethod",
  "formNoValidate",
  "formTarget",
  "name",
  "value"
]), H4 = /* @__PURE__ */ M.createContext({});
function g4(l, Z) {
  [l, Z] = yd(l, Z, H4), l = v4(l);
  let u = l, { isPending: s } = u, { buttonProps: G, isPressed: i } = wE(l, Z), { focusProps: m, isFocused: a, isFocusVisible: n } = Th(l), { hoverProps: p, isHovered: y } = Ro({
    ...l,
    isDisabled: l.isDisabled || s
  }), h = {
    isHovered: y,
    isPressed: (u.isPressed || i) && !s,
    isFocused: a,
    isFocusVisible: n,
    isDisabled: l.isDisabled || !1,
    isPending: s ?? !1
  }, S = Ks({
    ...l,
    values: h,
    defaultClassName: "react-aria-Button"
  }), t = ad(G.id), W = ad(), V = G["aria-labelledby"];
  s && (V ? V = `${V} ${W}` : G["aria-label"] && (V = `${t} ${W}`));
  let R = M.useRef(s);
  return M.useEffect(() => {
    let x = {
      "aria-labelledby": V || t
    };
    (!R.current && a && s || R.current && a && !s) && h2(x, "assertive"), R.current = s;
  }, [
    s,
    a,
    V,
    t
  ]), /* @__PURE__ */ tl.createElement("button", {
    ...Su(l, {
      propNames: J4
    }),
    ...HZ(G, m, p),
    ...S,
    id: t,
    ref: Z,
    "aria-labelledby": V,
    slot: l.slot || void 0,
    "aria-disabled": s ? "true" : G["aria-disabled"],
    "data-disabled": l.isDisabled || void 0,
    "data-pressed": h.isPressed || void 0,
    "data-hovered": y || void 0,
    "data-focused": a || void 0,
    "data-pending": s || void 0,
    "data-focus-visible": n || void 0
  }, /* @__PURE__ */ tl.createElement(z4.Provider, {
    value: {
      id: W
    }
  }, S.children));
}
function v4(l) {
  return l.isPending && (l.onPress = void 0, l.onPressStart = void 0, l.onPressEnd = void 0, l.onPressChange = void 0, l.onPressUp = void 0, l.onKeyDown = void 0, l.onKeyUp = void 0, l.onClick = void 0, l.href = void 0), l;
}
const T4 = /* @__PURE__ */ BT(g4), f4 = /* @__PURE__ */ M.createContext({});
class gu extends Set {
  constructor(Z, u, s) {
    super(Z), Z instanceof gu ? (this.anchorKey = u ?? Z.anchorKey, this.currentKey = s ?? Z.currentKey) : (this.anchorKey = u, this.currentKey = s);
  }
}
function E4(l, Z) {
  if (l.size !== Z.size) return !1;
  for (let u of l)
    if (!Z.has(u)) return !1;
  return !0;
}
function B4(l) {
  let { selectionMode: Z = "none", disallowEmptySelection: u, allowDuplicateSelectionEvents: s, selectionBehavior: G = "toggle", disabledBehavior: i = "all" } = l, m = M.useRef(!1), [, a] = M.useState(!1), n = M.useRef(null), p = M.useRef(null), [, y] = M.useState(null), h = M.useMemo(() => z2(l.selectedKeys), [
    l.selectedKeys
  ]), S = M.useMemo(() => z2(l.defaultSelectedKeys, new gu()), [
    l.defaultSelectedKeys
  ]), [t, W] = Hh(h, S, l.onSelectionChange), V = M.useMemo(() => l.disabledKeys ? new Set(l.disabledKeys) : /* @__PURE__ */ new Set(), [
    l.disabledKeys
  ]), [R, x] = M.useState(G);
  G === "replace" && R === "toggle" && typeof t == "object" && t.size === 0 && x("replace");
  let r = M.useRef(G);
  return M.useEffect(() => {
    G !== r.current && (x(G), r.current = G);
  }, [
    G
  ]), {
    selectionMode: Z,
    disallowEmptySelection: u,
    selectionBehavior: R,
    setSelectionBehavior: x,
    get isFocused() {
      return m.current;
    },
    setFocused(k) {
      m.current = k, a(k);
    },
    get focusedKey() {
      return n.current;
    },
    get childFocusStrategy() {
      return p.current;
    },
    setFocusedKey(k, U = "first") {
      n.current = k, p.current = U, y(k);
    },
    selectedKeys: t,
    setSelectedKeys(k) {
      (s || !E4(k, t)) && W(k);
    },
    disabledKeys: V,
    disabledBehavior: i
  };
}
function z2(l, Z) {
  return l ? l === "all" ? "all" : new gu(l) : Z;
}
class D4 {
  /**
  * The type of selection that is allowed in the collection.
  */
  get selectionMode() {
    return this.state.selectionMode;
  }
  /**
  * Whether the collection allows empty selection.
  */
  get disallowEmptySelection() {
    return this.state.disallowEmptySelection;
  }
  /**
  * The selection behavior for the collection.
  */
  get selectionBehavior() {
    return this.state.selectionBehavior;
  }
  /**
  * Sets the selection behavior for the collection.
  */
  setSelectionBehavior(Z) {
    this.state.setSelectionBehavior(Z);
  }
  /**
  * Whether the collection is currently focused.
  */
  get isFocused() {
    return this.state.isFocused;
  }
  /**
  * Sets whether the collection is focused.
  */
  setFocused(Z) {
    this.state.setFocused(Z);
  }
  /**
  * The current focused key in the collection.
  */
  get focusedKey() {
    return this.state.focusedKey;
  }
  /** Whether the first or last child of the focused key should receive focus. */
  get childFocusStrategy() {
    return this.state.childFocusStrategy;
  }
  /**
  * Sets the focused key.
  */
  setFocusedKey(Z, u) {
    (Z == null || this.collection.getItem(Z)) && this.state.setFocusedKey(Z, u);
  }
  /**
  * The currently selected keys in the collection.
  */
  get selectedKeys() {
    return this.state.selectedKeys === "all" ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;
  }
  /**
  * The raw selection value for the collection.
  * Either 'all' for select all, or a set of keys.
  */
  get rawSelection() {
    return this.state.selectedKeys;
  }
  /**
  * Returns whether a key is selected.
  */
  isSelected(Z) {
    return this.state.selectionMode === "none" ? !1 : (Z = this.getKey(Z), this.state.selectedKeys === "all" ? this.canSelectItem(Z) : this.state.selectedKeys.has(Z));
  }
  /**
  * Whether the selection is empty.
  */
  get isEmpty() {
    return this.state.selectedKeys !== "all" && this.state.selectedKeys.size === 0;
  }
  /**
  * Whether all items in the collection are selected.
  */
  get isSelectAll() {
    if (this.isEmpty) return !1;
    if (this.state.selectedKeys === "all") return !0;
    if (this._isSelectAll != null) return this._isSelectAll;
    let Z = this.getSelectAllKeys(), u = this.state.selectedKeys;
    return this._isSelectAll = Z.every((s) => u.has(s)), this._isSelectAll;
  }
  get firstSelectedKey() {
    let Z = null;
    for (let u of this.state.selectedKeys) {
      let s = this.collection.getItem(u);
      (!Z || s && JK(this.collection, s, Z) < 0) && (Z = s);
    }
    return Z == null ? void 0 : Z.key;
  }
  get lastSelectedKey() {
    let Z = null;
    for (let u of this.state.selectedKeys) {
      let s = this.collection.getItem(u);
      (!Z || s && JK(this.collection, s, Z) > 0) && (Z = s);
    }
    return Z == null ? void 0 : Z.key;
  }
  get disabledKeys() {
    return this.state.disabledKeys;
  }
  get disabledBehavior() {
    return this.state.disabledBehavior;
  }
  /**
  * Extends the selection to the given key.
  */
  extendSelection(Z) {
    if (this.selectionMode === "none") return;
    if (this.selectionMode === "single") {
      this.replaceSelection(Z);
      return;
    }
    Z = this.getKey(Z);
    let u;
    if (this.state.selectedKeys === "all") u = new gu([
      Z
    ], Z, Z);
    else {
      let i = this.state.selectedKeys;
      var s;
      let m = (s = i.anchorKey) !== null && s !== void 0 ? s : Z;
      u = new gu(i, m, Z);
      var G;
      for (let a of this.getKeyRange(m, (G = i.currentKey) !== null && G !== void 0 ? G : Z)) u.delete(a);
      for (let a of this.getKeyRange(Z, m)) this.canSelectItem(a) && u.add(a);
    }
    this.state.setSelectedKeys(u);
  }
  getKeyRange(Z, u) {
    let s = this.collection.getItem(Z), G = this.collection.getItem(u);
    return s && G ? JK(this.collection, s, G) <= 0 ? this.getKeyRangeInternal(Z, u) : this.getKeyRangeInternal(u, Z) : [];
  }
  getKeyRangeInternal(Z, u) {
    var s;
    if (!((s = this.layoutDelegate) === null || s === void 0) && s.getKeyRange) return this.layoutDelegate.getKeyRange(Z, u);
    let G = [], i = Z;
    for (; i != null; ) {
      let m = this.collection.getItem(i);
      if ((m && m.type === "item" || m.type === "cell" && this.allowsCellSelection) && G.push(i), i === u) return G;
      i = this.collection.getKeyAfter(i);
    }
    return [];
  }
  getKey(Z) {
    let u = this.collection.getItem(Z);
    if (!u || u.type === "cell" && this.allowsCellSelection) return Z;
    for (; u.type !== "item" && u.parentKey != null; ) u = this.collection.getItem(u.parentKey);
    return !u || u.type !== "item" ? null : u.key;
  }
  /**
  * Toggles whether the given key is selected.
  */
  toggleSelection(Z) {
    if (this.selectionMode === "none") return;
    if (this.selectionMode === "single" && !this.isSelected(Z)) {
      this.replaceSelection(Z);
      return;
    }
    if (Z = this.getKey(Z), Z == null) return;
    let u = new gu(this.state.selectedKeys === "all" ? this.getSelectAllKeys() : this.state.selectedKeys);
    u.has(Z) ? u.delete(Z) : this.canSelectItem(Z) && (u.add(Z), u.anchorKey = Z, u.currentKey = Z), !(this.disallowEmptySelection && u.size === 0) && this.state.setSelectedKeys(u);
  }
  /**
  * Replaces the selection with only the given key.
  */
  replaceSelection(Z) {
    if (this.selectionMode === "none" || (Z = this.getKey(Z), Z == null)) return;
    let u = this.canSelectItem(Z) ? new gu([
      Z
    ], Z, Z) : new gu();
    this.state.setSelectedKeys(u);
  }
  /**
  * Replaces the selection with the given keys.
  */
  setSelectedKeys(Z) {
    if (this.selectionMode === "none") return;
    let u = new gu();
    for (let s of Z)
      if (s = this.getKey(s), s != null && (u.add(s), this.selectionMode === "single"))
        break;
    this.state.setSelectedKeys(u);
  }
  getSelectAllKeys() {
    let Z = [], u = (s) => {
      for (; s != null; ) {
        if (this.canSelectItem(s)) {
          let G = this.collection.getItem(s);
          G.type === "item" && Z.push(s), G.hasChildNodes && (this.allowsCellSelection || G.type !== "item") && u(x4(p9(G, this.collection)).key);
        }
        s = this.collection.getKeyAfter(s);
      }
    };
    return u(this.collection.getFirstKey()), Z;
  }
  /**
  * Selects all items in the collection.
  */
  selectAll() {
    !this.isSelectAll && this.selectionMode === "multiple" && this.state.setSelectedKeys("all");
  }
  /**
  * Removes all keys from the selection.
  */
  clearSelection() {
    !this.disallowEmptySelection && (this.state.selectedKeys === "all" || this.state.selectedKeys.size > 0) && this.state.setSelectedKeys(new gu());
  }
  /**
  * Toggles between select all and an empty selection.
  */
  toggleSelectAll() {
    this.isSelectAll ? this.clearSelection() : this.selectAll();
  }
  select(Z, u) {
    this.selectionMode !== "none" && (this.selectionMode === "single" ? this.isSelected(Z) && !this.disallowEmptySelection ? this.toggleSelection(Z) : this.replaceSelection(Z) : this.selectionBehavior === "toggle" || u && (u.pointerType === "touch" || u.pointerType === "virtual") ? this.toggleSelection(Z) : this.replaceSelection(Z));
  }
  /**
  * Returns whether the current selection is equal to the given selection.
  */
  isSelectionEqual(Z) {
    if (Z === this.state.selectedKeys) return !0;
    let u = this.selectedKeys;
    if (Z.size !== u.size) return !1;
    for (let s of Z)
      if (!u.has(s)) return !1;
    for (let s of u)
      if (!Z.has(s)) return !1;
    return !0;
  }
  canSelectItem(Z) {
    var u;
    if (this.state.selectionMode === "none" || this.state.disabledKeys.has(Z)) return !1;
    let s = this.collection.getItem(Z);
    return !(!s || !(s == null || (u = s.props) === null || u === void 0) && u.isDisabled || s.type === "cell" && !this.allowsCellSelection);
  }
  isDisabled(Z) {
    var u, s;
    return this.state.disabledBehavior === "all" && (this.state.disabledKeys.has(Z) || !!(!((s = this.collection.getItem(Z)) === null || s === void 0 || (u = s.props) === null || u === void 0) && u.isDisabled));
  }
  isLink(Z) {
    var u, s;
    return !!(!((s = this.collection.getItem(Z)) === null || s === void 0 || (u = s.props) === null || u === void 0) && u.href);
  }
  getItemProps(Z) {
    var u;
    return (u = this.collection.getItem(Z)) === null || u === void 0 ? void 0 : u.props;
  }
  constructor(Z, u, s) {
    this.collection = Z, this.state = u;
    var G;
    this.allowsCellSelection = (G = s == null ? void 0 : s.allowsCellSelection) !== null && G !== void 0 ? G : !1, this._isSelectAll = null, this.layoutDelegate = (s == null ? void 0 : s.layoutDelegate) || null;
  }
}
function q9(l) {
  let [Z, u] = Hh(l.isOpen, l.defaultOpen || !1, l.onOpenChange);
  const s = M.useCallback(() => {
    u(!0);
  }, [
    u
  ]), G = M.useCallback(() => {
    u(!1);
  }, [
    u
  ]), i = M.useCallback(() => {
    u(!Z);
  }, [
    u,
    Z
  ]);
  return {
    isOpen: Z,
    setOpen: u,
    open: s,
    close: G,
    toggle: i
  };
}
function j4(l) {
  let Z = q9(l), [u, s] = M.useState(null), [G, i] = M.useState([]), m = () => {
    i([]), Z.close();
  };
  return {
    focusStrategy: u,
    ...Z,
    open(p = null) {
      s(p), Z.open();
    },
    toggle(p = null) {
      s(p), Z.toggle();
    },
    close() {
      m();
    },
    expandedKeysStack: G,
    openSubmenu: (p, y) => {
      i((h) => y > h.length ? h : [
        ...h.slice(0, y),
        p
      ]);
    },
    closeSubmenu: (p, y) => {
      i((h) => h[y] === p ? h.slice(0, y) : h);
    }
  };
}
class Q4 {
  *[Symbol.iterator]() {
    yield* this.iterable;
  }
  get size() {
    return this.keyMap.size;
  }
  getKeys() {
    return this.keyMap.keys();
  }
  getKeyBefore(Z) {
    let u = this.keyMap.get(Z);
    return u ? u.prevKey : null;
  }
  getKeyAfter(Z) {
    let u = this.keyMap.get(Z);
    return u ? u.nextKey : null;
  }
  getFirstKey() {
    return this.firstKey;
  }
  getLastKey() {
    return this.lastKey;
  }
  getItem(Z) {
    return this.keyMap.get(Z);
  }
  at(Z) {
    const u = [
      ...this.getKeys()
    ];
    return this.getItem(u[Z]);
  }
  constructor(Z, { expandedKeys: u } = {}) {
    this.keyMap = /* @__PURE__ */ new Map(), this.iterable = Z, u = u || /* @__PURE__ */ new Set();
    let s = (m) => {
      if (this.keyMap.set(m.key, m), m.childNodes && (m.type === "section" || u.has(m.key))) for (let a of m.childNodes) s(a);
    };
    for (let m of Z) s(m);
    let G, i = 0;
    for (let [m, a] of this.keyMap)
      G ? (G.nextKey = m, a.prevKey = G.key) : (this.firstKey = m, a.prevKey = void 0), a.type === "item" && (a.index = i++), G = a, G.nextKey = void 0;
    this.lastKey = G == null ? void 0 : G.key;
  }
}
function P4(l) {
  let { onExpandedChange: Z } = l, [u, s] = Hh(l.expandedKeys ? new Set(l.expandedKeys) : void 0, l.defaultExpandedKeys ? new Set(l.defaultExpandedKeys) : /* @__PURE__ */ new Set(), Z), G = B4(l), i = M.useMemo(() => l.disabledKeys ? new Set(l.disabledKeys) : /* @__PURE__ */ new Set(), [
    l.disabledKeys
  ]), m = V4(l, M.useCallback((n) => new Q4(n, {
    expandedKeys: u
  }), [
    u
  ]), null);
  return M.useEffect(() => {
    G.focusedKey != null && !m.getItem(G.focusedKey) && G.setFocusedKey(null);
  }, [
    m,
    G.focusedKey
  ]), {
    collection: m,
    expandedKeys: u,
    disabledKeys: i,
    toggleKey: (n) => {
      s(O4(u, n));
    },
    setExpandedKeys: s,
    selectionManager: new D4(m, G)
  };
}
function O4(l, Z) {
  let u = new Set(l);
  return u.has(Z) ? u.delete(Z) : u.add(Z), u;
}
const A4 = /* @__PURE__ */ M.createContext({}), _9 = /* @__PURE__ */ M.createContext({}), $4 = /* @__PURE__ */ G1("separator", function(Z, u) {
  [Z, u] = yd(Z, u, _9);
  let { elementType: s, orientation: G, style: i, className: m } = Z, a = s || "hr";
  a === "hr" && G === "vertical" && (a = "div");
  let { separatorProps: n } = r4({
    elementType: s,
    orientation: G
  });
  return /* @__PURE__ */ tl.createElement(a, {
    ...Su(Z),
    ...n,
    style: i,
    className: m ?? "react-aria-Separator",
    ref: u,
    slot: Z.slot || void 0
  });
}), q4 = /* @__PURE__ */ M.createContext(null), Eh = /* @__PURE__ */ M.createContext(null), CV = /* @__PURE__ */ M.createContext(null), lU = /* @__PURE__ */ M.createContext(null);
function _4(l, Z) {
  [l, Z] = yd(l, Z, q4);
  let u = M.useRef(null), s = FE(l.formatOptions), G = vE({
    ...l,
    numberFormatter: s
  }), [i, m] = KV(), { groupProps: a, trackProps: n, labelProps: p, outputProps: y } = fE({
    ...l,
    label: m
  }, G, u), h = Ks({
    ...l,
    values: {
      orientation: G.orientation,
      isDisabled: G.isDisabled,
      state: G
    },
    defaultClassName: "react-aria-Slider"
  }), S = Su(l);
  return delete S.id, /* @__PURE__ */ tl.createElement(Ln, {
    values: [
      [
        Eh,
        G
      ],
      [
        CV,
        {
          ...n,
          ref: u
        }
      ],
      [
        lU,
        y
      ],
      [
        $9,
        {
          ...p,
          ref: i
        }
      ]
    ]
  }, /* @__PURE__ */ tl.createElement("div", {
    ...S,
    ...a,
    ...h,
    ref: Z,
    slot: l.slot || void 0,
    "data-orientation": G.orientation,
    "data-disabled": G.isDisabled || void 0
  }));
}
const lB = /* @__PURE__ */ M.forwardRef(_4);
function ZB(l, Z) {
  [l, Z] = yd(l, Z, lU);
  let { children: u, style: s, className: G, ...i } = l, m = M.useContext(Eh), a = Ks({
    className: G,
    style: s,
    children: u,
    defaultChildren: m.getThumbValueLabel(0),
    defaultClassName: "react-aria-SliderOutput",
    values: {
      orientation: m.orientation,
      isDisabled: m.isDisabled,
      state: m
    }
  });
  return /* @__PURE__ */ tl.createElement("output", {
    ...i,
    ...a,
    ref: Z,
    "data-orientation": m.orientation || void 0,
    "data-disabled": m.isDisabled || void 0
  });
}
const cB = /* @__PURE__ */ M.forwardRef(ZB);
function bB(l, Z) {
  [l, Z] = yd(l, Z, CV);
  let u = M.useContext(Eh), { onHoverStart: s, onHoverEnd: G, onHoverChange: i, ...m } = l, { hoverProps: a, isHovered: n } = Ro({
    onHoverStart: s,
    onHoverEnd: G,
    onHoverChange: i
  }), p = Ks({
    ...l,
    defaultClassName: "react-aria-SliderTrack",
    values: {
      orientation: u.orientation,
      isDisabled: u.isDisabled,
      isHovered: n,
      state: u
    }
  });
  return /* @__PURE__ */ tl.createElement("div", {
    ...HZ(m, a),
    ...p,
    ref: Z,
    "data-hovered": n || void 0,
    "data-orientation": u.orientation || void 0,
    "data-disabled": u.isDisabled || void 0
  });
}
const uB = /* @__PURE__ */ M.forwardRef(bB);
function sB(l, Z) {
  let { inputRef: u = null } = l, s = M.useContext(Eh), { ref: G } = gh(CV), { index: i = 0 } = l, m = M.useRef(null), a = u || m, [n, p] = KV(), { thumbProps: y, inputProps: h, labelProps: S, isDragging: t, isFocused: W, isDisabled: V } = EE({
    ...l,
    index: i,
    trackRef: G,
    inputRef: a,
    label: p
  }, s), { focusProps: R, isFocusVisible: x } = Th(), { hoverProps: r, isHovered: k } = Ro(l), U = Ks({
    ...l,
    defaultClassName: "react-aria-SliderThumb",
    values: {
      state: s,
      isHovered: k,
      isDragging: t,
      isFocused: W,
      isFocusVisible: x,
      isDisabled: V
    }
  }), w = Su(l);
  return delete w.id, /* @__PURE__ */ tl.createElement("div", {
    ...HZ(w, y, r),
    ...U,
    ref: Z,
    style: {
      ...y.style,
      ...U.style
    },
    "data-hovered": k || void 0,
    "data-dragging": t || void 0,
    "data-focused": W || void 0,
    "data-focus-visible": x || void 0,
    "data-disabled": V || void 0
  }, /* @__PURE__ */ tl.createElement(U1, null, /* @__PURE__ */ tl.createElement("input", {
    ref: a,
    ...HZ(h, R)
  })), /* @__PURE__ */ tl.createElement(Ln, {
    values: [
      [
        $9,
        {
          ...S,
          ref: n
        }
      ]
    ]
  }, U.children));
}
const dB = /* @__PURE__ */ M.forwardRef(sB), GB = /* @__PURE__ */ M.createContext({
  placement: "bottom"
}), Ba = /* @__PURE__ */ M.createContext(null);
function mB(l, Z) {
  [l, Z] = yd(l, Z, Ba);
  let u = M.useContext(ZU), s = q9(l), G = l.isOpen != null || l.defaultOpen != null || !u ? s : u, i = Nf(Z, G.isOpen) || l.isExiting || !1;
  if (DT()) {
    let a = l.children;
    return typeof a == "function" && (a = a({
      trigger: l.trigger || null,
      placement: "bottom",
      isEntering: !1,
      isExiting: !1,
      defaultChildren: null
    })), /* @__PURE__ */ tl.createElement(tl.Fragment, null, a);
  }
  return G && !G.isOpen && !i ? null : /* @__PURE__ */ tl.createElement(oB, {
    ...l,
    triggerRef: l.triggerRef,
    state: G,
    popoverRef: Z,
    isExiting: i
  });
}
const iB = /* @__PURE__ */ M.forwardRef(mB);
function oB({ state: l, isExiting: Z, UNSTABLE_portalContainer: u, ...s }) {
  let G = M.useRef(null), [i, m] = M.useState(0);
  PZ(() => {
    G.current && l.isOpen && m(G.current.getBoundingClientRect().width);
  }, [
    l.isOpen,
    G
  ]);
  var a;
  let { popoverProps: n, underlayProps: p, arrowProps: y, placement: h } = i4({
    ...s,
    offset: (a = s.offset) !== null && a !== void 0 ? a : 8,
    arrowSize: i
  }, l), S = s.popoverRef, t = Ff(S, !!h) || s.isEntering || !1, W = Ks({
    ...s,
    defaultClassName: "react-aria-Popover",
    values: {
      trigger: s.trigger || null,
      placement: h,
      isEntering: t,
      isExiting: Z
    }
  }), V = {
    ...n.style,
    ...W.style
  };
  return /* @__PURE__ */ tl.createElement(n4, {
    isExiting: Z,
    portalContainer: u
  }, !s.isNonModal && l.isOpen && /* @__PURE__ */ tl.createElement("div", {
    "data-testid": "underlay",
    ...p,
    style: {
      position: "fixed",
      inset: 0
    }
  }), /* @__PURE__ */ tl.createElement("div", {
    ...HZ(Su(s), n),
    ...W,
    ref: S,
    slot: s.slot || void 0,
    style: V,
    "data-trigger": s.trigger,
    "data-placement": h,
    "data-entering": t || void 0,
    "data-exiting": Z || void 0
  }, !s.isNonModal && /* @__PURE__ */ tl.createElement(I2, {
    onDismiss: l.close
  }), /* @__PURE__ */ tl.createElement(GB.Provider, {
    value: {
      ...y,
      placement: h,
      ref: G
    }
  }, W.children), /* @__PURE__ */ tl.createElement(I2, {
    onDismiss: l.close
  })));
}
const ZU = /* @__PURE__ */ M.createContext(null), eB = /* @__PURE__ */ M.createContext({}), cU = /* @__PURE__ */ M.createContext(null), rV = /* @__PURE__ */ M.createContext(null), bU = /* @__PURE__ */ M.createContext(null);
function aB(l) {
  let Z = j4(l), u = M.useRef(null), { menuTriggerProps: s, menuProps: G } = M4({
    ...l,
    type: "menu"
  }, Z, u), [i, m] = M.useState(null), a = M.useCallback(() => {
    u.current && m(u.current.offsetWidth + "px");
  }, [
    u
  ]);
  oW({
    ref: u,
    onResize: a
  });
  let n = M.useRef(null);
  return /* @__PURE__ */ tl.createElement(Ln, {
    values: [
      [
        cU,
        {
          ...G,
          ref: n
        }
      ],
      [
        ZU,
        Z
      ],
      [
        bU,
        Z
      ],
      [
        Ba,
        {
          trigger: "MenuTrigger",
          triggerRef: u,
          scrollRef: n,
          placement: "bottom start",
          style: {
            "--trigger-width": i
          }
        }
      ]
    ]
  }, /* @__PURE__ */ tl.createElement(Df, {
    ...s,
    ref: u,
    isPressed: Z.isOpen
  }, l.children));
}
const nB = /* @__PURE__ */ M.createContext(null);
function pB(l, Z) {
  return [l, Z] = yd(l, Z, cU), /* @__PURE__ */ tl.createElement(Kf, {
    content: /* @__PURE__ */ tl.createElement(Mf, l)
  }, (u) => u.size > 0 && /* @__PURE__ */ tl.createElement(LB, {
    props: l,
    collection: u,
    menuRef: Z
  }));
}
function LB({ props: l, collection: Z, menuRef: u }) {
  let s = P4({
    ...l,
    collection: Z,
    children: void 0
  }), [G, i] = M.useState(null), { isVirtualized: m, CollectionRoot: a } = M.useContext(m1), { menuProps: n } = I4({
    ...l,
    isVirtualized: m
  }, s, u), p = M.useContext(bU), y = M.useContext(Ba), h = (y == null ? void 0 : y.trigger) === "SubmenuTrigger";
  S1({
    ref: u,
    onInteractOutside: (R) => {
      p && !(G != null && G.contains(R.target)) && p.close();
    },
    isDisabled: h || (p == null ? void 0 : p.expandedKeysStack.length) === 0
  });
  let S = M.useRef(null), [t, W] = M.useState({
    left: 0
  });
  M.useEffect(() => {
    if (G && S.current !== G && t.left === 0) {
      S.current = G;
      let { left: R } = G.getBoundingClientRect();
      W({
        left: -1 * R
      });
    }
  }, [
    t,
    G
  ]);
  let V = Ks({
    defaultClassName: "react-aria-Menu",
    className: l.className,
    style: l.style,
    values: {}
  });
  return /* @__PURE__ */ tl.createElement(W1, null, /* @__PURE__ */ tl.createElement("div", {
    ...Su(l),
    ...n,
    ...V,
    ref: u,
    slot: l.slot || void 0,
    onScroll: l.onScroll
  }, /* @__PURE__ */ tl.createElement(Ln, {
    values: [
      [
        rV,
        s
      ],
      [
        _9,
        {
          elementType: "div"
        }
      ],
      [
        Ba,
        {
          UNSTABLE_portalContainer: G || void 0
        }
      ],
      [
        Uf,
        {
          render: yB
        }
      ],
      [
        nB,
        {
          parentMenuRef: u
        }
      ],
      [
        kW,
        null
      ]
    ]
  }, /* @__PURE__ */ tl.createElement(a, {
    collection: Z,
    persistedKeys: rf(s.selectionManager.focusedKey),
    scrollRef: u
  }))), /* @__PURE__ */ tl.createElement("div", {
    ref: i,
    style: {
      width: "100vw",
      position: "absolute",
      top: 0,
      ...t
    }
  }));
}
const hB = /* @__PURE__ */ M.forwardRef(pB);
function yB(l, Z, u) {
  var s, G;
  let i = M.useContext(rV), { CollectionBranch: m } = M.useContext(m1), [a, n] = KV();
  var p;
  let { headingProps: y, groupProps: h } = C4({
    heading: n,
    "aria-label": (p = u.props["aria-label"]) !== null && p !== void 0 ? p : void 0
  }), S = Ks({
    defaultClassName: "react-aria-Section",
    className: (s = u.props) === null || s === void 0 ? void 0 : s.className,
    style: (G = u.props) === null || G === void 0 ? void 0 : G.style,
    values: {}
  });
  return /* @__PURE__ */ tl.createElement("section", {
    ...Su(l),
    ...h,
    ...S,
    ref: Z
  }, /* @__PURE__ */ tl.createElement(A4.Provider, {
    value: {
      ...y,
      ref: a
    }
  }, /* @__PURE__ */ tl.createElement(m, {
    collection: i.collection,
    parent: u
  })));
}
const kW = /* @__PURE__ */ M.createContext(null), SB = /* @__PURE__ */ G1("item", function(Z, u, s) {
  var G;
  [Z, u] = yd(Z, u, kW);
  let i = (G = gh(kW)) === null || G === void 0 ? void 0 : G.id, m = M.useContext(rV), a = tV(u), { menuItemProps: n, labelProps: p, descriptionProps: y, keyboardShortcutProps: h, ...S } = U4({
    ...Z,
    id: i,
    key: s.key
  }, m, a), { isFocusVisible: t, focusProps: W } = Th(), { hoverProps: V, isHovered: R } = Ro({
    isDisabled: S.isDisabled
  }), x = Ks({
    ...Z,
    id: void 0,
    children: s.rendered,
    defaultClassName: "react-aria-MenuItem",
    values: {
      ...S,
      isHovered: R,
      isFocusVisible: t,
      selectionMode: m.selectionManager.selectionMode,
      selectionBehavior: m.selectionManager.selectionBehavior,
      hasSubmenu: !!Z["aria-haspopup"],
      isOpen: Z["aria-expanded"] === "true"
    }
  }), r = Z.href ? "a" : "div";
  return /* @__PURE__ */ tl.createElement(r, {
    ...HZ(n, W, V),
    ...x,
    ref: a,
    "data-disabled": S.isDisabled || void 0,
    "data-hovered": R || void 0,
    "data-focused": S.isFocused || void 0,
    "data-focus-visible": t || void 0,
    "data-pressed": S.isPressed || void 0,
    "data-selected": S.isSelected || void 0,
    "data-selection-mode": m.selectionManager.selectionMode === "none" ? void 0 : m.selectionManager.selectionMode,
    "data-has-submenu": !!Z["aria-haspopup"] || void 0,
    "data-open": Z["aria-expanded"] === "true" || void 0
  }, /* @__PURE__ */ tl.createElement(Ln, {
    values: [
      [
        f4,
        {
          slots: {
            label: p,
            description: y
          }
        }
      ],
      [
        eB,
        h
      ]
    ]
  }, x.children));
}), FV = "-", tB = (l) => {
  const Z = KB(l), {
    conflictingClassGroups: u,
    conflictingClassGroupModifiers: s
  } = l;
  return {
    getClassGroupId: (m) => {
      const a = m.split(FV);
      return a[0] === "" && a.length !== 1 && a.shift(), uU(a, Z) || XB(m);
    },
    getConflictingClassGroupIds: (m, a) => {
      const n = u[m] || [];
      return a && s[m] ? [...n, ...s[m]] : n;
    }
  };
}, uU = (l, Z) => {
  var m;
  if (l.length === 0)
    return Z.classGroupId;
  const u = l[0], s = Z.nextPart.get(u), G = s ? uU(l.slice(1), s) : void 0;
  if (G)
    return G;
  if (Z.validators.length === 0)
    return;
  const i = l.join(FV);
  return (m = Z.validators.find(({
    validator: a
  }) => a(i))) == null ? void 0 : m.classGroupId;
}, J2 = /^\[(.+)\]$/, XB = (l) => {
  if (J2.test(l)) {
    const Z = J2.exec(l)[1], u = Z == null ? void 0 : Z.substring(0, Z.indexOf(":"));
    if (u)
      return "arbitrary.." + u;
  }
}, KB = (l) => {
  const {
    theme: Z,
    prefix: u
  } = l, s = {
    nextPart: /* @__PURE__ */ new Map(),
    validators: []
  };
  return VB(Object.entries(l.classGroups), u).forEach(([i, m]) => {
    MW(m, s, i, Z);
  }), s;
}, MW = (l, Z, u, s) => {
  l.forEach((G) => {
    if (typeof G == "string") {
      const i = G === "" ? Z : H2(Z, G);
      i.classGroupId = u;
      return;
    }
    if (typeof G == "function") {
      if (WB(G)) {
        MW(G(s), Z, u, s);
        return;
      }
      Z.validators.push({
        validator: G,
        classGroupId: u
      });
      return;
    }
    Object.entries(G).forEach(([i, m]) => {
      MW(m, H2(Z, i), u, s);
    });
  });
}, H2 = (l, Z) => {
  let u = l;
  return Z.split(FV).forEach((s) => {
    u.nextPart.has(s) || u.nextPart.set(s, {
      nextPart: /* @__PURE__ */ new Map(),
      validators: []
    }), u = u.nextPart.get(s);
  }), u;
}, WB = (l) => l.isThemeGetter, VB = (l, Z) => Z ? l.map(([u, s]) => {
  const G = s.map((i) => typeof i == "string" ? Z + i : typeof i == "object" ? Object.fromEntries(Object.entries(i).map(([m, a]) => [Z + m, a])) : i);
  return [u, G];
}) : l, xB = (l) => {
  if (l < 1)
    return {
      get: () => {
      },
      set: () => {
      }
    };
  let Z = 0, u = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Map();
  const G = (i, m) => {
    u.set(i, m), Z++, Z > l && (Z = 0, s = u, u = /* @__PURE__ */ new Map());
  };
  return {
    get(i) {
      let m = u.get(i);
      if (m !== void 0)
        return m;
      if ((m = s.get(i)) !== void 0)
        return G(i, m), m;
    },
    set(i, m) {
      u.has(i) ? u.set(i, m) : G(i, m);
    }
  };
}, sU = "!", RB = (l) => {
  const {
    separator: Z,
    experimentalParseClassName: u
  } = l, s = Z.length === 1, G = Z[0], i = Z.length, m = (a) => {
    const n = [];
    let p = 0, y = 0, h;
    for (let R = 0; R < a.length; R++) {
      let x = a[R];
      if (p === 0) {
        if (x === G && (s || a.slice(R, R + i) === Z)) {
          n.push(a.slice(y, R)), y = R + i;
          continue;
        }
        if (x === "/") {
          h = R;
          continue;
        }
      }
      x === "[" ? p++ : x === "]" && p--;
    }
    const S = n.length === 0 ? a : a.substring(y), t = S.startsWith(sU), W = t ? S.substring(1) : S, V = h && h > y ? h - y : void 0;
    return {
      modifiers: n,
      hasImportantModifier: t,
      baseClassName: W,
      maybePostfixModifierPosition: V
    };
  };
  return u ? (a) => u({
    className: a,
    parseClassName: m
  }) : m;
}, YB = (l) => {
  if (l.length <= 1)
    return l;
  const Z = [];
  let u = [];
  return l.forEach((s) => {
    s[0] === "[" ? (Z.push(...u.sort(), s), u = []) : u.push(s);
  }), Z.push(...u.sort()), Z;
}, kB = (l) => ({
  cache: xB(l.cacheSize),
  parseClassName: RB(l),
  ...tB(l)
}), MB = /\s+/, IB = (l, Z) => {
  const {
    parseClassName: u,
    getClassGroupId: s,
    getConflictingClassGroupIds: G
  } = Z, i = [], m = l.trim().split(MB);
  let a = "";
  for (let n = m.length - 1; n >= 0; n -= 1) {
    const p = m[n], {
      modifiers: y,
      hasImportantModifier: h,
      baseClassName: S,
      maybePostfixModifierPosition: t
    } = u(p);
    let W = !!t, V = s(W ? S.substring(0, t) : S);
    if (!V) {
      if (!W) {
        a = p + (a.length > 0 ? " " + a : a);
        continue;
      }
      if (V = s(S), !V) {
        a = p + (a.length > 0 ? " " + a : a);
        continue;
      }
      W = !1;
    }
    const R = YB(y).join(":"), x = h ? R + sU : R, r = x + V;
    if (i.includes(r))
      continue;
    i.push(r);
    const k = G(V, W);
    for (let U = 0; U < k.length; ++U) {
      const w = k[U];
      i.push(x + w);
    }
    a = p + (a.length > 0 ? " " + a : a);
  }
  return a;
};
function UB() {
  let l = 0, Z, u, s = "";
  for (; l < arguments.length; )
    (Z = arguments[l++]) && (u = dU(Z)) && (s && (s += " "), s += u);
  return s;
}
const dU = (l) => {
  if (typeof l == "string")
    return l;
  let Z, u = "";
  for (let s = 0; s < l.length; s++)
    l[s] && (Z = dU(l[s])) && (u && (u += " "), u += Z);
  return u;
};
function CB(l, ...Z) {
  let u, s, G, i = m;
  function m(n) {
    const p = Z.reduce((y, h) => h(y), l());
    return u = kB(p), s = u.cache.get, G = u.cache.set, i = a, a(n);
  }
  function a(n) {
    const p = s(n);
    if (p)
      return p;
    const y = IB(n, u);
    return G(n, y), y;
  }
  return function() {
    return i(UB.apply(null, arguments));
  };
}
const qZ = (l) => {
  const Z = (u) => u[l] || [];
  return Z.isThemeGetter = !0, Z;
}, GU = /^\[(?:([a-z-]+):)?(.+)\]$/i, rB = /^\d+\/\d+$/, FB = /* @__PURE__ */ new Set(["px", "full", "screen"]), NB = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/, wB = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/, zB = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/, JB = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/, HB = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/, Zd = (l) => ji(l) || FB.has(l) || rB.test(l), _d = (l) => Yo(l, "length", jB), ji = (l) => !!l && !Number.isNaN(Number(l)), HK = (l) => Yo(l, "number", ji), ta = (l) => !!l && Number.isInteger(Number(l)), gB = (l) => l.endsWith("%") && ji(l.slice(0, -1)), iZ = (l) => GU.test(l), lG = (l) => NB.test(l), vB = /* @__PURE__ */ new Set(["length", "size", "percentage"]), TB = (l) => Yo(l, vB, mU), fB = (l) => Yo(l, "position", mU), EB = /* @__PURE__ */ new Set(["image", "url"]), BB = (l) => Yo(l, EB, PB), DB = (l) => Yo(l, "", QB), Xa = () => !0, Yo = (l, Z, u) => {
  const s = GU.exec(l);
  return s ? s[1] ? typeof Z == "string" ? s[1] === Z : Z.has(s[1]) : u(s[2]) : !1;
}, jB = (l) => (
  // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.
  // For example, `hsl(0 0% 0%)` would be classified as a length without this check.
  // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.
  wB.test(l) && !zB.test(l)
), mU = () => !1, QB = (l) => JB.test(l), PB = (l) => HB.test(l), OB = () => {
  const l = qZ("colors"), Z = qZ("spacing"), u = qZ("blur"), s = qZ("brightness"), G = qZ("borderColor"), i = qZ("borderRadius"), m = qZ("borderSpacing"), a = qZ("borderWidth"), n = qZ("contrast"), p = qZ("grayscale"), y = qZ("hueRotate"), h = qZ("invert"), S = qZ("gap"), t = qZ("gradientColorStops"), W = qZ("gradientColorStopPositions"), V = qZ("inset"), R = qZ("margin"), x = qZ("opacity"), r = qZ("padding"), k = qZ("saturate"), U = qZ("scale"), w = qZ("sepia"), z = qZ("skew"), D = qZ("space"), C = qZ("translate"), j = () => ["auto", "contain", "none"], E = () => ["auto", "hidden", "clip", "visible", "scroll"], g = () => ["auto", iZ, Z], A = () => [iZ, Z], J = () => ["", Zd, _d], F = () => ["auto", ji, iZ], v = () => ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"], T = () => ["solid", "dashed", "dotted", "double", "none"], f = () => ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"], O = () => ["start", "end", "center", "between", "around", "evenly", "stretch"], _ = () => ["", "0", iZ], il = () => ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"], Zl = () => [ji, iZ];
  return {
    cacheSize: 500,
    separator: ":",
    theme: {
      colors: [Xa],
      spacing: [Zd, _d],
      blur: ["none", "", lG, iZ],
      brightness: Zl(),
      borderColor: [l],
      borderRadius: ["none", "", "full", lG, iZ],
      borderSpacing: A(),
      borderWidth: J(),
      contrast: Zl(),
      grayscale: _(),
      hueRotate: Zl(),
      invert: _(),
      gap: A(),
      gradientColorStops: [l],
      gradientColorStopPositions: [gB, _d],
      inset: g(),
      margin: g(),
      opacity: Zl(),
      padding: A(),
      saturate: Zl(),
      scale: Zl(),
      sepia: _(),
      skew: Zl(),
      space: A(),
      translate: A()
    },
    classGroups: {
      // Layout
      /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */
      aspect: [{
        aspect: ["auto", "square", "video", iZ]
      }],
      /**
       * Container
       * @see https://tailwindcss.com/docs/container
       */
      container: ["container"],
      /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */
      columns: [{
        columns: [lG]
      }],
      /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */
      "break-after": [{
        "break-after": il()
      }],
      /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */
      "break-before": [{
        "break-before": il()
      }],
      /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */
      "break-inside": [{
        "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
      }],
      /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */
      "box-decoration": [{
        "box-decoration": ["slice", "clone"]
      }],
      /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */
      box: [{
        box: ["border", "content"]
      }],
      /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */
      display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
      /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */
      float: [{
        float: ["right", "left", "none", "start", "end"]
      }],
      /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */
      clear: [{
        clear: ["left", "right", "both", "none", "start", "end"]
      }],
      /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */
      isolation: ["isolate", "isolation-auto"],
      /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */
      "object-fit": [{
        object: ["contain", "cover", "fill", "none", "scale-down"]
      }],
      /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */
      "object-position": [{
        object: [...v(), iZ]
      }],
      /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */
      overflow: [{
        overflow: E()
      }],
      /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-x": [{
        "overflow-x": E()
      }],
      /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-y": [{
        "overflow-y": E()
      }],
      /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      overscroll: [{
        overscroll: j()
      }],
      /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-x": [{
        "overscroll-x": j()
      }],
      /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-y": [{
        "overscroll-y": j()
      }],
      /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */
      position: ["static", "fixed", "absolute", "relative", "sticky"],
      /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      inset: [{
        inset: [V]
      }],
      /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-x": [{
        "inset-x": [V]
      }],
      /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-y": [{
        "inset-y": [V]
      }],
      /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      start: [{
        start: [V]
      }],
      /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      end: [{
        end: [V]
      }],
      /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      top: [{
        top: [V]
      }],
      /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      right: [{
        right: [V]
      }],
      /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      bottom: [{
        bottom: [V]
      }],
      /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      left: [{
        left: [V]
      }],
      /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */
      visibility: ["visible", "invisible", "collapse"],
      /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */
      z: [{
        z: ["auto", ta, iZ]
      }],
      // Flexbox and Grid
      /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */
      basis: [{
        basis: g()
      }],
      /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */
      "flex-direction": [{
        flex: ["row", "row-reverse", "col", "col-reverse"]
      }],
      /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */
      "flex-wrap": [{
        flex: ["wrap", "wrap-reverse", "nowrap"]
      }],
      /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */
      flex: [{
        flex: ["1", "auto", "initial", "none", iZ]
      }],
      /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */
      grow: [{
        grow: _()
      }],
      /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */
      shrink: [{
        shrink: _()
      }],
      /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */
      order: [{
        order: ["first", "last", "none", ta, iZ]
      }],
      /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */
      "grid-cols": [{
        "grid-cols": [Xa]
      }],
      /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start-end": [{
        col: ["auto", {
          span: ["full", ta, iZ]
        }, iZ]
      }],
      /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start": [{
        "col-start": F()
      }],
      /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-end": [{
        "col-end": F()
      }],
      /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */
      "grid-rows": [{
        "grid-rows": [Xa]
      }],
      /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start-end": [{
        row: ["auto", {
          span: [ta, iZ]
        }, iZ]
      }],
      /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start": [{
        "row-start": F()
      }],
      /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-end": [{
        "row-end": F()
      }],
      /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */
      "grid-flow": [{
        "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
      }],
      /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */
      "auto-cols": [{
        "auto-cols": ["auto", "min", "max", "fr", iZ]
      }],
      /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */
      "auto-rows": [{
        "auto-rows": ["auto", "min", "max", "fr", iZ]
      }],
      /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */
      gap: [{
        gap: [S]
      }],
      /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-x": [{
        "gap-x": [S]
      }],
      /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-y": [{
        "gap-y": [S]
      }],
      /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */
      "justify-content": [{
        justify: ["normal", ...O()]
      }],
      /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */
      "justify-items": [{
        "justify-items": ["start", "end", "center", "stretch"]
      }],
      /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */
      "justify-self": [{
        "justify-self": ["auto", "start", "end", "center", "stretch"]
      }],
      /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */
      "align-content": [{
        content: ["normal", ...O(), "baseline"]
      }],
      /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */
      "align-items": [{
        items: ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */
      "align-self": [{
        self: ["auto", "start", "end", "center", "stretch", "baseline"]
      }],
      /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */
      "place-content": [{
        "place-content": [...O(), "baseline"]
      }],
      /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */
      "place-items": [{
        "place-items": ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */
      "place-self": [{
        "place-self": ["auto", "start", "end", "center", "stretch"]
      }],
      // Spacing
      /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */
      p: [{
        p: [r]
      }],
      /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */
      px: [{
        px: [r]
      }],
      /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */
      py: [{
        py: [r]
      }],
      /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */
      ps: [{
        ps: [r]
      }],
      /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */
      pe: [{
        pe: [r]
      }],
      /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */
      pt: [{
        pt: [r]
      }],
      /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */
      pr: [{
        pr: [r]
      }],
      /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */
      pb: [{
        pb: [r]
      }],
      /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */
      pl: [{
        pl: [r]
      }],
      /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */
      m: [{
        m: [R]
      }],
      /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */
      mx: [{
        mx: [R]
      }],
      /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */
      my: [{
        my: [R]
      }],
      /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */
      ms: [{
        ms: [R]
      }],
      /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */
      me: [{
        me: [R]
      }],
      /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */
      mt: [{
        mt: [R]
      }],
      /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */
      mr: [{
        mr: [R]
      }],
      /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */
      mb: [{
        mb: [R]
      }],
      /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */
      ml: [{
        ml: [R]
      }],
      /**
       * Space Between X
       * @see https://tailwindcss.com/docs/space
       */
      "space-x": [{
        "space-x": [D]
      }],
      /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-x-reverse": ["space-x-reverse"],
      /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/space
       */
      "space-y": [{
        "space-y": [D]
      }],
      /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-y-reverse": ["space-y-reverse"],
      // Sizing
      /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */
      w: [{
        w: ["auto", "min", "max", "fit", "svw", "lvw", "dvw", iZ, Z]
      }],
      /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */
      "min-w": [{
        "min-w": [iZ, Z, "min", "max", "fit"]
      }],
      /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */
      "max-w": [{
        "max-w": [iZ, Z, "none", "full", "min", "max", "fit", "prose", {
          screen: [lG]
        }, lG]
      }],
      /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */
      h: [{
        h: [iZ, Z, "auto", "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */
      "min-h": [{
        "min-h": [iZ, Z, "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */
      "max-h": [{
        "max-h": [iZ, Z, "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Size
       * @see https://tailwindcss.com/docs/size
       */
      size: [{
        size: [iZ, Z, "auto", "min", "max", "fit"]
      }],
      // Typography
      /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */
      "font-size": [{
        text: ["base", lG, _d]
      }],
      /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */
      "font-smoothing": ["antialiased", "subpixel-antialiased"],
      /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */
      "font-style": ["italic", "not-italic"],
      /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */
      "font-weight": [{
        font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", HK]
      }],
      /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */
      "font-family": [{
        font: [Xa]
      }],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-normal": ["normal-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-ordinal": ["ordinal"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-slashed-zero": ["slashed-zero"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-figure": ["lining-nums", "oldstyle-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-spacing": ["proportional-nums", "tabular-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-fraction": ["diagonal-fractions", "stacked-fractons"],
      /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */
      tracking: [{
        tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", iZ]
      }],
      /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */
      "line-clamp": [{
        "line-clamp": ["none", ji, HK]
      }],
      /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */
      leading: [{
        leading: ["none", "tight", "snug", "normal", "relaxed", "loose", Zd, iZ]
      }],
      /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */
      "list-image": [{
        "list-image": ["none", iZ]
      }],
      /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */
      "list-style-type": [{
        list: ["none", "disc", "decimal", iZ]
      }],
      /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */
      "list-style-position": [{
        list: ["inside", "outside"]
      }],
      /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/placeholder-color
       */
      "placeholder-color": [{
        placeholder: [l]
      }],
      /**
       * Placeholder Opacity
       * @see https://tailwindcss.com/docs/placeholder-opacity
       */
      "placeholder-opacity": [{
        "placeholder-opacity": [x]
      }],
      /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */
      "text-alignment": [{
        text: ["left", "center", "right", "justify", "start", "end"]
      }],
      /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */
      "text-color": [{
        text: [l]
      }],
      /**
       * Text Opacity
       * @see https://tailwindcss.com/docs/text-opacity
       */
      "text-opacity": [{
        "text-opacity": [x]
      }],
      /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */
      "text-decoration": ["underline", "overline", "line-through", "no-underline"],
      /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */
      "text-decoration-style": [{
        decoration: [...T(), "wavy"]
      }],
      /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */
      "text-decoration-thickness": [{
        decoration: ["auto", "from-font", Zd, _d]
      }],
      /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */
      "underline-offset": [{
        "underline-offset": ["auto", Zd, iZ]
      }],
      /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */
      "text-decoration-color": [{
        decoration: [l]
      }],
      /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */
      "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
      /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */
      "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
      /**
       * Text Wrap
       * @see https://tailwindcss.com/docs/text-wrap
       */
      "text-wrap": [{
        text: ["wrap", "nowrap", "balance", "pretty"]
      }],
      /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */
      indent: [{
        indent: A()
      }],
      /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */
      "vertical-align": [{
        align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", iZ]
      }],
      /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */
      whitespace: [{
        whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
      }],
      /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */
      break: [{
        break: ["normal", "words", "all", "keep"]
      }],
      /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */
      hyphens: [{
        hyphens: ["none", "manual", "auto"]
      }],
      /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */
      content: [{
        content: ["none", iZ]
      }],
      // Backgrounds
      /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */
      "bg-attachment": [{
        bg: ["fixed", "local", "scroll"]
      }],
      /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */
      "bg-clip": [{
        "bg-clip": ["border", "padding", "content", "text"]
      }],
      /**
       * Background Opacity
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/background-opacity
       */
      "bg-opacity": [{
        "bg-opacity": [x]
      }],
      /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */
      "bg-origin": [{
        "bg-origin": ["border", "padding", "content"]
      }],
      /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */
      "bg-position": [{
        bg: [...v(), fB]
      }],
      /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */
      "bg-repeat": [{
        bg: ["no-repeat", {
          repeat: ["", "x", "y", "round", "space"]
        }]
      }],
      /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */
      "bg-size": [{
        bg: ["auto", "cover", "contain", TB]
      }],
      /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */
      "bg-image": [{
        bg: ["none", {
          "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
        }, BB]
      }],
      /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */
      "bg-color": [{
        bg: [l]
      }],
      /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from-pos": [{
        from: [W]
      }],
      /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via-pos": [{
        via: [W]
      }],
      /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to-pos": [{
        to: [W]
      }],
      /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from": [{
        from: [t]
      }],
      /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via": [{
        via: [t]
      }],
      /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to": [{
        to: [t]
      }],
      // Borders
      /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */
      rounded: [{
        rounded: [i]
      }],
      /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-s": [{
        "rounded-s": [i]
      }],
      /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-e": [{
        "rounded-e": [i]
      }],
      /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-t": [{
        "rounded-t": [i]
      }],
      /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-r": [{
        "rounded-r": [i]
      }],
      /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-b": [{
        "rounded-b": [i]
      }],
      /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-l": [{
        "rounded-l": [i]
      }],
      /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ss": [{
        "rounded-ss": [i]
      }],
      /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-se": [{
        "rounded-se": [i]
      }],
      /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ee": [{
        "rounded-ee": [i]
      }],
      /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-es": [{
        "rounded-es": [i]
      }],
      /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tl": [{
        "rounded-tl": [i]
      }],
      /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tr": [{
        "rounded-tr": [i]
      }],
      /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-br": [{
        "rounded-br": [i]
      }],
      /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-bl": [{
        "rounded-bl": [i]
      }],
      /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w": [{
        border: [a]
      }],
      /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-x": [{
        "border-x": [a]
      }],
      /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-y": [{
        "border-y": [a]
      }],
      /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-s": [{
        "border-s": [a]
      }],
      /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-e": [{
        "border-e": [a]
      }],
      /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-t": [{
        "border-t": [a]
      }],
      /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-r": [{
        "border-r": [a]
      }],
      /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-b": [{
        "border-b": [a]
      }],
      /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-l": [{
        "border-l": [a]
      }],
      /**
       * Border Opacity
       * @see https://tailwindcss.com/docs/border-opacity
       */
      "border-opacity": [{
        "border-opacity": [x]
      }],
      /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */
      "border-style": [{
        border: [...T(), "hidden"]
      }],
      /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x": [{
        "divide-x": [a]
      }],
      /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x-reverse": ["divide-x-reverse"],
      /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y": [{
        "divide-y": [a]
      }],
      /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y-reverse": ["divide-y-reverse"],
      /**
       * Divide Opacity
       * @see https://tailwindcss.com/docs/divide-opacity
       */
      "divide-opacity": [{
        "divide-opacity": [x]
      }],
      /**
       * Divide Style
       * @see https://tailwindcss.com/docs/divide-style
       */
      "divide-style": [{
        divide: T()
      }],
      /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color": [{
        border: [G]
      }],
      /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-x": [{
        "border-x": [G]
      }],
      /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-y": [{
        "border-y": [G]
      }],
      /**
       * Border Color S
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-s": [{
        "border-s": [G]
      }],
      /**
       * Border Color E
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-e": [{
        "border-e": [G]
      }],
      /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-t": [{
        "border-t": [G]
      }],
      /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-r": [{
        "border-r": [G]
      }],
      /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-b": [{
        "border-b": [G]
      }],
      /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-l": [{
        "border-l": [G]
      }],
      /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */
      "divide-color": [{
        divide: [G]
      }],
      /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */
      "outline-style": [{
        outline: ["", ...T()]
      }],
      /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */
      "outline-offset": [{
        "outline-offset": [Zd, iZ]
      }],
      /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */
      "outline-w": [{
        outline: [Zd, _d]
      }],
      /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */
      "outline-color": [{
        outline: [l]
      }],
      /**
       * Ring Width
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w": [{
        ring: J()
      }],
      /**
       * Ring Width Inset
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w-inset": ["ring-inset"],
      /**
       * Ring Color
       * @see https://tailwindcss.com/docs/ring-color
       */
      "ring-color": [{
        ring: [l]
      }],
      /**
       * Ring Opacity
       * @see https://tailwindcss.com/docs/ring-opacity
       */
      "ring-opacity": [{
        "ring-opacity": [x]
      }],
      /**
       * Ring Offset Width
       * @see https://tailwindcss.com/docs/ring-offset-width
       */
      "ring-offset-w": [{
        "ring-offset": [Zd, _d]
      }],
      /**
       * Ring Offset Color
       * @see https://tailwindcss.com/docs/ring-offset-color
       */
      "ring-offset-color": [{
        "ring-offset": [l]
      }],
      // Effects
      /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */
      shadow: [{
        shadow: ["", "inner", "none", lG, DB]
      }],
      /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow-color
       */
      "shadow-color": [{
        shadow: [Xa]
      }],
      /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */
      opacity: [{
        opacity: [x]
      }],
      /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */
      "mix-blend": [{
        "mix-blend": [...f(), "plus-lighter", "plus-darker"]
      }],
      /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */
      "bg-blend": [{
        "bg-blend": f()
      }],
      // Filters
      /**
       * Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/filter
       */
      filter: [{
        filter: ["", "none"]
      }],
      /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */
      blur: [{
        blur: [u]
      }],
      /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */
      brightness: [{
        brightness: [s]
      }],
      /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */
      contrast: [{
        contrast: [n]
      }],
      /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */
      "drop-shadow": [{
        "drop-shadow": ["", "none", lG, iZ]
      }],
      /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */
      grayscale: [{
        grayscale: [p]
      }],
      /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */
      "hue-rotate": [{
        "hue-rotate": [y]
      }],
      /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */
      invert: [{
        invert: [h]
      }],
      /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */
      saturate: [{
        saturate: [k]
      }],
      /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */
      sepia: [{
        sepia: [w]
      }],
      /**
       * Backdrop Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/backdrop-filter
       */
      "backdrop-filter": [{
        "backdrop-filter": ["", "none"]
      }],
      /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */
      "backdrop-blur": [{
        "backdrop-blur": [u]
      }],
      /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */
      "backdrop-brightness": [{
        "backdrop-brightness": [s]
      }],
      /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */
      "backdrop-contrast": [{
        "backdrop-contrast": [n]
      }],
      /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */
      "backdrop-grayscale": [{
        "backdrop-grayscale": [p]
      }],
      /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */
      "backdrop-hue-rotate": [{
        "backdrop-hue-rotate": [y]
      }],
      /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */
      "backdrop-invert": [{
        "backdrop-invert": [h]
      }],
      /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */
      "backdrop-opacity": [{
        "backdrop-opacity": [x]
      }],
      /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */
      "backdrop-saturate": [{
        "backdrop-saturate": [k]
      }],
      /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */
      "backdrop-sepia": [{
        "backdrop-sepia": [w]
      }],
      // Tables
      /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */
      "border-collapse": [{
        border: ["collapse", "separate"]
      }],
      /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing": [{
        "border-spacing": [m]
      }],
      /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-x": [{
        "border-spacing-x": [m]
      }],
      /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-y": [{
        "border-spacing-y": [m]
      }],
      /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */
      "table-layout": [{
        table: ["auto", "fixed"]
      }],
      /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */
      caption: [{
        caption: ["top", "bottom"]
      }],
      // Transitions and Animation
      /**
       * Tranisition Property
       * @see https://tailwindcss.com/docs/transition-property
       */
      transition: [{
        transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", iZ]
      }],
      /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */
      duration: [{
        duration: Zl()
      }],
      /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */
      ease: [{
        ease: ["linear", "in", "out", "in-out", iZ]
      }],
      /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */
      delay: [{
        delay: Zl()
      }],
      /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */
      animate: [{
        animate: ["none", "spin", "ping", "pulse", "bounce", iZ]
      }],
      // Transforms
      /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */
      transform: [{
        transform: ["", "gpu", "none"]
      }],
      /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */
      scale: [{
        scale: [U]
      }],
      /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-x": [{
        "scale-x": [U]
      }],
      /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-y": [{
        "scale-y": [U]
      }],
      /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */
      rotate: [{
        rotate: [ta, iZ]
      }],
      /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-x": [{
        "translate-x": [C]
      }],
      /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-y": [{
        "translate-y": [C]
      }],
      /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-x": [{
        "skew-x": [z]
      }],
      /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-y": [{
        "skew-y": [z]
      }],
      /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */
      "transform-origin": [{
        origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", iZ]
      }],
      // Interactivity
      /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */
      accent: [{
        accent: ["auto", l]
      }],
      /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */
      appearance: [{
        appearance: ["none", "auto"]
      }],
      /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */
      cursor: [{
        cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", iZ]
      }],
      /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */
      "caret-color": [{
        caret: [l]
      }],
      /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */
      "pointer-events": [{
        "pointer-events": ["none", "auto"]
      }],
      /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */
      resize: [{
        resize: ["none", "y", "x", ""]
      }],
      /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */
      "scroll-behavior": [{
        scroll: ["auto", "smooth"]
      }],
      /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-m": [{
        "scroll-m": A()
      }],
      /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mx": [{
        "scroll-mx": A()
      }],
      /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-my": [{
        "scroll-my": A()
      }],
      /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ms": [{
        "scroll-ms": A()
      }],
      /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-me": [{
        "scroll-me": A()
      }],
      /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mt": [{
        "scroll-mt": A()
      }],
      /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mr": [{
        "scroll-mr": A()
      }],
      /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mb": [{
        "scroll-mb": A()
      }],
      /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ml": [{
        "scroll-ml": A()
      }],
      /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-p": [{
        "scroll-p": A()
      }],
      /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-px": [{
        "scroll-px": A()
      }],
      /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-py": [{
        "scroll-py": A()
      }],
      /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-ps": [{
        "scroll-ps": A()
      }],
      /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pe": [{
        "scroll-pe": A()
      }],
      /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pt": [{
        "scroll-pt": A()
      }],
      /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pr": [{
        "scroll-pr": A()
      }],
      /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pb": [{
        "scroll-pb": A()
      }],
      /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pl": [{
        "scroll-pl": A()
      }],
      /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */
      "snap-align": [{
        snap: ["start", "end", "center", "align-none"]
      }],
      /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */
      "snap-stop": [{
        snap: ["normal", "always"]
      }],
      /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-type": [{
        snap: ["none", "x", "y", "both"]
      }],
      /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-strictness": [{
        snap: ["mandatory", "proximity"]
      }],
      /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */
      touch: [{
        touch: ["auto", "none", "manipulation"]
      }],
      /**
       * Touch Action X
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-x": [{
        "touch-pan": ["x", "left", "right"]
      }],
      /**
       * Touch Action Y
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-y": [{
        "touch-pan": ["y", "up", "down"]
      }],
      /**
       * Touch Action Pinch Zoom
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-pz": ["touch-pinch-zoom"],
      /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */
      select: [{
        select: ["none", "text", "all", "auto"]
      }],
      /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */
      "will-change": [{
        "will-change": ["auto", "scroll", "contents", "transform", iZ]
      }],
      // SVG
      /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */
      fill: [{
        fill: [l, "none"]
      }],
      /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */
      "stroke-w": [{
        stroke: [Zd, _d, HK]
      }],
      /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */
      stroke: [{
        stroke: [l, "none"]
      }],
      // Accessibility
      /**
       * Screen Readers
       * @see https://tailwindcss.com/docs/screen-readers
       */
      sr: ["sr-only", "not-sr-only"],
      /**
       * Forced Color Adjust
       * @see https://tailwindcss.com/docs/forced-color-adjust
       */
      "forced-color-adjust": [{
        "forced-color-adjust": ["auto", "none"]
      }]
    },
    conflictingClassGroups: {
      overflow: ["overflow-x", "overflow-y"],
      overscroll: ["overscroll-x", "overscroll-y"],
      inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
      "inset-x": ["right", "left"],
      "inset-y": ["top", "bottom"],
      flex: ["basis", "grow", "shrink"],
      gap: ["gap-x", "gap-y"],
      p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
      px: ["pr", "pl"],
      py: ["pt", "pb"],
      m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
      mx: ["mr", "ml"],
      my: ["mt", "mb"],
      size: ["w", "h"],
      "font-size": ["leading"],
      "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
      "fvn-ordinal": ["fvn-normal"],
      "fvn-slashed-zero": ["fvn-normal"],
      "fvn-figure": ["fvn-normal"],
      "fvn-spacing": ["fvn-normal"],
      "fvn-fraction": ["fvn-normal"],
      "line-clamp": ["display", "overflow"],
      rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
      "rounded-s": ["rounded-ss", "rounded-es"],
      "rounded-e": ["rounded-se", "rounded-ee"],
      "rounded-t": ["rounded-tl", "rounded-tr"],
      "rounded-r": ["rounded-tr", "rounded-br"],
      "rounded-b": ["rounded-br", "rounded-bl"],
      "rounded-l": ["rounded-tl", "rounded-bl"],
      "border-spacing": ["border-spacing-x", "border-spacing-y"],
      "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
      "border-w-x": ["border-w-r", "border-w-l"],
      "border-w-y": ["border-w-t", "border-w-b"],
      "border-color": ["border-color-s", "border-color-e", "border-color-t", "border-color-r", "border-color-b", "border-color-l"],
      "border-color-x": ["border-color-r", "border-color-l"],
      "border-color-y": ["border-color-t", "border-color-b"],
      "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
      "scroll-mx": ["scroll-mr", "scroll-ml"],
      "scroll-my": ["scroll-mt", "scroll-mb"],
      "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
      "scroll-px": ["scroll-pr", "scroll-pl"],
      "scroll-py": ["scroll-pt", "scroll-pb"],
      touch: ["touch-x", "touch-y", "touch-pz"],
      "touch-x": ["touch"],
      "touch-y": ["touch"],
      "touch-pz": ["touch"]
    },
    conflictingClassGroupModifiers: {
      "font-size": ["leading"]
    }
  };
}, lb = /* @__PURE__ */ CB(OB);
function Um(l, Z) {
  return nW(l, (u) => lb(Z, u));
}
const NV = [
  "focus-visible:outline",
  "focus-visible:outline-2",
  "focus-visible:outline-blue-500",
  "focus-visible:outline-offset-2",
  "focus-visible:group-data-[readonly]:outline-blue-300"
].join(" "), C_ = [
  "focus-visible:ring-1",
  "focus-visible:ring-inset",
  "focus-visible:ring-blue-500",
  "focus-visible:border-blue-500",
  "focus-visible:invalid:border-blue-500",
  "focus-visible:group-invalid:border-blue-500",
  "focus-visible:[&[readonly]]:ring-blue-300",
  "focus-visible:[&[readonly]]:border-blue-300",
  "focus-visible:[&:has(:is([readonly],[aria-readonly]))]:ring-blue-300",
  "focus-visible:[&:has(:is([readonly],[aria-readonly]))]:border-blue-300"
].join(" "), r_ = [
  "group",
  // Label style
  "[&_[data-ui=label]:not([class*=mb-])]:mb-1",
  "[&_[data-ui=label]:not([class*=mb-]):has(+:is(input,textarea,[data-ui=control]))]:mb-2",
  // Description style
  "[&>:is(input,[data-ui=control])+[data-ui=description]:not([class*=mt-])]:mt-2",
  "[&>textarea+[data-ui=description]:not([class*=mt-])]:mt-0.5",
  "[&_[data-ui=description]:not([class*=mb-]):has(+:is(input,textarea,[data-ui=control]))]:mb-3",
  // Error
  "[&>:is(input,textarea,[data-ui=control])+[data-ui=errorMessage]:not([class*=mt-])]:mt-2",
  "[&:has([data-ui=description]+[data-ui=errorMessage])_[data-ui=errorMessage]]:mt-1"
].join(" "), F_ = [
  "after:pointer-events-none",
  "after:absolute",
  "after:border-muted",
  "hover:after:border-foreground",
  "after:content-['']",
  "after:size-[9px] after:sm:size-[7.5px]",
  "after:border-b-[1.5px] after:border-r-[1.5px]",
  "after:bottom-[55%] after:end-2.5 after:-translate-x-1/2 after:translate-y-1/2 after:rotate-45 rtl:after:translate-x-1.5"
].join(" ");
function nG({
  children: l,
  "aria-label": Z,
  ...u
}) {
  const s = tl.Children.only(l);
  return /* @__PURE__ */ B.jsxs(B.Fragment, { children: [
    tl.cloneElement(s, {
      "aria-hidden": "true",
      "aria-label": void 0,
      "data-ui": "icon",
      focusable: "false",
      ...u
    }),
    Z ? /* @__PURE__ */ B.jsx("span", { className: "sr-only", children: Z }) : null
  ] });
}
function AB({
  "aria-label": l,
  ...Z
}) {
  return /* @__PURE__ */ B.jsx(nG, { "aria-label": l, children: /* @__PURE__ */ B.jsx(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 20 20",
      fill: "currentColor",
      strokeWidth: "2",
      ...Z,
      children: /* @__PURE__ */ B.jsx(
        "path",
        {
          fillRule: "evenodd",
          d: "M16.704 4.153a.75.75 0 0 1 .143 1.052l-8 10.5a.75.75 0 0 1-1.127.075l-4.5-4.5a.75.75 0 0 1 1.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 0 1 1.05-.143Z",
          clipRule: "evenodd"
        }
      )
    }
  ) });
}
function $B({
  "aria-label": l,
  ...Z
}) {
  return /* @__PURE__ */ B.jsx(nG, { "aria-label": l, children: /* @__PURE__ */ B.jsx(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: "currentColor",
      strokeWidth: "2",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      ...Z,
      children: /* @__PURE__ */ B.jsx("path", { d: "m6 9 6 6 6-6" })
    }
  ) });
}
function qB({
  "aria-label": l,
  ...Z
}) {
  return /* @__PURE__ */ B.jsx(nG, { "aria-label": l, children: /* @__PURE__ */ B.jsx(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: "currentColor",
      strokeWidth: "2",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      ...Z,
      children: /* @__PURE__ */ B.jsx("path", { d: "m9 18 6-6-6-6" })
    }
  ) });
}
function _B({
  className: l,
  "aria-label": Z,
  ...u
}) {
  return /* @__PURE__ */ B.jsx(nG, { "aria-label": Z, children: /* @__PURE__ */ B.jsxs(
    "svg",
    {
      className: lb("animate-spin", l),
      xmlns: "http://www.w3.org/2000/svg",
      fill: "none",
      viewBox: "0 0 24 24",
      ...u,
      children: [
        /* @__PURE__ */ B.jsx(
          "circle",
          {
            className: "opacity-25",
            cx: "12",
            cy: "12",
            r: "10",
            stroke: "currentColor",
            strokeWidth: "4"
          }
        ),
        /* @__PURE__ */ B.jsx(
          "path",
          {
            className: "opacity-75",
            fill: "currentColor",
            d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
          }
        )
      ]
    }
  ) });
}
function lD(l) {
  const Z = gh(Ba), u = (Z == null ? void 0 : Z.trigger) === "SubmenuTrigger";
  let s = 8;
  return s = l.offset !== void 0 ? l.offset : u ? s - 14 : s, /* @__PURE__ */ B.jsx(
    iB,
    {
      ...l,
      offset: s,
      className: Um(l.className, [
        "bg-white",
        "dark:bg-zinc-900",
        "shadow-md",
        "rounded-lg",
        "ring-1",
        "ring-zinc-950/10",
        "dark:ring-zinc-800",
        "entering:animate-in",
        "entering:ease-out",
        "entering:fade-in",
        "entering:placement-left:slide-in-from-right-1",
        "entering:placement-right:slide-in-from-left-1",
        "entering:placement-top:slide-in-from-bottom-1",
        "entering:placement-bottom:slide-in-from-top-1",
        "entering:duration-50",
        "exiting:animate-out",
        "exiting:ease-in",
        "exiting:fade-out",
        "exiting:placement-left:slide-out-to-right-1",
        "exiting:placement-right:slide-out-to-left-1",
        "exiting:placement-top:slide-out-to-bottom-1",
        "exiting:placement-bottom:slide-out-to-top-1",
        "exiting:duration-50"
      ])
    }
  );
}
function iU({
  children: l,
  ...Z
}) {
  return "asChild" in Z && delete Z.asChild, tl.isValidElement(l) ? tl.cloneElement(l, {
    ...Z,
    ...l.props,
    style: {
      ...Z.style,
      ...l.props.style
    },
    className: lb(
      Z.className,
      l.props.className
    )
  }) : (tl.Children.count(l) > 1 && tl.Children.only(null), null);
}
const g2 = [
  "relative inline-flex cursor-pointer items-center gap-1 rounded-lg outline-none hover:underline",
  "text-base/6 sm:text-sm/6",
  "disabled:no-underline disabled:opacity-50 disabled:cursor-default",
  "[&.border]:hover:no-underline"
].join(" ");
tl.forwardRef(
  function(Z, u) {
    if (Z.asChild)
      return /* @__PURE__ */ B.jsx(iU, { className: lb(g2), children: Z.children });
    const { asChild: s, ...G } = Z;
    return /* @__PURE__ */ B.jsx(
      w4,
      {
        ...G,
        ref: u,
        className: Um(Z.className, [
          g2,
          NV
        ])
      }
    );
  }
);
function ZD({
  className: l,
  elementType: Z,
  children: u,
  ...s
}) {
  return tl.createElement(
    Z ?? "p",
    {
      ...s,
      className: lb(
        "text-pretty text-base/6 text-muted sm:text-sm/6",
        l
      )
    },
    u
  );
}
function cD({ className: l, ...Z }) {
  return /* @__PURE__ */ B.jsx(
    ZD,
    {
      ...Z,
      elementType: "small",
      className: lb("text-sm sm:text-xs", l)
    }
  );
}
const v2 = {
  base: [
    "group relative inline-flex gap-x-2 justify-center items-center",
    "font-semibold text-base/6 sm:text-sm/6 whitespace-nowrap outline-none rounded-lg"
  ],
  solid: [
    "border border-[var(--btn-bg)] dark:border-none dark:[--border-with:0px]",
    "bg-[var(--btn-bg)] hover:bg-[var(--btn-bg-hover)] pressed:bg-[var(--btn-bg-hover)]",
    "shadow-[inset_0_1px_0_0_rgba(255,255,255,0.1)]",
    "text-white"
  ],
  outline: [
    "border border-zinc-950/10 dark:border-white/15 border-b-zinc-950/15 dark:border-b-white/20",
    "hover:bg-zinc-50 pressed:bg-zinc-50 dark:hover:bg-zinc-800 dark:pressed:bg-zinc-800",
    "shadow-sm",
    "text-[var(--btn-color)]"
  ],
  plain: [
    "[--border-with:0px]",
    "hover:bg-zinc-100 dark:hover:bg-zinc-800",
    "text-[var(--btn-color)]"
  ]
}, bD = {
  sm: {
    button: [
      "h-8 sm:h-7 px-2 text-sm/6 sm:text-xs/6 rounded-md",
      "[&_svg:not([class*=size-])]:size-3"
    ],
    iconOnly: [
      "size-8 sm:size-7 rounded-md",
      "[&_svg:not([class*=size-])]:size-5",
      "sm:[&_svg:not([class*=size-])]:size-4"
    ]
  },
  md: {
    // H: 44px, sm:36px
    button: [
      "px-3 py-[calc(theme(spacing[2.5])-var(--border-with,1px))]",
      "sm:py-[calc(theme(spacing[1.5])-var(--border-with,1px))]",
      "[&_svg:not([class*=size-])]:size-5",
      "sm:[&_svg:not([class*=size-])]:size-4"
    ],
    iconOnly: [
      "p-[calc(theme(spacing[2.5])-var(--border-with,1px))]",
      "sm:p-[calc(theme(spacing[1.5])-var(--border-with,1px))]",
      // 20+2x2=24px
      "[&_svg:not([class*=size-])]:size-5",
      "[&_svg]:m-0.5",
      // 16+4x2=24px
      "sm:[&_svg:not([class*=size-])]:size-4",
      "sm:[&_svg]:m-1"
    ]
  },
  lg: {
    button: [
      "px-4 py-[calc(theme(spacing[2.5])-var(--border-with,1px))]",
      "[&_svg:not([class*=size-])]:size-5"
    ],
    iconOnly: [
      "p-[calc(theme(spacing[2.5])-var(--border-with,1px))]",
      "[&_svg:not([class*=size-])]:size-5",
      "[&_svg]:m-0.5"
    ]
  }
};
function T2({
  size: l,
  color: Z,
  isIconOnly: u,
  variant: s = "solid"
}) {
  if (s === "unstyle")
    return "relative outline-none rounded-lg";
  const G = l ?? "md", i = u ? "iconOnly" : "button", m = {
    accent: [
      "[--btn-bg:theme(colors.accent)]",
      "[--btn-bg-hover:theme(colors.accent/90%)]"
    ],
    destructive: [
      "[--btn-bg:theme(colors.destructive)]",
      "[--btn-bg-hover:theme(colors.destructive/90%)]"
    ],
    success: [
      "[--btn-bg:theme(colors.success)]",
      "[--btn-bg-hover:theme(colors.success/90%)]"
    ]
  }, a = {
    foreground: "[--btn-color:theme(colors.foreground)]",
    accent: "[--btn-color:theme(colors.accent)]",
    destructive: "[--btn-color:theme(colors.destructive)]",
    success: "[--btn-color:theme(colors.success)]"
  };
  return [
    v2.base,
    v2[s],
    s == "solid" ? [m[Z ?? "accent"]] : [a[Z ?? "foreground"]],
    bD[G][i]
  ];
}
const uD = tl.forwardRef(
  function(Z, u) {
    if (Z.asChild)
      return /* @__PURE__ */ B.jsx(iU, { className: lb(T2(Z)), children: Z.children });
    const {
      asChild: s,
      children: G,
      isCustomPending: i,
      pendingLabel: m,
      size: a,
      color: n,
      variant: p = "solid",
      isIconOnly: y,
      ...h
    } = Z;
    return /* @__PURE__ */ B.jsx(B.Fragment, { children: /* @__PURE__ */ B.jsx(
      T4,
      {
        ...h,
        ref: u,
        "data-variant": p,
        className: Um(Z.className, [
          T2({ size: a, color: n, isIconOnly: y, variant: p }),
          NV,
          "disabled:opacity-50",
          "data-[pending]:opacity-75",
          !i && "data-[pending]:text-transparent"
        ]),
        children: (S) => /* @__PURE__ */ B.jsxs(B.Fragment, { children: [
          S.isPending && /* @__PURE__ */ B.jsx(
            _B,
            {
              "aria-label": m,
              className: lb(
                "absolute",
                "text-foreground",
                "group-data-[variant=solid]:text-zinc-300",
                i ? "group-data-[pending]:sr-only" : "group-data-[pending]:flex"
              )
            }
          ),
          /* @__PURE__ */ B.jsx(
            "span",
            {
              className: "contents",
              ...S.isPending && { "aria-hidden": !0 },
              children: typeof G == "function" ? G(S) : G
            }
          ),
          /* @__PURE__ */ B.jsx(
            "span",
            {
              className: "absolute left-1/2 top-1/2 size-[max(100%,2.75rem)] -translate-x-1/2 -translate-y-1/2 [@media(pointer:fine)]:hidden",
              "aria-hidden": "true"
            }
          )
        ] })
      }
    ) });
  }
);
function f2() {
  return /* @__PURE__ */ B.jsx("div", { className: "absolute bg-white bg-opacity-60 z-10 h-full w-full flex items-center justify-center", children: /* @__PURE__ */ B.jsxs("div", { className: "flex items-center", children: [
    /* @__PURE__ */ B.jsx("span", { className: "text-3xl mr-4", children: "Loading" }),
    /* @__PURE__ */ B.jsxs("svg", { className: "animate-spin h-8 w-8 text-gray-800", xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", children: [
      /* @__PURE__ */ B.jsx("circle", { className: "opacity-25", cx: "12", cy: "12", r: "10", stroke: "currentColor", strokeWidth: "4" }),
      /* @__PURE__ */ B.jsx(
        "path",
        {
          className: "opacity-75",
          fill: "currentColor",
          d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
        }
      )
    ] })
  ] }) });
}
function sD({
  title: l,
  titleId: Z,
  ...u
}, s) {
  return /* @__PURE__ */ M.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 1.5,
    stroke: "currentColor",
    "aria-hidden": "true",
    "data-slot": "icon",
    ref: s,
    "aria-labelledby": Z
  }, u), l ? /* @__PURE__ */ M.createElement("title", {
    id: Z
  }, l) : null, /* @__PURE__ */ M.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M17.25 8.25 21 12m0 0-3.75 3.75M21 12H3"
  }));
}
const dD = /* @__PURE__ */ M.forwardRef(sD);
function GD({
  title: l,
  titleId: Z,
  ...u
}, s) {
  return /* @__PURE__ */ M.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 1.5,
    stroke: "currentColor",
    "aria-hidden": "true",
    "data-slot": "icon",
    ref: s,
    "aria-labelledby": Z
  }, u), l ? /* @__PURE__ */ M.createElement("title", {
    id: Z
  }, l) : null, /* @__PURE__ */ M.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "m15 15 6-6m0 0-6-6m6 6H9a6 6 0 0 0 0 12h3"
  }));
}
const mD = /* @__PURE__ */ M.forwardRef(GD);
function iD({
  title: l,
  titleId: Z,
  ...u
}, s) {
  return /* @__PURE__ */ M.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 1.5,
    stroke: "currentColor",
    "aria-hidden": "true",
    "data-slot": "icon",
    ref: s,
    "aria-labelledby": Z
  }, u), l ? /* @__PURE__ */ M.createElement("title", {
    id: Z
  }, l) : null, /* @__PURE__ */ M.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M3.75 9h16.5m-16.5 6.75h16.5"
  }));
}
const oD = /* @__PURE__ */ M.forwardRef(iD);
function eD({
  title: l,
  titleId: Z,
  ...u
}, s) {
  return /* @__PURE__ */ M.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 1.5,
    stroke: "currentColor",
    "aria-hidden": "true",
    "data-slot": "icon",
    ref: s,
    "aria-labelledby": Z
  }, u), l ? /* @__PURE__ */ M.createElement("title", {
    id: Z
  }, l) : null, /* @__PURE__ */ M.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "m8.25 4.5 7.5 7.5-7.5 7.5"
  }));
}
const aD = /* @__PURE__ */ M.forwardRef(eD);
function nD({
  title: l,
  titleId: Z,
  ...u
}, s) {
  return /* @__PURE__ */ M.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 1.5,
    stroke: "currentColor",
    "aria-hidden": "true",
    "data-slot": "icon",
    ref: s,
    "aria-labelledby": Z
  }, u), l ? /* @__PURE__ */ M.createElement("title", {
    id: Z
  }, l) : null, /* @__PURE__ */ M.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 12h3.75M9 15h3.75M9 18h3.75m3 .75H18a2.25 2.25 0 0 0 2.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 0 0-1.123-.08m-5.801 0c-.065.21-.1.433-.1.664 0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75 2.25 2.25 0 0 0-.1-.664m-5.8 0A2.251 2.251 0 0 1 13.5 2.25H15c1.012 0 1.867.668 2.15 1.586m-5.8 0c-.376.023-.75.05-1.124.08C9.095 4.01 8.25 4.973 8.25 6.108V8.25m0 0H4.875c-.621 0-1.125.504-1.125 1.125v11.25c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V9.375c0-.621-.504-1.125-1.125-1.125H8.25ZM6.75 12h.008v.008H6.75V12Zm0 3h.008v.008H6.75V15Zm0 3h.008v.008H6.75V18Z"
  }));
}
const pD = /* @__PURE__ */ M.forwardRef(nD);
function LD({
  title: l,
  titleId: Z,
  ...u
}, s) {
  return /* @__PURE__ */ M.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 1.5,
    stroke: "currentColor",
    "aria-hidden": "true",
    "data-slot": "icon",
    ref: s,
    "aria-labelledby": Z
  }, u), l ? /* @__PURE__ */ M.createElement("title", {
    id: Z
  }, l) : null, /* @__PURE__ */ M.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M4.5 12a7.5 7.5 0 0 0 15 0m-15 0a7.5 7.5 0 1 1 15 0m-15 0H3m16.5 0H21m-1.5 0H12m-8.457 3.077 1.41-.513m14.095-5.13 1.41-.513M5.106 17.785l1.15-.964m11.49-9.642 1.149-.964M7.501 19.795l.75-1.3m7.5-12.99.75-1.3m-6.063 16.658.26-1.477m2.605-14.772.26-1.477m0 17.726-.26-1.477M10.698 4.614l-.26-1.477M16.5 19.794l-.75-1.299M7.5 4.205 12 12m6.894 5.785-1.149-.964M6.256 7.178l-1.15-.964m15.352 8.864-1.41-.513M4.954 9.435l-1.41-.514M12.002 12l-3.75 6.495"
  }));
}
const hD = /* @__PURE__ */ M.forwardRef(LD);
function Lc(l) {
  if (typeof l == "string" || typeof l == "number") return "" + l;
  let Z = "";
  if (Array.isArray(l))
    for (let u = 0, s; u < l.length; u++)
      (s = Lc(l[u])) !== "" && (Z += (Z && " ") + s);
  else
    for (let u in l)
      l[u] && (Z += (Z && " ") + u);
  return Z;
}
var yD = { value: () => {
} };
function Bh() {
  for (var l = 0, Z = arguments.length, u = {}, s; l < Z; ++l) {
    if (!(s = arguments[l] + "") || s in u || /[\s.]/.test(s)) throw new Error("illegal type: " + s);
    u[s] = [];
  }
  return new dh(u);
}
function dh(l) {
  this._ = l;
}
function SD(l, Z) {
  return l.trim().split(/^|\s+/).map(function(u) {
    var s = "", G = u.indexOf(".");
    if (G >= 0 && (s = u.slice(G + 1), u = u.slice(0, G)), u && !Z.hasOwnProperty(u)) throw new Error("unknown type: " + u);
    return { type: u, name: s };
  });
}
dh.prototype = Bh.prototype = {
  constructor: dh,
  on: function(l, Z) {
    var u = this._, s = SD(l + "", u), G, i = -1, m = s.length;
    if (arguments.length < 2) {
      for (; ++i < m; ) if ((G = (l = s[i]).type) && (G = tD(u[G], l.name))) return G;
      return;
    }
    if (Z != null && typeof Z != "function") throw new Error("invalid callback: " + Z);
    for (; ++i < m; )
      if (G = (l = s[i]).type) u[G] = E2(u[G], l.name, Z);
      else if (Z == null) for (G in u) u[G] = E2(u[G], l.name, null);
    return this;
  },
  copy: function() {
    var l = {}, Z = this._;
    for (var u in Z) l[u] = Z[u].slice();
    return new dh(l);
  },
  call: function(l, Z) {
    if ((G = arguments.length - 2) > 0) for (var u = new Array(G), s = 0, G, i; s < G; ++s) u[s] = arguments[s + 2];
    if (!this._.hasOwnProperty(l)) throw new Error("unknown type: " + l);
    for (i = this._[l], s = 0, G = i.length; s < G; ++s) i[s].value.apply(Z, u);
  },
  apply: function(l, Z, u) {
    if (!this._.hasOwnProperty(l)) throw new Error("unknown type: " + l);
    for (var s = this._[l], G = 0, i = s.length; G < i; ++G) s[G].value.apply(Z, u);
  }
};
function tD(l, Z) {
  for (var u = 0, s = l.length, G; u < s; ++u)
    if ((G = l[u]).name === Z)
      return G.value;
}
function E2(l, Z, u) {
  for (var s = 0, G = l.length; s < G; ++s)
    if (l[s].name === Z) {
      l[s] = yD, l = l.slice(0, s).concat(l.slice(s + 1));
      break;
    }
  return u != null && l.push({ name: Z, value: u }), l;
}
var IW = "http://www.w3.org/1999/xhtml";
const B2 = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: IW,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};
function Dh(l) {
  var Z = l += "", u = Z.indexOf(":");
  return u >= 0 && (Z = l.slice(0, u)) !== "xmlns" && (l = l.slice(u + 1)), B2.hasOwnProperty(Z) ? { space: B2[Z], local: l } : l;
}
function XD(l) {
  return function() {
    var Z = this.ownerDocument, u = this.namespaceURI;
    return u === IW && Z.documentElement.namespaceURI === IW ? Z.createElement(l) : Z.createElementNS(u, l);
  };
}
function KD(l) {
  return function() {
    return this.ownerDocument.createElementNS(l.space, l.local);
  };
}
function oU(l) {
  var Z = Dh(l);
  return (Z.local ? KD : XD)(Z);
}
function WD() {
}
function wV(l) {
  return l == null ? WD : function() {
    return this.querySelector(l);
  };
}
function VD(l) {
  typeof l != "function" && (l = wV(l));
  for (var Z = this._groups, u = Z.length, s = new Array(u), G = 0; G < u; ++G)
    for (var i = Z[G], m = i.length, a = s[G] = new Array(m), n, p, y = 0; y < m; ++y)
      (n = i[y]) && (p = l.call(n, n.__data__, y, i)) && ("__data__" in n && (p.__data__ = n.__data__), a[y] = p);
  return new Zu(s, this._parents);
}
function xD(l) {
  return l == null ? [] : Array.isArray(l) ? l : Array.from(l);
}
function RD() {
  return [];
}
function eU(l) {
  return l == null ? RD : function() {
    return this.querySelectorAll(l);
  };
}
function YD(l) {
  return function() {
    return xD(l.apply(this, arguments));
  };
}
function kD(l) {
  typeof l == "function" ? l = YD(l) : l = eU(l);
  for (var Z = this._groups, u = Z.length, s = [], G = [], i = 0; i < u; ++i)
    for (var m = Z[i], a = m.length, n, p = 0; p < a; ++p)
      (n = m[p]) && (s.push(l.call(n, n.__data__, p, m)), G.push(n));
  return new Zu(s, G);
}
function aU(l) {
  return function() {
    return this.matches(l);
  };
}
function nU(l) {
  return function(Z) {
    return Z.matches(l);
  };
}
var MD = Array.prototype.find;
function ID(l) {
  return function() {
    return MD.call(this.children, l);
  };
}
function UD() {
  return this.firstElementChild;
}
function CD(l) {
  return this.select(l == null ? UD : ID(typeof l == "function" ? l : nU(l)));
}
var rD = Array.prototype.filter;
function FD() {
  return Array.from(this.children);
}
function ND(l) {
  return function() {
    return rD.call(this.children, l);
  };
}
function wD(l) {
  return this.selectAll(l == null ? FD : ND(typeof l == "function" ? l : nU(l)));
}
function zD(l) {
  typeof l != "function" && (l = aU(l));
  for (var Z = this._groups, u = Z.length, s = new Array(u), G = 0; G < u; ++G)
    for (var i = Z[G], m = i.length, a = s[G] = [], n, p = 0; p < m; ++p)
      (n = i[p]) && l.call(n, n.__data__, p, i) && a.push(n);
  return new Zu(s, this._parents);
}
function pU(l) {
  return new Array(l.length);
}
function JD() {
  return new Zu(this._enter || this._groups.map(pU), this._parents);
}
function th(l, Z) {
  this.ownerDocument = l.ownerDocument, this.namespaceURI = l.namespaceURI, this._next = null, this._parent = l, this.__data__ = Z;
}
th.prototype = {
  constructor: th,
  appendChild: function(l) {
    return this._parent.insertBefore(l, this._next);
  },
  insertBefore: function(l, Z) {
    return this._parent.insertBefore(l, Z);
  },
  querySelector: function(l) {
    return this._parent.querySelector(l);
  },
  querySelectorAll: function(l) {
    return this._parent.querySelectorAll(l);
  }
};
function HD(l) {
  return function() {
    return l;
  };
}
function gD(l, Z, u, s, G, i) {
  for (var m = 0, a, n = Z.length, p = i.length; m < p; ++m)
    (a = Z[m]) ? (a.__data__ = i[m], s[m] = a) : u[m] = new th(l, i[m]);
  for (; m < n; ++m)
    (a = Z[m]) && (G[m] = a);
}
function vD(l, Z, u, s, G, i, m) {
  var a, n, p = /* @__PURE__ */ new Map(), y = Z.length, h = i.length, S = new Array(y), t;
  for (a = 0; a < y; ++a)
    (n = Z[a]) && (S[a] = t = m.call(n, n.__data__, a, Z) + "", p.has(t) ? G[a] = n : p.set(t, n));
  for (a = 0; a < h; ++a)
    t = m.call(l, i[a], a, i) + "", (n = p.get(t)) ? (s[a] = n, n.__data__ = i[a], p.delete(t)) : u[a] = new th(l, i[a]);
  for (a = 0; a < y; ++a)
    (n = Z[a]) && p.get(S[a]) === n && (G[a] = n);
}
function TD(l) {
  return l.__data__;
}
function fD(l, Z) {
  if (!arguments.length) return Array.from(this, TD);
  var u = Z ? vD : gD, s = this._parents, G = this._groups;
  typeof l != "function" && (l = HD(l));
  for (var i = G.length, m = new Array(i), a = new Array(i), n = new Array(i), p = 0; p < i; ++p) {
    var y = s[p], h = G[p], S = h.length, t = ED(l.call(y, y && y.__data__, p, s)), W = t.length, V = a[p] = new Array(W), R = m[p] = new Array(W), x = n[p] = new Array(S);
    u(y, h, V, R, x, t, Z);
    for (var r = 0, k = 0, U, w; r < W; ++r)
      if (U = V[r]) {
        for (r >= k && (k = r + 1); !(w = R[k]) && ++k < W; ) ;
        U._next = w || null;
      }
  }
  return m = new Zu(m, s), m._enter = a, m._exit = n, m;
}
function ED(l) {
  return typeof l == "object" && "length" in l ? l : Array.from(l);
}
function BD() {
  return new Zu(this._exit || this._groups.map(pU), this._parents);
}
function DD(l, Z, u) {
  var s = this.enter(), G = this, i = this.exit();
  return typeof l == "function" ? (s = l(s), s && (s = s.selection())) : s = s.append(l + ""), Z != null && (G = Z(G), G && (G = G.selection())), u == null ? i.remove() : u(i), s && G ? s.merge(G).order() : G;
}
function jD(l) {
  for (var Z = l.selection ? l.selection() : l, u = this._groups, s = Z._groups, G = u.length, i = s.length, m = Math.min(G, i), a = new Array(G), n = 0; n < m; ++n)
    for (var p = u[n], y = s[n], h = p.length, S = a[n] = new Array(h), t, W = 0; W < h; ++W)
      (t = p[W] || y[W]) && (S[W] = t);
  for (; n < G; ++n)
    a[n] = u[n];
  return new Zu(a, this._parents);
}
function QD() {
  for (var l = this._groups, Z = -1, u = l.length; ++Z < u; )
    for (var s = l[Z], G = s.length - 1, i = s[G], m; --G >= 0; )
      (m = s[G]) && (i && m.compareDocumentPosition(i) ^ 4 && i.parentNode.insertBefore(m, i), i = m);
  return this;
}
function PD(l) {
  l || (l = OD);
  function Z(h, S) {
    return h && S ? l(h.__data__, S.__data__) : !h - !S;
  }
  for (var u = this._groups, s = u.length, G = new Array(s), i = 0; i < s; ++i) {
    for (var m = u[i], a = m.length, n = G[i] = new Array(a), p, y = 0; y < a; ++y)
      (p = m[y]) && (n[y] = p);
    n.sort(Z);
  }
  return new Zu(G, this._parents).order();
}
function OD(l, Z) {
  return l < Z ? -1 : l > Z ? 1 : l >= Z ? 0 : NaN;
}
function AD() {
  var l = arguments[0];
  return arguments[0] = this, l.apply(null, arguments), this;
}
function $D() {
  return Array.from(this);
}
function qD() {
  for (var l = this._groups, Z = 0, u = l.length; Z < u; ++Z)
    for (var s = l[Z], G = 0, i = s.length; G < i; ++G) {
      var m = s[G];
      if (m) return m;
    }
  return null;
}
function _D() {
  let l = 0;
  for (const Z of this) ++l;
  return l;
}
function lj() {
  return !this.node();
}
function Zj(l) {
  for (var Z = this._groups, u = 0, s = Z.length; u < s; ++u)
    for (var G = Z[u], i = 0, m = G.length, a; i < m; ++i)
      (a = G[i]) && l.call(a, a.__data__, i, G);
  return this;
}
function cj(l) {
  return function() {
    this.removeAttribute(l);
  };
}
function bj(l) {
  return function() {
    this.removeAttributeNS(l.space, l.local);
  };
}
function uj(l, Z) {
  return function() {
    this.setAttribute(l, Z);
  };
}
function sj(l, Z) {
  return function() {
    this.setAttributeNS(l.space, l.local, Z);
  };
}
function dj(l, Z) {
  return function() {
    var u = Z.apply(this, arguments);
    u == null ? this.removeAttribute(l) : this.setAttribute(l, u);
  };
}
function Gj(l, Z) {
  return function() {
    var u = Z.apply(this, arguments);
    u == null ? this.removeAttributeNS(l.space, l.local) : this.setAttributeNS(l.space, l.local, u);
  };
}
function mj(l, Z) {
  var u = Dh(l);
  if (arguments.length < 2) {
    var s = this.node();
    return u.local ? s.getAttributeNS(u.space, u.local) : s.getAttribute(u);
  }
  return this.each((Z == null ? u.local ? bj : cj : typeof Z == "function" ? u.local ? Gj : dj : u.local ? sj : uj)(u, Z));
}
function LU(l) {
  return l.ownerDocument && l.ownerDocument.defaultView || l.document && l || l.defaultView;
}
function ij(l) {
  return function() {
    this.style.removeProperty(l);
  };
}
function oj(l, Z, u) {
  return function() {
    this.style.setProperty(l, Z, u);
  };
}
function ej(l, Z, u) {
  return function() {
    var s = Z.apply(this, arguments);
    s == null ? this.style.removeProperty(l) : this.style.setProperty(l, s, u);
  };
}
function aj(l, Z, u) {
  return arguments.length > 1 ? this.each((Z == null ? ij : typeof Z == "function" ? ej : oj)(l, Z, u ?? "")) : ao(this.node(), l);
}
function ao(l, Z) {
  return l.style.getPropertyValue(Z) || LU(l).getComputedStyle(l, null).getPropertyValue(Z);
}
function nj(l) {
  return function() {
    delete this[l];
  };
}
function pj(l, Z) {
  return function() {
    this[l] = Z;
  };
}
function Lj(l, Z) {
  return function() {
    var u = Z.apply(this, arguments);
    u == null ? delete this[l] : this[l] = u;
  };
}
function hj(l, Z) {
  return arguments.length > 1 ? this.each((Z == null ? nj : typeof Z == "function" ? Lj : pj)(l, Z)) : this.node()[l];
}
function hU(l) {
  return l.trim().split(/^|\s+/);
}
function zV(l) {
  return l.classList || new yU(l);
}
function yU(l) {
  this._node = l, this._names = hU(l.getAttribute("class") || "");
}
yU.prototype = {
  add: function(l) {
    var Z = this._names.indexOf(l);
    Z < 0 && (this._names.push(l), this._node.setAttribute("class", this._names.join(" ")));
  },
  remove: function(l) {
    var Z = this._names.indexOf(l);
    Z >= 0 && (this._names.splice(Z, 1), this._node.setAttribute("class", this._names.join(" ")));
  },
  contains: function(l) {
    return this._names.indexOf(l) >= 0;
  }
};
function SU(l, Z) {
  for (var u = zV(l), s = -1, G = Z.length; ++s < G; ) u.add(Z[s]);
}
function tU(l, Z) {
  for (var u = zV(l), s = -1, G = Z.length; ++s < G; ) u.remove(Z[s]);
}
function yj(l) {
  return function() {
    SU(this, l);
  };
}
function Sj(l) {
  return function() {
    tU(this, l);
  };
}
function tj(l, Z) {
  return function() {
    (Z.apply(this, arguments) ? SU : tU)(this, l);
  };
}
function Xj(l, Z) {
  var u = hU(l + "");
  if (arguments.length < 2) {
    for (var s = zV(this.node()), G = -1, i = u.length; ++G < i; ) if (!s.contains(u[G])) return !1;
    return !0;
  }
  return this.each((typeof Z == "function" ? tj : Z ? yj : Sj)(u, Z));
}
function Kj() {
  this.textContent = "";
}
function Wj(l) {
  return function() {
    this.textContent = l;
  };
}
function Vj(l) {
  return function() {
    var Z = l.apply(this, arguments);
    this.textContent = Z ?? "";
  };
}
function xj(l) {
  return arguments.length ? this.each(l == null ? Kj : (typeof l == "function" ? Vj : Wj)(l)) : this.node().textContent;
}
function Rj() {
  this.innerHTML = "";
}
function Yj(l) {
  return function() {
    this.innerHTML = l;
  };
}
function kj(l) {
  return function() {
    var Z = l.apply(this, arguments);
    this.innerHTML = Z ?? "";
  };
}
function Mj(l) {
  return arguments.length ? this.each(l == null ? Rj : (typeof l == "function" ? kj : Yj)(l)) : this.node().innerHTML;
}
function Ij() {
  this.nextSibling && this.parentNode.appendChild(this);
}
function Uj() {
  return this.each(Ij);
}
function Cj() {
  this.previousSibling && this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function rj() {
  return this.each(Cj);
}
function Fj(l) {
  var Z = typeof l == "function" ? l : oU(l);
  return this.select(function() {
    return this.appendChild(Z.apply(this, arguments));
  });
}
function Nj() {
  return null;
}
function wj(l, Z) {
  var u = typeof l == "function" ? l : oU(l), s = Z == null ? Nj : typeof Z == "function" ? Z : wV(Z);
  return this.select(function() {
    return this.insertBefore(u.apply(this, arguments), s.apply(this, arguments) || null);
  });
}
function zj() {
  var l = this.parentNode;
  l && l.removeChild(this);
}
function Jj() {
  return this.each(zj);
}
function Hj() {
  var l = this.cloneNode(!1), Z = this.parentNode;
  return Z ? Z.insertBefore(l, this.nextSibling) : l;
}
function gj() {
  var l = this.cloneNode(!0), Z = this.parentNode;
  return Z ? Z.insertBefore(l, this.nextSibling) : l;
}
function vj(l) {
  return this.select(l ? gj : Hj);
}
function Tj(l) {
  return arguments.length ? this.property("__data__", l) : this.node().__data__;
}
function fj(l) {
  return function(Z) {
    l.call(this, Z, this.__data__);
  };
}
function Ej(l) {
  return l.trim().split(/^|\s+/).map(function(Z) {
    var u = "", s = Z.indexOf(".");
    return s >= 0 && (u = Z.slice(s + 1), Z = Z.slice(0, s)), { type: Z, name: u };
  });
}
function Bj(l) {
  return function() {
    var Z = this.__on;
    if (Z) {
      for (var u = 0, s = -1, G = Z.length, i; u < G; ++u)
        i = Z[u], (!l.type || i.type === l.type) && i.name === l.name ? this.removeEventListener(i.type, i.listener, i.options) : Z[++s] = i;
      ++s ? Z.length = s : delete this.__on;
    }
  };
}
function Dj(l, Z, u) {
  return function() {
    var s = this.__on, G, i = fj(Z);
    if (s) {
      for (var m = 0, a = s.length; m < a; ++m)
        if ((G = s[m]).type === l.type && G.name === l.name) {
          this.removeEventListener(G.type, G.listener, G.options), this.addEventListener(G.type, G.listener = i, G.options = u), G.value = Z;
          return;
        }
    }
    this.addEventListener(l.type, i, u), G = { type: l.type, name: l.name, value: Z, listener: i, options: u }, s ? s.push(G) : this.__on = [G];
  };
}
function jj(l, Z, u) {
  var s = Ej(l + ""), G, i = s.length, m;
  if (arguments.length < 2) {
    var a = this.node().__on;
    if (a) {
      for (var n = 0, p = a.length, y; n < p; ++n)
        for (G = 0, y = a[n]; G < i; ++G)
          if ((m = s[G]).type === y.type && m.name === y.name)
            return y.value;
    }
    return;
  }
  for (a = Z ? Dj : Bj, G = 0; G < i; ++G) this.each(a(s[G], Z, u));
  return this;
}
function XU(l, Z, u) {
  var s = LU(l), G = s.CustomEvent;
  typeof G == "function" ? G = new G(Z, u) : (G = s.document.createEvent("Event"), u ? (G.initEvent(Z, u.bubbles, u.cancelable), G.detail = u.detail) : G.initEvent(Z, !1, !1)), l.dispatchEvent(G);
}
function Qj(l, Z) {
  return function() {
    return XU(this, l, Z);
  };
}
function Pj(l, Z) {
  return function() {
    return XU(this, l, Z.apply(this, arguments));
  };
}
function Oj(l, Z) {
  return this.each((typeof Z == "function" ? Pj : Qj)(l, Z));
}
function* Aj() {
  for (var l = this._groups, Z = 0, u = l.length; Z < u; ++Z)
    for (var s = l[Z], G = 0, i = s.length, m; G < i; ++G)
      (m = s[G]) && (yield m);
}
var KU = [null];
function Zu(l, Z) {
  this._groups = l, this._parents = Z;
}
function yn() {
  return new Zu([[document.documentElement]], KU);
}
function $j() {
  return this;
}
Zu.prototype = yn.prototype = {
  constructor: Zu,
  select: VD,
  selectAll: kD,
  selectChild: CD,
  selectChildren: wD,
  filter: zD,
  data: fD,
  enter: JD,
  exit: BD,
  join: DD,
  merge: jD,
  selection: $j,
  order: QD,
  sort: PD,
  call: AD,
  nodes: $D,
  node: qD,
  size: _D,
  empty: lj,
  each: Zj,
  attr: mj,
  style: aj,
  property: hj,
  classed: Xj,
  text: xj,
  html: Mj,
  raise: Uj,
  lower: rj,
  append: Fj,
  insert: wj,
  remove: Jj,
  clone: vj,
  datum: Tj,
  on: jj,
  dispatch: Oj,
  [Symbol.iterator]: Aj
};
function lu(l) {
  return typeof l == "string" ? new Zu([[document.querySelector(l)]], [document.documentElement]) : new Zu([[l]], KU);
}
function qj(l) {
  let Z;
  for (; Z = l.sourceEvent; ) l = Z;
  return l;
}
function vu(l, Z) {
  if (l = qj(l), Z === void 0 && (Z = l.currentTarget), Z) {
    var u = Z.ownerSVGElement || Z;
    if (u.createSVGPoint) {
      var s = u.createSVGPoint();
      return s.x = l.clientX, s.y = l.clientY, s = s.matrixTransform(Z.getScreenCTM().inverse()), [s.x, s.y];
    }
    if (Z.getBoundingClientRect) {
      var G = Z.getBoundingClientRect();
      return [l.clientX - G.left - Z.clientLeft, l.clientY - G.top - Z.clientTop];
    }
  }
  return [l.pageX, l.pageY];
}
const _j = { passive: !1 }, Da = { capture: !0, passive: !1 };
function gK(l) {
  l.stopImmediatePropagation();
}
function Qi(l) {
  l.preventDefault(), l.stopImmediatePropagation();
}
function WU(l) {
  var Z = l.document.documentElement, u = lu(l).on("dragstart.drag", Qi, Da);
  "onselectstart" in Z ? u.on("selectstart.drag", Qi, Da) : (Z.__noselect = Z.style.MozUserSelect, Z.style.MozUserSelect = "none");
}
function VU(l, Z) {
  var u = l.document.documentElement, s = lu(l).on("dragstart.drag", null);
  Z && (s.on("click.drag", Qi, Da), setTimeout(function() {
    s.on("click.drag", null);
  }, 0)), "onselectstart" in u ? s.on("selectstart.drag", null) : (u.style.MozUserSelect = u.__noselect, delete u.__noselect);
}
const QL = (l) => () => l;
function UW(l, {
  sourceEvent: Z,
  subject: u,
  target: s,
  identifier: G,
  active: i,
  x: m,
  y: a,
  dx: n,
  dy: p,
  dispatch: y
}) {
  Object.defineProperties(this, {
    type: { value: l, enumerable: !0, configurable: !0 },
    sourceEvent: { value: Z, enumerable: !0, configurable: !0 },
    subject: { value: u, enumerable: !0, configurable: !0 },
    target: { value: s, enumerable: !0, configurable: !0 },
    identifier: { value: G, enumerable: !0, configurable: !0 },
    active: { value: i, enumerable: !0, configurable: !0 },
    x: { value: m, enumerable: !0, configurable: !0 },
    y: { value: a, enumerable: !0, configurable: !0 },
    dx: { value: n, enumerable: !0, configurable: !0 },
    dy: { value: p, enumerable: !0, configurable: !0 },
    _: { value: y }
  });
}
UW.prototype.on = function() {
  var l = this._.on.apply(this._, arguments);
  return l === this._ ? this : l;
};
function lQ(l) {
  return !l.ctrlKey && !l.button;
}
function ZQ() {
  return this.parentNode;
}
function cQ(l, Z) {
  return Z ?? { x: l.x, y: l.y };
}
function bQ() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function xU() {
  var l = lQ, Z = ZQ, u = cQ, s = bQ, G = {}, i = Bh("start", "drag", "end"), m = 0, a, n, p, y, h = 0;
  function S(U) {
    U.on("mousedown.drag", t).filter(s).on("touchstart.drag", R).on("touchmove.drag", x, _j).on("touchend.drag touchcancel.drag", r).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  function t(U, w) {
    if (!(y || !l.call(this, U, w))) {
      var z = k(this, Z.call(this, U, w), U, w, "mouse");
      z && (lu(U.view).on("mousemove.drag", W, Da).on("mouseup.drag", V, Da), WU(U.view), gK(U), p = !1, a = U.clientX, n = U.clientY, z("start", U));
    }
  }
  function W(U) {
    if (Qi(U), !p) {
      var w = U.clientX - a, z = U.clientY - n;
      p = w * w + z * z > h;
    }
    G.mouse("drag", U);
  }
  function V(U) {
    lu(U.view).on("mousemove.drag mouseup.drag", null), VU(U.view, p), Qi(U), G.mouse("end", U);
  }
  function R(U, w) {
    if (l.call(this, U, w)) {
      var z = U.changedTouches, D = Z.call(this, U, w), C = z.length, j, E;
      for (j = 0; j < C; ++j)
        (E = k(this, D, U, w, z[j].identifier, z[j])) && (gK(U), E("start", U, z[j]));
    }
  }
  function x(U) {
    var w = U.changedTouches, z = w.length, D, C;
    for (D = 0; D < z; ++D)
      (C = G[w[D].identifier]) && (Qi(U), C("drag", U, w[D]));
  }
  function r(U) {
    var w = U.changedTouches, z = w.length, D, C;
    for (y && clearTimeout(y), y = setTimeout(function() {
      y = null;
    }, 500), D = 0; D < z; ++D)
      (C = G[w[D].identifier]) && (gK(U), C("end", U, w[D]));
  }
  function k(U, w, z, D, C, j) {
    var E = i.copy(), g = vu(j || z, w), A, J, F;
    if ((F = u.call(U, new UW("beforestart", {
      sourceEvent: z,
      target: S,
      identifier: C,
      active: m,
      x: g[0],
      y: g[1],
      dx: 0,
      dy: 0,
      dispatch: E
    }), D)) != null)
      return A = F.x - g[0] || 0, J = F.y - g[1] || 0, function v(T, f, O) {
        var _ = g, il;
        switch (T) {
          case "start":
            G[C] = v, il = m++;
            break;
          case "end":
            delete G[C], --m;
          case "drag":
            g = vu(O || f, w), il = m;
            break;
        }
        E.call(
          T,
          U,
          new UW(T, {
            sourceEvent: f,
            subject: F,
            target: S,
            identifier: C,
            active: il,
            x: g[0] + A,
            y: g[1] + J,
            dx: g[0] - _[0],
            dy: g[1] - _[1],
            dispatch: E
          }),
          D
        );
      };
  }
  return S.filter = function(U) {
    return arguments.length ? (l = typeof U == "function" ? U : QL(!!U), S) : l;
  }, S.container = function(U) {
    return arguments.length ? (Z = typeof U == "function" ? U : QL(U), S) : Z;
  }, S.subject = function(U) {
    return arguments.length ? (u = typeof U == "function" ? U : QL(U), S) : u;
  }, S.touchable = function(U) {
    return arguments.length ? (s = typeof U == "function" ? U : QL(!!U), S) : s;
  }, S.on = function() {
    var U = i.on.apply(i, arguments);
    return U === i ? S : U;
  }, S.clickDistance = function(U) {
    return arguments.length ? (h = (U = +U) * U, S) : Math.sqrt(h);
  }, S;
}
function ko(l, Z, u) {
  l.prototype = Z.prototype = u, u.constructor = l;
}
function Sn(l, Z) {
  var u = Object.create(l.prototype);
  for (var s in Z) u[s] = Z[s];
  return u;
}
function hG() {
}
var Km = 0.7, no = 1 / Km, Pi = "\\s*([+-]?\\d+)\\s*", ja = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*", ys = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*", uQ = /^#([0-9a-f]{3,8})$/, sQ = new RegExp(`^rgb\\(${Pi},${Pi},${Pi}\\)$`), dQ = new RegExp(`^rgb\\(${ys},${ys},${ys}\\)$`), GQ = new RegExp(`^rgba\\(${Pi},${Pi},${Pi},${ja}\\)$`), mQ = new RegExp(`^rgba\\(${ys},${ys},${ys},${ja}\\)$`), iQ = new RegExp(`^hsl\\(${ja},${ys},${ys}\\)$`), oQ = new RegExp(`^hsla\\(${ja},${ys},${ys},${ja}\\)$`), D2 = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
ko(hG, Wm, {
  copy(l) {
    return Object.assign(new this.constructor(), this, l);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: j2,
  // Deprecated! Use color.formatHex.
  formatHex: j2,
  formatHex8: eQ,
  formatHsl: aQ,
  formatRgb: Q2,
  toString: Q2
});
function j2() {
  return this.rgb().formatHex();
}
function eQ() {
  return this.rgb().formatHex8();
}
function aQ() {
  return RU(this).formatHsl();
}
function Q2() {
  return this.rgb().formatRgb();
}
function Wm(l) {
  var Z, u;
  return l = (l + "").trim().toLowerCase(), (Z = uQ.exec(l)) ? (u = Z[1].length, Z = parseInt(Z[1], 16), u === 6 ? P2(Z) : u === 3 ? new vc(Z >> 8 & 15 | Z >> 4 & 240, Z >> 4 & 15 | Z & 240, (Z & 15) << 4 | Z & 15, 1) : u === 8 ? PL(Z >> 24 & 255, Z >> 16 & 255, Z >> 8 & 255, (Z & 255) / 255) : u === 4 ? PL(Z >> 12 & 15 | Z >> 8 & 240, Z >> 8 & 15 | Z >> 4 & 240, Z >> 4 & 15 | Z & 240, ((Z & 15) << 4 | Z & 15) / 255) : null) : (Z = sQ.exec(l)) ? new vc(Z[1], Z[2], Z[3], 1) : (Z = dQ.exec(l)) ? new vc(Z[1] * 255 / 100, Z[2] * 255 / 100, Z[3] * 255 / 100, 1) : (Z = GQ.exec(l)) ? PL(Z[1], Z[2], Z[3], Z[4]) : (Z = mQ.exec(l)) ? PL(Z[1] * 255 / 100, Z[2] * 255 / 100, Z[3] * 255 / 100, Z[4]) : (Z = iQ.exec(l)) ? $2(Z[1], Z[2] / 100, Z[3] / 100, 1) : (Z = oQ.exec(l)) ? $2(Z[1], Z[2] / 100, Z[3] / 100, Z[4]) : D2.hasOwnProperty(l) ? P2(D2[l]) : l === "transparent" ? new vc(NaN, NaN, NaN, 0) : null;
}
function P2(l) {
  return new vc(l >> 16 & 255, l >> 8 & 255, l & 255, 1);
}
function PL(l, Z, u, s) {
  return s <= 0 && (l = Z = u = NaN), new vc(l, Z, u, s);
}
function JV(l) {
  return l instanceof hG || (l = Wm(l)), l ? (l = l.rgb(), new vc(l.r, l.g, l.b, l.opacity)) : new vc();
}
function Xh(l, Z, u, s) {
  return arguments.length === 1 ? JV(l) : new vc(l, Z, u, s ?? 1);
}
function vc(l, Z, u, s) {
  this.r = +l, this.g = +Z, this.b = +u, this.opacity = +s;
}
ko(vc, Xh, Sn(hG, {
  brighter(l) {
    return l = l == null ? no : Math.pow(no, l), new vc(this.r * l, this.g * l, this.b * l, this.opacity);
  },
  darker(l) {
    return l = l == null ? Km : Math.pow(Km, l), new vc(this.r * l, this.g * l, this.b * l, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new vc(pm(this.r), pm(this.g), pm(this.b), Kh(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
  },
  hex: O2,
  // Deprecated! Use color.formatHex.
  formatHex: O2,
  formatHex8: nQ,
  formatRgb: A2,
  toString: A2
}));
function O2() {
  return `#${dm(this.r)}${dm(this.g)}${dm(this.b)}`;
}
function nQ() {
  return `#${dm(this.r)}${dm(this.g)}${dm(this.b)}${dm((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function A2() {
  const l = Kh(this.opacity);
  return `${l === 1 ? "rgb(" : "rgba("}${pm(this.r)}, ${pm(this.g)}, ${pm(this.b)}${l === 1 ? ")" : `, ${l})`}`;
}
function Kh(l) {
  return isNaN(l) ? 1 : Math.max(0, Math.min(1, l));
}
function pm(l) {
  return Math.max(0, Math.min(255, Math.round(l) || 0));
}
function dm(l) {
  return l = pm(l), (l < 16 ? "0" : "") + l.toString(16);
}
function $2(l, Z, u, s) {
  return s <= 0 ? l = Z = u = NaN : u <= 0 || u >= 1 ? l = Z = NaN : Z <= 0 && (l = NaN), new fu(l, Z, u, s);
}
function RU(l) {
  if (l instanceof fu) return new fu(l.h, l.s, l.l, l.opacity);
  if (l instanceof hG || (l = Wm(l)), !l) return new fu();
  if (l instanceof fu) return l;
  l = l.rgb();
  var Z = l.r / 255, u = l.g / 255, s = l.b / 255, G = Math.min(Z, u, s), i = Math.max(Z, u, s), m = NaN, a = i - G, n = (i + G) / 2;
  return a ? (Z === i ? m = (u - s) / a + (u < s) * 6 : u === i ? m = (s - Z) / a + 2 : m = (Z - u) / a + 4, a /= n < 0.5 ? i + G : 2 - i - G, m *= 60) : a = n > 0 && n < 1 ? 0 : m, new fu(m, a, n, l.opacity);
}
function CW(l, Z, u, s) {
  return arguments.length === 1 ? RU(l) : new fu(l, Z, u, s ?? 1);
}
function fu(l, Z, u, s) {
  this.h = +l, this.s = +Z, this.l = +u, this.opacity = +s;
}
ko(fu, CW, Sn(hG, {
  brighter(l) {
    return l = l == null ? no : Math.pow(no, l), new fu(this.h, this.s, this.l * l, this.opacity);
  },
  darker(l) {
    return l = l == null ? Km : Math.pow(Km, l), new fu(this.h, this.s, this.l * l, this.opacity);
  },
  rgb() {
    var l = this.h % 360 + (this.h < 0) * 360, Z = isNaN(l) || isNaN(this.s) ? 0 : this.s, u = this.l, s = u + (u < 0.5 ? u : 1 - u) * Z, G = 2 * u - s;
    return new vc(
      vK(l >= 240 ? l - 240 : l + 120, G, s),
      vK(l, G, s),
      vK(l < 120 ? l + 240 : l - 120, G, s),
      this.opacity
    );
  },
  clamp() {
    return new fu(q2(this.h), OL(this.s), OL(this.l), Kh(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
  },
  formatHsl() {
    const l = Kh(this.opacity);
    return `${l === 1 ? "hsl(" : "hsla("}${q2(this.h)}, ${OL(this.s) * 100}%, ${OL(this.l) * 100}%${l === 1 ? ")" : `, ${l})`}`;
  }
}));
function q2(l) {
  return l = (l || 0) % 360, l < 0 ? l + 360 : l;
}
function OL(l) {
  return Math.max(0, Math.min(1, l || 0));
}
function vK(l, Z, u) {
  return (l < 60 ? Z + (u - Z) * l / 60 : l < 180 ? u : l < 240 ? Z + (u - Z) * (240 - l) / 60 : Z) * 255;
}
const YU = Math.PI / 180, kU = 180 / Math.PI, Wh = 18, MU = 0.96422, IU = 1, UU = 0.82521, CU = 4 / 29, Oi = 6 / 29, rU = 3 * Oi * Oi, pQ = Oi * Oi * Oi;
function FU(l) {
  if (l instanceof Ss) return new Ss(l.l, l.a, l.b, l.opacity);
  if (l instanceof dd) return NU(l);
  l instanceof vc || (l = JV(l));
  var Z = BK(l.r), u = BK(l.g), s = BK(l.b), G = TK((0.2225045 * Z + 0.7168786 * u + 0.0606169 * s) / IU), i, m;
  return Z === u && u === s ? i = m = G : (i = TK((0.4360747 * Z + 0.3850649 * u + 0.1430804 * s) / MU), m = TK((0.0139322 * Z + 0.0971045 * u + 0.7141733 * s) / UU)), new Ss(116 * G - 16, 500 * (i - G), 200 * (G - m), l.opacity);
}
function rW(l, Z, u, s) {
  return arguments.length === 1 ? FU(l) : new Ss(l, Z, u, s ?? 1);
}
function Ss(l, Z, u, s) {
  this.l = +l, this.a = +Z, this.b = +u, this.opacity = +s;
}
ko(Ss, rW, Sn(hG, {
  brighter(l) {
    return new Ss(this.l + Wh * (l ?? 1), this.a, this.b, this.opacity);
  },
  darker(l) {
    return new Ss(this.l - Wh * (l ?? 1), this.a, this.b, this.opacity);
  },
  rgb() {
    var l = (this.l + 16) / 116, Z = isNaN(this.a) ? l : l + this.a / 500, u = isNaN(this.b) ? l : l - this.b / 200;
    return Z = MU * fK(Z), l = IU * fK(l), u = UU * fK(u), new vc(
      EK(3.1338561 * Z - 1.6168667 * l - 0.4906146 * u),
      EK(-0.9787684 * Z + 1.9161415 * l + 0.033454 * u),
      EK(0.0719453 * Z - 0.2289914 * l + 1.4052427 * u),
      this.opacity
    );
  }
}));
function TK(l) {
  return l > pQ ? Math.pow(l, 1 / 3) : l / rU + CU;
}
function fK(l) {
  return l > Oi ? l * l * l : rU * (l - CU);
}
function EK(l) {
  return 255 * (l <= 31308e-7 ? 12.92 * l : 1.055 * Math.pow(l, 1 / 2.4) - 0.055);
}
function BK(l) {
  return (l /= 255) <= 0.04045 ? l / 12.92 : Math.pow((l + 0.055) / 1.055, 2.4);
}
function LQ(l) {
  if (l instanceof dd) return new dd(l.h, l.c, l.l, l.opacity);
  if (l instanceof Ss || (l = FU(l)), l.a === 0 && l.b === 0) return new dd(NaN, 0 < l.l && l.l < 100 ? 0 : NaN, l.l, l.opacity);
  var Z = Math.atan2(l.b, l.a) * kU;
  return new dd(Z < 0 ? Z + 360 : Z, Math.sqrt(l.a * l.a + l.b * l.b), l.l, l.opacity);
}
function FW(l, Z, u, s) {
  return arguments.length === 1 ? LQ(l) : new dd(l, Z, u, s ?? 1);
}
function dd(l, Z, u, s) {
  this.h = +l, this.c = +Z, this.l = +u, this.opacity = +s;
}
function NU(l) {
  if (isNaN(l.h)) return new Ss(l.l, 0, 0, l.opacity);
  var Z = l.h * YU;
  return new Ss(l.l, Math.cos(Z) * l.c, Math.sin(Z) * l.c, l.opacity);
}
ko(dd, FW, Sn(hG, {
  brighter(l) {
    return new dd(this.h, this.c, this.l + Wh * (l ?? 1), this.opacity);
  },
  darker(l) {
    return new dd(this.h, this.c, this.l - Wh * (l ?? 1), this.opacity);
  },
  rgb() {
    return NU(this).rgb();
  }
}));
var wU = -0.14861, HV = 1.78277, gV = -0.29227, jh = -0.90649, Qa = 1.97294, _2 = Qa * jh, lM = Qa * HV, ZM = HV * gV - jh * wU;
function hQ(l) {
  if (l instanceof Lm) return new Lm(l.h, l.s, l.l, l.opacity);
  l instanceof vc || (l = JV(l));
  var Z = l.r / 255, u = l.g / 255, s = l.b / 255, G = (ZM * s + _2 * Z - lM * u) / (ZM + _2 - lM), i = s - G, m = (Qa * (u - G) - gV * i) / jh, a = Math.sqrt(m * m + i * i) / (Qa * G * (1 - G)), n = a ? Math.atan2(m, i) * kU - 120 : NaN;
  return new Lm(n < 0 ? n + 360 : n, a, G, l.opacity);
}
function NW(l, Z, u, s) {
  return arguments.length === 1 ? hQ(l) : new Lm(l, Z, u, s ?? 1);
}
function Lm(l, Z, u, s) {
  this.h = +l, this.s = +Z, this.l = +u, this.opacity = +s;
}
ko(Lm, NW, Sn(hG, {
  brighter(l) {
    return l = l == null ? no : Math.pow(no, l), new Lm(this.h, this.s, this.l * l, this.opacity);
  },
  darker(l) {
    return l = l == null ? Km : Math.pow(Km, l), new Lm(this.h, this.s, this.l * l, this.opacity);
  },
  rgb() {
    var l = isNaN(this.h) ? 0 : (this.h + 120) * YU, Z = +this.l, u = isNaN(this.s) ? 0 : this.s * Z * (1 - Z), s = Math.cos(l), G = Math.sin(l);
    return new vc(
      255 * (Z + u * (wU * s + HV * G)),
      255 * (Z + u * (gV * s + jh * G)),
      255 * (Z + u * (Qa * s)),
      this.opacity
    );
  }
}));
function zU(l, Z, u, s, G) {
  var i = l * l, m = i * l;
  return ((1 - 3 * l + 3 * i - m) * Z + (4 - 6 * i + 3 * m) * u + (1 + 3 * l + 3 * i - 3 * m) * s + m * G) / 6;
}
function JU(l) {
  var Z = l.length - 1;
  return function(u) {
    var s = u <= 0 ? u = 0 : u >= 1 ? (u = 1, Z - 1) : Math.floor(u * Z), G = l[s], i = l[s + 1], m = s > 0 ? l[s - 1] : 2 * G - i, a = s < Z - 1 ? l[s + 2] : 2 * i - G;
    return zU((u - s / Z) * Z, m, G, i, a);
  };
}
function HU(l) {
  var Z = l.length;
  return function(u) {
    var s = Math.floor(((u %= 1) < 0 ? ++u : u) * Z), G = l[(s + Z - 1) % Z], i = l[s % Z], m = l[(s + 1) % Z], a = l[(s + 2) % Z];
    return zU((u - s / Z) * Z, G, i, m, a);
  };
}
const Qh = (l) => () => l;
function gU(l, Z) {
  return function(u) {
    return l + u * Z;
  };
}
function yQ(l, Z, u) {
  return l = Math.pow(l, u), Z = Math.pow(Z, u) - l, u = 1 / u, function(s) {
    return Math.pow(l + s * Z, u);
  };
}
function Ph(l, Z) {
  var u = Z - l;
  return u ? gU(l, u > 180 || u < -180 ? u - 360 * Math.round(u / 360) : u) : Qh(isNaN(l) ? Z : l);
}
function SQ(l) {
  return (l = +l) == 1 ? Tc : function(Z, u) {
    return u - Z ? yQ(Z, u, l) : Qh(isNaN(Z) ? u : Z);
  };
}
function Tc(l, Z) {
  var u = Z - l;
  return u ? gU(l, u) : Qh(isNaN(l) ? Z : l);
}
const Pa = function l(Z) {
  var u = SQ(Z);
  function s(G, i) {
    var m = u((G = Xh(G)).r, (i = Xh(i)).r), a = u(G.g, i.g), n = u(G.b, i.b), p = Tc(G.opacity, i.opacity);
    return function(y) {
      return G.r = m(y), G.g = a(y), G.b = n(y), G.opacity = p(y), G + "";
    };
  }
  return s.gamma = l, s;
}(1);
function vU(l) {
  return function(Z) {
    var u = Z.length, s = new Array(u), G = new Array(u), i = new Array(u), m, a;
    for (m = 0; m < u; ++m)
      a = Xh(Z[m]), s[m] = a.r || 0, G[m] = a.g || 0, i[m] = a.b || 0;
    return s = l(s), G = l(G), i = l(i), a.opacity = 1, function(n) {
      return a.r = s(n), a.g = G(n), a.b = i(n), a + "";
    };
  };
}
var tQ = vU(JU), XQ = vU(HU);
function vV(l, Z) {
  Z || (Z = []);
  var u = l ? Math.min(Z.length, l.length) : 0, s = Z.slice(), G;
  return function(i) {
    for (G = 0; G < u; ++G) s[G] = l[G] * (1 - i) + Z[G] * i;
    return s;
  };
}
function TU(l) {
  return ArrayBuffer.isView(l) && !(l instanceof DataView);
}
function KQ(l, Z) {
  return (TU(Z) ? vV : fU)(l, Z);
}
function fU(l, Z) {
  var u = Z ? Z.length : 0, s = l ? Math.min(u, l.length) : 0, G = new Array(s), i = new Array(u), m;
  for (m = 0; m < s; ++m) G[m] = Cm(l[m], Z[m]);
  for (; m < u; ++m) i[m] = Z[m];
  return function(a) {
    for (m = 0; m < s; ++m) i[m] = G[m](a);
    return i;
  };
}
function EU(l, Z) {
  var u = /* @__PURE__ */ new Date();
  return l = +l, Z = +Z, function(s) {
    return u.setTime(l * (1 - s) + Z * s), u;
  };
}
function hu(l, Z) {
  return l = +l, Z = +Z, function(u) {
    return l * (1 - u) + Z * u;
  };
}
function BU(l, Z) {
  var u = {}, s = {}, G;
  (l === null || typeof l != "object") && (l = {}), (Z === null || typeof Z != "object") && (Z = {});
  for (G in Z)
    G in l ? u[G] = Cm(l[G], Z[G]) : s[G] = Z[G];
  return function(i) {
    for (G in u) s[G] = u[G](i);
    return s;
  };
}
var wW = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, DK = new RegExp(wW.source, "g");
function WQ(l) {
  return function() {
    return l;
  };
}
function VQ(l) {
  return function(Z) {
    return l(Z) + "";
  };
}
function TV(l, Z) {
  var u = wW.lastIndex = DK.lastIndex = 0, s, G, i, m = -1, a = [], n = [];
  for (l = l + "", Z = Z + ""; (s = wW.exec(l)) && (G = DK.exec(Z)); )
    (i = G.index) > u && (i = Z.slice(u, i), a[m] ? a[m] += i : a[++m] = i), (s = s[0]) === (G = G[0]) ? a[m] ? a[m] += G : a[++m] = G : (a[++m] = null, n.push({ i: m, x: hu(s, G) })), u = DK.lastIndex;
  return u < Z.length && (i = Z.slice(u), a[m] ? a[m] += i : a[++m] = i), a.length < 2 ? n[0] ? VQ(n[0].x) : WQ(Z) : (Z = n.length, function(p) {
    for (var y = 0, h; y < Z; ++y) a[(h = n[y]).i] = h.x(p);
    return a.join("");
  });
}
function Cm(l, Z) {
  var u = typeof Z, s;
  return Z == null || u === "boolean" ? Qh(Z) : (u === "number" ? hu : u === "string" ? (s = Wm(Z)) ? (Z = s, Pa) : TV : Z instanceof Wm ? Pa : Z instanceof Date ? EU : TU(Z) ? vV : Array.isArray(Z) ? fU : typeof Z.valueOf != "function" && typeof Z.toString != "function" || isNaN(Z) ? BU : hu)(l, Z);
}
function xQ(l) {
  var Z = l.length;
  return function(u) {
    return l[Math.max(0, Math.min(Z - 1, Math.floor(u * Z)))];
  };
}
function RQ(l, Z) {
  var u = Ph(+l, +Z);
  return function(s) {
    var G = u(s);
    return G - 360 * Math.floor(G / 360);
  };
}
function Oh(l, Z) {
  return l = +l, Z = +Z, function(u) {
    return Math.round(l * (1 - u) + Z * u);
  };
}
var cM = 180 / Math.PI, zW = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function DU(l, Z, u, s, G, i) {
  var m, a, n;
  return (m = Math.sqrt(l * l + Z * Z)) && (l /= m, Z /= m), (n = l * u + Z * s) && (u -= l * n, s -= Z * n), (a = Math.sqrt(u * u + s * s)) && (u /= a, s /= a, n /= a), l * s < Z * u && (l = -l, Z = -Z, n = -n, m = -m), {
    translateX: G,
    translateY: i,
    rotate: Math.atan2(Z, l) * cM,
    skewX: Math.atan(n) * cM,
    scaleX: m,
    scaleY: a
  };
}
var AL;
function YQ(l) {
  const Z = new (typeof DOMMatrix == "function" ? DOMMatrix : WebKitCSSMatrix)(l + "");
  return Z.isIdentity ? zW : DU(Z.a, Z.b, Z.c, Z.d, Z.e, Z.f);
}
function kQ(l) {
  return l == null || (AL || (AL = document.createElementNS("http://www.w3.org/2000/svg", "g")), AL.setAttribute("transform", l), !(l = AL.transform.baseVal.consolidate())) ? zW : (l = l.matrix, DU(l.a, l.b, l.c, l.d, l.e, l.f));
}
function jU(l, Z, u, s) {
  function G(p) {
    return p.length ? p.pop() + " " : "";
  }
  function i(p, y, h, S, t, W) {
    if (p !== h || y !== S) {
      var V = t.push("translate(", null, Z, null, u);
      W.push({ i: V - 4, x: hu(p, h) }, { i: V - 2, x: hu(y, S) });
    } else (h || S) && t.push("translate(" + h + Z + S + u);
  }
  function m(p, y, h, S) {
    p !== y ? (p - y > 180 ? y += 360 : y - p > 180 && (p += 360), S.push({ i: h.push(G(h) + "rotate(", null, s) - 2, x: hu(p, y) })) : y && h.push(G(h) + "rotate(" + y + s);
  }
  function a(p, y, h, S) {
    p !== y ? S.push({ i: h.push(G(h) + "skewX(", null, s) - 2, x: hu(p, y) }) : y && h.push(G(h) + "skewX(" + y + s);
  }
  function n(p, y, h, S, t, W) {
    if (p !== h || y !== S) {
      var V = t.push(G(t) + "scale(", null, ",", null, ")");
      W.push({ i: V - 4, x: hu(p, h) }, { i: V - 2, x: hu(y, S) });
    } else (h !== 1 || S !== 1) && t.push(G(t) + "scale(" + h + "," + S + ")");
  }
  return function(p, y) {
    var h = [], S = [];
    return p = l(p), y = l(y), i(p.translateX, p.translateY, y.translateX, y.translateY, h, S), m(p.rotate, y.rotate, h, S), a(p.skewX, y.skewX, h, S), n(p.scaleX, p.scaleY, y.scaleX, y.scaleY, h, S), p = y = null, function(t) {
      for (var W = -1, V = S.length, R; ++W < V; ) h[(R = S[W]).i] = R.x(t);
      return h.join("");
    };
  };
}
var QU = jU(YQ, "px, ", "px)", "deg)"), PU = jU(kQ, ", ", ")", ")"), MQ = 1e-12;
function bM(l) {
  return ((l = Math.exp(l)) + 1 / l) / 2;
}
function IQ(l) {
  return ((l = Math.exp(l)) - 1 / l) / 2;
}
function UQ(l) {
  return ((l = Math.exp(2 * l)) - 1) / (l + 1);
}
const OU = function l(Z, u, s) {
  function G(i, m) {
    var a = i[0], n = i[1], p = i[2], y = m[0], h = m[1], S = m[2], t = y - a, W = h - n, V = t * t + W * W, R, x;
    if (V < MQ)
      x = Math.log(S / p) / Z, R = function(D) {
        return [
          a + D * t,
          n + D * W,
          p * Math.exp(Z * D * x)
        ];
      };
    else {
      var r = Math.sqrt(V), k = (S * S - p * p + s * V) / (2 * p * u * r), U = (S * S - p * p - s * V) / (2 * S * u * r), w = Math.log(Math.sqrt(k * k + 1) - k), z = Math.log(Math.sqrt(U * U + 1) - U);
      x = (z - w) / Z, R = function(D) {
        var C = D * x, j = bM(w), E = p / (u * r) * (j * UQ(Z * C + w) - IQ(w));
        return [
          a + E * t,
          n + E * W,
          p * j / bM(Z * C + w)
        ];
      };
    }
    return R.duration = x * 1e3 * Z / Math.SQRT2, R;
  }
  return G.rho = function(i) {
    var m = Math.max(1e-3, +i), a = m * m, n = a * a;
    return l(m, a, n);
  }, G;
}(Math.SQRT2, 2, 4);
function AU(l) {
  return function(Z, u) {
    var s = l((Z = CW(Z)).h, (u = CW(u)).h), G = Tc(Z.s, u.s), i = Tc(Z.l, u.l), m = Tc(Z.opacity, u.opacity);
    return function(a) {
      return Z.h = s(a), Z.s = G(a), Z.l = i(a), Z.opacity = m(a), Z + "";
    };
  };
}
const CQ = AU(Ph);
var rQ = AU(Tc);
function FQ(l, Z) {
  var u = Tc((l = rW(l)).l, (Z = rW(Z)).l), s = Tc(l.a, Z.a), G = Tc(l.b, Z.b), i = Tc(l.opacity, Z.opacity);
  return function(m) {
    return l.l = u(m), l.a = s(m), l.b = G(m), l.opacity = i(m), l + "";
  };
}
function $U(l) {
  return function(Z, u) {
    var s = l((Z = FW(Z)).h, (u = FW(u)).h), G = Tc(Z.c, u.c), i = Tc(Z.l, u.l), m = Tc(Z.opacity, u.opacity);
    return function(a) {
      return Z.h = s(a), Z.c = G(a), Z.l = i(a), Z.opacity = m(a), Z + "";
    };
  };
}
const NQ = $U(Ph);
var wQ = $U(Tc);
function qU(l) {
  return function Z(u) {
    u = +u;
    function s(G, i) {
      var m = l((G = NW(G)).h, (i = NW(i)).h), a = Tc(G.s, i.s), n = Tc(G.l, i.l), p = Tc(G.opacity, i.opacity);
      return function(y) {
        return G.h = m(y), G.s = a(y), G.l = n(Math.pow(y, u)), G.opacity = p(y), G + "";
      };
    }
    return s.gamma = Z, s;
  }(1);
}
const zQ = qU(Ph);
var JQ = qU(Tc);
function fV(l, Z) {
  Z === void 0 && (Z = l, l = Cm);
  for (var u = 0, s = Z.length - 1, G = Z[0], i = new Array(s < 0 ? 0 : s); u < s; ) i[u] = l(G, G = Z[++u]);
  return function(m) {
    var a = Math.max(0, Math.min(s - 1, Math.floor(m *= s)));
    return i[a](m - a);
  };
}
function HQ(l, Z) {
  for (var u = new Array(Z), s = 0; s < Z; ++s) u[s] = l(s / (Z - 1));
  return u;
}
const gQ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  interpolate: Cm,
  interpolateArray: KQ,
  interpolateBasis: JU,
  interpolateBasisClosed: HU,
  interpolateCubehelix: zQ,
  interpolateCubehelixLong: JQ,
  interpolateDate: EU,
  interpolateDiscrete: xQ,
  interpolateHcl: NQ,
  interpolateHclLong: wQ,
  interpolateHsl: CQ,
  interpolateHslLong: rQ,
  interpolateHue: RQ,
  interpolateLab: FQ,
  interpolateNumber: hu,
  interpolateNumberArray: vV,
  interpolateObject: BU,
  interpolateRgb: Pa,
  interpolateRgbBasis: tQ,
  interpolateRgbBasisClosed: XQ,
  interpolateRound: Oh,
  interpolateString: TV,
  interpolateTransformCss: QU,
  interpolateTransformSvg: PU,
  interpolateZoom: OU,
  piecewise: fV,
  quantize: HQ
}, Symbol.toStringTag, { value: "Module" }));
var po = 0, Ua = 0, Ka = 0, _U = 1e3, Vh, Ca, xh = 0, Vm = 0, Ah = 0, Oa = typeof performance == "object" && performance.now ? performance : Date, lC = typeof window == "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(l) {
  setTimeout(l, 17);
};
function EV() {
  return Vm || (lC(vQ), Vm = Oa.now() + Ah);
}
function vQ() {
  Vm = 0;
}
function Rh() {
  this._call = this._time = this._next = null;
}
Rh.prototype = ZC.prototype = {
  constructor: Rh,
  restart: function(l, Z, u) {
    if (typeof l != "function") throw new TypeError("callback is not a function");
    u = (u == null ? EV() : +u) + (Z == null ? 0 : +Z), !this._next && Ca !== this && (Ca ? Ca._next = this : Vh = this, Ca = this), this._call = l, this._time = u, JW();
  },
  stop: function() {
    this._call && (this._call = null, this._time = 1 / 0, JW());
  }
};
function ZC(l, Z, u) {
  var s = new Rh();
  return s.restart(l, Z, u), s;
}
function TQ() {
  EV(), ++po;
  for (var l = Vh, Z; l; )
    (Z = Vm - l._time) >= 0 && l._call.call(void 0, Z), l = l._next;
  --po;
}
function uM() {
  Vm = (xh = Oa.now()) + Ah, po = Ua = 0;
  try {
    TQ();
  } finally {
    po = 0, EQ(), Vm = 0;
  }
}
function fQ() {
  var l = Oa.now(), Z = l - xh;
  Z > _U && (Ah -= Z, xh = l);
}
function EQ() {
  for (var l, Z = Vh, u, s = 1 / 0; Z; )
    Z._call ? (s > Z._time && (s = Z._time), l = Z, Z = Z._next) : (u = Z._next, Z._next = null, Z = l ? l._next = u : Vh = u);
  Ca = l, JW(s);
}
function JW(l) {
  if (!po) {
    Ua && (Ua = clearTimeout(Ua));
    var Z = l - Vm;
    Z > 24 ? (l < 1 / 0 && (Ua = setTimeout(uM, l - Oa.now() - Ah)), Ka && (Ka = clearInterval(Ka))) : (Ka || (xh = Oa.now(), Ka = setInterval(fQ, _U)), po = 1, lC(uM));
  }
}
function sM(l, Z, u) {
  var s = new Rh();
  return Z = Z == null ? 0 : +Z, s.restart((G) => {
    s.stop(), l(G + Z);
  }, Z, u), s;
}
var BQ = Bh("start", "end", "cancel", "interrupt"), DQ = [], cC = 0, dM = 1, HW = 2, Gh = 3, GM = 4, gW = 5, mh = 6;
function $h(l, Z, u, s, G, i) {
  var m = l.__transition;
  if (!m) l.__transition = {};
  else if (u in m) return;
  jQ(l, u, {
    name: Z,
    index: s,
    // For context during callback.
    group: G,
    // For context during callback.
    on: BQ,
    tween: DQ,
    time: i.time,
    delay: i.delay,
    duration: i.duration,
    ease: i.ease,
    timer: null,
    state: cC
  });
}
function BV(l, Z) {
  var u = Du(l, Z);
  if (u.state > cC) throw new Error("too late; already scheduled");
  return u;
}
function Ws(l, Z) {
  var u = Du(l, Z);
  if (u.state > Gh) throw new Error("too late; already running");
  return u;
}
function Du(l, Z) {
  var u = l.__transition;
  if (!u || !(u = u[Z])) throw new Error("transition not found");
  return u;
}
function jQ(l, Z, u) {
  var s = l.__transition, G;
  s[Z] = u, u.timer = ZC(i, 0, u.time);
  function i(p) {
    u.state = dM, u.timer.restart(m, u.delay, u.time), u.delay <= p && m(p - u.delay);
  }
  function m(p) {
    var y, h, S, t;
    if (u.state !== dM) return n();
    for (y in s)
      if (t = s[y], t.name === u.name) {
        if (t.state === Gh) return sM(m);
        t.state === GM ? (t.state = mh, t.timer.stop(), t.on.call("interrupt", l, l.__data__, t.index, t.group), delete s[y]) : +y < Z && (t.state = mh, t.timer.stop(), t.on.call("cancel", l, l.__data__, t.index, t.group), delete s[y]);
      }
    if (sM(function() {
      u.state === Gh && (u.state = GM, u.timer.restart(a, u.delay, u.time), a(p));
    }), u.state = HW, u.on.call("start", l, l.__data__, u.index, u.group), u.state === HW) {
      for (u.state = Gh, G = new Array(S = u.tween.length), y = 0, h = -1; y < S; ++y)
        (t = u.tween[y].value.call(l, l.__data__, u.index, u.group)) && (G[++h] = t);
      G.length = h + 1;
    }
  }
  function a(p) {
    for (var y = p < u.duration ? u.ease.call(null, p / u.duration) : (u.timer.restart(n), u.state = gW, 1), h = -1, S = G.length; ++h < S; )
      G[h].call(l, y);
    u.state === gW && (u.on.call("end", l, l.__data__, u.index, u.group), n());
  }
  function n() {
    u.state = mh, u.timer.stop(), delete s[Z];
    for (var p in s) return;
    delete l.__transition;
  }
}
function ih(l, Z) {
  var u = l.__transition, s, G, i = !0, m;
  if (u) {
    Z = Z == null ? null : Z + "";
    for (m in u) {
      if ((s = u[m]).name !== Z) {
        i = !1;
        continue;
      }
      G = s.state > HW && s.state < gW, s.state = mh, s.timer.stop(), s.on.call(G ? "interrupt" : "cancel", l, l.__data__, s.index, s.group), delete u[m];
    }
    i && delete l.__transition;
  }
}
function QQ(l) {
  return this.each(function() {
    ih(this, l);
  });
}
function PQ(l, Z) {
  var u, s;
  return function() {
    var G = Ws(this, l), i = G.tween;
    if (i !== u) {
      s = u = i;
      for (var m = 0, a = s.length; m < a; ++m)
        if (s[m].name === Z) {
          s = s.slice(), s.splice(m, 1);
          break;
        }
    }
    G.tween = s;
  };
}
function OQ(l, Z, u) {
  var s, G;
  if (typeof u != "function") throw new Error();
  return function() {
    var i = Ws(this, l), m = i.tween;
    if (m !== s) {
      G = (s = m).slice();
      for (var a = { name: Z, value: u }, n = 0, p = G.length; n < p; ++n)
        if (G[n].name === Z) {
          G[n] = a;
          break;
        }
      n === p && G.push(a);
    }
    i.tween = G;
  };
}
function AQ(l, Z) {
  var u = this._id;
  if (l += "", arguments.length < 2) {
    for (var s = Du(this.node(), u).tween, G = 0, i = s.length, m; G < i; ++G)
      if ((m = s[G]).name === l)
        return m.value;
    return null;
  }
  return this.each((Z == null ? PQ : OQ)(u, l, Z));
}
function DV(l, Z, u) {
  var s = l._id;
  return l.each(function() {
    var G = Ws(this, s);
    (G.value || (G.value = {}))[Z] = u.apply(this, arguments);
  }), function(G) {
    return Du(G, s).value[Z];
  };
}
function bC(l, Z) {
  var u;
  return (typeof Z == "number" ? hu : Z instanceof Wm ? Pa : (u = Wm(Z)) ? (Z = u, Pa) : TV)(l, Z);
}
function $Q(l) {
  return function() {
    this.removeAttribute(l);
  };
}
function qQ(l) {
  return function() {
    this.removeAttributeNS(l.space, l.local);
  };
}
function _Q(l, Z, u) {
  var s, G = u + "", i;
  return function() {
    var m = this.getAttribute(l);
    return m === G ? null : m === s ? i : i = Z(s = m, u);
  };
}
function lP(l, Z, u) {
  var s, G = u + "", i;
  return function() {
    var m = this.getAttributeNS(l.space, l.local);
    return m === G ? null : m === s ? i : i = Z(s = m, u);
  };
}
function ZP(l, Z, u) {
  var s, G, i;
  return function() {
    var m, a = u(this), n;
    return a == null ? void this.removeAttribute(l) : (m = this.getAttribute(l), n = a + "", m === n ? null : m === s && n === G ? i : (G = n, i = Z(s = m, a)));
  };
}
function cP(l, Z, u) {
  var s, G, i;
  return function() {
    var m, a = u(this), n;
    return a == null ? void this.removeAttributeNS(l.space, l.local) : (m = this.getAttributeNS(l.space, l.local), n = a + "", m === n ? null : m === s && n === G ? i : (G = n, i = Z(s = m, a)));
  };
}
function bP(l, Z) {
  var u = Dh(l), s = u === "transform" ? PU : bC;
  return this.attrTween(l, typeof Z == "function" ? (u.local ? cP : ZP)(u, s, DV(this, "attr." + l, Z)) : Z == null ? (u.local ? qQ : $Q)(u) : (u.local ? lP : _Q)(u, s, Z));
}
function uP(l, Z) {
  return function(u) {
    this.setAttribute(l, Z.call(this, u));
  };
}
function sP(l, Z) {
  return function(u) {
    this.setAttributeNS(l.space, l.local, Z.call(this, u));
  };
}
function dP(l, Z) {
  var u, s;
  function G() {
    var i = Z.apply(this, arguments);
    return i !== s && (u = (s = i) && sP(l, i)), u;
  }
  return G._value = Z, G;
}
function GP(l, Z) {
  var u, s;
  function G() {
    var i = Z.apply(this, arguments);
    return i !== s && (u = (s = i) && uP(l, i)), u;
  }
  return G._value = Z, G;
}
function mP(l, Z) {
  var u = "attr." + l;
  if (arguments.length < 2) return (u = this.tween(u)) && u._value;
  if (Z == null) return this.tween(u, null);
  if (typeof Z != "function") throw new Error();
  var s = Dh(l);
  return this.tween(u, (s.local ? dP : GP)(s, Z));
}
function iP(l, Z) {
  return function() {
    BV(this, l).delay = +Z.apply(this, arguments);
  };
}
function oP(l, Z) {
  return Z = +Z, function() {
    BV(this, l).delay = Z;
  };
}
function eP(l) {
  var Z = this._id;
  return arguments.length ? this.each((typeof l == "function" ? iP : oP)(Z, l)) : Du(this.node(), Z).delay;
}
function aP(l, Z) {
  return function() {
    Ws(this, l).duration = +Z.apply(this, arguments);
  };
}
function nP(l, Z) {
  return Z = +Z, function() {
    Ws(this, l).duration = Z;
  };
}
function pP(l) {
  var Z = this._id;
  return arguments.length ? this.each((typeof l == "function" ? aP : nP)(Z, l)) : Du(this.node(), Z).duration;
}
function LP(l, Z) {
  if (typeof Z != "function") throw new Error();
  return function() {
    Ws(this, l).ease = Z;
  };
}
function hP(l) {
  var Z = this._id;
  return arguments.length ? this.each(LP(Z, l)) : Du(this.node(), Z).ease;
}
function yP(l, Z) {
  return function() {
    var u = Z.apply(this, arguments);
    if (typeof u != "function") throw new Error();
    Ws(this, l).ease = u;
  };
}
function SP(l) {
  if (typeof l != "function") throw new Error();
  return this.each(yP(this._id, l));
}
function tP(l) {
  typeof l != "function" && (l = aU(l));
  for (var Z = this._groups, u = Z.length, s = new Array(u), G = 0; G < u; ++G)
    for (var i = Z[G], m = i.length, a = s[G] = [], n, p = 0; p < m; ++p)
      (n = i[p]) && l.call(n, n.__data__, p, i) && a.push(n);
  return new pd(s, this._parents, this._name, this._id);
}
function XP(l) {
  if (l._id !== this._id) throw new Error();
  for (var Z = this._groups, u = l._groups, s = Z.length, G = u.length, i = Math.min(s, G), m = new Array(s), a = 0; a < i; ++a)
    for (var n = Z[a], p = u[a], y = n.length, h = m[a] = new Array(y), S, t = 0; t < y; ++t)
      (S = n[t] || p[t]) && (h[t] = S);
  for (; a < s; ++a)
    m[a] = Z[a];
  return new pd(m, this._parents, this._name, this._id);
}
function KP(l) {
  return (l + "").trim().split(/^|\s+/).every(function(Z) {
    var u = Z.indexOf(".");
    return u >= 0 && (Z = Z.slice(0, u)), !Z || Z === "start";
  });
}
function WP(l, Z, u) {
  var s, G, i = KP(Z) ? BV : Ws;
  return function() {
    var m = i(this, l), a = m.on;
    a !== s && (G = (s = a).copy()).on(Z, u), m.on = G;
  };
}
function VP(l, Z) {
  var u = this._id;
  return arguments.length < 2 ? Du(this.node(), u).on.on(l) : this.each(WP(u, l, Z));
}
function xP(l) {
  return function() {
    var Z = this.parentNode;
    for (var u in this.__transition) if (+u !== l) return;
    Z && Z.removeChild(this);
  };
}
function RP() {
  return this.on("end.remove", xP(this._id));
}
function YP(l) {
  var Z = this._name, u = this._id;
  typeof l != "function" && (l = wV(l));
  for (var s = this._groups, G = s.length, i = new Array(G), m = 0; m < G; ++m)
    for (var a = s[m], n = a.length, p = i[m] = new Array(n), y, h, S = 0; S < n; ++S)
      (y = a[S]) && (h = l.call(y, y.__data__, S, a)) && ("__data__" in y && (h.__data__ = y.__data__), p[S] = h, $h(p[S], Z, u, S, p, Du(y, u)));
  return new pd(i, this._parents, Z, u);
}
function kP(l) {
  var Z = this._name, u = this._id;
  typeof l != "function" && (l = eU(l));
  for (var s = this._groups, G = s.length, i = [], m = [], a = 0; a < G; ++a)
    for (var n = s[a], p = n.length, y, h = 0; h < p; ++h)
      if (y = n[h]) {
        for (var S = l.call(y, y.__data__, h, n), t, W = Du(y, u), V = 0, R = S.length; V < R; ++V)
          (t = S[V]) && $h(t, Z, u, V, S, W);
        i.push(S), m.push(y);
      }
  return new pd(i, m, Z, u);
}
var MP = yn.prototype.constructor;
function IP() {
  return new MP(this._groups, this._parents);
}
function UP(l, Z) {
  var u, s, G;
  return function() {
    var i = ao(this, l), m = (this.style.removeProperty(l), ao(this, l));
    return i === m ? null : i === u && m === s ? G : G = Z(u = i, s = m);
  };
}
function uC(l) {
  return function() {
    this.style.removeProperty(l);
  };
}
function CP(l, Z, u) {
  var s, G = u + "", i;
  return function() {
    var m = ao(this, l);
    return m === G ? null : m === s ? i : i = Z(s = m, u);
  };
}
function rP(l, Z, u) {
  var s, G, i;
  return function() {
    var m = ao(this, l), a = u(this), n = a + "";
    return a == null && (n = a = (this.style.removeProperty(l), ao(this, l))), m === n ? null : m === s && n === G ? i : (G = n, i = Z(s = m, a));
  };
}
function FP(l, Z) {
  var u, s, G, i = "style." + Z, m = "end." + i, a;
  return function() {
    var n = Ws(this, l), p = n.on, y = n.value[i] == null ? a || (a = uC(Z)) : void 0;
    (p !== u || G !== y) && (s = (u = p).copy()).on(m, G = y), n.on = s;
  };
}
function NP(l, Z, u) {
  var s = (l += "") == "transform" ? QU : bC;
  return Z == null ? this.styleTween(l, UP(l, s)).on("end.style." + l, uC(l)) : typeof Z == "function" ? this.styleTween(l, rP(l, s, DV(this, "style." + l, Z))).each(FP(this._id, l)) : this.styleTween(l, CP(l, s, Z), u).on("end.style." + l, null);
}
function wP(l, Z, u) {
  return function(s) {
    this.style.setProperty(l, Z.call(this, s), u);
  };
}
function zP(l, Z, u) {
  var s, G;
  function i() {
    var m = Z.apply(this, arguments);
    return m !== G && (s = (G = m) && wP(l, m, u)), s;
  }
  return i._value = Z, i;
}
function JP(l, Z, u) {
  var s = "style." + (l += "");
  if (arguments.length < 2) return (s = this.tween(s)) && s._value;
  if (Z == null) return this.tween(s, null);
  if (typeof Z != "function") throw new Error();
  return this.tween(s, zP(l, Z, u ?? ""));
}
function HP(l) {
  return function() {
    this.textContent = l;
  };
}
function gP(l) {
  return function() {
    var Z = l(this);
    this.textContent = Z ?? "";
  };
}
function vP(l) {
  return this.tween("text", typeof l == "function" ? gP(DV(this, "text", l)) : HP(l == null ? "" : l + ""));
}
function TP(l) {
  return function(Z) {
    this.textContent = l.call(this, Z);
  };
}
function fP(l) {
  var Z, u;
  function s() {
    var G = l.apply(this, arguments);
    return G !== u && (Z = (u = G) && TP(G)), Z;
  }
  return s._value = l, s;
}
function EP(l) {
  var Z = "text";
  if (arguments.length < 1) return (Z = this.tween(Z)) && Z._value;
  if (l == null) return this.tween(Z, null);
  if (typeof l != "function") throw new Error();
  return this.tween(Z, fP(l));
}
function BP() {
  for (var l = this._name, Z = this._id, u = sC(), s = this._groups, G = s.length, i = 0; i < G; ++i)
    for (var m = s[i], a = m.length, n, p = 0; p < a; ++p)
      if (n = m[p]) {
        var y = Du(n, Z);
        $h(n, l, u, p, m, {
          time: y.time + y.delay + y.duration,
          delay: 0,
          duration: y.duration,
          ease: y.ease
        });
      }
  return new pd(s, this._parents, l, u);
}
function DP() {
  var l, Z, u = this, s = u._id, G = u.size();
  return new Promise(function(i, m) {
    var a = { value: m }, n = { value: function() {
      --G === 0 && i();
    } };
    u.each(function() {
      var p = Ws(this, s), y = p.on;
      y !== l && (Z = (l = y).copy(), Z._.cancel.push(a), Z._.interrupt.push(a), Z._.end.push(n)), p.on = Z;
    }), G === 0 && i();
  });
}
var jP = 0;
function pd(l, Z, u, s) {
  this._groups = l, this._parents = Z, this._name = u, this._id = s;
}
function sC() {
  return ++jP;
}
var cd = yn.prototype;
pd.prototype = {
  constructor: pd,
  select: YP,
  selectAll: kP,
  selectChild: cd.selectChild,
  selectChildren: cd.selectChildren,
  filter: tP,
  merge: XP,
  selection: IP,
  transition: BP,
  call: cd.call,
  nodes: cd.nodes,
  node: cd.node,
  size: cd.size,
  empty: cd.empty,
  each: cd.each,
  on: VP,
  attr: bP,
  attrTween: mP,
  style: NP,
  styleTween: JP,
  text: vP,
  textTween: EP,
  remove: RP,
  tween: AQ,
  delay: eP,
  duration: pP,
  ease: hP,
  easeVarying: SP,
  end: DP,
  [Symbol.iterator]: cd[Symbol.iterator]
};
function QP(l) {
  return ((l *= 2) <= 1 ? l * l * l : (l -= 2) * l * l + 2) / 2;
}
var PP = {
  time: null,
  // Set on use.
  delay: 0,
  duration: 250,
  ease: QP
};
function OP(l, Z) {
  for (var u; !(u = l.__transition) || !(u = u[Z]); )
    if (!(l = l.parentNode))
      throw new Error(`transition ${Z} not found`);
  return u;
}
function AP(l) {
  var Z, u;
  l instanceof pd ? (Z = l._id, l = l._name) : (Z = sC(), (u = PP).time = EV(), l = l == null ? null : l + "");
  for (var s = this._groups, G = s.length, i = 0; i < G; ++i)
    for (var m = s[i], a = m.length, n, p = 0; p < a; ++p)
      (n = m[p]) && $h(n, l, Z, p, m, u || OP(n, Z));
  return new pd(s, this._parents, l, Z);
}
yn.prototype.interrupt = QQ;
yn.prototype.transition = AP;
const $L = (l) => () => l;
function $P(l, {
  sourceEvent: Z,
  target: u,
  transform: s,
  dispatch: G
}) {
  Object.defineProperties(this, {
    type: { value: l, enumerable: !0, configurable: !0 },
    sourceEvent: { value: Z, enumerable: !0, configurable: !0 },
    target: { value: u, enumerable: !0, configurable: !0 },
    transform: { value: s, enumerable: !0, configurable: !0 },
    _: { value: G }
  });
}
function Gd(l, Z, u) {
  this.k = l, this.x = Z, this.y = u;
}
Gd.prototype = {
  constructor: Gd,
  scale: function(l) {
    return l === 1 ? this : new Gd(this.k * l, this.x, this.y);
  },
  translate: function(l, Z) {
    return l === 0 & Z === 0 ? this : new Gd(this.k, this.x + this.k * l, this.y + this.k * Z);
  },
  apply: function(l) {
    return [l[0] * this.k + this.x, l[1] * this.k + this.y];
  },
  applyX: function(l) {
    return l * this.k + this.x;
  },
  applyY: function(l) {
    return l * this.k + this.y;
  },
  invert: function(l) {
    return [(l[0] - this.x) / this.k, (l[1] - this.y) / this.k];
  },
  invertX: function(l) {
    return (l - this.x) / this.k;
  },
  invertY: function(l) {
    return (l - this.y) / this.k;
  },
  rescaleX: function(l) {
    return l.copy().domain(l.range().map(this.invertX, this).map(l.invert, l));
  },
  rescaleY: function(l) {
    return l.copy().domain(l.range().map(this.invertY, this).map(l.invert, l));
  },
  toString: function() {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};
var qh = new Gd(1, 0, 0);
dC.prototype = Gd.prototype;
function dC(l) {
  for (; !l.__zoom; ) if (!(l = l.parentNode)) return qh;
  return l.__zoom;
}
function jK(l) {
  l.stopImmediatePropagation();
}
function Wa(l) {
  l.preventDefault(), l.stopImmediatePropagation();
}
function qP(l) {
  return (!l.ctrlKey || l.type === "wheel") && !l.button;
}
function _P() {
  var l = this;
  return l instanceof SVGElement ? (l = l.ownerSVGElement || l, l.hasAttribute("viewBox") ? (l = l.viewBox.baseVal, [[l.x, l.y], [l.x + l.width, l.y + l.height]]) : [[0, 0], [l.width.baseVal.value, l.height.baseVal.value]]) : [[0, 0], [l.clientWidth, l.clientHeight]];
}
function mM() {
  return this.__zoom || qh;
}
function l8(l) {
  return -l.deltaY * (l.deltaMode === 1 ? 0.05 : l.deltaMode ? 1 : 2e-3) * (l.ctrlKey ? 10 : 1);
}
function Z8() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function c8(l, Z, u) {
  var s = l.invertX(Z[0][0]) - u[0][0], G = l.invertX(Z[1][0]) - u[1][0], i = l.invertY(Z[0][1]) - u[0][1], m = l.invertY(Z[1][1]) - u[1][1];
  return l.translate(
    G > s ? (s + G) / 2 : Math.min(0, s) || Math.max(0, G),
    m > i ? (i + m) / 2 : Math.min(0, i) || Math.max(0, m)
  );
}
function GC() {
  var l = qP, Z = _P, u = c8, s = l8, G = Z8, i = [0, 1 / 0], m = [[-1 / 0, -1 / 0], [1 / 0, 1 / 0]], a = 250, n = OU, p = Bh("start", "zoom", "end"), y, h, S, t = 500, W = 150, V = 0, R = 10;
  function x(F) {
    F.property("__zoom", mM).on("wheel.zoom", C, { passive: !1 }).on("mousedown.zoom", j).on("dblclick.zoom", E).filter(G).on("touchstart.zoom", g).on("touchmove.zoom", A).on("touchend.zoom touchcancel.zoom", J).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  x.transform = function(F, v, T, f) {
    var O = F.selection ? F.selection() : F;
    O.property("__zoom", mM), F !== O ? w(F, v, T, f) : O.interrupt().each(function() {
      z(this, arguments).event(f).start().zoom(null, typeof v == "function" ? v.apply(this, arguments) : v).end();
    });
  }, x.scaleBy = function(F, v, T, f) {
    x.scaleTo(F, function() {
      var O = this.__zoom.k, _ = typeof v == "function" ? v.apply(this, arguments) : v;
      return O * _;
    }, T, f);
  }, x.scaleTo = function(F, v, T, f) {
    x.transform(F, function() {
      var O = Z.apply(this, arguments), _ = this.__zoom, il = T == null ? U(O) : typeof T == "function" ? T.apply(this, arguments) : T, Zl = _.invert(il), ol = typeof v == "function" ? v.apply(this, arguments) : v;
      return u(k(r(_, ol), il, Zl), O, m);
    }, T, f);
  }, x.translateBy = function(F, v, T, f) {
    x.transform(F, function() {
      return u(this.__zoom.translate(
        typeof v == "function" ? v.apply(this, arguments) : v,
        typeof T == "function" ? T.apply(this, arguments) : T
      ), Z.apply(this, arguments), m);
    }, null, f);
  }, x.translateTo = function(F, v, T, f, O) {
    x.transform(F, function() {
      var _ = Z.apply(this, arguments), il = this.__zoom, Zl = f == null ? U(_) : typeof f == "function" ? f.apply(this, arguments) : f;
      return u(qh.translate(Zl[0], Zl[1]).scale(il.k).translate(
        typeof v == "function" ? -v.apply(this, arguments) : -v,
        typeof T == "function" ? -T.apply(this, arguments) : -T
      ), _, m);
    }, f, O);
  };
  function r(F, v) {
    return v = Math.max(i[0], Math.min(i[1], v)), v === F.k ? F : new Gd(v, F.x, F.y);
  }
  function k(F, v, T) {
    var f = v[0] - T[0] * F.k, O = v[1] - T[1] * F.k;
    return f === F.x && O === F.y ? F : new Gd(F.k, f, O);
  }
  function U(F) {
    return [(+F[0][0] + +F[1][0]) / 2, (+F[0][1] + +F[1][1]) / 2];
  }
  function w(F, v, T, f) {
    F.on("start.zoom", function() {
      z(this, arguments).event(f).start();
    }).on("interrupt.zoom end.zoom", function() {
      z(this, arguments).event(f).end();
    }).tween("zoom", function() {
      var O = this, _ = arguments, il = z(O, _).event(f), Zl = Z.apply(O, _), ol = T == null ? U(Zl) : typeof T == "function" ? T.apply(O, _) : T, Wl = Math.max(Zl[1][0] - Zl[0][0], Zl[1][1] - Zl[0][1]), ml = O.__zoom, Rl = typeof v == "function" ? v.apply(O, _) : v, kl = n(ml.invert(ol).concat(Wl / ml.k), Rl.invert(ol).concat(Wl / Rl.k));
      return function(zl) {
        if (zl === 1) zl = Rl;
        else {
          var Vl = kl(zl), el = Wl / Vl[2];
          zl = new Gd(el, ol[0] - Vl[0] * el, ol[1] - Vl[1] * el);
        }
        il.zoom(null, zl);
      };
    });
  }
  function z(F, v, T) {
    return !T && F.__zooming || new D(F, v);
  }
  function D(F, v) {
    this.that = F, this.args = v, this.active = 0, this.sourceEvent = null, this.extent = Z.apply(F, v), this.taps = 0;
  }
  D.prototype = {
    event: function(F) {
      return F && (this.sourceEvent = F), this;
    },
    start: function() {
      return ++this.active === 1 && (this.that.__zooming = this, this.emit("start")), this;
    },
    zoom: function(F, v) {
      return this.mouse && F !== "mouse" && (this.mouse[1] = v.invert(this.mouse[0])), this.touch0 && F !== "touch" && (this.touch0[1] = v.invert(this.touch0[0])), this.touch1 && F !== "touch" && (this.touch1[1] = v.invert(this.touch1[0])), this.that.__zoom = v, this.emit("zoom"), this;
    },
    end: function() {
      return --this.active === 0 && (delete this.that.__zooming, this.emit("end")), this;
    },
    emit: function(F) {
      var v = lu(this.that).datum();
      p.call(
        F,
        this.that,
        new $P(F, {
          sourceEvent: this.sourceEvent,
          target: x,
          type: F,
          transform: this.that.__zoom,
          dispatch: p
        }),
        v
      );
    }
  };
  function C(F, ...v) {
    if (!l.apply(this, arguments)) return;
    var T = z(this, v).event(F), f = this.__zoom, O = Math.max(i[0], Math.min(i[1], f.k * Math.pow(2, s.apply(this, arguments)))), _ = vu(F);
    if (T.wheel)
      (T.mouse[0][0] !== _[0] || T.mouse[0][1] !== _[1]) && (T.mouse[1] = f.invert(T.mouse[0] = _)), clearTimeout(T.wheel);
    else {
      if (f.k === O) return;
      T.mouse = [_, f.invert(_)], ih(this), T.start();
    }
    Wa(F), T.wheel = setTimeout(il, W), T.zoom("mouse", u(k(r(f, O), T.mouse[0], T.mouse[1]), T.extent, m));
    function il() {
      T.wheel = null, T.end();
    }
  }
  function j(F, ...v) {
    if (S || !l.apply(this, arguments)) return;
    var T = F.currentTarget, f = z(this, v, !0).event(F), O = lu(F.view).on("mousemove.zoom", ol, !0).on("mouseup.zoom", Wl, !0), _ = vu(F, T), il = F.clientX, Zl = F.clientY;
    WU(F.view), jK(F), f.mouse = [_, this.__zoom.invert(_)], ih(this), f.start();
    function ol(ml) {
      if (Wa(ml), !f.moved) {
        var Rl = ml.clientX - il, kl = ml.clientY - Zl;
        f.moved = Rl * Rl + kl * kl > V;
      }
      f.event(ml).zoom("mouse", u(k(f.that.__zoom, f.mouse[0] = vu(ml, T), f.mouse[1]), f.extent, m));
    }
    function Wl(ml) {
      O.on("mousemove.zoom mouseup.zoom", null), VU(ml.view, f.moved), Wa(ml), f.event(ml).end();
    }
  }
  function E(F, ...v) {
    if (l.apply(this, arguments)) {
      var T = this.__zoom, f = vu(F.changedTouches ? F.changedTouches[0] : F, this), O = T.invert(f), _ = T.k * (F.shiftKey ? 0.5 : 2), il = u(k(r(T, _), f, O), Z.apply(this, v), m);
      Wa(F), a > 0 ? lu(this).transition().duration(a).call(w, il, f, F) : lu(this).call(x.transform, il, f, F);
    }
  }
  function g(F, ...v) {
    if (l.apply(this, arguments)) {
      var T = F.touches, f = T.length, O = z(this, v, F.changedTouches.length === f).event(F), _, il, Zl, ol;
      for (jK(F), il = 0; il < f; ++il)
        Zl = T[il], ol = vu(Zl, this), ol = [ol, this.__zoom.invert(ol), Zl.identifier], O.touch0 ? !O.touch1 && O.touch0[2] !== ol[2] && (O.touch1 = ol, O.taps = 0) : (O.touch0 = ol, _ = !0, O.taps = 1 + !!y);
      y && (y = clearTimeout(y)), _ && (O.taps < 2 && (h = ol[0], y = setTimeout(function() {
        y = null;
      }, t)), ih(this), O.start());
    }
  }
  function A(F, ...v) {
    if (this.__zooming) {
      var T = z(this, v).event(F), f = F.changedTouches, O = f.length, _, il, Zl, ol;
      for (Wa(F), _ = 0; _ < O; ++_)
        il = f[_], Zl = vu(il, this), T.touch0 && T.touch0[2] === il.identifier ? T.touch0[0] = Zl : T.touch1 && T.touch1[2] === il.identifier && (T.touch1[0] = Zl);
      if (il = T.that.__zoom, T.touch1) {
        var Wl = T.touch0[0], ml = T.touch0[1], Rl = T.touch1[0], kl = T.touch1[1], zl = (zl = Rl[0] - Wl[0]) * zl + (zl = Rl[1] - Wl[1]) * zl, Vl = (Vl = kl[0] - ml[0]) * Vl + (Vl = kl[1] - ml[1]) * Vl;
        il = r(il, Math.sqrt(zl / Vl)), Zl = [(Wl[0] + Rl[0]) / 2, (Wl[1] + Rl[1]) / 2], ol = [(ml[0] + kl[0]) / 2, (ml[1] + kl[1]) / 2];
      } else if (T.touch0) Zl = T.touch0[0], ol = T.touch0[1];
      else return;
      T.zoom("touch", u(k(il, Zl, ol), T.extent, m));
    }
  }
  function J(F, ...v) {
    if (this.__zooming) {
      var T = z(this, v).event(F), f = F.changedTouches, O = f.length, _, il;
      for (jK(F), S && clearTimeout(S), S = setTimeout(function() {
        S = null;
      }, t), _ = 0; _ < O; ++_)
        il = f[_], T.touch0 && T.touch0[2] === il.identifier ? delete T.touch0 : T.touch1 && T.touch1[2] === il.identifier && delete T.touch1;
      if (T.touch1 && !T.touch0 && (T.touch0 = T.touch1, delete T.touch1), T.touch0) T.touch0[1] = this.__zoom.invert(T.touch0[0]);
      else if (T.end(), T.taps === 2 && (il = vu(il, this), Math.hypot(h[0] - il[0], h[1] - il[1]) < R)) {
        var Zl = lu(this).on("dblclick.zoom");
        Zl && Zl.apply(this, arguments);
      }
    }
  }
  return x.wheelDelta = function(F) {
    return arguments.length ? (s = typeof F == "function" ? F : $L(+F), x) : s;
  }, x.filter = function(F) {
    return arguments.length ? (l = typeof F == "function" ? F : $L(!!F), x) : l;
  }, x.touchable = function(F) {
    return arguments.length ? (G = typeof F == "function" ? F : $L(!!F), x) : G;
  }, x.extent = function(F) {
    return arguments.length ? (Z = typeof F == "function" ? F : $L([[+F[0][0], +F[0][1]], [+F[1][0], +F[1][1]]]), x) : Z;
  }, x.scaleExtent = function(F) {
    return arguments.length ? (i[0] = +F[0], i[1] = +F[1], x) : [i[0], i[1]];
  }, x.translateExtent = function(F) {
    return arguments.length ? (m[0][0] = +F[0][0], m[1][0] = +F[1][0], m[0][1] = +F[0][1], m[1][1] = +F[1][1], x) : [[m[0][0], m[0][1]], [m[1][0], m[1][1]]];
  }, x.constrain = function(F) {
    return arguments.length ? (u = F, x) : u;
  }, x.duration = function(F) {
    return arguments.length ? (a = +F, x) : a;
  }, x.interpolate = function(F) {
    return arguments.length ? (n = F, x) : n;
  }, x.on = function() {
    var F = p.on.apply(p, arguments);
    return F === p ? x : F;
  }, x.clickDistance = function(F) {
    return arguments.length ? (V = (F = +F) * F, x) : Math.sqrt(V);
  }, x.tapDistance = function(F) {
    return arguments.length ? (R = +F, x) : R;
  }, x;
}
const Sd = {
  error001: () => "[React Flow]: Seems like you have not used zustand provider as an ancestor. Help: https://reactflow.dev/error#001",
  error002: () => "It looks like you've created a new nodeTypes or edgeTypes object. If this wasn't on purpose please define the nodeTypes/edgeTypes outside of the component or memoize them.",
  error003: (l) => `Node type "${l}" not found. Using fallback type "default".`,
  error004: () => "The React Flow parent container needs a width and a height to render the graph.",
  error005: () => "Only child nodes can use a parent extent.",
  error006: () => "Can't create edge. An edge needs a source and a target.",
  error007: (l) => `The old edge with id=${l} does not exist.`,
  error009: (l) => `Marker type "${l}" doesn't exist.`,
  error008: (l, { id: Z, sourceHandle: u, targetHandle: s }) => `Couldn't create edge for ${l} handle id: "${l === "source" ? u : s}", edge id: ${Z}.`,
  error010: () => "Handle: No node id found. Make sure to only use a Handle inside a custom Node.",
  error011: (l) => `Edge type "${l}" not found. Using fallback type "default".`,
  error012: (l) => `Node with id "${l}" does not exist, it may have been removed. This can happen when a node is deleted before the "onNodeClick" handler is called.`,
  error013: (l = "react") => `It seems that you haven't loaded the styles. Please import '@xyflow/${l}/dist/style.css' or base.css to make sure everything is working properly.`
}, Aa = [
  [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY],
  [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY]
], mC = ["Enter", " ", "Escape"];
var Lo;
(function(l) {
  l.Strict = "strict", l.Loose = "loose";
})(Lo || (Lo = {}));
var hm;
(function(l) {
  l.Free = "free", l.Vertical = "vertical", l.Horizontal = "horizontal";
})(hm || (hm = {}));
var $a;
(function(l) {
  l.Partial = "partial", l.Full = "full";
})($a || ($a = {}));
const iC = {
  inProgress: !1,
  isValid: null,
  from: null,
  fromHandle: null,
  fromPosition: null,
  fromNode: null,
  to: null,
  toHandle: null,
  toPosition: null,
  toNode: null
};
var sG;
(function(l) {
  l.Bezier = "default", l.Straight = "straight", l.Step = "step", l.SmoothStep = "smoothstep", l.SimpleBezier = "simplebezier";
})(sG || (sG = {}));
var qa;
(function(l) {
  l.Arrow = "arrow", l.ArrowClosed = "arrowclosed";
})(qa || (qa = {}));
var Tl;
(function(l) {
  l.Left = "left", l.Top = "top", l.Right = "right", l.Bottom = "bottom";
})(Tl || (Tl = {}));
const iM = {
  [Tl.Left]: Tl.Right,
  [Tl.Right]: Tl.Left,
  [Tl.Top]: Tl.Bottom,
  [Tl.Bottom]: Tl.Top
};
function oC(l) {
  return l === null ? null : l ? "valid" : "invalid";
}
const eC = (l) => "id" in l && "source" in l && "target" in l, b8 = (l) => "id" in l && "position" in l && !("source" in l) && !("target" in l), jV = (l) => "id" in l && "internals" in l && !("source" in l) && !("target" in l), tn = (l, Z = [0, 0]) => {
  const { width: u, height: s } = td(l), G = l.origin ?? Z, i = u * G[0], m = s * G[1];
  return {
    x: l.position.x - i,
    y: l.position.y - m
  };
}, u8 = (l, Z = { nodeOrigin: [0, 0], nodeLookup: void 0 }) => {
  if (l.length === 0)
    return { x: 0, y: 0, width: 0, height: 0 };
  const u = l.reduce((s, G) => {
    const i = typeof G == "string";
    let m = !Z.nodeLookup && !i ? G : void 0;
    Z.nodeLookup && (m = i ? Z.nodeLookup.get(G) : jV(G) ? G : Z.nodeLookup.get(G.id));
    const a = m ? Yh(m, Z.nodeOrigin) : { x: 0, y: 0, x2: 0, y2: 0 };
    return _h(s, a);
  }, { x: 1 / 0, y: 1 / 0, x2: -1 / 0, y2: -1 / 0 });
  return ly(u);
}, Mo = (l, Z = {}) => {
  if (l.size === 0)
    return { x: 0, y: 0, width: 0, height: 0 };
  let u = { x: 1 / 0, y: 1 / 0, x2: -1 / 0, y2: -1 / 0 };
  return l.forEach((s) => {
    if (Z.filter === void 0 || Z.filter(s)) {
      const G = Yh(s);
      u = _h(u, G);
    }
  }), ly(u);
}, aC = (l, Z, [u, s, G] = [0, 0, 1], i = !1, m = !1) => {
  const a = {
    ...Xn(Z, [u, s, G]),
    width: Z.width / G,
    height: Z.height / G
  }, n = [];
  for (const p of l.values()) {
    const { measured: y, selectable: h = !0, hidden: S = !1 } = p;
    if (m && !h || S)
      continue;
    const t = y.width ?? p.width ?? p.initialWidth ?? null, W = y.height ?? p.height ?? p.initialHeight ?? null, V = _a(a, yo(p)), R = (t ?? 0) * (W ?? 0), x = i && V > 0;
    (!p.internals.handleBounds || x || V >= R || p.dragging) && n.push(p);
  }
  return n;
}, s8 = (l, Z) => {
  const u = /* @__PURE__ */ new Set();
  return l.forEach((s) => {
    u.add(s.id);
  }), Z.filter((s) => u.has(s.source) || u.has(s.target));
};
function vW(l, Z) {
  const u = /* @__PURE__ */ new Map(), s = Z != null && Z.nodes ? new Set(Z.nodes.map((G) => G.id)) : null;
  return l.forEach((G) => {
    G.measured.width && G.measured.height && ((Z == null ? void 0 : Z.includeHiddenNodes) || !G.hidden) && (!s || s.has(G.id)) && u.set(G.id, G);
  }), u;
}
async function TW({ nodes: l, width: Z, height: u, panZoom: s, minZoom: G, maxZoom: i }, m) {
  if (l.size === 0)
    return Promise.resolve(!1);
  const a = Mo(l), n = QV(a, Z, u, (m == null ? void 0 : m.minZoom) ?? G, (m == null ? void 0 : m.maxZoom) ?? i, (m == null ? void 0 : m.padding) ?? 0.1);
  return await s.setViewport(n, { duration: m == null ? void 0 : m.duration }), Promise.resolve(!0);
}
function nC({ nodeId: l, nextPosition: Z, nodeLookup: u, nodeOrigin: s = [0, 0], nodeExtent: G, onError: i }) {
  const m = u.get(l), a = m.parentId ? u.get(m.parentId) : void 0, { x: n, y: p } = a ? a.internals.positionAbsolute : { x: 0, y: 0 }, y = m.origin ?? s;
  let h = G;
  if (m.extent === "parent" && !m.expandParent)
    if (!a)
      i == null || i("005", Sd.error005());
    else {
      const t = a.measured.width, W = a.measured.height;
      t && W && (h = [
        [n, p],
        [n + t, p + W]
      ]);
    }
  else a && So(m.extent) && (h = [
    [m.extent[0][0] + n, m.extent[0][1] + p],
    [m.extent[1][0] + n, m.extent[1][1] + p]
  ]);
  const S = So(h) ? xm(Z, h, m.measured) : Z;
  return {
    position: {
      x: S.x - n + m.measured.width * y[0],
      y: S.y - p + m.measured.height * y[1]
    },
    positionAbsolute: S
  };
}
async function d8({ nodesToRemove: l = [], edgesToRemove: Z = [], nodes: u, edges: s, onBeforeDelete: G }) {
  const i = new Set(l.map((S) => S.id)), m = [];
  for (const S of u) {
    if (S.deletable === !1)
      continue;
    const t = i.has(S.id), W = !t && S.parentId && m.find((V) => V.id === S.parentId);
    (t || W) && m.push(S);
  }
  const a = new Set(Z.map((S) => S.id)), n = s.filter((S) => S.deletable !== !1), y = s8(m, n);
  for (const S of n)
    a.has(S.id) && !y.find((W) => W.id === S.id) && y.push(S);
  if (!G)
    return {
      edges: y,
      nodes: m
    };
  const h = await G({
    nodes: m,
    edges: y
  });
  return typeof h == "boolean" ? h ? { edges: y, nodes: m } : { edges: [], nodes: [] } : h;
}
const ho = (l, Z = 0, u = 1) => Math.min(Math.max(l, Z), u), xm = (l = { x: 0, y: 0 }, Z, u) => ({
  x: ho(l.x, Z[0][0], Z[1][0] - ((u == null ? void 0 : u.width) ?? 0)),
  y: ho(l.y, Z[0][1], Z[1][1] - ((u == null ? void 0 : u.height) ?? 0))
});
function pC(l, Z, u) {
  const { width: s, height: G } = td(u), { x: i, y: m } = u.internals.positionAbsolute;
  return xm(l, [
    [i, m],
    [i + s, m + G]
  ], Z);
}
const oM = (l, Z, u) => l < Z ? ho(Math.abs(l - Z), 1, Z) / Z : l > u ? -ho(Math.abs(l - u), 1, Z) / Z : 0, LC = (l, Z, u = 15, s = 40) => {
  const G = oM(l.x, s, Z.width - s) * u, i = oM(l.y, s, Z.height - s) * u;
  return [G, i];
}, _h = (l, Z) => ({
  x: Math.min(l.x, Z.x),
  y: Math.min(l.y, Z.y),
  x2: Math.max(l.x2, Z.x2),
  y2: Math.max(l.y2, Z.y2)
}), fW = ({ x: l, y: Z, width: u, height: s }) => ({
  x: l,
  y: Z,
  x2: l + u,
  y2: Z + s
}), ly = ({ x: l, y: Z, x2: u, y2: s }) => ({
  x: l,
  y: Z,
  width: u - l,
  height: s - Z
}), yo = (l, Z = [0, 0]) => {
  var G, i;
  const { x: u, y: s } = jV(l) ? l.internals.positionAbsolute : tn(l, Z);
  return {
    x: u,
    y: s,
    width: ((G = l.measured) == null ? void 0 : G.width) ?? l.width ?? l.initialWidth ?? 0,
    height: ((i = l.measured) == null ? void 0 : i.height) ?? l.height ?? l.initialHeight ?? 0
  };
}, Yh = (l, Z = [0, 0]) => {
  var G, i;
  const { x: u, y: s } = jV(l) ? l.internals.positionAbsolute : tn(l, Z);
  return {
    x: u,
    y: s,
    x2: u + (((G = l.measured) == null ? void 0 : G.width) ?? l.width ?? l.initialWidth ?? 0),
    y2: s + (((i = l.measured) == null ? void 0 : i.height) ?? l.height ?? l.initialHeight ?? 0)
  };
}, hC = (l, Z) => ly(_h(fW(l), fW(Z))), _a = (l, Z) => {
  const u = Math.max(0, Math.min(l.x + l.width, Z.x + Z.width) - Math.max(l.x, Z.x)), s = Math.max(0, Math.min(l.y + l.height, Z.y + Z.height) - Math.max(l.y, Z.y));
  return Math.ceil(u * s);
}, eM = (l) => Bu(l.width) && Bu(l.height) && Bu(l.x) && Bu(l.y), Bu = (l) => !isNaN(l) && isFinite(l), G8 = (l, Z) => {
}, Zy = (l, Z = [1, 1]) => ({
  x: Z[0] * Math.round(l.x / Z[0]),
  y: Z[1] * Math.round(l.y / Z[1])
}), Xn = ({ x: l, y: Z }, [u, s, G], i = !1, m = [1, 1]) => {
  const a = {
    x: (l - u) / G,
    y: (Z - s) / G
  };
  return i ? Zy(a, m) : a;
}, yC = ({ x: l, y: Z }, [u, s, G]) => ({
  x: l * G + u,
  y: Z * G + s
}), QV = (l, Z, u, s, G, i) => {
  const m = Z / (l.width * (1 + i)), a = u / (l.height * (1 + i)), n = Math.min(m, a), p = ho(n, s, G), y = l.x + l.width / 2, h = l.y + l.height / 2, S = Z / 2 - y * p, t = u / 2 - h * p;
  return { x: S, y: t, zoom: p };
}, kh = () => {
  var l;
  return typeof navigator < "u" && ((l = navigator == null ? void 0 : navigator.userAgent) == null ? void 0 : l.indexOf("Mac")) >= 0;
};
function So(l) {
  return l !== void 0 && l !== "parent";
}
function td(l) {
  var Z, u;
  return {
    width: ((Z = l.measured) == null ? void 0 : Z.width) ?? l.width ?? l.initialWidth ?? 0,
    height: ((u = l.measured) == null ? void 0 : u.height) ?? l.height ?? l.initialHeight ?? 0
  };
}
function PV(l) {
  var Z, u;
  return (((Z = l.measured) == null ? void 0 : Z.width) ?? l.width ?? l.initialWidth) !== void 0 && (((u = l.measured) == null ? void 0 : u.height) ?? l.height ?? l.initialHeight) !== void 0;
}
function SC(l, Z = { width: 0, height: 0 }, u, s, G) {
  let i = u;
  const m = { ...l };
  for (; i; ) {
    const a = s.get(i);
    if (i = a == null ? void 0 : a.parentId, a) {
      const n = a.origin || G;
      m.x += a.internals.positionAbsolute.x - (Z.width ?? 0) * n[0], m.y += a.internals.positionAbsolute.y - (Z.height ?? 0) * n[1];
    }
  }
  return m;
}
function Na(l, { snapGrid: Z = [0, 0], snapToGrid: u = !1, transform: s }) {
  const { x: G, y: i } = ed(l), m = Xn({ x: G, y: i }, s), { x: a, y: n } = u ? Zy(m, Z) : m;
  return {
    xSnapped: a,
    ySnapped: n,
    ...m
  };
}
const cy = (l) => ({
  width: l.offsetWidth,
  height: l.offsetHeight
}), tC = (l) => {
  var Z;
  return ((Z = l.getRootNode) == null ? void 0 : Z.call(l)) || (window == null ? void 0 : window.document);
}, m8 = ["INPUT", "SELECT", "TEXTAREA"];
function EW(l) {
  var s, G;
  const Z = ((G = (s = l.composedPath) == null ? void 0 : s.call(l)) == null ? void 0 : G[0]) || l.target;
  return m8.includes(Z == null ? void 0 : Z.nodeName) || (Z == null ? void 0 : Z.hasAttribute("contenteditable")) || !!(Z != null && Z.closest(".nokey"));
}
const XC = (l) => "clientX" in l, ed = (l, Z) => {
  var i, m;
  const u = XC(l), s = u ? l.clientX : (i = l.touches) == null ? void 0 : i[0].clientX, G = u ? l.clientY : (m = l.touches) == null ? void 0 : m[0].clientY;
  return {
    x: s - ((Z == null ? void 0 : Z.left) ?? 0),
    y: G - ((Z == null ? void 0 : Z.top) ?? 0)
  };
}, aM = (l, Z, u, s, G) => {
  const i = Z.querySelectorAll(`.${l}`);
  return !i || !i.length ? null : Array.from(i).map((m) => {
    const a = m.getBoundingClientRect();
    return {
      id: m.getAttribute("data-handleid"),
      type: l,
      nodeId: G,
      position: m.getAttribute("data-handlepos"),
      x: (a.left - u.left) / s,
      y: (a.top - u.top) / s,
      ...cy(m)
    };
  });
};
function KC({ sourceX: l, sourceY: Z, targetX: u, targetY: s, sourceControlX: G, sourceControlY: i, targetControlX: m, targetControlY: a }) {
  const n = l * 0.125 + G * 0.375 + m * 0.375 + u * 0.125, p = Z * 0.125 + i * 0.375 + a * 0.375 + s * 0.125, y = Math.abs(n - l), h = Math.abs(p - Z);
  return [n, p, y, h];
}
function qL(l, Z) {
  return l >= 0 ? 0.5 * l : Z * 25 * Math.sqrt(-l);
}
function nM({ pos: l, x1: Z, y1: u, x2: s, y2: G, c: i }) {
  switch (l) {
    case Tl.Left:
      return [Z - qL(Z - s, i), u];
    case Tl.Right:
      return [Z + qL(s - Z, i), u];
    case Tl.Top:
      return [Z, u - qL(u - G, i)];
    case Tl.Bottom:
      return [Z, u + qL(G - u, i)];
  }
}
function WC({ sourceX: l, sourceY: Z, sourcePosition: u = Tl.Bottom, targetX: s, targetY: G, targetPosition: i = Tl.Top, curvature: m = 0.25 }) {
  const [a, n] = nM({
    pos: u,
    x1: l,
    y1: Z,
    x2: s,
    y2: G,
    c: m
  }), [p, y] = nM({
    pos: i,
    x1: s,
    y1: G,
    x2: l,
    y2: Z,
    c: m
  }), [h, S, t, W] = KC({
    sourceX: l,
    sourceY: Z,
    targetX: s,
    targetY: G,
    sourceControlX: a,
    sourceControlY: n,
    targetControlX: p,
    targetControlY: y
  });
  return [
    `M${l},${Z} C${a},${n} ${p},${y} ${s},${G}`,
    h,
    S,
    t,
    W
  ];
}
function VC({ sourceX: l, sourceY: Z, targetX: u, targetY: s }) {
  const G = Math.abs(u - l) / 2, i = u < l ? u + G : u - G, m = Math.abs(s - Z) / 2, a = s < Z ? s + m : s - m;
  return [i, a, G, m];
}
function i8({ sourceNode: l, targetNode: Z, selected: u = !1, zIndex: s = 0, elevateOnSelect: G = !1 }) {
  if (!G)
    return s;
  const i = u || Z.selected || l.selected, m = Math.max(l.internals.z || 0, Z.internals.z || 0, 1e3);
  return s + (i ? m : 0);
}
function o8({ sourceNode: l, targetNode: Z, width: u, height: s, transform: G }) {
  const i = _h(Yh(l), Yh(Z));
  i.x === i.x2 && (i.x2 += 1), i.y === i.y2 && (i.y2 += 1);
  const m = {
    x: -G[0] / G[2],
    y: -G[1] / G[2],
    width: u / G[2],
    height: s / G[2]
  };
  return _a(m, ly(i)) > 0;
}
const e8 = ({ source: l, sourceHandle: Z, target: u, targetHandle: s }) => `xy-edge__${l}${Z || ""}-${u}${s || ""}`, a8 = (l, Z) => Z.some((u) => u.source === l.source && u.target === l.target && (u.sourceHandle === l.sourceHandle || !u.sourceHandle && !l.sourceHandle) && (u.targetHandle === l.targetHandle || !u.targetHandle && !l.targetHandle)), n8 = (l, Z) => {
  if (!l.source || !l.target)
    return Z;
  let u;
  return eC(l) ? u = { ...l } : u = {
    ...l,
    id: e8(l)
  }, a8(u, Z) ? Z : (u.sourceHandle === null && delete u.sourceHandle, u.targetHandle === null && delete u.targetHandle, Z.concat(u));
};
function xC({ sourceX: l, sourceY: Z, targetX: u, targetY: s }) {
  const [G, i, m, a] = VC({
    sourceX: l,
    sourceY: Z,
    targetX: u,
    targetY: s
  });
  return [`M ${l},${Z}L ${u},${s}`, G, i, m, a];
}
const pM = {
  [Tl.Left]: { x: -1, y: 0 },
  [Tl.Right]: { x: 1, y: 0 },
  [Tl.Top]: { x: 0, y: -1 },
  [Tl.Bottom]: { x: 0, y: 1 }
}, p8 = ({ source: l, sourcePosition: Z = Tl.Bottom, target: u }) => Z === Tl.Left || Z === Tl.Right ? l.x < u.x ? { x: 1, y: 0 } : { x: -1, y: 0 } : l.y < u.y ? { x: 0, y: 1 } : { x: 0, y: -1 }, LM = (l, Z) => Math.sqrt(Math.pow(Z.x - l.x, 2) + Math.pow(Z.y - l.y, 2));
function L8({ source: l, sourcePosition: Z = Tl.Bottom, target: u, targetPosition: s = Tl.Top, center: G, offset: i }) {
  const m = pM[Z], a = pM[s], n = { x: l.x + m.x * i, y: l.y + m.y * i }, p = { x: u.x + a.x * i, y: u.y + a.y * i }, y = p8({
    source: n,
    sourcePosition: Z,
    target: p
  }), h = y.x !== 0 ? "x" : "y", S = y[h];
  let t = [], W, V;
  const R = { x: 0, y: 0 }, x = { x: 0, y: 0 }, [r, k, U, w] = VC({
    sourceX: l.x,
    sourceY: l.y,
    targetX: u.x,
    targetY: u.y
  });
  if (m[h] * a[h] === -1) {
    W = G.x ?? r, V = G.y ?? k;
    const D = [
      { x: W, y: n.y },
      { x: W, y: p.y }
    ], C = [
      { x: n.x, y: V },
      { x: p.x, y: V }
    ];
    m[h] === S ? t = h === "x" ? D : C : t = h === "x" ? C : D;
  } else {
    const D = [{ x: n.x, y: p.y }], C = [{ x: p.x, y: n.y }];
    if (h === "x" ? t = m.x === S ? C : D : t = m.y === S ? D : C, Z === s) {
      const J = Math.abs(l[h] - u[h]);
      if (J <= i) {
        const F = Math.min(i - 1, i - J);
        m[h] === S ? R[h] = (n[h] > l[h] ? -1 : 1) * F : x[h] = (p[h] > u[h] ? -1 : 1) * F;
      }
    }
    if (Z !== s) {
      const J = h === "x" ? "y" : "x", F = m[h] === a[J], v = n[J] > p[J], T = n[J] < p[J];
      (m[h] === 1 && (!F && v || F && T) || m[h] !== 1 && (!F && T || F && v)) && (t = h === "x" ? D : C);
    }
    const j = { x: n.x + R.x, y: n.y + R.y }, E = { x: p.x + x.x, y: p.y + x.y }, g = Math.max(Math.abs(j.x - t[0].x), Math.abs(E.x - t[0].x)), A = Math.max(Math.abs(j.y - t[0].y), Math.abs(E.y - t[0].y));
    g >= A ? (W = (j.x + E.x) / 2, V = t[0].y) : (W = t[0].x, V = (j.y + E.y) / 2);
  }
  return [[
    l,
    { x: n.x + R.x, y: n.y + R.y },
    ...t,
    { x: p.x + x.x, y: p.y + x.y },
    u
  ], W, V, U, w];
}
function h8(l, Z, u, s) {
  const G = Math.min(LM(l, Z) / 2, LM(Z, u) / 2, s), { x: i, y: m } = Z;
  if (l.x === i && i === u.x || l.y === m && m === u.y)
    return `L${i} ${m}`;
  if (l.y === m) {
    const p = l.x < u.x ? -1 : 1, y = l.y < u.y ? 1 : -1;
    return `L ${i + G * p},${m}Q ${i},${m} ${i},${m + G * y}`;
  }
  const a = l.x < u.x ? 1 : -1, n = l.y < u.y ? -1 : 1;
  return `L ${i},${m + G * n}Q ${i},${m} ${i + G * a},${m}`;
}
function BW({ sourceX: l, sourceY: Z, sourcePosition: u = Tl.Bottom, targetX: s, targetY: G, targetPosition: i = Tl.Top, borderRadius: m = 5, centerX: a, centerY: n, offset: p = 20 }) {
  const [y, h, S, t, W] = L8({
    source: { x: l, y: Z },
    sourcePosition: u,
    target: { x: s, y: G },
    targetPosition: i,
    center: { x: a, y: n },
    offset: p
  });
  return [y.reduce((R, x, r) => {
    let k = "";
    return r > 0 && r < y.length - 1 ? k = h8(y[r - 1], x, y[r + 1], m) : k = `${r === 0 ? "M" : "L"}${x.x} ${x.y}`, R += k, R;
  }, ""), h, S, t, W];
}
function hM(l) {
  var Z;
  return l && !!(l.internals.handleBounds || (Z = l.handles) != null && Z.length) && !!(l.measured.width || l.width || l.initialWidth);
}
function y8(l) {
  var h;
  const { sourceNode: Z, targetNode: u } = l;
  if (!hM(Z) || !hM(u))
    return null;
  const s = Z.internals.handleBounds || yM(Z.handles), G = u.internals.handleBounds || yM(u.handles), i = SM((s == null ? void 0 : s.source) ?? [], l.sourceHandle), m = SM(
    // when connection type is loose we can define all handles as sources and connect source -> source
    l.connectionMode === Lo.Strict ? (G == null ? void 0 : G.target) ?? [] : ((G == null ? void 0 : G.target) ?? []).concat((G == null ? void 0 : G.source) ?? []),
    l.targetHandle
  );
  if (!i || !m)
    return (h = l.onError) == null || h.call(l, "008", Sd.error008(i ? "target" : "source", {
      id: l.id,
      sourceHandle: l.sourceHandle,
      targetHandle: l.targetHandle
    })), null;
  const a = (i == null ? void 0 : i.position) || Tl.Bottom, n = (m == null ? void 0 : m.position) || Tl.Top, p = ln(Z, i, a), y = ln(u, m, n);
  return {
    sourceX: p.x,
    sourceY: p.y,
    targetX: y.x,
    targetY: y.y,
    sourcePosition: a,
    targetPosition: n
  };
}
function yM(l) {
  if (!l)
    return null;
  const Z = [], u = [];
  for (const s of l)
    s.width = s.width ?? 1, s.height = s.height ?? 1, s.type === "source" ? Z.push(s) : s.type === "target" && u.push(s);
  return {
    source: Z,
    target: u
  };
}
function ln(l, Z, u = Tl.Left, s = !1) {
  const G = ((Z == null ? void 0 : Z.x) ?? 0) + l.internals.positionAbsolute.x, i = ((Z == null ? void 0 : Z.y) ?? 0) + l.internals.positionAbsolute.y, { width: m, height: a } = Z ?? td(l);
  if (s)
    return { x: G + m / 2, y: i + a / 2 };
  switch ((Z == null ? void 0 : Z.position) ?? u) {
    case Tl.Top:
      return { x: G + m / 2, y: i };
    case Tl.Right:
      return { x: G + m, y: i + a / 2 };
    case Tl.Bottom:
      return { x: G + m / 2, y: i + a };
    case Tl.Left:
      return { x: G, y: i + a / 2 };
  }
}
function SM(l, Z) {
  return l && (Z ? l.find((u) => u.id === Z) : l[0]) || null;
}
function DW(l, Z) {
  return l ? typeof l == "string" ? l : `${Z ? `${Z}__` : ""}${Object.keys(l).sort().map((s) => `${s}=${l[s]}`).join("&")}` : "";
}
function S8(l, { id: Z, defaultColor: u, defaultMarkerStart: s, defaultMarkerEnd: G }) {
  const i = /* @__PURE__ */ new Set();
  return l.reduce((m, a) => ([a.markerStart || s, a.markerEnd || G].forEach((n) => {
    if (n && typeof n == "object") {
      const p = DW(n, Z);
      i.has(p) || (m.push({ id: p, color: n.color || u, ...n }), i.add(p));
    }
  }), m), []).sort((m, a) => m.id.localeCompare(a.id));
}
function t8(l, Z, u, s, G) {
  let i = 0.5;
  G === "start" ? i = 0 : G === "end" && (i = 1);
  let m = [
    (l.x + l.width * i) * Z.zoom + Z.x,
    l.y * Z.zoom + Z.y - s
  ], a = [-100 * i, -100];
  switch (u) {
    case Tl.Right:
      m = [
        (l.x + l.width) * Z.zoom + Z.x + s,
        (l.y + l.height * i) * Z.zoom + Z.y
      ], a = [0, -100 * i];
      break;
    case Tl.Bottom:
      m[1] = (l.y + l.height) * Z.zoom + Z.y + s, a[1] = 0;
      break;
    case Tl.Left:
      m = [
        l.x * Z.zoom + Z.x - s,
        (l.y + l.height * i) * Z.zoom + Z.y
      ], a = [-100, -100 * i];
      break;
  }
  return `translate(${m[0]}px, ${m[1]}px) translate(${a[0]}%, ${a[1]}%)`;
}
const OV = {
  nodeOrigin: [0, 0],
  nodeExtent: Aa,
  elevateNodesOnSelect: !0,
  defaults: {}
}, X8 = {
  ...OV,
  checkEquality: !0
};
function AV(l, Z) {
  const u = { ...l };
  for (const s in Z)
    Z[s] !== void 0 && (u[s] = Z[s]);
  return u;
}
function K8(l, Z, u) {
  const s = AV(OV, u);
  for (const G of l.values())
    if (G.parentId)
      $V(G, l, Z, s);
    else {
      const i = tn(G, s.nodeOrigin), m = So(G.extent) ? G.extent : s.nodeExtent, a = xm(i, m, td(G));
      G.internals.positionAbsolute = a;
    }
}
function jW(l, Z, u, s) {
  var a, n;
  const G = AV(X8, s), i = new Map(Z), m = G != null && G.elevateNodesOnSelect ? 1e3 : 0;
  Z.clear(), u.clear();
  for (const p of l) {
    let y = i.get(p.id);
    if (G.checkEquality && p === (y == null ? void 0 : y.internals.userNode))
      Z.set(p.id, y);
    else {
      const h = tn(p, G.nodeOrigin), S = So(p.extent) ? p.extent : G.nodeExtent, t = xm(h, S, td(p));
      y = {
        ...G.defaults,
        ...p,
        measured: {
          width: (a = p.measured) == null ? void 0 : a.width,
          height: (n = p.measured) == null ? void 0 : n.height
        },
        internals: {
          positionAbsolute: t,
          // if user re-initializes the node or removes `measured` for whatever reason, we reset the handleBounds so that the node gets re-measured
          handleBounds: p.measured ? y == null ? void 0 : y.internals.handleBounds : void 0,
          z: RC(p, m),
          userNode: p
        }
      }, Z.set(p.id, y);
    }
    p.parentId && $V(y, Z, u, s);
  }
}
function W8(l, Z) {
  if (!l.parentId)
    return;
  const u = Z.get(l.parentId);
  u ? u.set(l.id, l) : Z.set(l.parentId, /* @__PURE__ */ new Map([[l.id, l]]));
}
function $V(l, Z, u, s) {
  const { elevateNodesOnSelect: G, nodeOrigin: i, nodeExtent: m } = AV(OV, s), a = l.parentId, n = Z.get(a);
  if (!n) {
    console.warn(`Parent node ${a} not found. Please make sure that parent nodes are in front of their child nodes in the nodes array.`);
    return;
  }
  W8(l, u);
  const p = G ? 1e3 : 0, { x: y, y: h, z: S } = V8(l, n, i, m, p), { positionAbsolute: t } = l.internals, W = y !== t.x || h !== t.y;
  (W || S !== l.internals.z) && (l.internals = {
    ...l.internals,
    positionAbsolute: W ? { x: y, y: h } : t,
    z: S
  });
}
function RC(l, Z) {
  return (Bu(l.zIndex) ? l.zIndex : 0) + (l.selected ? Z : 0);
}
function V8(l, Z, u, s, G) {
  const { x: i, y: m } = Z.internals.positionAbsolute, a = td(l), n = tn(l, u), p = So(l.extent) ? xm(n, l.extent, a) : n;
  let y = xm({ x: i + p.x, y: m + p.y }, s, a);
  l.extent === "parent" && (y = pC(y, a, Z));
  const h = RC(l, G), S = Z.internals.z ?? 0;
  return {
    x: y.x,
    y: y.y,
    z: S > h ? S : h
  };
}
function qV(l, Z, u, s = [0, 0]) {
  var m;
  const G = [], i = /* @__PURE__ */ new Map();
  for (const a of l) {
    const n = Z.get(a.parentId);
    if (!n)
      continue;
    const p = ((m = i.get(a.parentId)) == null ? void 0 : m.expandedRect) ?? yo(n), y = hC(p, a.rect);
    i.set(a.parentId, { expandedRect: y, parent: n });
  }
  return i.size > 0 && i.forEach(({ expandedRect: a, parent: n }, p) => {
    var k;
    const y = n.internals.positionAbsolute, h = td(n), S = n.origin ?? s, t = a.x < y.x ? Math.round(Math.abs(y.x - a.x)) : 0, W = a.y < y.y ? Math.round(Math.abs(y.y - a.y)) : 0, V = Math.max(h.width, Math.round(a.width)), R = Math.max(h.height, Math.round(a.height)), x = (V - h.width) * S[0], r = (R - h.height) * S[1];
    (t > 0 || W > 0 || x || r) && (G.push({
      id: p,
      type: "position",
      position: {
        x: n.position.x - t + x,
        y: n.position.y - W + r
      }
    }), (k = u.get(p)) == null || k.forEach((U) => {
      l.some((w) => w.id === U.id) || G.push({
        id: U.id,
        type: "position",
        position: {
          x: U.position.x + t,
          y: U.position.y + W
        }
      });
    })), (h.width < a.width || h.height < a.height || t || W) && G.push({
      id: p,
      type: "dimensions",
      setAttributes: !0,
      dimensions: {
        width: V + (t ? S[0] * t - x : 0),
        height: R + (W ? S[1] * W - r : 0)
      }
    });
  }), G;
}
function x8(l, Z, u, s, G, i) {
  const m = s == null ? void 0 : s.querySelector(".xyflow__viewport");
  let a = !1;
  if (!m)
    return { changes: [], updatedInternals: a };
  const n = [], p = window.getComputedStyle(m), { m22: y } = new window.DOMMatrixReadOnly(p.transform), h = [];
  for (const S of l.values()) {
    const t = Z.get(S.id);
    if (t)
      if (t.hidden)
        t.internals = {
          ...t.internals,
          handleBounds: void 0
        }, a = !0;
      else {
        const W = cy(S.nodeElement), V = t.measured.width !== W.width || t.measured.height !== W.height;
        if (!!(W.width && W.height && (V || !t.internals.handleBounds || S.force))) {
          const x = S.nodeElement.getBoundingClientRect(), r = So(t.extent) ? t.extent : i;
          let { positionAbsolute: k } = t.internals;
          t.parentId && t.extent === "parent" ? k = pC(k, W, Z.get(t.parentId)) : r && (k = xm(k, r, W)), t.measured = W, t.internals = {
            ...t.internals,
            positionAbsolute: k,
            handleBounds: {
              source: aM("source", S.nodeElement, x, y, t.id),
              target: aM("target", S.nodeElement, x, y, t.id)
            }
          }, t.parentId && $V(t, Z, u, { nodeOrigin: G }), a = !0, V && (n.push({
            id: t.id,
            type: "dimensions",
            dimensions: W
          }), t.expandParent && t.parentId && h.push({
            id: t.id,
            parentId: t.parentId,
            rect: yo(t, G)
          }));
        }
      }
  }
  if (h.length > 0) {
    const S = qV(h, Z, u, G);
    n.push(...S);
  }
  return { changes: n, updatedInternals: a };
}
async function R8({ delta: l, panZoom: Z, transform: u, translateExtent: s, width: G, height: i }) {
  if (!Z || !l.x && !l.y)
    return Promise.resolve(!1);
  const m = await Z.setViewportConstrained({
    x: u[0] + l.x,
    y: u[1] + l.y,
    zoom: u[2]
  }, [
    [0, 0],
    [G, i]
  ], s), a = !!m && (m.x !== u[0] || m.y !== u[1] || m.k !== u[2]);
  return Promise.resolve(a);
}
function YC(l, Z, u) {
  l.clear(), Z.clear();
  for (const s of u) {
    const { source: G, target: i, sourceHandle: m = null, targetHandle: a = null } = s, n = `${G}-source-${m}`, p = `${i}-target-${a}`, y = l.get(n) || /* @__PURE__ */ new Map(), h = l.get(p) || /* @__PURE__ */ new Map(), S = { edgeId: s.id, source: G, target: i, sourceHandle: m, targetHandle: a };
    Z.set(s.id, s), l.set(n, y.set(`${i}-${a}`, S)), l.set(p, h.set(`${G}-${m}`, S));
  }
}
function kC(l, Z) {
  if (!l.parentId)
    return !1;
  const u = Z.get(l.parentId);
  return u ? u.selected ? !0 : kC(u, Z) : !1;
}
function tM(l, Z, u) {
  let s = l;
  do {
    if (s != null && s.matches(Z))
      return !0;
    if (s === u)
      return !1;
    s = s.parentElement;
  } while (s);
  return !1;
}
function Y8(l, Z, u, s) {
  const G = /* @__PURE__ */ new Map();
  for (const [i, m] of l)
    if ((m.selected || m.id === s) && (!m.parentId || !kC(m, l)) && (m.draggable || Z && typeof m.draggable > "u")) {
      const a = l.get(i);
      a && G.set(i, {
        id: i,
        position: a.position || { x: 0, y: 0 },
        distance: {
          x: u.x - a.internals.positionAbsolute.x,
          y: u.y - a.internals.positionAbsolute.y
        },
        extent: a.extent,
        parentId: a.parentId,
        origin: a.origin,
        expandParent: a.expandParent,
        internals: {
          positionAbsolute: a.internals.positionAbsolute || { x: 0, y: 0 }
        },
        measured: {
          width: a.measured.width ?? 0,
          height: a.measured.height ?? 0
        }
      });
    }
  return G;
}
function QK({ nodeId: l, dragItems: Z, nodeLookup: u, dragging: s = !0 }) {
  var m, a;
  const G = [];
  for (const [n, p] of Z) {
    const y = (m = u.get(n)) == null ? void 0 : m.internals.userNode;
    y && G.push({
      ...y,
      position: p.position,
      dragging: s
    });
  }
  if (!l)
    return [G[0], G];
  const i = u.get(l).internals.userNode;
  return [
    {
      ...i,
      position: ((a = Z.get(l)) == null ? void 0 : a.position) || i.position,
      dragging: s
    },
    G
  ];
}
function k8({ onNodeMouseDown: l, getStoreItems: Z, onDragStart: u, onDrag: s, onDragStop: G }) {
  let i = { x: null, y: null }, m = 0, a = /* @__PURE__ */ new Map(), n = !1, p = { x: 0, y: 0 }, y = null, h = !1, S = null, t = !1;
  function W({ noDragClassName: R, handleSelector: x, domNode: r, isSelectable: k, nodeId: U, nodeClickDistance: w = 0 }) {
    S = lu(r);
    function z({ x: E, y: g }, A) {
      const { nodeLookup: J, nodeExtent: F, snapGrid: v, snapToGrid: T, nodeOrigin: f, onNodeDrag: O, onSelectionDrag: _, onError: il, updateNodePositions: Zl } = Z();
      i = { x: E, y: g };
      let ol = !1, Wl = { x: 0, y: 0, x2: 0, y2: 0 };
      if (a.size > 1 && F) {
        const ml = Mo(a);
        Wl = fW(ml);
      }
      for (const [ml, Rl] of a) {
        if (!J.has(ml))
          continue;
        let kl = { x: E - Rl.distance.x, y: g - Rl.distance.y };
        T && (kl = Zy(kl, v));
        let zl = [
          [F[0][0], F[0][1]],
          [F[1][0], F[1][1]]
        ];
        if (a.size > 1 && F && !Rl.extent) {
          const { positionAbsolute: xl } = Rl.internals, hl = xl.x - Wl.x + F[0][0], cl = xl.x + Rl.measured.width - Wl.x2 + F[1][0], wl = xl.y - Wl.y + F[0][1], Jl = xl.y + Rl.measured.height - Wl.y2 + F[1][1];
          zl = [
            [hl, wl],
            [cl, Jl]
          ];
        }
        const { position: Vl, positionAbsolute: el } = nC({
          nodeId: ml,
          nextPosition: kl,
          nodeLookup: J,
          nodeExtent: zl,
          nodeOrigin: f,
          onError: il
        });
        ol = ol || Rl.position.x !== Vl.x || Rl.position.y !== Vl.y, Rl.position = Vl, Rl.internals.positionAbsolute = el;
      }
      if (ol && (Zl(a, !0), A && (s || O || !U && _))) {
        const [ml, Rl] = QK({
          nodeId: U,
          dragItems: a,
          nodeLookup: J
        });
        s == null || s(A, a, ml, Rl), O == null || O(A, ml, Rl), U || _ == null || _(A, Rl);
      }
    }
    async function D() {
      if (!y)
        return;
      const { transform: E, panBy: g, autoPanSpeed: A } = Z(), [J, F] = LC(p, y, A);
      (J !== 0 || F !== 0) && (i.x = (i.x ?? 0) - J / E[2], i.y = (i.y ?? 0) - F / E[2], await g({ x: J, y: F }) && z(i, null)), m = requestAnimationFrame(D);
    }
    function C(E) {
      var ol;
      const { nodeLookup: g, multiSelectionActive: A, nodesDraggable: J, transform: F, snapGrid: v, snapToGrid: T, selectNodesOnDrag: f, onNodeDragStart: O, onSelectionDragStart: _, unselectNodesAndEdges: il } = Z();
      h = !0, (!f || !k) && !A && U && ((ol = g.get(U)) != null && ol.selected || il()), k && f && U && (l == null || l(U));
      const Zl = Na(E.sourceEvent, { transform: F, snapGrid: v, snapToGrid: T });
      if (i = Zl, a = Y8(g, J, Zl, U), a.size > 0 && (u || O || !U && _)) {
        const [Wl, ml] = QK({
          nodeId: U,
          dragItems: a,
          nodeLookup: g
        });
        u == null || u(E.sourceEvent, a, Wl, ml), O == null || O(E.sourceEvent, Wl, ml), U || _ == null || _(E.sourceEvent, ml);
      }
    }
    const j = xU().clickDistance(w).on("start", (E) => {
      const { domNode: g, nodeDragThreshold: A, transform: J, snapGrid: F, snapToGrid: v } = Z();
      t = !1, A === 0 && C(E), i = Na(E.sourceEvent, { transform: J, snapGrid: F, snapToGrid: v }), y = (g == null ? void 0 : g.getBoundingClientRect()) || null, p = ed(E.sourceEvent, y);
    }).on("drag", (E) => {
      const { autoPanOnNodeDrag: g, transform: A, snapGrid: J, snapToGrid: F, nodeDragThreshold: v, nodeLookup: T } = Z(), f = Na(E.sourceEvent, { transform: A, snapGrid: J, snapToGrid: F });
      if ((E.sourceEvent.type === "touchmove" && E.sourceEvent.touches.length > 1 || // if user deletes a node while dragging, we need to abort the drag to prevent errors
      U && !T.has(U)) && (t = !0), !t) {
        if (!n && g && h && (n = !0, D()), !h) {
          const O = f.xSnapped - (i.x ?? 0), _ = f.ySnapped - (i.y ?? 0);
          Math.sqrt(O * O + _ * _) > v && C(E);
        }
        (i.x !== f.xSnapped || i.y !== f.ySnapped) && a && h && (p = ed(E.sourceEvent, y), z(f, E.sourceEvent));
      }
    }).on("end", (E) => {
      if (!(!h || t) && (n = !1, h = !1, cancelAnimationFrame(m), a.size > 0)) {
        const { nodeLookup: g, updateNodePositions: A, onNodeDragStop: J, onSelectionDragStop: F } = Z();
        if (A(a, !1), G || J || !U && F) {
          const [v, T] = QK({
            nodeId: U,
            dragItems: a,
            nodeLookup: g,
            dragging: !1
          });
          G == null || G(E.sourceEvent, a, v, T), J == null || J(E.sourceEvent, v, T), U || F == null || F(E.sourceEvent, T);
        }
      }
    }).filter((E) => {
      const g = E.target;
      return !E.button && (!R || !tM(g, `.${R}`, r)) && (!x || tM(g, x, r));
    });
    S.call(j);
  }
  function V() {
    S == null || S.on(".drag", null);
  }
  return {
    update: W,
    destroy: V
  };
}
function M8(l, Z, u) {
  const s = [], G = {
    x: l.x - u,
    y: l.y - u,
    width: u * 2,
    height: u * 2
  };
  for (const i of Z.values())
    _a(G, yo(i)) > 0 && s.push(i);
  return s;
}
const I8 = 250;
function U8(l, Z, u, s) {
  var a, n;
  let G = [], i = 1 / 0;
  const m = M8(l, u, Z + I8);
  for (const p of m) {
    const y = [...((a = p.internals.handleBounds) == null ? void 0 : a.source) ?? [], ...((n = p.internals.handleBounds) == null ? void 0 : n.target) ?? []];
    for (const h of y) {
      if (s.nodeId === h.nodeId && s.type === h.type && s.id === h.id)
        continue;
      const { x: S, y: t } = ln(p, h, h.position, !0), W = Math.sqrt(Math.pow(S - l.x, 2) + Math.pow(t - l.y, 2));
      W > Z || (W < i ? (G = [{ ...h, x: S, y: t }], i = W) : W === i && G.push({ ...h, x: S, y: t }));
    }
  }
  if (!G.length)
    return null;
  if (G.length > 1) {
    const p = s.type === "source" ? "target" : "source";
    return G.find((y) => y.type === p) ?? G[0];
  }
  return G[0];
}
function MC(l, Z, u, s, G, i = !1) {
  var p, y, h;
  const m = s.get(l);
  if (!m)
    return null;
  const a = G === "strict" ? (p = m.internals.handleBounds) == null ? void 0 : p[Z] : [...((y = m.internals.handleBounds) == null ? void 0 : y.source) ?? [], ...((h = m.internals.handleBounds) == null ? void 0 : h.target) ?? []], n = (u ? a == null ? void 0 : a.find((S) => S.id === u) : a == null ? void 0 : a[0]) ?? null;
  return n && i ? { ...n, ...ln(m, n, n.position, !0) } : n;
}
function IC(l, Z) {
  return l || (Z != null && Z.classList.contains("target") ? "target" : Z != null && Z.classList.contains("source") ? "source" : null);
}
function C8(l, Z) {
  let u = null;
  return Z ? u = !0 : l && !Z && (u = !1), u;
}
const UC = () => !0;
function r8(l, { connectionMode: Z, connectionRadius: u, handleId: s, nodeId: G, edgeUpdaterType: i, isTarget: m, domNode: a, nodeLookup: n, lib: p, autoPanOnConnect: y, flowId: h, panBy: S, cancelConnection: t, onConnectStart: W, onConnect: V, onConnectEnd: R, isValidConnection: x = UC, onReconnectEnd: r, updateConnection: k, getTransform: U, getFromHandle: w, autoPanSpeed: z }) {
  const D = tC(l.target);
  let C = 0, j;
  const { x: E, y: g } = ed(l), A = D == null ? void 0 : D.elementFromPoint(E, g), J = IC(i, A), F = a == null ? void 0 : a.getBoundingClientRect();
  if (!F || !J)
    return;
  const v = MC(G, J, s, n, Z);
  if (!v)
    return;
  let T = ed(l, F), f = !1, O = null, _ = !1, il = null;
  function Zl() {
    if (!y || !F)
      return;
    const [el, xl] = LC(T, F, z);
    S({ x: el, y: xl }), C = requestAnimationFrame(Zl);
  }
  const ol = {
    ...v,
    nodeId: G,
    type: J,
    position: v.position
  }, Wl = n.get(G), Rl = {
    inProgress: !0,
    isValid: null,
    from: ln(Wl, ol, Tl.Left, !0),
    fromHandle: ol,
    fromPosition: ol.position,
    fromNode: Wl,
    to: T,
    toHandle: null,
    toPosition: iM[ol.position],
    toNode: null
  };
  k(Rl);
  let kl = Rl;
  W == null || W(l, { nodeId: G, handleId: s, handleType: J });
  function zl(el) {
    if (!w() || !ol) {
      Vl(el);
      return;
    }
    const xl = U();
    T = ed(el, F), j = U8(Xn(T, xl, !1, [1, 1]), u, n, ol), f || (Zl(), f = !0);
    const hl = CC(el, {
      handle: j,
      connectionMode: Z,
      fromNodeId: G,
      fromHandleId: s,
      fromType: m ? "target" : "source",
      isValidConnection: x,
      doc: D,
      lib: p,
      flowId: h,
      nodeLookup: n
    });
    il = hl.handleDomNode, O = hl.connection, _ = C8(!!j, hl.isValid);
    const cl = {
      // from stays the same
      ...kl,
      isValid: _,
      to: j && _ ? yC({ x: j.x, y: j.y }, xl) : T,
      toHandle: hl.toHandle,
      toPosition: _ && hl.toHandle ? hl.toHandle.position : iM[ol.position],
      toNode: hl.toHandle ? n.get(hl.toHandle.nodeId) : null
    };
    _ && j && kl.toHandle && cl.toHandle && kl.toHandle.type === cl.toHandle.type && kl.toHandle.nodeId === cl.toHandle.nodeId && kl.toHandle.id === cl.toHandle.id && kl.to.x === cl.to.x && kl.to.y === cl.to.y || (k(cl), kl = cl);
  }
  function Vl(el) {
    (j || il) && O && _ && (V == null || V(O));
    const { inProgress: xl, ...hl } = kl, cl = {
      ...hl,
      toPosition: kl.toHandle ? kl.toPosition : null
    };
    R == null || R(el, cl), i && (r == null || r(el, cl)), t(), cancelAnimationFrame(C), f = !1, _ = !1, O = null, il = null, D.removeEventListener("mousemove", zl), D.removeEventListener("mouseup", Vl), D.removeEventListener("touchmove", zl), D.removeEventListener("touchend", Vl);
  }
  D.addEventListener("mousemove", zl), D.addEventListener("mouseup", Vl), D.addEventListener("touchmove", zl), D.addEventListener("touchend", Vl);
}
function CC(l, { handle: Z, connectionMode: u, fromNodeId: s, fromHandleId: G, fromType: i, doc: m, lib: a, flowId: n, isValidConnection: p = UC, nodeLookup: y }) {
  const h = i === "target", S = Z ? m.querySelector(`.${a}-flow__handle[data-id="${n}-${Z == null ? void 0 : Z.nodeId}-${Z == null ? void 0 : Z.id}-${Z == null ? void 0 : Z.type}"]`) : null, { x: t, y: W } = ed(l), V = m.elementFromPoint(t, W), R = V != null && V.classList.contains(`${a}-flow__handle`) ? V : S, x = {
    handleDomNode: R,
    isValid: !1,
    connection: null,
    toHandle: null
  };
  if (R) {
    const r = IC(void 0, R), k = R.getAttribute("data-nodeid"), U = R.getAttribute("data-handleid"), w = R.classList.contains("connectable"), z = R.classList.contains("connectableend");
    if (!k || !r)
      return x;
    const D = {
      source: h ? k : s,
      sourceHandle: h ? U : G,
      target: h ? s : k,
      targetHandle: h ? G : U
    };
    x.connection = D;
    const j = w && z && (u === Lo.Strict ? h && r === "source" || !h && r === "target" : k !== s || U !== G);
    x.isValid = j && p(D), x.toHandle = MC(k, r, U, y, u, !1);
  }
  return x;
}
const QW = {
  onPointerDown: r8,
  isValid: CC
};
function F8({ domNode: l, panZoom: Z, getTransform: u, getViewScale: s }) {
  const G = lu(l);
  function i({ translateExtent: a, width: n, height: p, zoomStep: y = 10, pannable: h = !0, zoomable: S = !0, inversePan: t = !1 }) {
    const W = (k) => {
      const U = u();
      if (k.sourceEvent.type !== "wheel" || !Z)
        return;
      const w = -k.sourceEvent.deltaY * (k.sourceEvent.deltaMode === 1 ? 0.05 : k.sourceEvent.deltaMode ? 1 : 2e-3) * y, z = U[2] * Math.pow(2, w);
      Z.scaleTo(z);
    };
    let V = [0, 0];
    const R = (k) => {
      (k.sourceEvent.type === "mousedown" || k.sourceEvent.type === "touchstart") && (V = [
        k.sourceEvent.clientX ?? k.sourceEvent.touches[0].clientX,
        k.sourceEvent.clientY ?? k.sourceEvent.touches[0].clientY
      ]);
    }, x = (k) => {
      const U = u();
      if (k.sourceEvent.type !== "mousemove" && k.sourceEvent.type !== "touchmove" || !Z)
        return;
      const w = [
        k.sourceEvent.clientX ?? k.sourceEvent.touches[0].clientX,
        k.sourceEvent.clientY ?? k.sourceEvent.touches[0].clientY
      ], z = [w[0] - V[0], w[1] - V[1]];
      V = w;
      const D = s() * Math.max(U[2], Math.log(U[2])) * (t ? -1 : 1), C = {
        x: U[0] - z[0] * D,
        y: U[1] - z[1] * D
      }, j = [
        [0, 0],
        [n, p]
      ];
      Z.setViewportConstrained({
        x: C.x,
        y: C.y,
        zoom: U[2]
      }, j, a);
    }, r = GC().on("start", R).on("zoom", h ? x : null).on("zoom.wheel", S ? W : null);
    G.call(r, {});
  }
  function m() {
    G.on("zoom", null);
  }
  return {
    update: i,
    destroy: m,
    pointer: vu
  };
}
const N8 = (l, Z) => l.x !== Z.x || l.y !== Z.y || l.zoom !== Z.k, by = (l) => ({
  x: l.x,
  y: l.y,
  zoom: l.k
}), PK = ({ x: l, y: Z, zoom: u }) => qh.translate(l, Z).scale(u), Ei = (l, Z) => l.target.closest(`.${Z}`), rC = (l, Z) => Z === 2 && Array.isArray(l) && l.includes(2), OK = (l, Z = 0, u = () => {
}) => {
  const s = typeof Z == "number" && Z > 0;
  return s || u(), s ? l.transition().duration(Z).on("end", u) : l;
}, FC = (l) => {
  const Z = l.ctrlKey && kh() ? 10 : 1;
  return -l.deltaY * (l.deltaMode === 1 ? 0.05 : l.deltaMode ? 1 : 2e-3) * Z;
};
function w8({ zoomPanValues: l, noWheelClassName: Z, d3Selection: u, d3Zoom: s, panOnScrollMode: G, panOnScrollSpeed: i, zoomOnPinch: m, onPanZoomStart: a, onPanZoom: n, onPanZoomEnd: p }) {
  return (y) => {
    if (Ei(y, Z))
      return !1;
    y.preventDefault(), y.stopImmediatePropagation();
    const h = u.property("__zoom").k || 1;
    if (y.ctrlKey && m) {
      const R = vu(y), x = FC(y), r = h * Math.pow(2, x);
      s.scaleTo(u, r, R, y);
      return;
    }
    const S = y.deltaMode === 1 ? 20 : 1;
    let t = G === hm.Vertical ? 0 : y.deltaX * S, W = G === hm.Horizontal ? 0 : y.deltaY * S;
    !kh() && y.shiftKey && G !== hm.Vertical && (t = y.deltaY * S, W = 0), s.translateBy(
      u,
      -(t / h) * i,
      -(W / h) * i,
      // @ts-ignore
      { internal: !0 }
    );
    const V = by(u.property("__zoom"));
    clearTimeout(l.panScrollTimeout), l.isPanScrolling || (l.isPanScrolling = !0, a == null || a(y, V)), l.isPanScrolling && (n == null || n(y, V), l.panScrollTimeout = setTimeout(() => {
      p == null || p(y, V), l.isPanScrolling = !1;
    }, 150));
  };
}
function z8({ noWheelClassName: l, preventScrolling: Z, d3ZoomHandler: u }) {
  return function(s, G) {
    if (!Z && s.type === "wheel" && !s.ctrlKey || Ei(s, l))
      return null;
    s.preventDefault(), u.call(this, s, G);
  };
}
function J8({ zoomPanValues: l, onDraggingChange: Z, onPanZoomStart: u }) {
  return (s) => {
    var i, m, a;
    if ((i = s.sourceEvent) != null && i.internal)
      return;
    const G = by(s.transform);
    l.mouseButton = ((m = s.sourceEvent) == null ? void 0 : m.button) || 0, l.isZoomingOrPanning = !0, l.prevViewport = G, ((a = s.sourceEvent) == null ? void 0 : a.type) === "mousedown" && Z(!0), u && (u == null || u(s.sourceEvent, G));
  };
}
function H8({ zoomPanValues: l, panOnDrag: Z, onPaneContextMenu: u, onTransformChange: s, onPanZoom: G }) {
  return (i) => {
    var m, a;
    l.usedRightMouseButton = !!(u && rC(Z, l.mouseButton ?? 0)), (m = i.sourceEvent) != null && m.sync || s([i.transform.x, i.transform.y, i.transform.k]), G && !((a = i.sourceEvent) != null && a.internal) && (G == null || G(i.sourceEvent, by(i.transform)));
  };
}
function g8({ zoomPanValues: l, panOnDrag: Z, panOnScroll: u, onDraggingChange: s, onPanZoomEnd: G, onPaneContextMenu: i }) {
  return (m) => {
    var a;
    if (!((a = m.sourceEvent) != null && a.internal) && (l.isZoomingOrPanning = !1, i && rC(Z, l.mouseButton ?? 0) && !l.usedRightMouseButton && m.sourceEvent && i(m.sourceEvent), l.usedRightMouseButton = !1, s(!1), G && N8(l.prevViewport, m.transform))) {
      const n = by(m.transform);
      l.prevViewport = n, clearTimeout(l.timerId), l.timerId = setTimeout(
        () => {
          G == null || G(m.sourceEvent, n);
        },
        // we need a setTimeout for panOnScroll to supress multiple end events fired during scroll
        u ? 150 : 0
      );
    }
  };
}
function v8({ zoomActivationKeyPressed: l, zoomOnScroll: Z, zoomOnPinch: u, panOnDrag: s, panOnScroll: G, zoomOnDoubleClick: i, userSelectionActive: m, noWheelClassName: a, noPanClassName: n, lib: p }) {
  return (y) => {
    var W;
    const h = l || Z, S = u && y.ctrlKey;
    if (y.button === 1 && y.type === "mousedown" && (Ei(y, `${p}-flow__node`) || Ei(y, `${p}-flow__edge`)))
      return !0;
    if (!s && !h && !G && !i && !u || m || Ei(y, a) && y.type === "wheel" || Ei(y, n) && (y.type !== "wheel" || G && y.type === "wheel" && !l) || !u && y.ctrlKey && y.type === "wheel")
      return !1;
    if (!u && y.type === "touchstart" && ((W = y.touches) == null ? void 0 : W.length) > 1)
      return y.preventDefault(), !1;
    if (!h && !G && !S && y.type === "wheel" || !s && (y.type === "mousedown" || y.type === "touchstart") || Array.isArray(s) && !s.includes(y.button) && y.type === "mousedown")
      return !1;
    const t = Array.isArray(s) && s.includes(y.button) || !y.button || y.button <= 1;
    return (!y.ctrlKey || y.type === "wheel") && t;
  };
}
function T8({ domNode: l, minZoom: Z, maxZoom: u, paneClickDistance: s, translateExtent: G, viewport: i, onPanZoom: m, onPanZoomStart: a, onPanZoomEnd: n, onDraggingChange: p }) {
  const y = {
    isZoomingOrPanning: !1,
    usedRightMouseButton: !1,
    prevViewport: { x: 0, y: 0, zoom: 0 },
    mouseButton: 0,
    timerId: void 0,
    panScrollTimeout: void 0,
    isPanScrolling: !1
  }, h = l.getBoundingClientRect(), S = GC().clickDistance(!Bu(s) || s < 0 ? 0 : s).scaleExtent([Z, u]).translateExtent(G), t = lu(l).call(S);
  k({
    x: i.x,
    y: i.y,
    zoom: ho(i.zoom, Z, u)
  }, [
    [0, 0],
    [h.width, h.height]
  ], G);
  const W = t.on("wheel.zoom"), V = t.on("dblclick.zoom");
  S.wheelDelta(FC);
  function R(A, J) {
    return t ? new Promise((F) => {
      S == null || S.transform(OK(t, J == null ? void 0 : J.duration, () => F(!0)), A);
    }) : Promise.resolve(!1);
  }
  function x({ noWheelClassName: A, noPanClassName: J, onPaneContextMenu: F, userSelectionActive: v, panOnScroll: T, panOnDrag: f, panOnScrollMode: O, panOnScrollSpeed: _, preventScrolling: il, zoomOnPinch: Zl, zoomOnScroll: ol, zoomOnDoubleClick: Wl, zoomActivationKeyPressed: ml, lib: Rl, onTransformChange: kl }) {
    v && !y.isZoomingOrPanning && r();
    const Vl = T && !ml && !v ? w8({
      zoomPanValues: y,
      noWheelClassName: A,
      d3Selection: t,
      d3Zoom: S,
      panOnScrollMode: O,
      panOnScrollSpeed: _,
      zoomOnPinch: Zl,
      onPanZoomStart: a,
      onPanZoom: m,
      onPanZoomEnd: n
    }) : z8({
      noWheelClassName: A,
      preventScrolling: il,
      d3ZoomHandler: W
    });
    if (t.on("wheel.zoom", Vl, { passive: !1 }), !v) {
      const xl = J8({
        zoomPanValues: y,
        onDraggingChange: p,
        onPanZoomStart: a
      });
      S.on("start", xl);
      const hl = H8({
        zoomPanValues: y,
        panOnDrag: f,
        onPaneContextMenu: !!F,
        onPanZoom: m,
        onTransformChange: kl
      });
      S.on("zoom", hl);
      const cl = g8({
        zoomPanValues: y,
        panOnDrag: f,
        panOnScroll: T,
        onPaneContextMenu: F,
        onPanZoomEnd: n,
        onDraggingChange: p
      });
      S.on("end", cl);
    }
    const el = v8({
      zoomActivationKeyPressed: ml,
      panOnDrag: f,
      zoomOnScroll: ol,
      panOnScroll: T,
      zoomOnDoubleClick: Wl,
      zoomOnPinch: Zl,
      userSelectionActive: v,
      noPanClassName: J,
      noWheelClassName: A,
      lib: Rl
    });
    S.filter(el), Wl ? t.on("dblclick.zoom", V) : t.on("dblclick.zoom", null);
  }
  function r() {
    S.on("zoom", null);
  }
  async function k(A, J, F) {
    const v = PK(A), T = S == null ? void 0 : S.constrain()(v, J, F);
    return T && await R(T), new Promise((f) => f(T));
  }
  async function U(A, J) {
    const F = PK(A);
    return await R(F, J), new Promise((v) => v(F));
  }
  function w(A) {
    if (t) {
      const J = PK(A), F = t.property("__zoom");
      (F.k !== A.zoom || F.x !== A.x || F.y !== A.y) && (S == null || S.transform(t, J, null, { sync: !0 }));
    }
  }
  function z() {
    const A = t ? dC(t.node()) : { x: 0, y: 0, k: 1 };
    return { x: A.x, y: A.y, zoom: A.k };
  }
  function D(A, J) {
    return t ? new Promise((F) => {
      S == null || S.scaleTo(OK(t, J == null ? void 0 : J.duration, () => F(!0)), A);
    }) : Promise.resolve(!1);
  }
  function C(A, J) {
    return t ? new Promise((F) => {
      S == null || S.scaleBy(OK(t, J == null ? void 0 : J.duration, () => F(!0)), A);
    }) : Promise.resolve(!1);
  }
  function j(A) {
    S == null || S.scaleExtent(A);
  }
  function E(A) {
    S == null || S.translateExtent(A);
  }
  function g(A) {
    const J = !Bu(A) || A < 0 ? 0 : A;
    S == null || S.clickDistance(J);
  }
  return {
    update: x,
    destroy: r,
    setViewport: U,
    setViewportConstrained: k,
    getViewport: z,
    scaleTo: D,
    scaleBy: C,
    setScaleExtent: j,
    setTranslateExtent: E,
    syncViewport: w,
    setClickDistance: g
  };
}
var wa;
(function(l) {
  l.Line = "line", l.Handle = "handle";
})(wa || (wa = {}));
function f8({ width: l, prevWidth: Z, height: u, prevHeight: s, affectsX: G, affectsY: i }) {
  const m = l - Z, a = u - s, n = [m > 0 ? 1 : m < 0 ? -1 : 0, a > 0 ? 1 : a < 0 ? -1 : 0];
  return m && G && (n[0] = n[0] * -1), a && i && (n[1] = n[1] * -1), n;
}
function E8(l) {
  const Z = l.includes("right") || l.includes("left"), u = l.includes("bottom") || l.includes("top"), s = l.includes("left"), G = l.includes("top");
  return {
    isHorizontal: Z,
    isVertical: u,
    affectsX: s,
    affectsY: G
  };
}
function ZG(l, Z) {
  return Math.max(0, Z - l);
}
function cG(l, Z) {
  return Math.max(0, l - Z);
}
function _L(l, Z, u) {
  return Math.max(0, Z - l, l - u);
}
function XM(l, Z) {
  return l ? !Z : Z;
}
function B8(l, Z, u, s, G, i, m, a) {
  let { affectsX: n, affectsY: p } = Z;
  const { isHorizontal: y, isVertical: h } = Z, S = y && h, { xSnapped: t, ySnapped: W } = u, { minWidth: V, maxWidth: R, minHeight: x, maxHeight: r } = s, { x: k, y: U, width: w, height: z, aspectRatio: D } = l;
  let C = Math.floor(y ? t - l.pointerX : 0), j = Math.floor(h ? W - l.pointerY : 0);
  const E = w + (n ? -C : C), g = z + (p ? -j : j), A = -i[0] * w, J = -i[1] * z;
  let F = _L(E, V, R), v = _L(g, x, r);
  if (m) {
    let O = 0, _ = 0;
    n && C < 0 ? O = ZG(k + C + A, m[0][0]) : !n && C > 0 && (O = cG(k + E + A, m[1][0])), p && j < 0 ? _ = ZG(U + j + J, m[0][1]) : !p && j > 0 && (_ = cG(U + g + J, m[1][1])), F = Math.max(F, O), v = Math.max(v, _);
  }
  if (a) {
    let O = 0, _ = 0;
    n && C > 0 ? O = cG(k + C, a[0][0]) : !n && C < 0 && (O = ZG(k + E, a[1][0])), p && j > 0 ? _ = cG(U + j, a[0][1]) : !p && j < 0 && (_ = ZG(U + g, a[1][1])), F = Math.max(F, O), v = Math.max(v, _);
  }
  if (G) {
    if (y) {
      const O = _L(E / D, x, r) * D;
      if (F = Math.max(F, O), m) {
        let _ = 0;
        !n && !p || n && !p && S ? _ = cG(U + J + E / D, m[1][1]) * D : _ = ZG(U + J + (n ? C : -C) / D, m[0][1]) * D, F = Math.max(F, _);
      }
      if (a) {
        let _ = 0;
        !n && !p || n && !p && S ? _ = ZG(U + E / D, a[1][1]) * D : _ = cG(U + (n ? C : -C) / D, a[0][1]) * D, F = Math.max(F, _);
      }
    }
    if (h) {
      const O = _L(g * D, V, R) / D;
      if (v = Math.max(v, O), m) {
        let _ = 0;
        !n && !p || p && !n && S ? _ = cG(k + g * D + A, m[1][0]) / D : _ = ZG(k + (p ? j : -j) * D + A, m[0][0]) / D, v = Math.max(v, _);
      }
      if (a) {
        let _ = 0;
        !n && !p || p && !n && S ? _ = ZG(k + g * D, a[1][0]) / D : _ = cG(k + (p ? j : -j) * D, a[0][0]) / D, v = Math.max(v, _);
      }
    }
  }
  j = j + (j < 0 ? v : -v), C = C + (C < 0 ? F : -F), G && (S ? E > g * D ? j = (XM(n, p) ? -C : C) / D : C = (XM(n, p) ? -j : j) * D : y ? (j = C / D, p = n) : (C = j * D, n = p));
  const T = n ? k + C : k, f = p ? U + j : U;
  return {
    width: w + (n ? -C : C),
    height: z + (p ? -j : j),
    x: i[0] * C * (n ? -1 : 1) + T,
    y: i[1] * j * (p ? -1 : 1) + f
  };
}
const NC = { width: 0, height: 0, x: 0, y: 0 }, D8 = {
  ...NC,
  pointerX: 0,
  pointerY: 0,
  aspectRatio: 1
};
function j8(l) {
  return [
    [0, 0],
    [l.measured.width, l.measured.height]
  ];
}
function Q8(l, Z, u) {
  const s = Z.position.x + l.position.x, G = Z.position.y + l.position.y, i = l.measured.width ?? 0, m = l.measured.height ?? 0, a = u[0] * i, n = u[1] * m;
  return [
    [s - a, G - n],
    [s + i - a, G + m - n]
  ];
}
function P8({ domNode: l, nodeId: Z, getStoreItems: u, onChange: s, onEnd: G }) {
  const i = lu(l);
  function m({ controlPosition: n, boundaries: p, keepAspectRatio: y, onResizeStart: h, onResize: S, onResizeEnd: t, shouldResize: W }) {
    let V = { ...NC }, R = { ...D8 };
    const x = E8(n);
    let r, k = [], U, w, z;
    const D = xU().on("start", (C) => {
      const { nodeLookup: j, transform: E, snapGrid: g, snapToGrid: A, nodeOrigin: J } = u();
      if (r = j.get(Z), !r)
        return;
      const { xSnapped: F, ySnapped: v } = Na(C.sourceEvent, { transform: E, snapGrid: g, snapToGrid: A });
      V = {
        width: r.measured.width ?? 0,
        height: r.measured.height ?? 0,
        x: r.position.x ?? 0,
        y: r.position.y ?? 0
      }, R = {
        ...V,
        pointerX: F,
        pointerY: v,
        aspectRatio: V.width / V.height
      }, U = void 0, r.parentId && (r.extent === "parent" || r.expandParent) && (U = j.get(r.parentId), w = U && r.extent === "parent" ? j8(U) : void 0), k = [], z = void 0;
      for (const [T, f] of j)
        if (f.parentId === Z && (k.push({
          id: T,
          position: { ...f.position },
          extent: f.extent
        }), f.extent === "parent" || f.expandParent)) {
          const O = Q8(f, r, f.origin ?? J);
          z ? z = [
            [Math.min(O[0][0], z[0][0]), Math.min(O[0][1], z[0][1])],
            [Math.max(O[1][0], z[1][0]), Math.max(O[1][1], z[1][1])]
          ] : z = O;
        }
      h == null || h(C, { ...V });
    }).on("drag", (C) => {
      const { transform: j, snapGrid: E, snapToGrid: g, nodeOrigin: A } = u(), J = Na(C.sourceEvent, { transform: j, snapGrid: E, snapToGrid: g }), F = [];
      if (!r)
        return;
      const { x: v, y: T, width: f, height: O } = V, _ = {}, il = r.origin ?? A, { width: Zl, height: ol, x: Wl, y: ml } = B8(R, x, J, p, y, il, w, z), Rl = Zl !== f, kl = ol !== O, zl = Wl !== v && Rl, Vl = ml !== T && kl;
      if (!zl && !Vl && !Rl && !kl)
        return;
      if ((zl || Vl || il[0] === 1 || il[1] === 1) && (_.x = zl ? Wl : V.x, _.y = Vl ? ml : V.y, V.x = _.x, V.y = _.y, k.length > 0)) {
        const cl = Wl - v, wl = ml - T;
        for (const Jl of k)
          Jl.position = {
            x: Jl.position.x - cl + il[0] * (Zl - f),
            y: Jl.position.y - wl + il[1] * (ol - O)
          }, F.push(Jl);
      }
      if ((Rl || kl) && (_.width = Rl ? Zl : V.width, _.height = kl ? ol : V.height, V.width = _.width, V.height = _.height), U && r.expandParent) {
        const cl = il[0] * (_.width ?? 0);
        _.x && _.x < cl && (V.x = cl, R.x = R.x - (_.x - cl));
        const wl = il[1] * (_.height ?? 0);
        _.y && _.y < wl && (V.y = wl, R.y = R.y - (_.y - wl));
      }
      const el = f8({
        width: V.width,
        prevWidth: f,
        height: V.height,
        prevHeight: O,
        affectsX: x.affectsX,
        affectsY: x.affectsY
      }), xl = { ...V, direction: el };
      (W == null ? void 0 : W(C, xl)) !== !1 && (S == null || S(C, xl), s(_, F));
    }).on("end", (C) => {
      t == null || t(C, { ...V }), G == null || G();
    });
    i.call(D);
  }
  function a() {
    i.on(".drag", null);
  }
  return {
    update: m,
    destroy: a
  };
}
var wC = { exports: {} }, AK = {}, KM;
function O8() {
  if (KM) return AK;
  KM = 1;
  /**
   * @license React
   * use-sync-external-store-shim/with-selector.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  return function() {
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var l = M, Z = s1();
    function u(y, h) {
      return y === h && (y !== 0 || 1 / y === 1 / h) || y !== y && h !== h;
    }
    var s = typeof Object.is == "function" ? Object.is : u, G = Z.useSyncExternalStore, i = l.useRef, m = l.useEffect, a = l.useMemo, n = l.useDebugValue;
    function p(y, h, S, t, W) {
      var V = i(null), R;
      V.current === null ? (R = {
        hasValue: !1,
        value: null
      }, V.current = R) : R = V.current;
      var x = a(function() {
        var w = !1, z, D, C = function(A) {
          if (!w) {
            w = !0, z = A;
            var J = t(A);
            if (W !== void 0 && R.hasValue) {
              var F = R.value;
              if (W(F, J))
                return D = F, F;
            }
            return D = J, J;
          }
          var v = z, T = D;
          if (s(v, A))
            return T;
          var f = t(A);
          return W !== void 0 && W(T, f) ? T : (z = A, D = f, f);
        }, j = S === void 0 ? null : S, E = function() {
          return C(h());
        }, g = j === null ? void 0 : function() {
          return C(j());
        };
        return [E, g];
      }, [h, S, t, W]), r = x[0], k = x[1], U = G(y, r, k);
      return m(function() {
        R.hasValue = !0, R.value = U;
      }, [U]), n(U), U;
    }
    AK.useSyncExternalStoreWithSelector = p, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
  }(), AK;
}
wC.exports = O8();
var A8 = wC.exports;
const $8 = /* @__PURE__ */ wh(A8), q8 = { BASE_URL: "./", DEV: !1, MODE: "production", PROD: !0, SSR: !1 }, WM = (l) => {
  let Z;
  const u = /* @__PURE__ */ new Set(), s = (y, h) => {
    const S = typeof y == "function" ? y(Z) : y;
    if (!Object.is(S, Z)) {
      const t = Z;
      Z = h ?? (typeof S != "object" || S === null) ? S : Object.assign({}, Z, S), u.forEach((W) => W(Z, t));
    }
  }, G = () => Z, n = { setState: s, getState: G, getInitialState: () => p, subscribe: (y) => (u.add(y), () => u.delete(y)), destroy: () => {
    (q8 ? "production" : void 0) !== "production" && console.warn(
      "[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."
    ), u.clear();
  } }, p = Z = l(s, G, n);
  return n;
}, _8 = (l) => l ? WM(l) : WM, { useDebugValue: lO } = tl, { useSyncExternalStoreWithSelector: ZO } = $8, cO = (l) => l;
function zC(l, Z = cO, u) {
  const s = ZO(
    l.subscribe,
    l.getState,
    l.getServerState || l.getInitialState,
    Z,
    u
  );
  return lO(s), s;
}
const VM = (l, Z) => {
  const u = _8(l), s = (G, i = Z) => zC(u, G, i);
  return Object.assign(s, u), s;
}, bO = (l, Z) => l ? VM(l, Z) : VM;
function uc(l, Z) {
  if (Object.is(l, Z))
    return !0;
  if (typeof l != "object" || l === null || typeof Z != "object" || Z === null)
    return !1;
  if (l instanceof Map && Z instanceof Map) {
    if (l.size !== Z.size) return !1;
    for (const [s, G] of l)
      if (!Object.is(G, Z.get(s)))
        return !1;
    return !0;
  }
  if (l instanceof Set && Z instanceof Set) {
    if (l.size !== Z.size) return !1;
    for (const s of l)
      if (!Z.has(s))
        return !1;
    return !0;
  }
  const u = Object.keys(l);
  if (u.length !== Object.keys(Z).length)
    return !1;
  for (const s of u)
    if (!Object.prototype.hasOwnProperty.call(Z, s) || !Object.is(l[s], Z[s]))
      return !1;
  return !0;
}
const uy = M.createContext(null), uO = uy.Provider, JC = Sd.error001();
function yZ(l, Z) {
  const u = M.useContext(uy);
  if (u === null)
    throw new Error(JC);
  return zC(u, l, Z);
}
function lc() {
  const l = M.useContext(uy);
  if (l === null)
    throw new Error(JC);
  return M.useMemo(() => ({
    getState: l.getState,
    setState: l.setState,
    subscribe: l.subscribe
  }), [l]);
}
const xM = { display: "none" }, sO = {
  position: "absolute",
  width: 1,
  height: 1,
  margin: -1,
  border: 0,
  padding: 0,
  overflow: "hidden",
  clip: "rect(0px, 0px, 0px, 0px)",
  clipPath: "inset(100%)"
}, HC = "react-flow__node-desc", gC = "react-flow__edge-desc", dO = "react-flow__aria-live", GO = (l) => l.ariaLiveMessage;
function mO({ rfId: l }) {
  const Z = yZ(GO);
  return B.jsx("div", { id: `${dO}-${l}`, "aria-live": "assertive", "aria-atomic": "true", style: sO, children: Z });
}
function iO({ rfId: l, disableKeyboardA11y: Z }) {
  return B.jsxs(B.Fragment, { children: [B.jsxs("div", { id: `${HC}-${l}`, style: xM, children: ["Press enter or space to select a node.", !Z && "You can then use the arrow keys to move the node around.", " Press delete to remove it and escape to cancel.", " "] }), B.jsx("div", { id: `${gC}-${l}`, style: xM, children: "Press enter or space to select an edge. You can then press delete to remove it or escape to cancel." }), !Z && B.jsx(mO, { rfId: l })] });
}
const oO = (l) => l.userSelectionActive ? "none" : "all";
function Zn({ position: l = "top-left", children: Z, className: u, style: s, ...G }) {
  const i = yZ(oO), m = `${l}`.split("-");
  return B.jsx("div", { className: Lc(["react-flow__panel", u, ...m]), style: { ...s, pointerEvents: i }, ...G, children: Z });
}
function eO({ proOptions: l, position: Z = "bottom-right" }) {
  return l != null && l.hideAttribution ? null : B.jsx(Zn, { position: Z, className: "react-flow__attribution", "data-message": "Please only hide this attribution when you are subscribed to React Flow Pro: https://pro.reactflow.dev", children: B.jsx("a", { href: "https://reactflow.dev", target: "_blank", rel: "noopener noreferrer", "aria-label": "React Flow attribution", children: "React Flow" }) });
}
const aO = (l) => {
  const Z = [], u = [];
  for (const [, s] of l.nodeLookup)
    s.selected && Z.push(s.internals.userNode);
  for (const [, s] of l.edgeLookup)
    s.selected && u.push(s);
  return { selectedNodes: Z, selectedEdges: u };
}, lh = (l) => l.id;
function nO(l, Z) {
  return uc(l.selectedNodes.map(lh), Z.selectedNodes.map(lh)) && uc(l.selectedEdges.map(lh), Z.selectedEdges.map(lh));
}
function pO({ onSelectionChange: l }) {
  const Z = lc(), { selectedNodes: u, selectedEdges: s } = yZ(aO, nO);
  return M.useEffect(() => {
    const G = { nodes: u, edges: s };
    l == null || l(G), Z.getState().onSelectionChangeHandlers.forEach((i) => i(G));
  }, [u, s, l]), null;
}
const LO = (l) => !!l.onSelectionChangeHandlers;
function hO({ onSelectionChange: l }) {
  const Z = yZ(LO);
  return l || Z ? B.jsx(pO, { onSelectionChange: l }) : null;
}
const vC = [0, 0], yO = { x: 0, y: 0, zoom: 1 }, SO = [
  "nodes",
  "edges",
  "defaultNodes",
  "defaultEdges",
  "onConnect",
  "onConnectStart",
  "onConnectEnd",
  "onClickConnectStart",
  "onClickConnectEnd",
  "nodesDraggable",
  "nodesConnectable",
  "nodesFocusable",
  "edgesFocusable",
  "edgesReconnectable",
  "elevateNodesOnSelect",
  "elevateEdgesOnSelect",
  "minZoom",
  "maxZoom",
  "nodeExtent",
  "onNodesChange",
  "onEdgesChange",
  "elementsSelectable",
  "connectionMode",
  "snapGrid",
  "snapToGrid",
  "translateExtent",
  "connectOnClick",
  "defaultEdgeOptions",
  "fitView",
  "fitViewOptions",
  "onNodesDelete",
  "onEdgesDelete",
  "onDelete",
  "onNodeDrag",
  "onNodeDragStart",
  "onNodeDragStop",
  "onSelectionDrag",
  "onSelectionDragStart",
  "onSelectionDragStop",
  "onMoveStart",
  "onMove",
  "onMoveEnd",
  "noPanClassName",
  "nodeOrigin",
  "autoPanOnConnect",
  "autoPanOnNodeDrag",
  "onError",
  "connectionRadius",
  "isValidConnection",
  "selectNodesOnDrag",
  "nodeDragThreshold",
  "onBeforeDelete",
  "debug",
  "autoPanSpeed",
  "paneClickDistance"
], RM = [...SO, "rfId"], tO = (l) => ({
  setNodes: l.setNodes,
  setEdges: l.setEdges,
  setMinZoom: l.setMinZoom,
  setMaxZoom: l.setMaxZoom,
  setTranslateExtent: l.setTranslateExtent,
  setNodeExtent: l.setNodeExtent,
  reset: l.reset,
  setDefaultNodesAndEdges: l.setDefaultNodesAndEdges,
  setPaneClickDistance: l.setPaneClickDistance
}), YM = {
  // these are values that are also passed directly to other components
  // than the StoreUpdater. We can reduce the number of setStore calls
  // by setting the same values here as prev fields.
  translateExtent: Aa,
  nodeOrigin: vC,
  minZoom: 0.5,
  maxZoom: 2,
  elementsSelectable: !0,
  noPanClassName: "nopan",
  rfId: "1",
  paneClickDistance: 0
};
function XO(l) {
  const { setNodes: Z, setEdges: u, setMinZoom: s, setMaxZoom: G, setTranslateExtent: i, setNodeExtent: m, reset: a, setDefaultNodesAndEdges: n, setPaneClickDistance: p } = yZ(tO, uc), y = lc();
  M.useEffect(() => (n(l.defaultNodes, l.defaultEdges), () => {
    h.current = YM, a();
  }), []);
  const h = M.useRef(YM);
  return M.useEffect(
    () => {
      for (const S of RM) {
        const t = l[S], W = h.current[S];
        t !== W && (typeof l[S] > "u" || (S === "nodes" ? Z(t) : S === "edges" ? u(t) : S === "minZoom" ? s(t) : S === "maxZoom" ? G(t) : S === "translateExtent" ? i(t) : S === "nodeExtent" ? m(t) : S === "paneClickDistance" ? p(t) : S === "fitView" ? y.setState({ fitViewOnInit: t }) : S === "fitViewOptions" ? y.setState({ fitViewOnInitOptions: t }) : y.setState({ [S]: t })));
      }
      h.current = l;
    },
    // Only re-run the effect if one of the fields we track changes
    RM.map((S) => l[S])
  ), null;
}
function kM() {
  return typeof window > "u" || !window.matchMedia ? null : window.matchMedia("(prefers-color-scheme: dark)");
}
function KO(l) {
  var s;
  const [Z, u] = M.useState(l === "system" ? null : l);
  return M.useEffect(() => {
    if (l !== "system") {
      u(l);
      return;
    }
    const G = kM(), i = () => u(G != null && G.matches ? "dark" : "light");
    return i(), G == null || G.addEventListener("change", i), () => {
      G == null || G.removeEventListener("change", i);
    };
  }, [l]), Z !== null ? Z : (s = kM()) != null && s.matches ? "dark" : "light";
}
const MM = typeof document < "u" ? document : null;
function cn(l = null, Z = { target: MM, actInsideInputWithModifier: !0 }) {
  const [u, s] = M.useState(!1), G = M.useRef(!1), i = M.useRef(/* @__PURE__ */ new Set([])), [m, a] = M.useMemo(() => {
    if (l !== null) {
      const p = (Array.isArray(l) ? l : [l]).filter((h) => typeof h == "string").map((h) => h.split("+")), y = p.reduce((h, S) => h.concat(...S), []);
      return [p, y];
    }
    return [[], []];
  }, [l]);
  return M.useEffect(() => {
    const n = (Z == null ? void 0 : Z.target) || MM;
    if (l !== null) {
      const p = (S) => {
        if (G.current = S.ctrlKey || S.metaKey || S.shiftKey, (!G.current || G.current && !Z.actInsideInputWithModifier) && EW(S))
          return !1;
        const W = UM(S.code, a);
        i.current.add(S[W]), IM(m, i.current, !1) && (S.preventDefault(), s(!0));
      }, y = (S) => {
        if ((!G.current || G.current && !Z.actInsideInputWithModifier) && EW(S))
          return !1;
        const W = UM(S.code, a);
        IM(m, i.current, !0) ? (s(!1), i.current.clear()) : i.current.delete(S[W]), S.key === "Meta" && i.current.clear(), G.current = !1;
      }, h = () => {
        i.current.clear(), s(!1);
      };
      return n == null || n.addEventListener("keydown", p), n == null || n.addEventListener("keyup", y), window.addEventListener("blur", h), window.addEventListener("contextmenu", h), () => {
        n == null || n.removeEventListener("keydown", p), n == null || n.removeEventListener("keyup", y), window.removeEventListener("blur", h), window.removeEventListener("contextmenu", h);
      };
    }
  }, [l, s]), u;
}
function IM(l, Z, u) {
  return l.filter((s) => u || s.length === Z.size).some((s) => s.every((G) => Z.has(G)));
}
function UM(l, Z) {
  return Z.includes(l) ? "code" : "key";
}
const WO = () => {
  const l = lc();
  return M.useMemo(() => ({
    zoomIn: (Z) => {
      const { panZoom: u } = l.getState();
      return u ? u.scaleBy(1.2, { duration: Z == null ? void 0 : Z.duration }) : Promise.resolve(!1);
    },
    zoomOut: (Z) => {
      const { panZoom: u } = l.getState();
      return u ? u.scaleBy(1 / 1.2, { duration: Z == null ? void 0 : Z.duration }) : Promise.resolve(!1);
    },
    zoomTo: (Z, u) => {
      const { panZoom: s } = l.getState();
      return s ? s.scaleTo(Z, { duration: u == null ? void 0 : u.duration }) : Promise.resolve(!1);
    },
    getZoom: () => l.getState().transform[2],
    setViewport: async (Z, u) => {
      const { transform: [s, G, i], panZoom: m } = l.getState();
      return m ? (await m.setViewport({
        x: Z.x ?? s,
        y: Z.y ?? G,
        zoom: Z.zoom ?? i
      }, { duration: u == null ? void 0 : u.duration }), Promise.resolve(!0)) : Promise.resolve(!1);
    },
    getViewport: () => {
      const [Z, u, s] = l.getState().transform;
      return { x: Z, y: u, zoom: s };
    },
    fitView: (Z) => {
      const { nodeLookup: u, minZoom: s, maxZoom: G, panZoom: i, domNode: m } = l.getState();
      if (!i || !m)
        return Promise.resolve(!1);
      const a = vW(u, Z), { width: n, height: p } = cy(m);
      return TW({
        nodes: a,
        width: n,
        height: p,
        minZoom: s,
        maxZoom: G,
        panZoom: i
      }, Z);
    },
    setCenter: async (Z, u, s) => {
      const { width: G, height: i, maxZoom: m, panZoom: a } = l.getState(), n = typeof (s == null ? void 0 : s.zoom) < "u" ? s.zoom : m, p = G / 2 - Z * n, y = i / 2 - u * n;
      return a ? (await a.setViewport({
        x: p,
        y,
        zoom: n
      }, { duration: s == null ? void 0 : s.duration }), Promise.resolve(!0)) : Promise.resolve(!1);
    },
    fitBounds: async (Z, u) => {
      const { width: s, height: G, minZoom: i, maxZoom: m, panZoom: a } = l.getState(), n = QV(Z, s, G, i, m, (u == null ? void 0 : u.padding) ?? 0.1);
      return a ? (await a.setViewport(n, { duration: u == null ? void 0 : u.duration }), Promise.resolve(!0)) : Promise.resolve(!1);
    },
    screenToFlowPosition: (Z, u = { snapToGrid: !0 }) => {
      const { transform: s, snapGrid: G, domNode: i } = l.getState();
      if (!i)
        return Z;
      const { x: m, y: a } = i.getBoundingClientRect(), n = {
        x: Z.x - m,
        y: Z.y - a
      };
      return Xn(n, s, u.snapToGrid, G);
    },
    flowToScreenPosition: (Z) => {
      const { transform: u, domNode: s } = l.getState();
      if (!s)
        return Z;
      const { x: G, y: i } = s.getBoundingClientRect(), m = yC(Z, u);
      return {
        x: m.x + G,
        y: m.y + i
      };
    }
  }), []);
};
function TC(l, Z) {
  const u = [], s = /* @__PURE__ */ new Map(), G = [];
  for (const i of l)
    if (i.type === "add") {
      G.push(i);
      continue;
    } else if (i.type === "remove" || i.type === "replace")
      s.set(i.id, [i]);
    else {
      const m = s.get(i.id);
      m ? m.push(i) : s.set(i.id, [i]);
    }
  for (const i of Z) {
    const m = s.get(i.id);
    if (!m) {
      u.push(i);
      continue;
    }
    if (m[0].type === "remove")
      continue;
    if (m[0].type === "replace") {
      u.push({ ...m[0].item });
      continue;
    }
    const a = { ...i };
    for (const n of m)
      VO(n, a);
    u.push(a);
  }
  return G.length && G.forEach((i) => {
    i.index !== void 0 ? u.splice(i.index, 0, { ...i.item }) : u.push({ ...i.item });
  }), u;
}
function VO(l, Z) {
  switch (l.type) {
    case "select": {
      Z.selected = l.selected;
      break;
    }
    case "position": {
      typeof l.position < "u" && (Z.position = l.position), typeof l.dragging < "u" && (Z.dragging = l.dragging);
      break;
    }
    case "dimensions": {
      typeof l.dimensions < "u" && (Z.measured ?? (Z.measured = {}), Z.measured.width = l.dimensions.width, Z.measured.height = l.dimensions.height, l.setAttributes && (Z.width = l.dimensions.width, Z.height = l.dimensions.height)), typeof l.resizing == "boolean" && (Z.resizing = l.resizing);
      break;
    }
  }
}
function xO(l, Z) {
  return TC(l, Z);
}
function RO(l, Z) {
  return TC(l, Z);
}
function um(l, Z) {
  return {
    id: l,
    type: "select",
    selected: Z
  };
}
function Bi(l, Z = /* @__PURE__ */ new Set(), u = !1) {
  const s = [];
  for (const [G, i] of l) {
    const m = Z.has(G);
    !(i.selected === void 0 && !m) && i.selected !== m && (u && (i.selected = m), s.push(um(i.id, m)));
  }
  return s;
}
function CM({ items: l = [], lookup: Z }) {
  var G;
  const u = [], s = new Map(l.map((i) => [i.id, i]));
  for (const [i, m] of l.entries()) {
    const a = Z.get(m.id), n = ((G = a == null ? void 0 : a.internals) == null ? void 0 : G.userNode) ?? a;
    n !== void 0 && n !== m && u.push({ id: m.id, item: m, type: "replace" }), n === void 0 && u.push({ item: m, type: "add", index: i });
  }
  for (const [i] of Z)
    s.get(i) === void 0 && u.push({ id: i, type: "remove" });
  return u;
}
function rM(l) {
  return {
    id: l.id,
    type: "remove"
  };
}
const FM = (l) => b8(l), YO = (l) => eC(l);
function fC(l) {
  return M.forwardRef(l);
}
const kO = typeof window < "u" ? M.useLayoutEffect : M.useEffect;
function NM(l) {
  const [Z, u] = M.useState(!1), [s] = M.useState(() => MO(() => u(!0)));
  return kO(() => {
    if (!Z) {
      s.reset();
      return;
    }
    const G = s.get();
    G.length && (l(G), s.reset()), u(!1);
  }, [Z]), s;
}
function MO(l) {
  let Z = [];
  return {
    get: () => Z,
    reset: () => {
      Z = [];
    },
    push: (u) => {
      Z.push(u), l();
    }
  };
}
const EC = M.createContext(null);
function IO({ children: l }) {
  const Z = lc(), u = M.useCallback((a) => {
    const { nodes: n = [], setNodes: p, hasDefaultNodes: y, onNodesChange: h, nodeLookup: S } = Z.getState();
    let t = n;
    for (const W of a)
      t = typeof W == "function" ? W(t) : W;
    y ? p(t) : h && h(CM({
      items: t,
      lookup: S
    }));
  }, []), s = NM(u), G = M.useCallback((a) => {
    const { edges: n = [], setEdges: p, hasDefaultEdges: y, onEdgesChange: h, edgeLookup: S } = Z.getState();
    let t = n;
    for (const W of a)
      t = typeof W == "function" ? W(t) : W;
    y ? p(t) : h && h(CM({
      items: t,
      lookup: S
    }));
  }, []), i = NM(G), m = M.useMemo(() => ({ nodeQueue: s, edgeQueue: i }), []);
  return B.jsx(EC.Provider, { value: m, children: l });
}
function UO() {
  const l = M.useContext(EC);
  if (!l)
    throw new Error("useBatchContext must be used within a BatchProvider");
  return l;
}
const CO = (l) => !!l.panZoom;
function sy() {
  const l = WO(), Z = lc(), u = UO(), s = yZ(CO), G = M.useMemo(() => {
    const i = (h) => Z.getState().nodeLookup.get(h), m = (h) => {
      u.nodeQueue.push(h);
    }, a = (h) => {
      u.edgeQueue.push(h);
    }, n = (h) => {
      var x, r;
      const { nodeLookup: S, nodeOrigin: t } = Z.getState(), W = FM(h) ? h : S.get(h.id), V = W.parentId ? SC(W.position, W.measured, W.parentId, S, t) : W.position, R = {
        id: W.id,
        position: V,
        width: ((x = W.measured) == null ? void 0 : x.width) ?? W.width,
        height: ((r = W.measured) == null ? void 0 : r.height) ?? W.height,
        data: W.data
      };
      return yo(R);
    }, p = (h, S, t = { replace: !1 }) => {
      m((W) => W.map((V) => {
        if (V.id === h) {
          const R = typeof S == "function" ? S(V) : S;
          return t.replace && FM(R) ? R : { ...V, ...R };
        }
        return V;
      }));
    }, y = (h, S, t = { replace: !1 }) => {
      a((W) => W.map((V) => {
        if (V.id === h) {
          const R = typeof S == "function" ? S(V) : S;
          return t.replace && YO(R) ? R : { ...V, ...R };
        }
        return V;
      }));
    };
    return {
      getNodes: () => Z.getState().nodes.map((h) => ({ ...h })),
      getNode: (h) => {
        var S;
        return (S = i(h)) == null ? void 0 : S.internals.userNode;
      },
      getInternalNode: i,
      getEdges: () => {
        const { edges: h = [] } = Z.getState();
        return h.map((S) => ({ ...S }));
      },
      getEdge: (h) => Z.getState().edgeLookup.get(h),
      setNodes: m,
      setEdges: a,
      addNodes: (h) => {
        const S = Array.isArray(h) ? h : [h];
        u.nodeQueue.push((t) => [...t, ...S]);
      },
      addEdges: (h) => {
        const S = Array.isArray(h) ? h : [h];
        u.edgeQueue.push((t) => [...t, ...S]);
      },
      toObject: () => {
        const { nodes: h = [], edges: S = [], transform: t } = Z.getState(), [W, V, R] = t;
        return {
          nodes: h.map((x) => ({ ...x })),
          edges: S.map((x) => ({ ...x })),
          viewport: {
            x: W,
            y: V,
            zoom: R
          }
        };
      },
      deleteElements: async ({ nodes: h = [], edges: S = [] }) => {
        const { nodes: t, edges: W, onNodesDelete: V, onEdgesDelete: R, triggerNodeChanges: x, triggerEdgeChanges: r, onDelete: k, onBeforeDelete: U } = Z.getState(), { nodes: w, edges: z } = await d8({
          nodesToRemove: h,
          edgesToRemove: S,
          nodes: t,
          edges: W,
          onBeforeDelete: U
        }), D = z.length > 0, C = w.length > 0;
        if (D) {
          const j = z.map(rM);
          R == null || R(z), r(j);
        }
        if (C) {
          const j = w.map(rM);
          V == null || V(w), x(j);
        }
        return (C || D) && (k == null || k({ nodes: w, edges: z })), { deletedNodes: w, deletedEdges: z };
      },
      getIntersectingNodes: (h, S = !0, t) => {
        const W = eM(h), V = W ? h : n(h), R = t !== void 0;
        return V ? (t || Z.getState().nodes).filter((x) => {
          const r = Z.getState().nodeLookup.get(x.id);
          if (r && !W && (x.id === h.id || !r.internals.positionAbsolute))
            return !1;
          const k = yo(R ? x : r), U = _a(k, V);
          return S && U > 0 || U >= V.width * V.height;
        }) : [];
      },
      isNodeIntersecting: (h, S, t = !0) => {
        const V = eM(h) ? h : n(h);
        if (!V)
          return !1;
        const R = _a(V, S);
        return t && R > 0 || R >= V.width * V.height;
      },
      updateNode: p,
      updateNodeData: (h, S, t = { replace: !1 }) => {
        p(h, (W) => {
          const V = typeof S == "function" ? S(W) : S;
          return t.replace ? { ...W, data: V } : { ...W, data: { ...W.data, ...V } };
        }, t);
      },
      updateEdge: y,
      updateEdgeData: (h, S, t = { replace: !1 }) => {
        y(h, (W) => {
          const V = typeof S == "function" ? S(W) : S;
          return t.replace ? { ...W, data: V } : { ...W, data: { ...W.data, ...V } };
        }, t);
      },
      getNodesBounds: (h) => {
        const { nodeLookup: S, nodeOrigin: t } = Z.getState();
        return u8(h, { nodeLookup: S, nodeOrigin: t });
      },
      getHandleConnections: ({ type: h, id: S, nodeId: t }) => {
        var W;
        return Array.from(((W = Z.getState().connectionLookup.get(`${t}-${h}-${S ?? null}`)) == null ? void 0 : W.values()) ?? []);
      }
    };
  }, []);
  return M.useMemo(() => ({
    ...G,
    ...l,
    viewportInitialized: s
  }), [s]);
}
const wM = (l) => l.selected, rO = { actInsideInputWithModifier: !1 }, FO = typeof window < "u" ? window : void 0;
function NO({ deleteKeyCode: l, multiSelectionKeyCode: Z }) {
  const u = lc(), { deleteElements: s } = sy(), G = cn(l, rO), i = cn(Z, { target: FO });
  M.useEffect(() => {
    if (G) {
      const { edges: m, nodes: a } = u.getState();
      s({ nodes: a.filter(wM), edges: m.filter(wM) }), u.setState({ nodesSelectionActive: !1 });
    }
  }, [G]), M.useEffect(() => {
    u.setState({ multiSelectionActive: i });
  }, [i]);
}
function wO(l) {
  const Z = lc();
  M.useEffect(() => {
    const u = () => {
      var G, i;
      if (!l.current)
        return !1;
      const s = cy(l.current);
      (s.height === 0 || s.width === 0) && ((i = (G = Z.getState()).onError) == null || i.call(G, "004", Sd.error004())), Z.setState({ width: s.width || 500, height: s.height || 500 });
    };
    if (l.current) {
      u(), window.addEventListener("resize", u);
      const s = new ResizeObserver(() => u());
      return s.observe(l.current), () => {
        window.removeEventListener("resize", u), s && l.current && s.unobserve(l.current);
      };
    }
  }, []);
}
const dy = {
  position: "absolute",
  width: "100%",
  height: "100%",
  top: 0,
  left: 0
}, zO = (l) => ({
  userSelectionActive: l.userSelectionActive,
  lib: l.lib
});
function JO({ onPaneContextMenu: l, zoomOnScroll: Z = !0, zoomOnPinch: u = !0, panOnScroll: s = !1, panOnScrollSpeed: G = 0.5, panOnScrollMode: i = hm.Free, zoomOnDoubleClick: m = !0, panOnDrag: a = !0, defaultViewport: n, translateExtent: p, minZoom: y, maxZoom: h, zoomActivationKeyCode: S, preventScrolling: t = !0, children: W, noWheelClassName: V, noPanClassName: R, onViewportChange: x, isControlledViewport: r, paneClickDistance: k }) {
  const U = lc(), w = M.useRef(null), { userSelectionActive: z, lib: D } = yZ(zO, uc), C = cn(S), j = M.useRef();
  wO(w);
  const E = M.useCallback((g) => {
    x == null || x({ x: g[0], y: g[1], zoom: g[2] }), r || U.setState({ transform: g });
  }, [x, r]);
  return M.useEffect(() => {
    if (w.current) {
      j.current = T8({
        domNode: w.current,
        minZoom: y,
        maxZoom: h,
        translateExtent: p,
        viewport: n,
        paneClickDistance: k,
        onDraggingChange: (F) => U.setState({ paneDragging: F }),
        onPanZoomStart: (F, v) => {
          const { onViewportChangeStart: T, onMoveStart: f } = U.getState();
          f == null || f(F, v), T == null || T(v);
        },
        onPanZoom: (F, v) => {
          const { onViewportChange: T, onMove: f } = U.getState();
          f == null || f(F, v), T == null || T(v);
        },
        onPanZoomEnd: (F, v) => {
          const { onViewportChangeEnd: T, onMoveEnd: f } = U.getState();
          f == null || f(F, v), T == null || T(v);
        }
      });
      const { x: g, y: A, zoom: J } = j.current.getViewport();
      return U.setState({
        panZoom: j.current,
        transform: [g, A, J],
        domNode: w.current.closest(".react-flow")
      }), () => {
        var F;
        (F = j.current) == null || F.destroy();
      };
    }
  }, []), M.useEffect(() => {
    var g;
    (g = j.current) == null || g.update({
      onPaneContextMenu: l,
      zoomOnScroll: Z,
      zoomOnPinch: u,
      panOnScroll: s,
      panOnScrollSpeed: G,
      panOnScrollMode: i,
      zoomOnDoubleClick: m,
      panOnDrag: a,
      zoomActivationKeyPressed: C,
      preventScrolling: t,
      noPanClassName: R,
      userSelectionActive: z,
      noWheelClassName: V,
      lib: D,
      onTransformChange: E
    });
  }, [
    l,
    Z,
    u,
    s,
    G,
    i,
    m,
    a,
    C,
    t,
    R,
    z,
    V,
    D,
    E
  ]), B.jsx("div", { className: "react-flow__renderer", ref: w, style: dy, children: W });
}
const HO = (l) => ({
  userSelectionActive: l.userSelectionActive,
  userSelectionRect: l.userSelectionRect
});
function gO() {
  const { userSelectionActive: l, userSelectionRect: Z } = yZ(HO, uc);
  return l && Z ? B.jsx("div", { className: "react-flow__selection react-flow__container", style: {
    width: Z.width,
    height: Z.height,
    transform: `translate(${Z.x}px, ${Z.y}px)`
  } }) : null;
}
const $K = (l, Z) => (u) => {
  u.target === Z.current && (l == null || l(u));
}, vO = (l) => ({
  userSelectionActive: l.userSelectionActive,
  elementsSelectable: l.elementsSelectable,
  dragging: l.paneDragging
});
function TO({ isSelecting: l, selectionKeyPressed: Z, selectionMode: u = $a.Full, panOnDrag: s, selectionOnDrag: G, onSelectionStart: i, onSelectionEnd: m, onPaneClick: a, onPaneContextMenu: n, onPaneScroll: p, onPaneMouseEnter: y, onPaneMouseMove: h, onPaneMouseLeave: S, children: t }) {
  const W = M.useRef(null), V = lc(), R = M.useRef(0), x = M.useRef(0), r = M.useRef(), k = M.useRef(/* @__PURE__ */ new Map()), { userSelectionActive: U, elementsSelectable: w, dragging: z } = yZ(vO, uc), D = w && (l || U), C = M.useRef(!1), j = M.useRef(!1), E = () => {
    V.setState({ userSelectionActive: !1, userSelectionRect: null }), R.current = 0, x.current = 0;
  }, g = (O) => {
    if (C.current) {
      C.current = !1;
      return;
    }
    a == null || a(O), V.getState().resetSelectedElements(), V.setState({ nodesSelectionActive: !1 });
  }, A = (O) => {
    if (Array.isArray(s) && (s != null && s.includes(2))) {
      O.preventDefault();
      return;
    }
    n == null || n(O);
  }, J = p ? (O) => p(O) : void 0, F = (O) => {
    var ml, Rl, kl, zl;
    const { resetSelectedElements: _, domNode: il, edgeLookup: Zl } = V.getState();
    if (r.current = il == null ? void 0 : il.getBoundingClientRect(), !w || !l || O.button !== 0 || O.target !== W.current || !r.current)
      return;
    (Rl = (ml = O.target) == null ? void 0 : ml.setPointerCapture) == null || Rl.call(ml, O.pointerId), j.current = !0, C.current = !1, k.current = /* @__PURE__ */ new Map();
    for (const [Vl, el] of Zl)
      k.current.set(el.source, ((kl = k.current.get(el.source)) == null ? void 0 : kl.add(Vl)) || /* @__PURE__ */ new Set([Vl])), k.current.set(el.target, ((zl = k.current.get(el.target)) == null ? void 0 : zl.add(Vl)) || /* @__PURE__ */ new Set([Vl]));
    const { x: ol, y: Wl } = ed(O.nativeEvent, r.current);
    _(), V.setState({
      userSelectionRect: {
        width: 0,
        height: 0,
        startX: ol,
        startY: Wl,
        x: ol,
        y: Wl
      }
    }), i == null || i(O);
  }, v = (O) => {
    const { userSelectionRect: _, edgeLookup: il, transform: Zl, nodeLookup: ol, triggerNodeChanges: Wl, triggerEdgeChanges: ml } = V.getState();
    if (!r.current || !_)
      return;
    C.current = !0;
    const { x: Rl, y: kl } = ed(O.nativeEvent, r.current), { startX: zl, startY: Vl } = _, el = {
      startX: zl,
      startY: Vl,
      x: Rl < zl ? Rl : zl,
      y: kl < Vl ? kl : Vl,
      width: Math.abs(Rl - zl),
      height: Math.abs(kl - Vl)
    }, xl = aC(ol, el, Zl, u === $a.Partial, !0), hl = /* @__PURE__ */ new Set(), cl = /* @__PURE__ */ new Set();
    for (const wl of xl) {
      cl.add(wl.id);
      const Jl = k.current.get(wl.id);
      if (Jl)
        for (const cZ of Jl)
          hl.add(cZ);
    }
    if (R.current !== cl.size) {
      R.current = cl.size;
      const wl = Bi(ol, cl, !0);
      Wl(wl);
    }
    if (x.current !== hl.size) {
      x.current = hl.size;
      const wl = Bi(il, hl);
      ml(wl);
    }
    V.setState({
      userSelectionRect: el,
      userSelectionActive: !0,
      nodesSelectionActive: !1
    });
  }, T = (O) => {
    var il, Zl;
    if (O.button !== 0 || !j.current)
      return;
    (Zl = (il = O.target) == null ? void 0 : il.releasePointerCapture) == null || Zl.call(il, O.pointerId);
    const { userSelectionRect: _ } = V.getState();
    !U && _ && O.target === W.current && (g == null || g(O)), R.current > 0 && V.setState({ nodesSelectionActive: !0 }), E(), m == null || m(O), (Z || G) && (C.current = !1), j.current = !1;
  }, f = s === !0 || Array.isArray(s) && s.includes(0);
  return B.jsxs("div", { className: Lc(["react-flow__pane", { draggable: f, dragging: z, selection: l }]), onClick: D ? void 0 : $K(g, W), onContextMenu: $K(A, W), onWheel: $K(J, W), onPointerEnter: D ? void 0 : y, onPointerDown: D ? F : h, onPointerMove: D ? v : h, onPointerUp: D ? T : void 0, onPointerLeave: S, ref: W, style: dy, children: [t, B.jsx(gO, {})] });
}
function PW({ id: l, store: Z, unselect: u = !1, nodeRef: s }) {
  const { addSelectedNodes: G, unselectNodesAndEdges: i, multiSelectionActive: m, nodeLookup: a, onError: n } = Z.getState(), p = a.get(l);
  if (!p) {
    n == null || n("012", Sd.error012(l));
    return;
  }
  Z.setState({ nodesSelectionActive: !1 }), p.selected ? (u || p.selected && m) && (i({ nodes: [p], edges: [] }), requestAnimationFrame(() => {
    var y;
    return (y = s == null ? void 0 : s.current) == null ? void 0 : y.blur();
  })) : G([l]);
}
function BC({ nodeRef: l, disabled: Z = !1, noDragClassName: u, handleSelector: s, nodeId: G, isSelectable: i, nodeClickDistance: m }) {
  const a = lc(), [n, p] = M.useState(!1), y = M.useRef();
  return M.useEffect(() => {
    y.current = k8({
      getStoreItems: () => a.getState(),
      onNodeMouseDown: (h) => {
        PW({
          id: h,
          store: a,
          nodeRef: l
        });
      },
      onDragStart: () => {
        p(!0);
      },
      onDragStop: () => {
        p(!1);
      }
    });
  }, []), M.useEffect(() => {
    var h, S;
    if (Z)
      (h = y.current) == null || h.destroy();
    else if (l.current)
      return (S = y.current) == null || S.update({
        noDragClassName: u,
        handleSelector: s,
        domNode: l.current,
        isSelectable: i,
        nodeId: G,
        nodeClickDistance: m
      }), () => {
        var t;
        (t = y.current) == null || t.destroy();
      };
  }, [u, s, Z, i, l, G]), n;
}
const fO = (l) => (Z) => Z.selected && (Z.draggable || l && typeof Z.draggable > "u");
function DC() {
  const l = lc();
  return M.useCallback((u) => {
    const { nodeExtent: s, snapToGrid: G, snapGrid: i, nodesDraggable: m, onError: a, updateNodePositions: n, nodeLookup: p, nodeOrigin: y } = l.getState(), h = /* @__PURE__ */ new Map(), S = fO(m), t = G ? i[0] : 5, W = G ? i[1] : 5, V = u.direction.x * t * u.factor, R = u.direction.y * W * u.factor;
    for (const [, x] of p) {
      if (!S(x))
        continue;
      let r = {
        x: x.internals.positionAbsolute.x + V,
        y: x.internals.positionAbsolute.y + R
      };
      G && (r = Zy(r, i));
      const { position: k, positionAbsolute: U } = nC({
        nodeId: x.id,
        nextPosition: r,
        nodeLookup: p,
        nodeExtent: s,
        nodeOrigin: y,
        onError: a
      });
      x.position = k, x.internals.positionAbsolute = U, h.set(x.id, x);
    }
    n(h);
  }, []);
}
const _V = M.createContext(null), EO = _V.Provider;
_V.Consumer;
const lx = () => M.useContext(_V), BO = (l) => ({
  connectOnClick: l.connectOnClick,
  noPanClassName: l.noPanClassName,
  rfId: l.rfId
}), DO = (l, Z, u) => (s) => {
  const { connectionClickStartHandle: G, connectionMode: i, connection: m } = s, { fromHandle: a, toHandle: n, isValid: p } = m, y = (n == null ? void 0 : n.nodeId) === l && (n == null ? void 0 : n.id) === Z && (n == null ? void 0 : n.type) === u;
  return {
    connectingFrom: (a == null ? void 0 : a.nodeId) === l && (a == null ? void 0 : a.id) === Z && (a == null ? void 0 : a.type) === u,
    connectingTo: y,
    clickConnecting: (G == null ? void 0 : G.nodeId) === l && (G == null ? void 0 : G.id) === Z && (G == null ? void 0 : G.type) === u,
    isPossibleEndHandle: i === Lo.Strict ? (a == null ? void 0 : a.type) !== u : l !== (a == null ? void 0 : a.nodeId) || Z !== (a == null ? void 0 : a.id),
    connectionInProcess: !!a,
    valid: y && p
  };
};
function jO({ type: l = "source", position: Z = Tl.Top, isValidConnection: u, isConnectable: s = !0, isConnectableStart: G = !0, isConnectableEnd: i = !0, id: m, onConnect: a, children: n, className: p, onMouseDown: y, onTouchStart: h, ...S }, t) {
  var F, v;
  const W = m || null, V = l === "target", R = lc(), x = lx(), { connectOnClick: r, noPanClassName: k, rfId: U } = yZ(BO, uc), { connectingFrom: w, connectingTo: z, clickConnecting: D, isPossibleEndHandle: C, connectionInProcess: j, valid: E } = yZ(DO(x, W, l), uc);
  x || (v = (F = R.getState()).onError) == null || v.call(F, "010", Sd.error010());
  const g = (T) => {
    const { defaultEdgeOptions: f, onConnect: O, hasDefaultEdges: _ } = R.getState(), il = {
      ...f,
      ...T
    };
    if (_) {
      const { edges: Zl, setEdges: ol } = R.getState();
      ol(n8(il, Zl));
    }
    O == null || O(il), a == null || a(il);
  }, A = (T) => {
    if (!x)
      return;
    const f = XC(T.nativeEvent);
    if (G && (f && T.button === 0 || !f)) {
      const O = R.getState();
      QW.onPointerDown(T.nativeEvent, {
        autoPanOnConnect: O.autoPanOnConnect,
        connectionMode: O.connectionMode,
        connectionRadius: O.connectionRadius,
        domNode: O.domNode,
        nodeLookup: O.nodeLookup,
        lib: O.lib,
        isTarget: V,
        handleId: W,
        nodeId: x,
        flowId: O.rfId,
        panBy: O.panBy,
        cancelConnection: O.cancelConnection,
        onConnectStart: O.onConnectStart,
        onConnectEnd: O.onConnectEnd,
        updateConnection: O.updateConnection,
        onConnect: g,
        isValidConnection: u || O.isValidConnection,
        getTransform: () => R.getState().transform,
        getFromHandle: () => R.getState().connection.fromHandle,
        autoPanSpeed: O.autoPanSpeed
      });
    }
    f ? y == null || y(T) : h == null || h(T);
  }, J = (T) => {
    const { onClickConnectStart: f, onClickConnectEnd: O, connectionClickStartHandle: _, connectionMode: il, isValidConnection: Zl, lib: ol, rfId: Wl, nodeLookup: ml, connection: Rl } = R.getState();
    if (!x || !_ && !G)
      return;
    if (!_) {
      f == null || f(T.nativeEvent, { nodeId: x, handleId: W, handleType: l }), R.setState({ connectionClickStartHandle: { nodeId: x, type: l, id: W } });
      return;
    }
    const kl = tC(T.target), zl = u || Zl, { connection: Vl, isValid: el } = QW.isValid(T.nativeEvent, {
      handle: {
        nodeId: x,
        id: W,
        type: l
      },
      connectionMode: il,
      fromNodeId: _.nodeId,
      fromHandleId: _.id || null,
      fromType: _.type,
      isValidConnection: zl,
      flowId: Wl,
      doc: kl,
      lib: ol,
      nodeLookup: ml
    });
    el && Vl && g(Vl);
    const xl = structuredClone(Rl);
    delete xl.inProgress, xl.toPosition = xl.toHandle ? xl.toHandle.position : null, O == null || O(T, xl), R.setState({ connectionClickStartHandle: null });
  };
  return B.jsx("div", { "data-handleid": W, "data-nodeid": x, "data-handlepos": Z, "data-id": `${U}-${x}-${W}-${l}`, className: Lc([
    "react-flow__handle",
    `react-flow__handle-${Z}`,
    "nodrag",
    k,
    p,
    {
      source: !V,
      target: V,
      connectable: s,
      connectablestart: G,
      connectableend: i,
      clickconnecting: D,
      connectingfrom: w,
      connectingto: z,
      valid: E,
      // shows where you can start a connection from
      // and where you can end it while connecting
      connectionindicator: s && (!j || C) && (j ? i : G)
    }
  ]), onMouseDown: A, onTouchStart: A, onClick: r ? J : void 0, ref: t, ...S, children: n });
}
const Rm = M.memo(fC(jO));
function QO({ data: l, isConnectable: Z, sourcePosition: u = Tl.Bottom }) {
  return B.jsxs(B.Fragment, { children: [l == null ? void 0 : l.label, B.jsx(Rm, { type: "source", position: u, isConnectable: Z })] });
}
function PO({ data: l, isConnectable: Z, targetPosition: u = Tl.Top, sourcePosition: s = Tl.Bottom }) {
  return B.jsxs(B.Fragment, { children: [B.jsx(Rm, { type: "target", position: u, isConnectable: Z }), l == null ? void 0 : l.label, B.jsx(Rm, { type: "source", position: s, isConnectable: Z })] });
}
function OO() {
  return null;
}
function AO({ data: l, isConnectable: Z, targetPosition: u = Tl.Top }) {
  return B.jsxs(B.Fragment, { children: [B.jsx(Rm, { type: "target", position: u, isConnectable: Z }), l == null ? void 0 : l.label] });
}
const Mh = {
  ArrowUp: { x: 0, y: -1 },
  ArrowDown: { x: 0, y: 1 },
  ArrowLeft: { x: -1, y: 0 },
  ArrowRight: { x: 1, y: 0 }
}, zM = {
  input: QO,
  default: PO,
  output: AO,
  group: OO
};
function $O(l) {
  var Z, u, s, G;
  return l.internals.handleBounds === void 0 ? {
    width: l.width ?? l.initialWidth ?? ((Z = l.style) == null ? void 0 : Z.width),
    height: l.height ?? l.initialHeight ?? ((u = l.style) == null ? void 0 : u.height)
  } : {
    width: l.width ?? ((s = l.style) == null ? void 0 : s.width),
    height: l.height ?? ((G = l.style) == null ? void 0 : G.height)
  };
}
const qO = (l) => {
  const { width: Z, height: u, x: s, y: G } = Mo(l.nodeLookup, {
    filter: (i) => !!i.selected
  });
  return {
    width: Bu(Z) ? Z : null,
    height: Bu(u) ? u : null,
    userSelectionActive: l.userSelectionActive,
    transformString: `translate(${l.transform[0]}px,${l.transform[1]}px) scale(${l.transform[2]}) translate(${s}px,${G}px)`
  };
};
function _O({ onSelectionContextMenu: l, noPanClassName: Z, disableKeyboardA11y: u }) {
  const s = lc(), { width: G, height: i, transformString: m, userSelectionActive: a } = yZ(qO, uc), n = DC(), p = M.useRef(null);
  if (M.useEffect(() => {
    var S;
    u || (S = p.current) == null || S.focus({
      preventScroll: !0
    });
  }, [u]), BC({
    nodeRef: p
  }), a || !G || !i)
    return null;
  const y = l ? (S) => {
    const t = s.getState().nodes.filter((W) => W.selected);
    l(S, t);
  } : void 0, h = (S) => {
    Object.prototype.hasOwnProperty.call(Mh, S.key) && n({
      direction: Mh[S.key],
      factor: S.shiftKey ? 4 : 1
    });
  };
  return B.jsx("div", { className: Lc(["react-flow__nodesselection", "react-flow__container", Z]), style: {
    transform: m
  }, children: B.jsx("div", { ref: p, className: "react-flow__nodesselection-rect", onContextMenu: y, tabIndex: u ? void 0 : -1, onKeyDown: u ? void 0 : h, style: {
    width: G,
    height: i
  } }) });
}
const JM = typeof window < "u" ? window : void 0, lA = (l) => ({ nodesSelectionActive: l.nodesSelectionActive, userSelectionActive: l.userSelectionActive });
function jC({ children: l, onPaneClick: Z, onPaneMouseEnter: u, onPaneMouseMove: s, onPaneMouseLeave: G, onPaneContextMenu: i, onPaneScroll: m, paneClickDistance: a, deleteKeyCode: n, selectionKeyCode: p, selectionOnDrag: y, selectionMode: h, onSelectionStart: S, onSelectionEnd: t, multiSelectionKeyCode: W, panActivationKeyCode: V, zoomActivationKeyCode: R, elementsSelectable: x, zoomOnScroll: r, zoomOnPinch: k, panOnScroll: U, panOnScrollSpeed: w, panOnScrollMode: z, zoomOnDoubleClick: D, panOnDrag: C, defaultViewport: j, translateExtent: E, minZoom: g, maxZoom: A, preventScrolling: J, onSelectionContextMenu: F, noWheelClassName: v, noPanClassName: T, disableKeyboardA11y: f, onViewportChange: O, isControlledViewport: _ }) {
  const { nodesSelectionActive: il, userSelectionActive: Zl } = yZ(lA), ol = cn(p, { target: JM }), Wl = cn(V, { target: JM }), ml = Wl || C, Rl = Wl || U, kl = y && ml !== !0, zl = ol || Zl || kl;
  return NO({ deleteKeyCode: n, multiSelectionKeyCode: W }), B.jsx(JO, { onPaneContextMenu: i, elementsSelectable: x, zoomOnScroll: r, zoomOnPinch: k, panOnScroll: Rl, panOnScrollSpeed: w, panOnScrollMode: z, zoomOnDoubleClick: D, panOnDrag: !ol && ml, defaultViewport: j, translateExtent: E, minZoom: g, maxZoom: A, zoomActivationKeyCode: R, preventScrolling: J, noWheelClassName: v, noPanClassName: T, onViewportChange: O, isControlledViewport: _, paneClickDistance: a, children: B.jsxs(TO, { onSelectionStart: S, onSelectionEnd: t, onPaneClick: Z, onPaneMouseEnter: u, onPaneMouseMove: s, onPaneMouseLeave: G, onPaneContextMenu: i, onPaneScroll: m, panOnDrag: ml, isSelecting: !!zl, selectionMode: h, selectionKeyPressed: ol, selectionOnDrag: kl, children: [l, il && B.jsx(_O, { onSelectionContextMenu: F, noPanClassName: T, disableKeyboardA11y: f })] }) });
}
jC.displayName = "FlowRenderer";
const ZA = M.memo(jC), cA = (l) => (Z) => l ? aC(Z.nodeLookup, { x: 0, y: 0, width: Z.width, height: Z.height }, Z.transform, !0).map((u) => u.id) : Array.from(Z.nodeLookup.keys());
function bA(l) {
  return yZ(M.useCallback(cA(l), [l]), uc);
}
const uA = (l) => l.updateNodeInternals;
function sA() {
  const l = yZ(uA), [Z] = M.useState(() => typeof ResizeObserver > "u" ? null : new ResizeObserver((u) => {
    const s = /* @__PURE__ */ new Map();
    u.forEach((G) => {
      const i = G.target.getAttribute("data-id");
      s.set(i, {
        id: i,
        nodeElement: G.target,
        force: !0
      });
    }), l(s);
  }));
  return M.useEffect(() => () => {
    Z == null || Z.disconnect();
  }, [Z]), Z;
}
function dA({ node: l, nodeType: Z, hasDimensions: u, resizeObserver: s }) {
  const G = lc(), i = M.useRef(null), m = M.useRef(null), a = M.useRef(l.sourcePosition), n = M.useRef(l.targetPosition), p = M.useRef(Z), y = u && !!l.internals.handleBounds;
  return M.useEffect(() => {
    i.current && !l.hidden && (!y || m.current !== i.current) && (m.current && (s == null || s.unobserve(m.current)), s == null || s.observe(i.current), m.current = i.current);
  }, [y, l.hidden]), M.useEffect(() => () => {
    m.current && (s == null || s.unobserve(m.current), m.current = null);
  }, []), M.useEffect(() => {
    if (i.current) {
      const h = p.current !== Z, S = a.current !== l.sourcePosition, t = n.current !== l.targetPosition;
      (h || S || t) && (p.current = Z, a.current = l.sourcePosition, n.current = l.targetPosition, G.getState().updateNodeInternals(/* @__PURE__ */ new Map([[l.id, { id: l.id, nodeElement: i.current, force: !0 }]])));
    }
  }, [l.id, Z, l.sourcePosition, l.targetPosition]), i;
}
function GA({ id: l, onClick: Z, onMouseEnter: u, onMouseMove: s, onMouseLeave: G, onContextMenu: i, onDoubleClick: m, nodesDraggable: a, elementsSelectable: n, nodesConnectable: p, nodesFocusable: y, resizeObserver: h, noDragClassName: S, noPanClassName: t, disableKeyboardA11y: W, rfId: V, nodeTypes: R, nodeExtent: x, nodeClickDistance: r, onError: k }) {
  const { node: U, internals: w, isParent: z } = yZ((Vl) => {
    const el = Vl.nodeLookup.get(l), xl = Vl.parentLookup.has(l);
    return {
      node: el,
      internals: el.internals,
      isParent: xl
    };
  }, uc);
  let D = U.type || "default", C = (R == null ? void 0 : R[D]) || zM[D];
  C === void 0 && (k == null || k("003", Sd.error003(D)), D = "default", C = zM.default);
  const j = !!(U.draggable || a && typeof U.draggable > "u"), E = !!(U.selectable || n && typeof U.selectable > "u"), g = !!(U.connectable || p && typeof U.connectable > "u"), A = !!(U.focusable || y && typeof U.focusable > "u"), J = lc(), F = PV(U), v = dA({ node: U, nodeType: D, hasDimensions: F, resizeObserver: h }), T = BC({
    nodeRef: v,
    disabled: U.hidden || !j,
    noDragClassName: S,
    handleSelector: U.dragHandle,
    nodeId: l,
    isSelectable: E,
    nodeClickDistance: r
  }), f = DC();
  if (U.hidden)
    return null;
  const O = td(U), _ = $O(U), il = E || j || Z || u || s || G, Zl = u ? (Vl) => u(Vl, { ...w.userNode }) : void 0, ol = s ? (Vl) => s(Vl, { ...w.userNode }) : void 0, Wl = G ? (Vl) => G(Vl, { ...w.userNode }) : void 0, ml = i ? (Vl) => i(Vl, { ...w.userNode }) : void 0, Rl = m ? (Vl) => m(Vl, { ...w.userNode }) : void 0, kl = (Vl) => {
    const { selectNodesOnDrag: el, nodeDragThreshold: xl } = J.getState();
    E && (!el || !j || xl > 0) && PW({
      id: l,
      store: J,
      nodeRef: v
    }), Z && Z(Vl, { ...w.userNode });
  }, zl = (Vl) => {
    if (!(EW(Vl.nativeEvent) || W))
      if (mC.includes(Vl.key) && E) {
        const el = Vl.key === "Escape";
        PW({
          id: l,
          store: J,
          unselect: el,
          nodeRef: v
        });
      } else j && U.selected && Object.prototype.hasOwnProperty.call(Mh, Vl.key) && (J.setState({
        ariaLiveMessage: `Moved selected node ${Vl.key.replace("Arrow", "").toLowerCase()}. New position, x: ${~~w.positionAbsolute.x}, y: ${~~w.positionAbsolute.y}`
      }), f({
        direction: Mh[Vl.key],
        factor: Vl.shiftKey ? 4 : 1
      }));
  };
  return B.jsx("div", { className: Lc([
    "react-flow__node",
    `react-flow__node-${D}`,
    {
      // this is overwritable by passing `nopan` as a class name
      [t]: j
    },
    U.className,
    {
      selected: U.selected,
      selectable: E,
      parent: z,
      draggable: j,
      dragging: T
    }
  ]), ref: v, style: {
    zIndex: w.z,
    transform: `translate(${w.positionAbsolute.x}px,${w.positionAbsolute.y}px)`,
    pointerEvents: il ? "all" : "none",
    visibility: F ? "visible" : "hidden",
    ...U.style,
    ..._
  }, "data-id": l, "data-testid": `rf__node-${l}`, onMouseEnter: Zl, onMouseMove: ol, onMouseLeave: Wl, onContextMenu: ml, onClick: kl, onDoubleClick: Rl, onKeyDown: A ? zl : void 0, tabIndex: A ? 0 : void 0, role: A ? "button" : void 0, "aria-describedby": W ? void 0 : `${HC}-${V}`, "aria-label": U.ariaLabel, children: B.jsx(EO, { value: l, children: B.jsx(C, { id: l, data: U.data, type: D, positionAbsoluteX: w.positionAbsolute.x, positionAbsoluteY: w.positionAbsolute.y, selected: U.selected, selectable: E, draggable: j, deletable: U.deletable ?? !0, isConnectable: g, sourcePosition: U.sourcePosition, targetPosition: U.targetPosition, dragging: T, dragHandle: U.dragHandle, zIndex: w.z, parentId: U.parentId, ...O }) }) });
}
const mA = (l) => ({
  nodesDraggable: l.nodesDraggable,
  nodesConnectable: l.nodesConnectable,
  nodesFocusable: l.nodesFocusable,
  elementsSelectable: l.elementsSelectable,
  onError: l.onError
});
function QC(l) {
  const { nodesDraggable: Z, nodesConnectable: u, nodesFocusable: s, elementsSelectable: G, onError: i } = yZ(mA, uc), m = bA(l.onlyRenderVisibleElements), a = sA();
  return B.jsx("div", { className: "react-flow__nodes", style: dy, children: m.map((n) => (
    // The split of responsibilities between NodeRenderer and
    // NodeComponentWrapper may appear weird. However, it’s designed to
    // minimize the cost of updates when individual nodes change.
    //
    // For example, when you’re dragging a single node, that node gets
    // updated multiple times per second. If `NodeRenderer` were to update
    // every time, it would have to re-run the `nodes.map()` loop every
    // time. This gets pricey with hundreds of nodes, especially if every
    // loop cycle does more than just rendering a JSX element!
    //
    // As a result of this choice, we took the following implementation
    // decisions:
    // - NodeRenderer subscribes *only* to node IDs – and therefore
    //   rerender *only* when visible nodes are added or removed.
    // - NodeRenderer performs all operations the result of which can be
    //   shared between nodes (such as creating the `ResizeObserver`
    //   instance, or subscribing to `selector`). This means extra prop
    //   drilling into `NodeComponentWrapper`, but it means we need to run
    //   these operations only once – instead of once per node.
    // - Any operations that you’d normally write inside `nodes.map` are
    //   moved into `NodeComponentWrapper`. This ensures they are
    //   memorized – so if `NodeRenderer` *has* to rerender, it only
    //   needs to regenerate the list of nodes, nothing else.
    B.jsx(GA, { id: n, nodeTypes: l.nodeTypes, nodeExtent: l.nodeExtent, onClick: l.onNodeClick, onMouseEnter: l.onNodeMouseEnter, onMouseMove: l.onNodeMouseMove, onMouseLeave: l.onNodeMouseLeave, onContextMenu: l.onNodeContextMenu, onDoubleClick: l.onNodeDoubleClick, noDragClassName: l.noDragClassName, noPanClassName: l.noPanClassName, rfId: l.rfId, disableKeyboardA11y: l.disableKeyboardA11y, resizeObserver: a, nodesDraggable: Z, nodesConnectable: u, nodesFocusable: s, elementsSelectable: G, nodeClickDistance: l.nodeClickDistance, onError: i }, n)
  )) });
}
QC.displayName = "NodeRenderer";
const iA = M.memo(QC);
function oA(l) {
  return yZ(M.useCallback((u) => {
    if (!l)
      return u.edges.map((G) => G.id);
    const s = [];
    if (u.width && u.height)
      for (const G of u.edges) {
        const i = u.nodeLookup.get(G.source), m = u.nodeLookup.get(G.target);
        i && m && o8({
          sourceNode: i,
          targetNode: m,
          width: u.width,
          height: u.height,
          transform: u.transform
        }) && s.push(G.id);
      }
    return s;
  }, [l]), uc);
}
const eA = ({ color: l = "none", strokeWidth: Z = 1 }) => B.jsx("polyline", { style: {
  stroke: l,
  strokeWidth: Z
}, strokeLinecap: "round", strokeLinejoin: "round", fill: "none", points: "-5,-4 0,0 -5,4" }), aA = ({ color: l = "none", strokeWidth: Z = 1 }) => B.jsx("polyline", { style: {
  stroke: l,
  fill: l,
  strokeWidth: Z
}, strokeLinecap: "round", strokeLinejoin: "round", points: "-5,-4 0,0 -5,4 -5,-4" }), HM = {
  [qa.Arrow]: eA,
  [qa.ArrowClosed]: aA
};
function nA(l) {
  const Z = lc();
  return M.useMemo(() => {
    var G, i;
    return Object.prototype.hasOwnProperty.call(HM, l) ? HM[l] : ((i = (G = Z.getState()).onError) == null || i.call(G, "009", Sd.error009(l)), null);
  }, [l]);
}
const pA = ({ id: l, type: Z, color: u, width: s = 12.5, height: G = 12.5, markerUnits: i = "strokeWidth", strokeWidth: m, orient: a = "auto-start-reverse" }) => {
  const n = nA(Z);
  return n ? B.jsx("marker", { className: "react-flow__arrowhead", id: l, markerWidth: `${s}`, markerHeight: `${G}`, viewBox: "-10 -10 20 20", markerUnits: i, orient: a, refX: "0", refY: "0", children: B.jsx(n, { color: u, strokeWidth: m }) }) : null;
}, PC = ({ defaultColor: l, rfId: Z }) => {
  const u = yZ((i) => i.edges), s = yZ((i) => i.defaultEdgeOptions), G = M.useMemo(() => S8(u, {
    id: Z,
    defaultColor: l,
    defaultMarkerStart: s == null ? void 0 : s.markerStart,
    defaultMarkerEnd: s == null ? void 0 : s.markerEnd
  }), [u, s, Z, l]);
  return G.length ? B.jsx("svg", { className: "react-flow__marker", children: B.jsx("defs", { children: G.map((i) => B.jsx(pA, { id: i.id, type: i.type, color: i.color, width: i.width, height: i.height, markerUnits: i.markerUnits, strokeWidth: i.strokeWidth, orient: i.orient }, i.id)) }) }) : null;
};
PC.displayName = "MarkerDefinitions";
var LA = M.memo(PC);
function OC({ x: l, y: Z, label: u, labelStyle: s = {}, labelShowBg: G = !0, labelBgStyle: i = {}, labelBgPadding: m = [2, 4], labelBgBorderRadius: a = 2, children: n, className: p, ...y }) {
  const [h, S] = M.useState({ x: 1, y: 0, width: 0, height: 0 }), t = Lc(["react-flow__edge-textwrapper", p]), W = M.useRef(null);
  return M.useEffect(() => {
    if (W.current) {
      const V = W.current.getBBox();
      S({
        x: V.x,
        y: V.y,
        width: V.width,
        height: V.height
      });
    }
  }, [u]), typeof u > "u" || !u ? null : B.jsxs("g", { transform: `translate(${l - h.width / 2} ${Z - h.height / 2})`, className: t, visibility: h.width ? "visible" : "hidden", ...y, children: [G && B.jsx("rect", { width: h.width + 2 * m[0], x: -m[0], y: -m[1], height: h.height + 2 * m[1], className: "react-flow__edge-textbg", style: i, rx: a, ry: a }), B.jsx("text", { className: "react-flow__edge-text", y: h.height / 2, dy: "0.3em", ref: W, style: s, children: u }), n] });
}
OC.displayName = "EdgeText";
const hA = M.memo(OC);
function Kn({ id: l, path: Z, labelX: u, labelY: s, label: G, labelStyle: i, labelShowBg: m, labelBgStyle: a, labelBgPadding: n, labelBgBorderRadius: p, style: y, markerEnd: h, markerStart: S, className: t, interactionWidth: W = 20 }) {
  return B.jsxs(B.Fragment, { children: [B.jsx("path", { id: l, style: y, d: Z, fill: "none", className: Lc(["react-flow__edge-path", t]), markerEnd: h, markerStart: S }), W && B.jsx("path", { d: Z, fill: "none", strokeOpacity: 0, strokeWidth: W, className: "react-flow__edge-interaction" }), G && Bu(u) && Bu(s) ? B.jsx(hA, { x: u, y: s, label: G, labelStyle: i, labelShowBg: m, labelBgStyle: a, labelBgPadding: n, labelBgBorderRadius: p }) : null] });
}
function gM({ pos: l, x1: Z, y1: u, x2: s, y2: G }) {
  return l === Tl.Left || l === Tl.Right ? [0.5 * (Z + s), u] : [Z, 0.5 * (u + G)];
}
function AC({ sourceX: l, sourceY: Z, sourcePosition: u = Tl.Bottom, targetX: s, targetY: G, targetPosition: i = Tl.Top }) {
  const [m, a] = gM({
    pos: u,
    x1: l,
    y1: Z,
    x2: s,
    y2: G
  }), [n, p] = gM({
    pos: i,
    x1: s,
    y1: G,
    x2: l,
    y2: Z
  }), [y, h, S, t] = KC({
    sourceX: l,
    sourceY: Z,
    targetX: s,
    targetY: G,
    sourceControlX: m,
    sourceControlY: a,
    targetControlX: n,
    targetControlY: p
  });
  return [
    `M${l},${Z} C${m},${a} ${n},${p} ${s},${G}`,
    y,
    h,
    S,
    t
  ];
}
function $C(l) {
  return M.memo(({ id: Z, sourceX: u, sourceY: s, targetX: G, targetY: i, sourcePosition: m = Tl.Bottom, targetPosition: a = Tl.Top, label: n, labelStyle: p, labelShowBg: y, labelBgStyle: h, labelBgPadding: S, labelBgBorderRadius: t, style: W, markerEnd: V, markerStart: R, interactionWidth: x }) => {
    const [r, k, U] = AC({
      sourceX: u,
      sourceY: s,
      sourcePosition: m,
      targetX: G,
      targetY: i,
      targetPosition: a
    }), w = l.isInternal ? void 0 : Z;
    return B.jsx(Kn, { id: w, path: r, labelX: k, labelY: U, label: n, labelStyle: p, labelShowBg: y, labelBgStyle: h, labelBgPadding: S, labelBgBorderRadius: t, style: W, markerEnd: V, markerStart: R, interactionWidth: x });
  });
}
const yA = $C({ isInternal: !1 }), qC = $C({ isInternal: !0 });
yA.displayName = "SimpleBezierEdge";
qC.displayName = "SimpleBezierEdgeInternal";
function _C(l) {
  return M.memo(({ id: Z, sourceX: u, sourceY: s, targetX: G, targetY: i, label: m, labelStyle: a, labelShowBg: n, labelBgStyle: p, labelBgPadding: y, labelBgBorderRadius: h, style: S, sourcePosition: t = Tl.Bottom, targetPosition: W = Tl.Top, markerEnd: V, markerStart: R, pathOptions: x, interactionWidth: r }) => {
    const [k, U, w] = BW({
      sourceX: u,
      sourceY: s,
      sourcePosition: t,
      targetX: G,
      targetY: i,
      targetPosition: W,
      borderRadius: x == null ? void 0 : x.borderRadius,
      offset: x == null ? void 0 : x.offset
    }), z = l.isInternal ? void 0 : Z;
    return B.jsx(Kn, { id: z, path: k, labelX: U, labelY: w, label: m, labelStyle: a, labelShowBg: n, labelBgStyle: p, labelBgPadding: y, labelBgBorderRadius: h, style: S, markerEnd: V, markerStart: R, interactionWidth: r });
  });
}
const lr = _C({ isInternal: !1 }), Zr = _C({ isInternal: !0 });
lr.displayName = "SmoothStepEdge";
Zr.displayName = "SmoothStepEdgeInternal";
function cr(l) {
  return M.memo(({ id: Z, ...u }) => {
    var G;
    const s = l.isInternal ? void 0 : Z;
    return B.jsx(lr, { ...u, id: s, pathOptions: M.useMemo(() => {
      var i;
      return { borderRadius: 0, offset: (i = u.pathOptions) == null ? void 0 : i.offset };
    }, [(G = u.pathOptions) == null ? void 0 : G.offset]) });
  });
}
const SA = cr({ isInternal: !1 }), br = cr({ isInternal: !0 });
SA.displayName = "StepEdge";
br.displayName = "StepEdgeInternal";
function ur(l) {
  return M.memo(({ id: Z, sourceX: u, sourceY: s, targetX: G, targetY: i, label: m, labelStyle: a, labelShowBg: n, labelBgStyle: p, labelBgPadding: y, labelBgBorderRadius: h, style: S, markerEnd: t, markerStart: W, interactionWidth: V }) => {
    const [R, x, r] = xC({ sourceX: u, sourceY: s, targetX: G, targetY: i }), k = l.isInternal ? void 0 : Z;
    return B.jsx(Kn, { id: k, path: R, labelX: x, labelY: r, label: m, labelStyle: a, labelShowBg: n, labelBgStyle: p, labelBgPadding: y, labelBgBorderRadius: h, style: S, markerEnd: t, markerStart: W, interactionWidth: V });
  });
}
const tA = ur({ isInternal: !1 }), sr = ur({ isInternal: !0 });
tA.displayName = "StraightEdge";
sr.displayName = "StraightEdgeInternal";
function dr(l) {
  return M.memo(({ id: Z, sourceX: u, sourceY: s, targetX: G, targetY: i, sourcePosition: m = Tl.Bottom, targetPosition: a = Tl.Top, label: n, labelStyle: p, labelShowBg: y, labelBgStyle: h, labelBgPadding: S, labelBgBorderRadius: t, style: W, markerEnd: V, markerStart: R, pathOptions: x, interactionWidth: r }) => {
    const [k, U, w] = WC({
      sourceX: u,
      sourceY: s,
      sourcePosition: m,
      targetX: G,
      targetY: i,
      targetPosition: a,
      curvature: x == null ? void 0 : x.curvature
    }), z = l.isInternal ? void 0 : Z;
    return B.jsx(Kn, { id: z, path: k, labelX: U, labelY: w, label: n, labelStyle: p, labelShowBg: y, labelBgStyle: h, labelBgPadding: S, labelBgBorderRadius: t, style: W, markerEnd: V, markerStart: R, interactionWidth: r });
  });
}
const XA = dr({ isInternal: !1 }), Gr = dr({ isInternal: !0 });
XA.displayName = "BezierEdge";
Gr.displayName = "BezierEdgeInternal";
const vM = {
  default: Gr,
  straight: sr,
  step: br,
  smoothstep: Zr,
  simplebezier: qC
}, TM = {
  sourceX: null,
  sourceY: null,
  targetX: null,
  targetY: null,
  sourcePosition: null,
  targetPosition: null
}, KA = (l, Z, u) => u === Tl.Left ? l - Z : u === Tl.Right ? l + Z : l, WA = (l, Z, u) => u === Tl.Top ? l - Z : u === Tl.Bottom ? l + Z : l, fM = "react-flow__edgeupdater";
function EM({ position: l, centerX: Z, centerY: u, radius: s = 10, onMouseDown: G, onMouseEnter: i, onMouseOut: m, type: a }) {
  return B.jsx("circle", { onMouseDown: G, onMouseEnter: i, onMouseOut: m, className: Lc([fM, `${fM}-${a}`]), cx: KA(Z, s, l), cy: WA(u, s, l), r: s, stroke: "transparent", fill: "transparent" });
}
function VA({ isReconnectable: l, reconnectRadius: Z, edge: u, sourceX: s, sourceY: G, targetX: i, targetY: m, sourcePosition: a, targetPosition: n, onReconnect: p, onReconnectStart: y, onReconnectEnd: h, setReconnecting: S, setUpdateHover: t }) {
  const W = lc(), V = (U, w) => {
    if (U.button !== 0)
      return;
    const { autoPanOnConnect: z, domNode: D, isValidConnection: C, connectionMode: j, connectionRadius: E, lib: g, onConnectStart: A, onConnectEnd: J, cancelConnection: F, nodeLookup: v, rfId: T, panBy: f, updateConnection: O } = W.getState(), _ = w.type === "target";
    S(!0), y == null || y(U, u, w.type);
    const il = (ol, Wl) => {
      S(!1), h == null || h(ol, u, w.type, Wl);
    }, Zl = (ol) => p == null ? void 0 : p(u, ol);
    QW.onPointerDown(U.nativeEvent, {
      autoPanOnConnect: z,
      connectionMode: j,
      connectionRadius: E,
      domNode: D,
      handleId: w.id,
      nodeId: w.nodeId,
      nodeLookup: v,
      isTarget: _,
      edgeUpdaterType: w.type,
      lib: g,
      flowId: T,
      cancelConnection: F,
      panBy: f,
      isValidConnection: C,
      onConnect: Zl,
      onConnectStart: A,
      onConnectEnd: J,
      onReconnectEnd: il,
      updateConnection: O,
      getTransform: () => W.getState().transform,
      getFromHandle: () => W.getState().connection.fromHandle
    });
  }, R = (U) => V(U, { nodeId: u.target, id: u.targetHandle ?? null, type: "target" }), x = (U) => V(U, { nodeId: u.source, id: u.sourceHandle ?? null, type: "source" }), r = () => t(!0), k = () => t(!1);
  return B.jsxs(B.Fragment, { children: [(l === !0 || l === "source") && B.jsx(EM, { position: a, centerX: s, centerY: G, radius: Z, onMouseDown: R, onMouseEnter: r, onMouseOut: k, type: "source" }), (l === !0 || l === "target") && B.jsx(EM, { position: n, centerX: i, centerY: m, radius: Z, onMouseDown: x, onMouseEnter: r, onMouseOut: k, type: "target" })] });
}
function xA({ id: l, edgesFocusable: Z, edgesReconnectable: u, elementsSelectable: s, onClick: G, onDoubleClick: i, onContextMenu: m, onMouseEnter: a, onMouseMove: n, onMouseLeave: p, reconnectRadius: y, onReconnect: h, onReconnectStart: S, onReconnectEnd: t, rfId: W, edgeTypes: V, noPanClassName: R, onError: x, disableKeyboardA11y: r }) {
  let k = yZ((cl) => cl.edgeLookup.get(l));
  const U = yZ((cl) => cl.defaultEdgeOptions);
  k = U ? { ...U, ...k } : k;
  let w = k.type || "default", z = (V == null ? void 0 : V[w]) || vM[w];
  z === void 0 && (x == null || x("011", Sd.error011(w)), w = "default", z = vM.default);
  const D = !!(k.focusable || Z && typeof k.focusable > "u"), C = typeof h < "u" && (k.reconnectable || u && typeof k.reconnectable > "u"), j = !!(k.selectable || s && typeof k.selectable > "u"), E = M.useRef(null), [g, A] = M.useState(!1), [J, F] = M.useState(!1), v = lc(), { zIndex: T, sourceX: f, sourceY: O, targetX: _, targetY: il, sourcePosition: Zl, targetPosition: ol } = yZ(M.useCallback((cl) => {
    const wl = cl.nodeLookup.get(k.source), Jl = cl.nodeLookup.get(k.target);
    if (!wl || !Jl)
      return {
        zIndex: k.zIndex,
        ...TM
      };
    const cZ = y8({
      id: l,
      sourceNode: wl,
      targetNode: Jl,
      sourceHandle: k.sourceHandle || null,
      targetHandle: k.targetHandle || null,
      connectionMode: cl.connectionMode,
      onError: x
    });
    return {
      zIndex: i8({
        selected: k.selected,
        zIndex: k.zIndex,
        sourceNode: wl,
        targetNode: Jl,
        elevateOnSelect: cl.elevateEdgesOnSelect
      }),
      ...cZ || TM
    };
  }, [k.source, k.target, k.sourceHandle, k.targetHandle, k.selected, k.zIndex]), uc), Wl = M.useMemo(() => k.markerStart ? `url('#${DW(k.markerStart, W)}')` : void 0, [k.markerStart, W]), ml = M.useMemo(() => k.markerEnd ? `url('#${DW(k.markerEnd, W)}')` : void 0, [k.markerEnd, W]);
  if (k.hidden || f === null || O === null || _ === null || il === null)
    return null;
  const Rl = (cl) => {
    var uZ;
    const { addSelectedEdges: wl, unselectNodesAndEdges: Jl, multiSelectionActive: cZ } = v.getState();
    j && (v.setState({ nodesSelectionActive: !1 }), k.selected && cZ ? (Jl({ nodes: [], edges: [k] }), (uZ = E.current) == null || uZ.blur()) : wl([l])), G && G(cl, k);
  }, kl = i ? (cl) => {
    i(cl, { ...k });
  } : void 0, zl = m ? (cl) => {
    m(cl, { ...k });
  } : void 0, Vl = a ? (cl) => {
    a(cl, { ...k });
  } : void 0, el = n ? (cl) => {
    n(cl, { ...k });
  } : void 0, xl = p ? (cl) => {
    p(cl, { ...k });
  } : void 0, hl = (cl) => {
    var wl;
    if (!r && mC.includes(cl.key) && j) {
      const { unselectNodesAndEdges: Jl, addSelectedEdges: cZ } = v.getState();
      cl.key === "Escape" ? ((wl = E.current) == null || wl.blur(), Jl({ edges: [k] })) : cZ([l]);
    }
  };
  return B.jsx("svg", { style: { zIndex: T }, children: B.jsxs("g", { className: Lc([
    "react-flow__edge",
    `react-flow__edge-${w}`,
    k.className,
    R,
    {
      selected: k.selected,
      animated: k.animated,
      inactive: !j && !G,
      updating: g,
      selectable: j
    }
  ]), onClick: Rl, onDoubleClick: kl, onContextMenu: zl, onMouseEnter: Vl, onMouseMove: el, onMouseLeave: xl, onKeyDown: D ? hl : void 0, tabIndex: D ? 0 : void 0, role: D ? "button" : "img", "data-id": l, "data-testid": `rf__edge-${l}`, "aria-label": k.ariaLabel === null ? void 0 : k.ariaLabel || `Edge from ${k.source} to ${k.target}`, "aria-describedby": D ? `${gC}-${W}` : void 0, ref: E, children: [!J && B.jsx(z, { id: l, source: k.source, target: k.target, type: k.type, selected: k.selected, animated: k.animated, selectable: j, deletable: k.deletable ?? !0, label: k.label, labelStyle: k.labelStyle, labelShowBg: k.labelShowBg, labelBgStyle: k.labelBgStyle, labelBgPadding: k.labelBgPadding, labelBgBorderRadius: k.labelBgBorderRadius, sourceX: f, sourceY: O, targetX: _, targetY: il, sourcePosition: Zl, targetPosition: ol, data: k.data, style: k.style, sourceHandleId: k.sourceHandle, targetHandleId: k.targetHandle, markerStart: Wl, markerEnd: ml, pathOptions: "pathOptions" in k ? k.pathOptions : void 0, interactionWidth: k.interactionWidth }), C && B.jsx(VA, { edge: k, isReconnectable: C, reconnectRadius: y, onReconnect: h, onReconnectStart: S, onReconnectEnd: t, sourceX: f, sourceY: O, targetX: _, targetY: il, sourcePosition: Zl, targetPosition: ol, setUpdateHover: A, setReconnecting: F })] }) });
}
const RA = (l) => ({
  width: l.width,
  height: l.height,
  edgesFocusable: l.edgesFocusable,
  edgesReconnectable: l.edgesReconnectable,
  elementsSelectable: l.elementsSelectable,
  connectionMode: l.connectionMode,
  onError: l.onError
});
function mr({ defaultMarkerColor: l, onlyRenderVisibleElements: Z, rfId: u, edgeTypes: s, noPanClassName: G, onReconnect: i, onEdgeContextMenu: m, onEdgeMouseEnter: a, onEdgeMouseMove: n, onEdgeMouseLeave: p, onEdgeClick: y, reconnectRadius: h, onEdgeDoubleClick: S, onReconnectStart: t, onReconnectEnd: W, disableKeyboardA11y: V }) {
  const { edgesFocusable: R, edgesReconnectable: x, elementsSelectable: r, onError: k } = yZ(RA, uc), U = oA(Z);
  return B.jsxs("div", { className: "react-flow__edges", children: [B.jsx(LA, { defaultColor: l, rfId: u }), U.map((w) => B.jsx(xA, { id: w, edgesFocusable: R, edgesReconnectable: x, elementsSelectable: r, noPanClassName: G, onReconnect: i, onContextMenu: m, onMouseEnter: a, onMouseMove: n, onMouseLeave: p, onClick: y, reconnectRadius: h, onDoubleClick: S, onReconnectStart: t, onReconnectEnd: W, rfId: u, onError: k, edgeTypes: s, disableKeyboardA11y: V }, w))] });
}
mr.displayName = "EdgeRenderer";
const YA = M.memo(mr), kA = (l) => `translate(${l.transform[0]}px,${l.transform[1]}px) scale(${l.transform[2]})`;
function MA({ children: l }) {
  const Z = yZ(kA);
  return B.jsx("div", { className: "react-flow__viewport xyflow__viewport react-flow__container", style: { transform: Z }, children: l });
}
function IA(l) {
  const Z = sy(), u = M.useRef(!1);
  M.useEffect(() => {
    !u.current && Z.viewportInitialized && l && (setTimeout(() => l(Z), 1), u.current = !0);
  }, [l, Z.viewportInitialized]);
}
const UA = (l) => {
  var Z;
  return (Z = l.panZoom) == null ? void 0 : Z.syncViewport;
};
function CA(l) {
  const Z = yZ(UA), u = lc();
  return M.useEffect(() => {
    l && (Z == null || Z(l), u.setState({ transform: [l.x, l.y, l.zoom] }));
  }, [l, Z]), null;
}
function rA(l) {
  return l.connection.inProgress ? { ...l.connection, to: Xn(l.connection.to, l.transform) } : { ...l.connection };
}
function FA(l) {
  return rA;
}
function NA(l) {
  const Z = FA();
  return yZ(Z, uc);
}
const wA = (l) => ({
  nodesConnectable: l.nodesConnectable,
  isValid: l.connection.isValid,
  inProgress: l.connection.inProgress,
  width: l.width,
  height: l.height
});
function zA({ containerStyle: l, style: Z, type: u, component: s }) {
  const { nodesConnectable: G, width: i, height: m, isValid: a, inProgress: n } = yZ(wA, uc);
  return !(i && G && n) ? null : B.jsx("svg", { style: l, width: i, height: m, className: "react-flow__connectionline react-flow__container", children: B.jsx("g", { className: Lc(["react-flow__connection", oC(a)]), children: B.jsx(ir, { style: Z, type: u, CustomComponent: s, isValid: a }) }) });
}
const ir = ({ style: l, type: Z = sG.Bezier, CustomComponent: u, isValid: s }) => {
  const { inProgress: G, from: i, fromNode: m, fromHandle: a, fromPosition: n, to: p, toNode: y, toHandle: h, toPosition: S } = NA();
  if (!G)
    return;
  if (u)
    return B.jsx(u, { connectionLineType: Z, connectionLineStyle: l, fromNode: m, fromHandle: a, fromX: i.x, fromY: i.y, toX: p.x, toY: p.y, fromPosition: n, toPosition: S, connectionStatus: oC(s), toNode: y, toHandle: h });
  let t = "";
  const W = {
    sourceX: i.x,
    sourceY: i.y,
    sourcePosition: n,
    targetX: p.x,
    targetY: p.y,
    targetPosition: S
  };
  switch (Z) {
    case sG.Bezier:
      [t] = WC(W);
      break;
    case sG.SimpleBezier:
      [t] = AC(W);
      break;
    case sG.Step:
      [t] = BW({
        ...W,
        borderRadius: 0
      });
      break;
    case sG.SmoothStep:
      [t] = BW(W);
      break;
    default:
      [t] = xC(W);
  }
  return B.jsx("path", { d: t, fill: "none", className: "react-flow__connection-path", style: l });
};
ir.displayName = "ConnectionLine";
const JA = {};
function BM(l = JA) {
  M.useRef(l), lc(), M.useEffect(() => {
  }, [l]);
}
function HA() {
  lc(), M.useRef(!1), M.useEffect(() => {
  }, []);
}
function or({ nodeTypes: l, edgeTypes: Z, onInit: u, onNodeClick: s, onEdgeClick: G, onNodeDoubleClick: i, onEdgeDoubleClick: m, onNodeMouseEnter: a, onNodeMouseMove: n, onNodeMouseLeave: p, onNodeContextMenu: y, onSelectionContextMenu: h, onSelectionStart: S, onSelectionEnd: t, connectionLineType: W, connectionLineStyle: V, connectionLineComponent: R, connectionLineContainerStyle: x, selectionKeyCode: r, selectionOnDrag: k, selectionMode: U, multiSelectionKeyCode: w, panActivationKeyCode: z, zoomActivationKeyCode: D, deleteKeyCode: C, onlyRenderVisibleElements: j, elementsSelectable: E, defaultViewport: g, translateExtent: A, minZoom: J, maxZoom: F, preventScrolling: v, defaultMarkerColor: T, zoomOnScroll: f, zoomOnPinch: O, panOnScroll: _, panOnScrollSpeed: il, panOnScrollMode: Zl, zoomOnDoubleClick: ol, panOnDrag: Wl, onPaneClick: ml, onPaneMouseEnter: Rl, onPaneMouseMove: kl, onPaneMouseLeave: zl, onPaneScroll: Vl, onPaneContextMenu: el, paneClickDistance: xl, nodeClickDistance: hl, onEdgeContextMenu: cl, onEdgeMouseEnter: wl, onEdgeMouseMove: Jl, onEdgeMouseLeave: cZ, reconnectRadius: uZ, onReconnect: UZ, onReconnectStart: hc, onReconnectEnd: Zb, noDragClassName: yc, noWheelClassName: nb, noPanClassName: Nc, disableKeyboardA11y: oc, nodeExtent: cb, rfId: sc, viewport: Vc, onViewportChange: BZ }) {
  return BM(l), BM(Z), HA(), IA(u), CA(Vc), B.jsx(ZA, { onPaneClick: ml, onPaneMouseEnter: Rl, onPaneMouseMove: kl, onPaneMouseLeave: zl, onPaneContextMenu: el, onPaneScroll: Vl, paneClickDistance: xl, deleteKeyCode: C, selectionKeyCode: r, selectionOnDrag: k, selectionMode: U, onSelectionStart: S, onSelectionEnd: t, multiSelectionKeyCode: w, panActivationKeyCode: z, zoomActivationKeyCode: D, elementsSelectable: E, zoomOnScroll: f, zoomOnPinch: O, zoomOnDoubleClick: ol, panOnScroll: _, panOnScrollSpeed: il, panOnScrollMode: Zl, panOnDrag: Wl, defaultViewport: g, translateExtent: A, minZoom: J, maxZoom: F, onSelectionContextMenu: h, preventScrolling: v, noDragClassName: yc, noWheelClassName: nb, noPanClassName: Nc, disableKeyboardA11y: oc, onViewportChange: BZ, isControlledViewport: !!Vc, children: B.jsxs(MA, { children: [B.jsx(YA, { edgeTypes: Z, onEdgeClick: G, onEdgeDoubleClick: m, onReconnect: UZ, onReconnectStart: hc, onReconnectEnd: Zb, onlyRenderVisibleElements: j, onEdgeContextMenu: cl, onEdgeMouseEnter: wl, onEdgeMouseMove: Jl, onEdgeMouseLeave: cZ, reconnectRadius: uZ, defaultMarkerColor: T, noPanClassName: Nc, disableKeyboardA11y: oc, rfId: sc }), B.jsx(zA, { style: V, type: W, component: R, containerStyle: x }), B.jsx("div", { className: "react-flow__edgelabel-renderer" }), B.jsx(iA, { nodeTypes: l, onNodeClick: s, onNodeDoubleClick: i, onNodeMouseEnter: a, onNodeMouseMove: n, onNodeMouseLeave: p, onNodeContextMenu: y, nodeClickDistance: hl, onlyRenderVisibleElements: j, noPanClassName: Nc, noDragClassName: yc, disableKeyboardA11y: oc, nodeExtent: cb, rfId: sc }), B.jsx("div", { className: "react-flow__viewport-portal" })] }) });
}
or.displayName = "GraphView";
const gA = M.memo(or), DM = ({ nodes: l, edges: Z, defaultNodes: u, defaultEdges: s, width: G, height: i, fitView: m, nodeOrigin: a, nodeExtent: n } = {}) => {
  const p = /* @__PURE__ */ new Map(), y = /* @__PURE__ */ new Map(), h = /* @__PURE__ */ new Map(), S = /* @__PURE__ */ new Map(), t = s ?? Z ?? [], W = u ?? l ?? [], V = a ?? [0, 0], R = n ?? Aa;
  YC(h, S, t), jW(W, p, y, {
    nodeOrigin: V,
    nodeExtent: R,
    elevateNodesOnSelect: !1
  });
  let x = [0, 0, 1];
  if (m && G && i) {
    const r = Mo(p, {
      filter: (z) => !!((z.width || z.initialWidth) && (z.height || z.initialHeight))
    }), { x: k, y: U, zoom: w } = QV(r, G, i, 0.5, 2, 0.1);
    x = [k, U, w];
  }
  return {
    rfId: "1",
    width: 0,
    height: 0,
    transform: x,
    nodes: W,
    nodeLookup: p,
    parentLookup: y,
    edges: t,
    edgeLookup: S,
    connectionLookup: h,
    onNodesChange: null,
    onEdgesChange: null,
    hasDefaultNodes: u !== void 0,
    hasDefaultEdges: s !== void 0,
    panZoom: null,
    minZoom: 0.5,
    maxZoom: 2,
    translateExtent: Aa,
    nodeExtent: R,
    nodesSelectionActive: !1,
    userSelectionActive: !1,
    userSelectionRect: null,
    connectionMode: Lo.Strict,
    domNode: null,
    paneDragging: !1,
    noPanClassName: "nopan",
    nodeOrigin: V,
    nodeDragThreshold: 1,
    snapGrid: [15, 15],
    snapToGrid: !1,
    nodesDraggable: !0,
    nodesConnectable: !0,
    nodesFocusable: !0,
    edgesFocusable: !0,
    edgesReconnectable: !0,
    elementsSelectable: !0,
    elevateNodesOnSelect: !0,
    elevateEdgesOnSelect: !1,
    fitViewOnInit: !1,
    fitViewDone: !1,
    fitViewOnInitOptions: void 0,
    selectNodesOnDrag: !0,
    multiSelectionActive: !1,
    connection: { ...iC },
    connectionClickStartHandle: null,
    connectOnClick: !0,
    ariaLiveMessage: "",
    autoPanOnConnect: !0,
    autoPanOnNodeDrag: !0,
    autoPanSpeed: 15,
    connectionRadius: 20,
    onError: G8,
    isValidConnection: void 0,
    onSelectionChangeHandlers: [],
    lib: "react",
    debug: !1
  };
}, vA = ({ nodes: l, edges: Z, defaultNodes: u, defaultEdges: s, width: G, height: i, fitView: m, nodeOrigin: a, nodeExtent: n }) => bO((p, y) => ({
  ...DM({ nodes: l, edges: Z, width: G, height: i, fitView: m, nodeOrigin: a, nodeExtent: n, defaultNodes: u, defaultEdges: s }),
  setNodes: (h) => {
    const { nodeLookup: S, parentLookup: t, nodeOrigin: W, elevateNodesOnSelect: V } = y();
    jW(h, S, t, {
      nodeOrigin: W,
      nodeExtent: n,
      elevateNodesOnSelect: V,
      checkEquality: !0
    }), p({ nodes: h });
  },
  setEdges: (h) => {
    const { connectionLookup: S, edgeLookup: t } = y();
    YC(S, t, h), p({ edges: h });
  },
  setDefaultNodesAndEdges: (h, S) => {
    if (h) {
      const { setNodes: t } = y();
      t(h), p({ hasDefaultNodes: !0 });
    }
    if (S) {
      const { setEdges: t } = y();
      t(S), p({ hasDefaultEdges: !0 });
    }
  },
  // Every node gets registerd at a ResizeObserver. Whenever a node
  // changes its dimensions, this function is called to measure the
  // new dimensions and update the nodes.
  updateNodeInternals: (h, S = { triggerFitView: !0 }) => {
    const { triggerNodeChanges: t, nodeLookup: W, parentLookup: V, fitViewOnInit: R, fitViewDone: x, fitViewOnInitOptions: r, domNode: k, nodeOrigin: U, nodeExtent: w, debug: z, fitViewSync: D } = y(), { changes: C, updatedInternals: j } = x8(h, W, V, k, U, w);
    if (j) {
      if (K8(W, V, { nodeOrigin: U, nodeExtent: w }), S.triggerFitView) {
        let E = x;
        !x && R && (E = D({
          ...r,
          nodes: r == null ? void 0 : r.nodes
        })), p({ fitViewDone: E });
      } else
        p({});
      (C == null ? void 0 : C.length) > 0 && (z && console.log("React Flow: trigger node changes", C), t == null || t(C));
    }
  },
  updateNodePositions: (h, S = !1) => {
    const t = [], W = [];
    for (const [V, R] of h) {
      const x = {
        id: V,
        type: "position",
        position: R.position,
        dragging: S
      };
      R != null && R.expandParent && (R != null && R.parentId) && x.position && (t.push({
        id: V,
        parentId: R.parentId,
        rect: {
          ...R.internals.positionAbsolute,
          width: R.measured.width,
          height: R.measured.height
        }
      }), x.position.x = Math.max(0, x.position.x), x.position.y = Math.max(0, x.position.y)), W.push(x);
    }
    if (t.length > 0) {
      const { nodeLookup: V, parentLookup: R, nodeOrigin: x } = y(), r = qV(t, V, R, x);
      W.push(...r);
    }
    y().triggerNodeChanges(W);
  },
  triggerNodeChanges: (h) => {
    const { onNodesChange: S, setNodes: t, nodes: W, hasDefaultNodes: V, debug: R } = y();
    if (h != null && h.length) {
      if (V) {
        const x = xO(h, W);
        t(x);
      }
      R && console.log("React Flow: trigger node changes", h), S == null || S(h);
    }
  },
  triggerEdgeChanges: (h) => {
    const { onEdgesChange: S, setEdges: t, edges: W, hasDefaultEdges: V, debug: R } = y();
    if (h != null && h.length) {
      if (V) {
        const x = RO(h, W);
        t(x);
      }
      R && console.log("React Flow: trigger edge changes", h), S == null || S(h);
    }
  },
  addSelectedNodes: (h) => {
    const { multiSelectionActive: S, edgeLookup: t, nodeLookup: W, triggerNodeChanges: V, triggerEdgeChanges: R } = y();
    if (S) {
      const x = h.map((r) => um(r, !0));
      V(x);
      return;
    }
    V(Bi(W, /* @__PURE__ */ new Set([...h]), !0)), R(Bi(t));
  },
  addSelectedEdges: (h) => {
    const { multiSelectionActive: S, edgeLookup: t, nodeLookup: W, triggerNodeChanges: V, triggerEdgeChanges: R } = y();
    if (S) {
      const x = h.map((r) => um(r, !0));
      R(x);
      return;
    }
    R(Bi(t, /* @__PURE__ */ new Set([...h]))), V(Bi(W, /* @__PURE__ */ new Set(), !0));
  },
  unselectNodesAndEdges: ({ nodes: h, edges: S } = {}) => {
    const { edges: t, nodes: W, nodeLookup: V, triggerNodeChanges: R, triggerEdgeChanges: x } = y(), r = h || W, k = S || t, U = r.map((z) => {
      const D = V.get(z.id);
      return D && (D.selected = !1), um(z.id, !1);
    }), w = k.map((z) => um(z.id, !1));
    R(U), x(w);
  },
  setMinZoom: (h) => {
    const { panZoom: S, maxZoom: t } = y();
    S == null || S.setScaleExtent([h, t]), p({ minZoom: h });
  },
  setMaxZoom: (h) => {
    const { panZoom: S, minZoom: t } = y();
    S == null || S.setScaleExtent([t, h]), p({ maxZoom: h });
  },
  setTranslateExtent: (h) => {
    var S;
    (S = y().panZoom) == null || S.setTranslateExtent(h), p({ translateExtent: h });
  },
  setPaneClickDistance: (h) => {
    var S;
    (S = y().panZoom) == null || S.setClickDistance(h);
  },
  resetSelectedElements: () => {
    const { edges: h, nodes: S, triggerNodeChanges: t, triggerEdgeChanges: W } = y(), V = S.reduce((x, r) => r.selected ? [...x, um(r.id, !1)] : x, []), R = h.reduce((x, r) => r.selected ? [...x, um(r.id, !1)] : x, []);
    t(V), W(R);
  },
  setNodeExtent: (h) => {
    const { nodes: S, nodeLookup: t, parentLookup: W, nodeOrigin: V, elevateNodesOnSelect: R, nodeExtent: x } = y();
    h[0][0] === x[0][0] && h[0][1] === x[0][1] && h[1][0] === x[1][0] && h[1][1] === x[1][1] || (jW(S, t, W, {
      nodeOrigin: V,
      nodeExtent: h,
      elevateNodesOnSelect: R,
      checkEquality: !1
    }), p({ nodeExtent: h }));
  },
  panBy: (h) => {
    const { transform: S, width: t, height: W, panZoom: V, translateExtent: R } = y();
    return R8({ delta: h, panZoom: V, transform: S, translateExtent: R, width: t, height: W });
  },
  fitView: (h) => {
    const { panZoom: S, width: t, height: W, minZoom: V, maxZoom: R, nodeLookup: x } = y();
    if (!S)
      return Promise.resolve(!1);
    const r = vW(x, h);
    return TW({
      nodes: r,
      width: t,
      height: W,
      panZoom: S,
      minZoom: V,
      maxZoom: R
    }, h);
  },
  // we can't call an asnychronous function in updateNodeInternals
  // for that we created this sync version of fitView
  fitViewSync: (h) => {
    const { panZoom: S, width: t, height: W, minZoom: V, maxZoom: R, nodeLookup: x } = y();
    if (!S)
      return !1;
    const r = vW(x, h);
    return TW({
      nodes: r,
      width: t,
      height: W,
      panZoom: S,
      minZoom: V,
      maxZoom: R
    }, h), r.size > 0;
  },
  cancelConnection: () => {
    p({
      connection: { ...iC }
    });
  },
  updateConnection: (h) => {
    p({ connection: h });
  },
  reset: () => p({ ...DM() })
}), Object.is);
function er({ initialNodes: l, initialEdges: Z, defaultNodes: u, defaultEdges: s, initialWidth: G, initialHeight: i, fitView: m, nodeOrigin: a, nodeExtent: n, children: p }) {
  const [y] = M.useState(() => vA({
    nodes: l,
    edges: Z,
    defaultNodes: u,
    defaultEdges: s,
    width: G,
    height: i,
    fitView: m,
    nodeOrigin: a,
    nodeExtent: n
  }));
  return B.jsx(uO, { value: y, children: B.jsx(IO, { children: p }) });
}
function TA({ children: l, nodes: Z, edges: u, defaultNodes: s, defaultEdges: G, width: i, height: m, fitView: a, nodeOrigin: n, nodeExtent: p }) {
  return M.useContext(uy) ? B.jsx(B.Fragment, { children: l }) : B.jsx(er, { initialNodes: Z, initialEdges: u, defaultNodes: s, defaultEdges: G, initialWidth: i, initialHeight: m, fitView: a, nodeOrigin: n, nodeExtent: p, children: l });
}
const fA = {
  width: "100%",
  height: "100%",
  overflow: "hidden",
  position: "relative",
  zIndex: 0
};
function EA({ nodes: l, edges: Z, defaultNodes: u, defaultEdges: s, className: G, nodeTypes: i, edgeTypes: m, onNodeClick: a, onEdgeClick: n, onInit: p, onMove: y, onMoveStart: h, onMoveEnd: S, onConnect: t, onConnectStart: W, onConnectEnd: V, onClickConnectStart: R, onClickConnectEnd: x, onNodeMouseEnter: r, onNodeMouseMove: k, onNodeMouseLeave: U, onNodeContextMenu: w, onNodeDoubleClick: z, onNodeDragStart: D, onNodeDrag: C, onNodeDragStop: j, onNodesDelete: E, onEdgesDelete: g, onDelete: A, onSelectionChange: J, onSelectionDragStart: F, onSelectionDrag: v, onSelectionDragStop: T, onSelectionContextMenu: f, onSelectionStart: O, onSelectionEnd: _, onBeforeDelete: il, connectionMode: Zl, connectionLineType: ol = sG.Bezier, connectionLineStyle: Wl, connectionLineComponent: ml, connectionLineContainerStyle: Rl, deleteKeyCode: kl = "Backspace", selectionKeyCode: zl = "Shift", selectionOnDrag: Vl = !1, selectionMode: el = $a.Full, panActivationKeyCode: xl = "Space", multiSelectionKeyCode: hl = kh() ? "Meta" : "Control", zoomActivationKeyCode: cl = kh() ? "Meta" : "Control", snapToGrid: wl, snapGrid: Jl, onlyRenderVisibleElements: cZ = !1, selectNodesOnDrag: uZ, nodesDraggable: UZ, nodesConnectable: hc, nodesFocusable: Zb, nodeOrigin: yc = vC, edgesFocusable: nb, edgesReconnectable: Nc, elementsSelectable: oc = !0, defaultViewport: cb = yO, minZoom: sc = 0.5, maxZoom: Vc = 2, translateExtent: BZ = Aa, preventScrolling: Rb = !0, nodeExtent: Tb, defaultMarkerColor: tu = "#b1b1b7", zoomOnScroll: Il = !0, zoomOnPinch: El = !0, panOnScroll: sZ = !1, panOnScrollSpeed: YZ = 0.5, panOnScrollMode: kZ = hm.Free, zoomOnDoubleClick: ec = !0, panOnDrag: Zc = !0, onPaneClick: bb, onPaneMouseEnter: zZ, onPaneMouseMove: pb, onPaneMouseLeave: gZ, onPaneScroll: vZ, onPaneContextMenu: cu, paneClickDistance: Yb = 0, nodeClickDistance: Rs = 0, children: Xd, onReconnect: tG, onReconnectStart: Ys, onReconnectEnd: ks, onEdgeContextMenu: Xu, onEdgeDoubleClick: Qu, onEdgeMouseEnter: Ku, onEdgeMouseMove: fb, onEdgeMouseLeave: Eb, reconnectRadius: bu = 10, onNodesChange: Ms, onEdgesChange: Pu, noDragClassName: P = "nodrag", noWheelClassName: yl = "nowheel", noPanClassName: Kl = "nopan", fitView: Bl, fitViewOptions: oZ, connectOnClick: aZ, attributionPosition: jl, proOptions: dZ, defaultEdgeOptions: ac, elevateNodesOnSelect: JZ, elevateEdgesOnSelect: DZ, disableKeyboardA11y: xc = !1, autoPanOnConnect: uu, autoPanOnNodeDrag: kb, autoPanSpeed: Sc, connectionRadius: Lb, isValidConnection: GZ, onError: Wu, style: Ou, id: Kd, nodeDragThreshold: XG, viewport: KG, onViewportChange: WG, width: VG, height: xG, colorMode: RG = "light", debug: wm, ...Co }, YG) {
  const Vu = Kd || "1", Mb = KO(RG);
  return B.jsx("div", { ...Co, style: { ...Ou, ...fA }, ref: YG, className: Lc(["react-flow", G, Mb]), "data-testid": "rf__wrapper", id: Kd, children: B.jsxs(TA, { nodes: l, edges: Z, width: VG, height: xG, fitView: Bl, nodeOrigin: yc, nodeExtent: Tb, children: [B.jsx(gA, { onInit: p, onNodeClick: a, onEdgeClick: n, onNodeMouseEnter: r, onNodeMouseMove: k, onNodeMouseLeave: U, onNodeContextMenu: w, onNodeDoubleClick: z, nodeTypes: i, edgeTypes: m, connectionLineType: ol, connectionLineStyle: Wl, connectionLineComponent: ml, connectionLineContainerStyle: Rl, selectionKeyCode: zl, selectionOnDrag: Vl, selectionMode: el, deleteKeyCode: kl, multiSelectionKeyCode: hl, panActivationKeyCode: xl, zoomActivationKeyCode: cl, onlyRenderVisibleElements: cZ, defaultViewport: cb, translateExtent: BZ, minZoom: sc, maxZoom: Vc, preventScrolling: Rb, zoomOnScroll: Il, zoomOnPinch: El, zoomOnDoubleClick: ec, panOnScroll: sZ, panOnScrollSpeed: YZ, panOnScrollMode: kZ, panOnDrag: Zc, onPaneClick: bb, onPaneMouseEnter: zZ, onPaneMouseMove: pb, onPaneMouseLeave: gZ, onPaneScroll: vZ, onPaneContextMenu: cu, paneClickDistance: Yb, nodeClickDistance: Rs, onSelectionContextMenu: f, onSelectionStart: O, onSelectionEnd: _, onReconnect: tG, onReconnectStart: Ys, onReconnectEnd: ks, onEdgeContextMenu: Xu, onEdgeDoubleClick: Qu, onEdgeMouseEnter: Ku, onEdgeMouseMove: fb, onEdgeMouseLeave: Eb, reconnectRadius: bu, defaultMarkerColor: tu, noDragClassName: P, noWheelClassName: yl, noPanClassName: Kl, rfId: Vu, disableKeyboardA11y: xc, nodeExtent: Tb, viewport: KG, onViewportChange: WG }), B.jsx(XO, { nodes: l, edges: Z, defaultNodes: u, defaultEdges: s, onConnect: t, onConnectStart: W, onConnectEnd: V, onClickConnectStart: R, onClickConnectEnd: x, nodesDraggable: UZ, nodesConnectable: hc, nodesFocusable: Zb, edgesFocusable: nb, edgesReconnectable: Nc, elementsSelectable: oc, elevateNodesOnSelect: JZ, elevateEdgesOnSelect: DZ, minZoom: sc, maxZoom: Vc, nodeExtent: Tb, onNodesChange: Ms, onEdgesChange: Pu, snapToGrid: wl, snapGrid: Jl, connectionMode: Zl, translateExtent: BZ, connectOnClick: aZ, defaultEdgeOptions: ac, fitView: Bl, fitViewOptions: oZ, onNodesDelete: E, onEdgesDelete: g, onDelete: A, onNodeDragStart: D, onNodeDrag: C, onNodeDragStop: j, onSelectionDrag: v, onSelectionDragStart: F, onSelectionDragStop: T, onMove: y, onMoveStart: h, onMoveEnd: S, noPanClassName: Kl, nodeOrigin: yc, rfId: Vu, autoPanOnConnect: uu, autoPanOnNodeDrag: kb, autoPanSpeed: Sc, onError: Wu, connectionRadius: Lb, isValidConnection: GZ, selectNodesOnDrag: uZ, nodeDragThreshold: XG, onBeforeDelete: il, paneClickDistance: Yb, debug: wm }), B.jsx(hO, { onSelectionChange: J }), Xd, B.jsx(eO, { proOptions: dZ, position: jl }), B.jsx(iO, { rfId: Vu, disableKeyboardA11y: xc })] }) });
}
var BA = fC(EA);
const DA = (l) => (Z) => {
  if (Z.nodeLookup.size === 0)
    return !1;
  for (const [, { hidden: u, internals: s }] of Z.nodeLookup)
    if ((l.includeHiddenNodes || !u) && (s.handleBounds === void 0 || !PV(s.userNode)))
      return !1;
  return !0;
}, jA = {
  includeHiddenNodes: !1
};
function QA(l = jA) {
  return yZ(DA(l));
}
function PA({ dimensions: l, lineWidth: Z, variant: u, className: s }) {
  return B.jsx("path", { strokeWidth: Z, d: `M${l[0] / 2} 0 V${l[1]} M0 ${l[1] / 2} H${l[0]}`, className: Lc(["react-flow__background-pattern", u, s]) });
}
function OA({ radius: l, className: Z }) {
  return B.jsx("circle", { cx: l, cy: l, r: l, className: Lc(["react-flow__background-pattern", "dots", Z]) });
}
var pG;
(function(l) {
  l.Lines = "lines", l.Dots = "dots", l.Cross = "cross";
})(pG || (pG = {}));
const AA = {
  [pG.Dots]: 1,
  [pG.Lines]: 1,
  [pG.Cross]: 6
}, $A = (l) => ({ transform: l.transform, patternId: `pattern-${l.rfId}` });
function ar({
  id: l,
  variant: Z = pG.Dots,
  // only used for dots and cross
  gap: u = 20,
  // only used for lines and cross
  size: s,
  lineWidth: G = 1,
  offset: i = 0,
  color: m,
  bgColor: a,
  style: n,
  className: p,
  patternClassName: y
}) {
  const h = M.useRef(null), { transform: S, patternId: t } = yZ($A, uc), W = s || AA[Z], V = Z === pG.Dots, R = Z === pG.Cross, x = Array.isArray(u) ? u : [u, u], r = [x[0] * S[2] || 1, x[1] * S[2] || 1], k = W * S[2], U = Array.isArray(i) ? i : [i, i], w = R ? [k, k] : r, z = [
    U[0] * S[2] || 1 + w[0] / 2,
    U[1] * S[2] || 1 + w[1] / 2
  ], D = `${t}${l || ""}`;
  return B.jsxs("svg", { className: Lc(["react-flow__background", p]), style: {
    ...n,
    ...dy,
    "--xy-background-color-props": a,
    "--xy-background-pattern-color-props": m
  }, ref: h, "data-testid": "rf__background", children: [B.jsx("pattern", { id: D, x: S[0] % r[0], y: S[1] % r[1], width: r[0], height: r[1], patternUnits: "userSpaceOnUse", patternTransform: `translate(-${z[0]},-${z[1]})`, children: V ? B.jsx(OA, { radius: k / 2, className: y }) : B.jsx(PA, { dimensions: w, lineWidth: G, variant: Z, className: y }) }), B.jsx("rect", { x: "0", y: "0", width: "100%", height: "100%", fill: `url(#${D})` })] });
}
ar.displayName = "Background";
M.memo(ar);
function qA() {
  return B.jsx("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", children: B.jsx("path", { d: "M32 18.133H18.133V32h-4.266V18.133H0v-4.266h13.867V0h4.266v13.867H32z" }) });
}
function _A() {
  return B.jsx("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 5", children: B.jsx("path", { d: "M0 0h32v4.2H0z" }) });
}
function l7() {
  return B.jsx("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 30", children: B.jsx("path", { d: "M3.692 4.63c0-.53.4-.938.939-.938h5.215V0H4.708C2.13 0 0 2.054 0 4.63v5.216h3.692V4.631zM27.354 0h-5.2v3.692h5.17c.53 0 .984.4.984.939v5.215H32V4.631A4.624 4.624 0 0027.354 0zm.954 24.83c0 .532-.4.94-.939.94h-5.215v3.768h5.215c2.577 0 4.631-2.13 4.631-4.707v-5.139h-3.692v5.139zm-23.677.94c-.531 0-.939-.4-.939-.94v-5.138H0v5.139c0 2.577 2.13 4.707 4.708 4.707h5.138V25.77H4.631z" }) });
}
function Z7() {
  return B.jsx("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 25 32", children: B.jsx("path", { d: "M21.333 10.667H19.81V7.619C19.81 3.429 16.38 0 12.19 0 8 0 4.571 3.429 4.571 7.619v3.048H3.048A3.056 3.056 0 000 13.714v15.238A3.056 3.056 0 003.048 32h18.285a3.056 3.056 0 003.048-3.048V13.714a3.056 3.056 0 00-3.048-3.047zM12.19 24.533a3.056 3.056 0 01-3.047-3.047 3.056 3.056 0 013.047-3.048 3.056 3.056 0 013.048 3.048 3.056 3.056 0 01-3.048 3.047zm4.724-13.866H7.467V7.619c0-2.59 2.133-4.724 4.723-4.724 2.591 0 4.724 2.133 4.724 4.724v3.048z" }) });
}
function c7() {
  return B.jsx("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 25 32", children: B.jsx("path", { d: "M21.333 10.667H19.81V7.619C19.81 3.429 16.38 0 12.19 0c-4.114 1.828-1.37 2.133.305 2.438 1.676.305 4.42 2.59 4.42 5.181v3.048H3.047A3.056 3.056 0 000 13.714v15.238A3.056 3.056 0 003.048 32h18.285a3.056 3.056 0 003.048-3.048V13.714a3.056 3.056 0 00-3.048-3.047zM12.19 24.533a3.056 3.056 0 01-3.047-3.047 3.056 3.056 0 013.047-3.048 3.056 3.056 0 013.048 3.048 3.056 3.056 0 01-3.048 3.047z" }) });
}
function Zh({ children: l, className: Z, ...u }) {
  return B.jsx("button", { type: "button", className: Lc(["react-flow__controls-button", Z]), ...u, children: l });
}
const b7 = (l) => ({
  isInteractive: l.nodesDraggable || l.nodesConnectable || l.elementsSelectable,
  minZoomReached: l.transform[2] <= l.minZoom,
  maxZoomReached: l.transform[2] >= l.maxZoom
});
function nr({ style: l, showZoom: Z = !0, showFitView: u = !0, showInteractive: s = !0, fitViewOptions: G, onZoomIn: i, onZoomOut: m, onFitView: a, onInteractiveChange: n, className: p, children: y, position: h = "bottom-left", orientation: S = "vertical", "aria-label": t = "React Flow controls" }) {
  const W = lc(), { isInteractive: V, minZoomReached: R, maxZoomReached: x } = yZ(b7, uc), { zoomIn: r, zoomOut: k, fitView: U } = sy(), w = () => {
    r(), i == null || i();
  }, z = () => {
    k(), m == null || m();
  }, D = () => {
    U(G), a == null || a();
  }, C = () => {
    W.setState({
      nodesDraggable: !V,
      nodesConnectable: !V,
      elementsSelectable: !V
    }), n == null || n(!V);
  }, j = S === "horizontal" ? "horizontal" : "vertical";
  return B.jsxs(Zn, { className: Lc(["react-flow__controls", j, p]), position: h, style: l, "data-testid": "rf__controls", "aria-label": t, children: [Z && B.jsxs(B.Fragment, { children: [B.jsx(Zh, { onClick: w, className: "react-flow__controls-zoomin", title: "zoom in", "aria-label": "zoom in", disabled: x, children: B.jsx(qA, {}) }), B.jsx(Zh, { onClick: z, className: "react-flow__controls-zoomout", title: "zoom out", "aria-label": "zoom out", disabled: R, children: B.jsx(_A, {}) })] }), u && B.jsx(Zh, { className: "react-flow__controls-fitview", onClick: D, title: "fit view", "aria-label": "fit view", children: B.jsx(l7, {}) }), s && B.jsx(Zh, { className: "react-flow__controls-interactive", onClick: C, title: "toggle interactivity", "aria-label": "toggle interactivity", children: V ? B.jsx(c7, {}) : B.jsx(Z7, {}) }), y] });
}
nr.displayName = "Controls";
const u7 = M.memo(nr);
function s7({ id: l, x: Z, y: u, width: s, height: G, style: i, color: m, strokeColor: a, strokeWidth: n, className: p, borderRadius: y, shapeRendering: h, selected: S, onClick: t }) {
  const { background: W, backgroundColor: V } = i || {}, R = m || W || V;
  return B.jsx("rect", { className: Lc(["react-flow__minimap-node", { selected: S }, p]), x: Z, y: u, rx: y, ry: y, width: s, height: G, style: {
    fill: R,
    stroke: a,
    strokeWidth: n
  }, shapeRendering: h, onClick: t ? (x) => t(x, l) : void 0 });
}
const d7 = M.memo(s7), G7 = (l) => l.nodes.map((Z) => Z.id), qK = (l) => l instanceof Function ? l : () => l;
function m7({
  nodeStrokeColor: l,
  nodeColor: Z,
  nodeClassName: u = "",
  nodeBorderRadius: s = 5,
  nodeStrokeWidth: G,
  // We need to rename the prop to be `CapitalCase` so that JSX will render it as
  // a component properly.
  nodeComponent: i = d7,
  onClick: m
}) {
  const a = yZ(G7, uc), n = qK(Z), p = qK(l), y = qK(u), h = typeof window > "u" || window.chrome ? "crispEdges" : "geometricPrecision";
  return B.jsx(B.Fragment, { children: a.map((S) => (
    // The split of responsibilities between MiniMapNodes and
    // NodeComponentWrapper may appear weird. However, it’s designed to
    // minimize the cost of updates when individual nodes change.
    //
    // For more details, see a similar commit in `NodeRenderer/index.tsx`.
    B.jsx(o7, { id: S, nodeColorFunc: n, nodeStrokeColorFunc: p, nodeClassNameFunc: y, nodeBorderRadius: s, nodeStrokeWidth: G, NodeComponent: i, onClick: m, shapeRendering: h }, S)
  )) });
}
function i7({ id: l, nodeColorFunc: Z, nodeStrokeColorFunc: u, nodeClassNameFunc: s, nodeBorderRadius: G, nodeStrokeWidth: i, shapeRendering: m, NodeComponent: a, onClick: n }) {
  const { node: p, x: y, y: h, width: S, height: t } = yZ((W) => {
    const V = W.nodeLookup.get(l), { x: R, y: x } = V.internals.positionAbsolute, { width: r, height: k } = td(V);
    return {
      node: V,
      x: R,
      y: x,
      width: r,
      height: k
    };
  }, uc);
  return !p || p.hidden || !PV(p) ? null : B.jsx(a, { x: y, y: h, width: S, height: t, style: p.style, selected: !!p.selected, className: s(p), color: Z(p), borderRadius: G, strokeColor: u(p), strokeWidth: i, shapeRendering: m, onClick: n, id: p.id });
}
const o7 = M.memo(i7);
var e7 = M.memo(m7);
const a7 = 200, n7 = 150, p7 = (l) => {
  const Z = {
    x: -l.transform[0] / l.transform[2],
    y: -l.transform[1] / l.transform[2],
    width: l.width / l.transform[2],
    height: l.height / l.transform[2]
  };
  return {
    viewBB: Z,
    boundingRect: l.nodeLookup.size > 0 ? hC(Mo(l.nodeLookup), Z) : Z,
    rfId: l.rfId,
    panZoom: l.panZoom,
    translateExtent: l.translateExtent,
    flowWidth: l.width,
    flowHeight: l.height
  };
}, L7 = "react-flow__minimap-desc";
function pr({
  style: l,
  className: Z,
  nodeStrokeColor: u,
  nodeColor: s,
  nodeClassName: G = "",
  nodeBorderRadius: i = 5,
  nodeStrokeWidth: m,
  // We need to rename the prop to be `CapitalCase` so that JSX will render it as
  // a component properly.
  nodeComponent: a,
  bgColor: n,
  maskColor: p,
  maskStrokeColor: y,
  maskStrokeWidth: h,
  position: S = "bottom-right",
  onClick: t,
  onNodeClick: W,
  pannable: V = !1,
  zoomable: R = !1,
  ariaLabel: x = "React Flow mini map",
  inversePan: r,
  zoomStep: k = 10,
  offsetScale: U = 5
}) {
  const w = lc(), z = M.useRef(null), { boundingRect: D, viewBB: C, rfId: j, panZoom: E, translateExtent: g, flowWidth: A, flowHeight: J } = yZ(p7, uc), F = (l == null ? void 0 : l.width) ?? a7, v = (l == null ? void 0 : l.height) ?? n7, T = D.width / F, f = D.height / v, O = Math.max(T, f), _ = O * F, il = O * v, Zl = U * O, ol = D.x - (_ - D.width) / 2 - Zl, Wl = D.y - (il - D.height) / 2 - Zl, ml = _ + Zl * 2, Rl = il + Zl * 2, kl = `${L7}-${j}`, zl = M.useRef(0), Vl = M.useRef();
  zl.current = O, M.useEffect(() => {
    if (z.current && E)
      return Vl.current = F8({
        domNode: z.current,
        panZoom: E,
        getTransform: () => w.getState().transform,
        getViewScale: () => zl.current
      }), () => {
        var hl;
        (hl = Vl.current) == null || hl.destroy();
      };
  }, [E]), M.useEffect(() => {
    var hl;
    (hl = Vl.current) == null || hl.update({
      translateExtent: g,
      width: A,
      height: J,
      inversePan: r,
      pannable: V,
      zoomStep: k,
      zoomable: R
    });
  }, [V, R, r, k, g, A, J]);
  const el = t ? (hl) => {
    var Jl;
    const [cl, wl] = ((Jl = Vl.current) == null ? void 0 : Jl.pointer(hl)) || [0, 0];
    t(hl, { x: cl, y: wl });
  } : void 0, xl = W ? M.useCallback((hl, cl) => {
    const wl = w.getState().nodeLookup.get(cl);
    W(hl, wl);
  }, []) : void 0;
  return B.jsx(Zn, { position: S, style: {
    ...l,
    "--xy-minimap-background-color-props": typeof n == "string" ? n : void 0,
    "--xy-minimap-mask-background-color-props": typeof p == "string" ? p : void 0,
    "--xy-minimap-mask-stroke-color-props": typeof y == "string" ? y : void 0,
    "--xy-minimap-mask-stroke-width-props": typeof h == "number" ? h * O : void 0,
    "--xy-minimap-node-background-color-props": typeof s == "string" ? s : void 0,
    "--xy-minimap-node-stroke-color-props": typeof u == "string" ? u : void 0,
    "--xy-minimap-node-stroke-width-props": typeof m == "string" ? m : void 0
  }, className: Lc(["react-flow__minimap", Z]), "data-testid": "rf__minimap", children: B.jsxs("svg", { width: F, height: v, viewBox: `${ol} ${Wl} ${ml} ${Rl}`, className: "react-flow__minimap-svg", role: "img", "aria-labelledby": kl, ref: z, onClick: el, children: [x && B.jsx("title", { id: kl, children: x }), B.jsx(e7, { onClick: xl, nodeColor: s, nodeStrokeColor: u, nodeBorderRadius: i, nodeClassName: G, nodeStrokeWidth: m, nodeComponent: a }), B.jsx("path", { className: "react-flow__minimap-mask", d: `M${ol - Zl},${Wl - Zl}h${ml + Zl * 2}v${Rl + Zl * 2}h${-ml - Zl * 2}z
        M${C.x},${C.y}h${C.width}v${C.height}h${-C.width}z`, fillRule: "evenodd", pointerEvents: "none" })] }) });
}
pr.displayName = "MiniMap";
M.memo(pr);
function h7({ nodeId: l, position: Z, variant: u = wa.Handle, className: s, style: G = {}, children: i, color: m, minWidth: a = 10, minHeight: n = 10, maxWidth: p = Number.MAX_VALUE, maxHeight: y = Number.MAX_VALUE, keepAspectRatio: h = !1, shouldResize: S, onResizeStart: t, onResize: W, onResizeEnd: V }) {
  const R = lx(), x = typeof l == "string" ? l : R, r = lc(), k = M.useRef(null), U = u === wa.Line ? "right" : "bottom-right", w = Z ?? U, z = M.useRef(null);
  M.useEffect(() => {
    if (!(!k.current || !x))
      return z.current || (z.current = P8({
        domNode: k.current,
        nodeId: x,
        getStoreItems: () => {
          const { nodeLookup: E, transform: g, snapGrid: A, snapToGrid: J, nodeOrigin: F } = r.getState();
          return {
            nodeLookup: E,
            transform: g,
            snapGrid: A,
            snapToGrid: J,
            nodeOrigin: F
          };
        },
        onChange: (E, g) => {
          const { triggerNodeChanges: A, nodeLookup: J, parentLookup: F, nodeOrigin: v } = r.getState(), T = [], f = { x: E.x, y: E.y }, O = J.get(x);
          if (O && O.expandParent && O.parentId) {
            const _ = O.origin ?? v, il = E.width ?? O.measured.width, Zl = E.height ?? O.measured.height, ol = {
              id: O.id,
              parentId: O.parentId,
              rect: {
                width: il,
                height: Zl,
                ...SC({
                  x: E.x ?? O.position.x,
                  y: E.y ?? O.position.y
                }, { width: il, height: Zl }, O.parentId, J, _)
              }
            }, Wl = qV([ol], J, F, v);
            T.push(...Wl), f.x = E.x ? Math.max(_[0] * il, E.x) : void 0, f.y = E.y ? Math.max(_[1] * Zl, E.y) : void 0;
          }
          if (f.x !== void 0 && f.y !== void 0) {
            const _ = {
              id: x,
              type: "position",
              position: { ...f }
            };
            T.push(_);
          }
          if (E.width !== void 0 && E.height !== void 0) {
            const _ = {
              id: x,
              type: "dimensions",
              resizing: !0,
              setAttributes: !0,
              dimensions: {
                width: E.width,
                height: E.height
              }
            };
            T.push(_);
          }
          for (const _ of g) {
            const il = {
              ..._,
              type: "position"
            };
            T.push(il);
          }
          A(T);
        },
        onEnd: () => {
          const E = {
            id: x,
            type: "dimensions",
            resizing: !1
          };
          r.getState().triggerNodeChanges([E]);
        }
      })), z.current.update({
        controlPosition: w,
        boundaries: {
          minWidth: a,
          minHeight: n,
          maxWidth: p,
          maxHeight: y
        },
        keepAspectRatio: h,
        onResizeStart: t,
        onResize: W,
        onResizeEnd: V,
        shouldResize: S
      }), () => {
        var E;
        (E = z.current) == null || E.destroy();
      };
  }, [
    w,
    a,
    n,
    p,
    y,
    h,
    t,
    W,
    V,
    S
  ]);
  const D = w.split("-"), C = u === wa.Line ? "borderColor" : "backgroundColor", j = m ? { ...G, [C]: m } : G;
  return B.jsx("div", { className: Lc(["react-flow__resize-control", "nodrag", ...D, u, s]), ref: k, style: j, children: i });
}
M.memo(h7);
const y7 = (l) => {
  var Z;
  return (Z = l.domNode) == null ? void 0 : Z.querySelector(".react-flow__renderer");
};
function S7({ children: l }) {
  const Z = yZ(y7);
  return Z ? xo.createPortal(l, Z) : null;
}
const t7 = (l, Z) => (l == null ? void 0 : l.internals.positionAbsolute.x) !== (Z == null ? void 0 : Z.internals.positionAbsolute.x) || (l == null ? void 0 : l.internals.positionAbsolute.y) !== (Z == null ? void 0 : Z.internals.positionAbsolute.y) || (l == null ? void 0 : l.measured.width) !== (Z == null ? void 0 : Z.measured.width) || (l == null ? void 0 : l.measured.height) !== (Z == null ? void 0 : Z.measured.height) || (l == null ? void 0 : l.selected) !== (Z == null ? void 0 : Z.selected) || (l == null ? void 0 : l.internals.z) !== (Z == null ? void 0 : Z.internals.z), X7 = (l, Z) => {
  if (l.size !== Z.size)
    return !1;
  for (const [u, s] of l)
    if (t7(s, Z.get(u)))
      return !1;
  return !0;
}, K7 = (l) => ({
  x: l.transform[0],
  y: l.transform[1],
  zoom: l.transform[2],
  selectedNodesCount: l.nodes.filter((Z) => Z.selected).length
});
function W7({ nodeId: l, children: Z, className: u, style: s, isVisible: G, position: i = Tl.Top, offset: m = 10, align: a = "center", ...n }) {
  const p = lx(), y = M.useCallback((w) => (Array.isArray(l) ? l : [l || p || ""]).reduce((C, j) => {
    const E = w.nodeLookup.get(j);
    return E && C.set(E.id, E), C;
  }, /* @__PURE__ */ new Map()), [l, p]), h = yZ(y, X7), { x: S, y: t, zoom: W, selectedNodesCount: V } = yZ(K7, uc);
  if (!(typeof G == "boolean" ? G : h.size === 1 && h.values().next().value.selected && V === 1) || !h.size)
    return null;
  const x = Mo(h), r = Array.from(h.values()), k = Math.max(...r.map((w) => w.internals.z + 1)), U = {
    position: "absolute",
    transform: t8(x, { x: S, y: t, zoom: W }, i, m, a),
    zIndex: k,
    ...s
  };
  return B.jsx(S7, { children: B.jsx("div", { style: U, className: Lc(["react-flow__node-toolbar", u]), ...n, "data-id": r.reduce((w, z) => `${w}${z.id} `, "").trim(), children: Z }) });
}
function V7({
  className: l,
  noIndicator: Z,
  variant: u,
  children: s,
  ...G
}) {
  return u || (u = "outline"), /* @__PURE__ */ B.jsx(
    uD,
    {
      ...G,
      variant: u,
      className: Um(l, [
        "gap-1",
        "pressed:scale-[0.97] pressed:opacity-75",
        "group-data-[ui=button-group]:pressed:scale-100",
        "group-data-[ui=button-group]:pressed:opacity-100",
        u === "unstyle" ? "" : "px-2.5"
      ]),
      children: (i) => /* @__PURE__ */ B.jsxs(B.Fragment, { children: [
        typeof s == "function" ? s(i) : s,
        !Z && /* @__PURE__ */ B.jsx(
          $B,
          {
            strokeWidth: 2.5,
            className: lb(
              !!s && "ms-1",
              "[.justify-start_&]:ms-auto [[data-variant=outline]:not(:hover)_&]:text-muted"
            )
          }
        )
      ] })
    }
  );
}
function x7({ className: l, ...Z }) {
  return /* @__PURE__ */ B.jsx(
    lD,
    {
      ...Z,
      className: Um(
        l,
        lb(
          "dark:bg-zinc-800",
          "dark:ring-zinc-700",
          "max-w-72",
          "rounded-lg",
          "min-w-[max(144px,var(--trigger-width))]",
          "has-[[data-ui=item]_[data-ui=icon]]:min-w-[max(200px,var(--trigger-width))]",
          "has-[[data-ui=item]_kbd]:min-w-[max(176px,var(--trigger-width))]"
        )
      )
    }
  );
}
function R7(l) {
  return /* @__PURE__ */ B.jsx(
    hB,
    {
      ...l,
      className: lb(
        "flex max-h-[inherit] flex-col overflow-auto outline-none",
        "p-1 has-[header]:px-2 has-[header]:pt-0",
        // MeuItem style
        "[&_[data-ui=item]]:flex-1",
        "[&_[data-ui=item]]:grid",
        "[&_[data-ui=item]:has([data-ui=label])]:grid-cols-[16px_1fr_minmax(50px,max-content)]",
        "[&_[data-ui=item]]:items-center",
        "[&_[data-ui=item]]:gap-x-2",
        // icon
        "[&_[data-ui=item]>[data-ui=icon]:not([class*=text-])]:text-muted",
        "[&_[data-ui=item][data-destructive]>[data-ui=icon]]:text-destructive/75",
        "[&:has([data-ui=icon]+[data-ui=label])_[data-ui=item]>[data-ui=icon]:not([class*=size-])]:size-4",
        "[&:has([data-ui=icon]+[data-ui=label])_[data-ui=item]>[data-ui=icon]]:col-start-1",
        "[&_[data-ui=item]>[data-ui=label]]:col-span-full",
        "[&:has([data-ui=icon]+[data-ui=label])_[data-ui=item]>[data-ui=label]]:col-start-2",
        // kbd
        "[&:has([data-ui=kbd])_[data-ui=item]>[data-ui=label]]:col-end-[-2]",
        "[&_[data-ui=item]>[data-ui=kbd]]:col-span-1",
        "[&_[data-ui=item]>[data-ui=kbd]]:row-start-1",
        "[&_[data-ui=item]>[data-ui=kbd]]:col-start-3",
        "[&_[data-ui=item]>[data-ui=kbd]]:justify-self-end",
        "[&_[data-ui=item][data-destructive]>[data-ui=kbd]]:text-destructive",
        // Description
        "[&_[data-ui=item]>[data-ui=description]]:col-span-full",
        "[&:has([data-ui=kbd])_[data-ui=item]>[data-ui=description]]:col-end-[-2]",
        "[&:has([data-ui=icon]+[data-ui=label]+[data-ui=description])_[data-ui=item]>[data-ui=description]]:col-start-2",
        l.className
      )
    }
  );
}
function Y7({ className: l }) {
  return /* @__PURE__ */ B.jsx(
    $4,
    {
      className: lb(
        "my-1 w-[calc(100%-24px)] self-center border-t border-zinc-950/5 dark:border-white/10",
        l
      )
    }
  );
}
function _K({ destructive: l, ...Z }) {
  return /* @__PURE__ */ B.jsx(
    SB,
    {
      ...Z,
      className: nW(
        Z.className,
        (u, { isFocused: s, isDisabled: G }) => lb([
          "group flex cursor-default select-none items-center gap-x-2 outline-none",
          "px-3 py-2.5 sm:py-1.5 [&[data-selection-mode]]:px-2",
          "rounded-md",
          "text-base/6 sm:text-sm/6",
          G && "opacity-50",
          s && "bg-zinc-100 dark:bg-zinc-700",
          l && "text-destructive",
          u
        ])
      ),
      children: nW(
        Z.children,
        (u, { selectionMode: s, isSelected: G, isHovered: i }) => /* @__PURE__ */ B.jsxs(B.Fragment, { children: [
          s !== "none" && /* @__PURE__ */ B.jsx(
            "span",
            {
              "data-ui": "icon",
              className: lb(
                "flex w-4 self-start",
                G && "mt-[5px]"
              ),
              children: G && /* @__PURE__ */ B.jsx(AB, { className: "size-4" })
            }
          ),
          /* @__PURE__ */ B.jsx(
            "div",
            {
              "data-ui": "item",
              "data-destructive": l || void 0,
              "data-hovered": i,
              children: u
            }
          ),
          /* @__PURE__ */ B.jsx(qB, { className: "-me-2 hidden size-4 text-muted group-data-[has-submenu]:inline-block" })
        ] })
      )
    }
  );
}
function lW({
  className: l,
  ...Z
}) {
  return /* @__PURE__ */ B.jsx(
    "span",
    {
      slot: "label",
      "data-ui": "label",
      className: lb("mb-0 truncate", l),
      ...Z
    }
  );
}
function ZW({
  className: l,
  ...Z
}) {
  return /* @__PURE__ */ B.jsx(
    cD,
    {
      slot: "description",
      "data-ui": "description",
      className: l,
      ...Z
    }
  );
}
function k7({ timeout: l = 2e3 } = {}) {
  const [Z, u] = tl.useState(null), [s, G] = tl.useState(!1), [i, m] = tl.useState(null), a = (y) => {
    window.clearTimeout(i), m(window.setTimeout(() => G(!1), l)), G(y);
  };
  return { copy: (y) => {
    "clipboard" in navigator ? navigator.clipboard.writeText(y).then(() => a(!0)).catch((h) => u(h)) : u(new Error("useCopyToClipboard: navigator.clipboard is not supported"));
  }, reset: () => {
    G(!1), u(null), window.clearTimeout(i);
  }, error: Z, copied: s };
}
var Wn = class {
  constructor() {
    this.listeners = /* @__PURE__ */ new Set(), this.subscribe = this.subscribe.bind(this);
  }
  subscribe(l) {
    return this.listeners.add(l), this.onSubscribe(), () => {
      this.listeners.delete(l), this.onUnsubscribe();
    };
  }
  hasListeners() {
    return this.listeners.size > 0;
  }
  onSubscribe() {
  }
  onUnsubscribe() {
  }
}, Ym = typeof window > "u" || "Deno" in globalThis;
function pu() {
}
function M7(l, Z) {
  return typeof l == "function" ? l(Z) : l;
}
function OW(l) {
  return typeof l == "number" && l >= 0 && l !== 1 / 0;
}
function Lr(l, Z) {
  return Math.max(l + (Z || 0) - Date.now(), 0);
}
function Ai(l, Z) {
  return typeof l == "function" ? l(Z) : l;
}
function Tu(l, Z) {
  return typeof l == "function" ? l(Z) : l;
}
function jM(l, Z) {
  const {
    type: u = "all",
    exact: s,
    fetchStatus: G,
    predicate: i,
    queryKey: m,
    stale: a
  } = l;
  if (m) {
    if (s) {
      if (Z.queryHash !== Zx(m, Z.options))
        return !1;
    } else if (!un(Z.queryKey, m))
      return !1;
  }
  if (u !== "all") {
    const n = Z.isActive();
    if (u === "active" && !n || u === "inactive" && n)
      return !1;
  }
  return !(typeof a == "boolean" && Z.isStale() !== a || G && G !== Z.state.fetchStatus || i && !i(Z));
}
function QM(l, Z) {
  const { exact: u, status: s, predicate: G, mutationKey: i } = l;
  if (i) {
    if (!Z.options.mutationKey)
      return !1;
    if (u) {
      if (bn(Z.options.mutationKey) !== bn(i))
        return !1;
    } else if (!un(Z.options.mutationKey, i))
      return !1;
  }
  return !(s && Z.state.status !== s || G && !G(Z));
}
function Zx(l, Z) {
  return ((Z == null ? void 0 : Z.queryKeyHashFn) || bn)(l);
}
function bn(l) {
  return JSON.stringify(
    l,
    (Z, u) => qW(u) ? Object.keys(u).sort().reduce((s, G) => (s[G] = u[G], s), {}) : u
  );
}
function un(l, Z) {
  return l === Z ? !0 : typeof l != typeof Z ? !1 : l && Z && typeof l == "object" && typeof Z == "object" ? !Object.keys(Z).some((u) => !un(l[u], Z[u])) : !1;
}
function AW(l, Z) {
  if (l === Z)
    return l;
  const u = PM(l) && PM(Z);
  if (u || qW(l) && qW(Z)) {
    const s = u ? l : Object.keys(l), G = s.length, i = u ? Z : Object.keys(Z), m = i.length, a = u ? [] : {};
    let n = 0;
    for (let p = 0; p < m; p++) {
      const y = u ? p : i[p];
      (!u && s.includes(y) || u) && l[y] === void 0 && Z[y] === void 0 ? (a[y] = void 0, n++) : (a[y] = AW(l[y], Z[y]), a[y] === l[y] && l[y] !== void 0 && n++);
    }
    return G === m && n === G ? l : a;
  }
  return Z;
}
function $W(l, Z) {
  if (!Z || Object.keys(l).length !== Object.keys(Z).length)
    return !1;
  for (const u in l)
    if (l[u] !== Z[u])
      return !1;
  return !0;
}
function PM(l) {
  return Array.isArray(l) && l.length === Object.keys(l).length;
}
function qW(l) {
  if (!OM(l))
    return !1;
  const Z = l.constructor;
  if (Z === void 0)
    return !0;
  const u = Z.prototype;
  return !(!OM(u) || !u.hasOwnProperty("isPrototypeOf") || Object.getPrototypeOf(l) !== Object.prototype);
}
function OM(l) {
  return Object.prototype.toString.call(l) === "[object Object]";
}
function I7(l) {
  return new Promise((Z) => {
    setTimeout(Z, l);
  });
}
function _W(l, Z, u) {
  if (typeof u.structuralSharing == "function")
    return u.structuralSharing(l, Z);
  if (u.structuralSharing !== !1) {
    try {
      return AW(l, Z);
    } catch (s) {
      console.error(
        `Structural sharing requires data to be JSON serializable. To fix this, turn off structuralSharing or return JSON-serializable data from your queryFn. [${u.queryHash}]: ${s}`
      );
    }
    return AW(l, Z);
  }
  return Z;
}
function U7(l) {
  return l;
}
function C7(l, Z, u = 0) {
  const s = [...l, Z];
  return u && s.length > u ? s.slice(1) : s;
}
function r7(l, Z, u = 0) {
  const s = [Z, ...l];
  return u && s.length > u ? s.slice(0, -1) : s;
}
var Ih = Symbol();
function hr(l, Z) {
  return l.queryFn === Ih && console.error(
    `Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${l.queryHash}'`
  ), !l.queryFn && (Z != null && Z.initialPromise) ? () => Z.initialPromise : !l.queryFn || l.queryFn === Ih ? () => Promise.reject(new Error(`Missing queryFn: '${l.queryHash}'`)) : l.queryFn;
}
var Gm, dG, $i, FI, F7 = (FI = class extends Wn {
  constructor() {
    super();
    ZZ(this, Gm);
    ZZ(this, dG);
    ZZ(this, $i);
    vl(this, $i, (Z) => {
      if (!Ym && window.addEventListener) {
        const u = () => Z();
        return window.addEventListener("visibilitychange", u, !1), () => {
          window.removeEventListener("visibilitychange", u);
        };
      }
    });
  }
  onSubscribe() {
    ll(this, dG) || this.setEventListener(ll(this, $i));
  }
  onUnsubscribe() {
    var Z;
    this.hasListeners() || ((Z = ll(this, dG)) == null || Z.call(this), vl(this, dG, void 0));
  }
  setEventListener(Z) {
    var u;
    vl(this, $i, Z), (u = ll(this, dG)) == null || u.call(this), vl(this, dG, Z((s) => {
      typeof s == "boolean" ? this.setFocused(s) : this.onFocus();
    }));
  }
  setFocused(Z) {
    ll(this, Gm) !== Z && (vl(this, Gm, Z), this.onFocus());
  }
  onFocus() {
    const Z = this.isFocused();
    this.listeners.forEach((u) => {
      u(Z);
    });
  }
  isFocused() {
    var Z;
    return typeof ll(this, Gm) == "boolean" ? ll(this, Gm) : ((Z = globalThis.document) == null ? void 0 : Z.visibilityState) !== "hidden";
  }
}, Gm = new WeakMap(), dG = new WeakMap(), $i = new WeakMap(), FI), cx = new F7(), qi, GG, _i, NI, N7 = (NI = class extends Wn {
  constructor() {
    super();
    ZZ(this, qi, !0);
    ZZ(this, GG);
    ZZ(this, _i);
    vl(this, _i, (Z) => {
      if (!Ym && window.addEventListener) {
        const u = () => Z(!0), s = () => Z(!1);
        return window.addEventListener("online", u, !1), window.addEventListener("offline", s, !1), () => {
          window.removeEventListener("online", u), window.removeEventListener("offline", s);
        };
      }
    });
  }
  onSubscribe() {
    ll(this, GG) || this.setEventListener(ll(this, _i));
  }
  onUnsubscribe() {
    var Z;
    this.hasListeners() || ((Z = ll(this, GG)) == null || Z.call(this), vl(this, GG, void 0));
  }
  setEventListener(Z) {
    var u;
    vl(this, _i, Z), (u = ll(this, GG)) == null || u.call(this), vl(this, GG, Z(this.setOnline.bind(this)));
  }
  setOnline(Z) {
    ll(this, qi) !== Z && (vl(this, qi, Z), this.listeners.forEach((s) => {
      s(Z);
    }));
  }
  isOnline() {
    return ll(this, qi);
  }
}, qi = new WeakMap(), GG = new WeakMap(), _i = new WeakMap(), NI), Uh = new N7();
function lV() {
  let l, Z;
  const u = new Promise((G, i) => {
    l = G, Z = i;
  });
  u.status = "pending", u.catch(() => {
  });
  function s(G) {
    Object.assign(u, G), delete u.resolve, delete u.reject;
  }
  return u.resolve = (G) => {
    s({
      status: "fulfilled",
      value: G
    }), l(G);
  }, u.reject = (G) => {
    s({
      status: "rejected",
      reason: G
    }), Z(G);
  }, u;
}
function w7(l) {
  return Math.min(1e3 * 2 ** l, 3e4);
}
function yr(l) {
  return (l ?? "online") === "online" ? Uh.isOnline() : !0;
}
var Sr = class extends Error {
  constructor(l) {
    super("CancelledError"), this.revert = l == null ? void 0 : l.revert, this.silent = l == null ? void 0 : l.silent;
  }
};
function cW(l) {
  return l instanceof Sr;
}
function tr(l) {
  let Z = !1, u = 0, s = !1, G;
  const i = lV(), m = (V) => {
    var R;
    s || (S(new Sr(V)), (R = l.abort) == null || R.call(l));
  }, a = () => {
    Z = !0;
  }, n = () => {
    Z = !1;
  }, p = () => cx.isFocused() && (l.networkMode === "always" || Uh.isOnline()) && l.canRun(), y = () => yr(l.networkMode) && l.canRun(), h = (V) => {
    var R;
    s || (s = !0, (R = l.onSuccess) == null || R.call(l, V), G == null || G(), i.resolve(V));
  }, S = (V) => {
    var R;
    s || (s = !0, (R = l.onError) == null || R.call(l, V), G == null || G(), i.reject(V));
  }, t = () => new Promise((V) => {
    var R;
    G = (x) => {
      (s || p()) && V(x);
    }, (R = l.onPause) == null || R.call(l);
  }).then(() => {
    var V;
    G = void 0, s || (V = l.onContinue) == null || V.call(l);
  }), W = () => {
    if (s)
      return;
    let V;
    const R = u === 0 ? l.initialPromise : void 0;
    try {
      V = R ?? l.fn();
    } catch (x) {
      V = Promise.reject(x);
    }
    Promise.resolve(V).then(h).catch((x) => {
      var z;
      if (s)
        return;
      const r = l.retry ?? (Ym ? 0 : 3), k = l.retryDelay ?? w7, U = typeof k == "function" ? k(u, x) : k, w = r === !0 || typeof r == "number" && u < r || typeof r == "function" && r(u, x);
      if (Z || !w) {
        S(x);
        return;
      }
      u++, (z = l.onFail) == null || z.call(l, u, x), I7(U).then(() => p() ? void 0 : t()).then(() => {
        Z ? S(x) : W();
      });
    });
  };
  return {
    promise: i,
    cancel: m,
    continue: () => (G == null || G(), i),
    cancelRetry: a,
    continueRetry: n,
    canStart: y,
    start: () => (y() ? W() : t().then(W), i)
  };
}
function z7() {
  let l = [], Z = 0, u = (a) => {
    a();
  }, s = (a) => {
    a();
  }, G = (a) => setTimeout(a, 0);
  const i = (a) => {
    Z ? l.push(a) : G(() => {
      u(a);
    });
  }, m = () => {
    const a = l;
    l = [], a.length && G(() => {
      s(() => {
        a.forEach((n) => {
          u(n);
        });
      });
    });
  };
  return {
    batch: (a) => {
      let n;
      Z++;
      try {
        n = a();
      } finally {
        Z--, Z || m();
      }
      return n;
    },
    /**
     * All calls to the wrapped function will be batched.
     */
    batchCalls: (a) => (...n) => {
      i(() => {
        a(...n);
      });
    },
    schedule: i,
    /**
     * Use this method to set a custom notify function.
     * This can be used to for example wrap notifications with `React.act` while running tests.
     */
    setNotifyFunction: (a) => {
      u = a;
    },
    /**
     * Use this method to set a custom function to batch notifications together into a single tick.
     * By default React Query will use the batch function provided by ReactDOM or React Native.
     */
    setBatchNotifyFunction: (a) => {
      s = a;
    },
    setScheduler: (a) => {
      G = a;
    }
  };
}
var _c = z7(), mm, wI, Xr = (wI = class {
  constructor() {
    ZZ(this, mm);
  }
  destroy() {
    this.clearGcTimeout();
  }
  scheduleGc() {
    this.clearGcTimeout(), OW(this.gcTime) && vl(this, mm, setTimeout(() => {
      this.optionalRemove();
    }, this.gcTime));
  }
  updateGcTime(l) {
    this.gcTime = Math.max(
      this.gcTime || 0,
      l ?? (Ym ? 1 / 0 : 5 * 60 * 1e3)
    );
  }
  clearGcTimeout() {
    ll(this, mm) && (clearTimeout(ll(this, mm)), vl(this, mm, void 0));
  }
}, mm = new WeakMap(), wI), lo, Zo, nu, eb, mn, im, Hu, bd, zI, J7 = (zI = class extends Xr {
  constructor(Z) {
    super();
    ZZ(this, Hu);
    ZZ(this, lo);
    ZZ(this, Zo);
    ZZ(this, nu);
    ZZ(this, eb);
    ZZ(this, mn);
    ZZ(this, im);
    vl(this, im, !1), vl(this, mn, Z.defaultOptions), this.setOptions(Z.options), this.observers = [], vl(this, nu, Z.cache), this.queryKey = Z.queryKey, this.queryHash = Z.queryHash, vl(this, lo, H7(this.options)), this.state = Z.state ?? ll(this, lo), this.scheduleGc();
  }
  get meta() {
    return this.options.meta;
  }
  get promise() {
    var Z;
    return (Z = ll(this, eb)) == null ? void 0 : Z.promise;
  }
  setOptions(Z) {
    this.options = { ...ll(this, mn), ...Z }, this.updateGcTime(this.options.gcTime);
  }
  optionalRemove() {
    !this.observers.length && this.state.fetchStatus === "idle" && ll(this, nu).remove(this);
  }
  setData(Z, u) {
    const s = _W(this.state.data, Z, this.options);
    return XZ(this, Hu, bd).call(this, {
      data: s,
      type: "success",
      dataUpdatedAt: u == null ? void 0 : u.updatedAt,
      manual: u == null ? void 0 : u.manual
    }), s;
  }
  setState(Z, u) {
    XZ(this, Hu, bd).call(this, { type: "setState", state: Z, setStateOptions: u });
  }
  cancel(Z) {
    var s, G;
    const u = (s = ll(this, eb)) == null ? void 0 : s.promise;
    return (G = ll(this, eb)) == null || G.cancel(Z), u ? u.then(pu).catch(pu) : Promise.resolve();
  }
  destroy() {
    super.destroy(), this.cancel({ silent: !0 });
  }
  reset() {
    this.destroy(), this.setState(ll(this, lo));
  }
  isActive() {
    return this.observers.some(
      (Z) => Tu(Z.options.enabled, this) !== !1
    );
  }
  isDisabled() {
    return this.getObserversCount() > 0 ? !this.isActive() : this.options.queryFn === Ih || this.state.dataUpdateCount + this.state.errorUpdateCount === 0;
  }
  isStale() {
    return this.state.isInvalidated ? !0 : this.getObserversCount() > 0 ? this.observers.some(
      (Z) => Z.getCurrentResult().isStale
    ) : this.state.data === void 0;
  }
  isStaleByTime(Z = 0) {
    return this.state.isInvalidated || this.state.data === void 0 || !Lr(this.state.dataUpdatedAt, Z);
  }
  onFocus() {
    var u;
    const Z = this.observers.find((s) => s.shouldFetchOnWindowFocus());
    Z == null || Z.refetch({ cancelRefetch: !1 }), (u = ll(this, eb)) == null || u.continue();
  }
  onOnline() {
    var u;
    const Z = this.observers.find((s) => s.shouldFetchOnReconnect());
    Z == null || Z.refetch({ cancelRefetch: !1 }), (u = ll(this, eb)) == null || u.continue();
  }
  addObserver(Z) {
    this.observers.includes(Z) || (this.observers.push(Z), this.clearGcTimeout(), ll(this, nu).notify({ type: "observerAdded", query: this, observer: Z }));
  }
  removeObserver(Z) {
    this.observers.includes(Z) && (this.observers = this.observers.filter((u) => u !== Z), this.observers.length || (ll(this, eb) && (ll(this, im) ? ll(this, eb).cancel({ revert: !0 }) : ll(this, eb).cancelRetry()), this.scheduleGc()), ll(this, nu).notify({ type: "observerRemoved", query: this, observer: Z }));
  }
  getObserversCount() {
    return this.observers.length;
  }
  invalidate() {
    this.state.isInvalidated || XZ(this, Hu, bd).call(this, { type: "invalidate" });
  }
  fetch(Z, u) {
    var n, p, y;
    if (this.state.fetchStatus !== "idle") {
      if (this.state.data !== void 0 && (u != null && u.cancelRefetch))
        this.cancel({ silent: !0 });
      else if (ll(this, eb))
        return ll(this, eb).continueRetry(), ll(this, eb).promise;
    }
    if (Z && this.setOptions(Z), !this.options.queryFn) {
      const h = this.observers.find((S) => S.options.queryFn);
      h && this.setOptions(h.options);
    }
    Array.isArray(this.options.queryKey) || console.error(
      "As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']"
    );
    const s = new AbortController(), G = (h) => {
      Object.defineProperty(h, "signal", {
        enumerable: !0,
        get: () => (vl(this, im, !0), s.signal)
      });
    }, i = () => {
      const h = hr(this.options, u), S = {
        queryKey: this.queryKey,
        meta: this.meta
      };
      return G(S), vl(this, im, !1), this.options.persister ? this.options.persister(
        h,
        S,
        this
      ) : h(S);
    }, m = {
      fetchOptions: u,
      options: this.options,
      queryKey: this.queryKey,
      state: this.state,
      fetchFn: i
    };
    G(m), (n = this.options.behavior) == null || n.onFetch(
      m,
      this
    ), vl(this, Zo, this.state), (this.state.fetchStatus === "idle" || this.state.fetchMeta !== ((p = m.fetchOptions) == null ? void 0 : p.meta)) && XZ(this, Hu, bd).call(this, { type: "fetch", meta: (y = m.fetchOptions) == null ? void 0 : y.meta });
    const a = (h) => {
      var S, t, W, V;
      cW(h) && h.silent || XZ(this, Hu, bd).call(this, {
        type: "error",
        error: h
      }), cW(h) || ((t = (S = ll(this, nu).config).onError) == null || t.call(
        S,
        h,
        this
      ), (V = (W = ll(this, nu).config).onSettled) == null || V.call(
        W,
        this.state.data,
        h,
        this
      )), this.scheduleGc();
    };
    return vl(this, eb, tr({
      initialPromise: u == null ? void 0 : u.initialPromise,
      fn: m.fetchFn,
      abort: s.abort.bind(s),
      onSuccess: (h) => {
        var S, t, W, V;
        if (h === void 0) {
          console.error(
            `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`
          ), a(new Error(`${this.queryHash} data is undefined`));
          return;
        }
        try {
          this.setData(h);
        } catch (R) {
          a(R);
          return;
        }
        (t = (S = ll(this, nu).config).onSuccess) == null || t.call(S, h, this), (V = (W = ll(this, nu).config).onSettled) == null || V.call(
          W,
          h,
          this.state.error,
          this
        ), this.scheduleGc();
      },
      onError: a,
      onFail: (h, S) => {
        XZ(this, Hu, bd).call(this, { type: "failed", failureCount: h, error: S });
      },
      onPause: () => {
        XZ(this, Hu, bd).call(this, { type: "pause" });
      },
      onContinue: () => {
        XZ(this, Hu, bd).call(this, { type: "continue" });
      },
      retry: m.options.retry,
      retryDelay: m.options.retryDelay,
      networkMode: m.options.networkMode,
      canRun: () => !0
    })), ll(this, eb).start();
  }
}, lo = new WeakMap(), Zo = new WeakMap(), nu = new WeakMap(), eb = new WeakMap(), mn = new WeakMap(), im = new WeakMap(), Hu = new WeakSet(), bd = function(Z) {
  const u = (s) => {
    switch (Z.type) {
      case "failed":
        return {
          ...s,
          fetchFailureCount: Z.failureCount,
          fetchFailureReason: Z.error
        };
      case "pause":
        return {
          ...s,
          fetchStatus: "paused"
        };
      case "continue":
        return {
          ...s,
          fetchStatus: "fetching"
        };
      case "fetch":
        return {
          ...s,
          ...Kr(s.data, this.options),
          fetchMeta: Z.meta ?? null
        };
      case "success":
        return {
          ...s,
          data: Z.data,
          dataUpdateCount: s.dataUpdateCount + 1,
          dataUpdatedAt: Z.dataUpdatedAt ?? Date.now(),
          error: null,
          isInvalidated: !1,
          status: "success",
          ...!Z.manual && {
            fetchStatus: "idle",
            fetchFailureCount: 0,
            fetchFailureReason: null
          }
        };
      case "error":
        const G = Z.error;
        return cW(G) && G.revert && ll(this, Zo) ? { ...ll(this, Zo), fetchStatus: "idle" } : {
          ...s,
          error: G,
          errorUpdateCount: s.errorUpdateCount + 1,
          errorUpdatedAt: Date.now(),
          fetchFailureCount: s.fetchFailureCount + 1,
          fetchFailureReason: G,
          fetchStatus: "idle",
          status: "error"
        };
      case "invalidate":
        return {
          ...s,
          isInvalidated: !0
        };
      case "setState":
        return {
          ...s,
          ...Z.state
        };
    }
  };
  this.state = u(this.state), _c.batch(() => {
    this.observers.forEach((s) => {
      s.onQueryUpdate();
    }), ll(this, nu).notify({ query: this, type: "updated", action: Z });
  });
}, zI);
function Kr(l, Z) {
  return {
    fetchFailureCount: 0,
    fetchFailureReason: null,
    fetchStatus: yr(Z.networkMode) ? "fetching" : "paused",
    ...l === void 0 && {
      error: null,
      status: "pending"
    }
  };
}
function H7(l) {
  const Z = typeof l.initialData == "function" ? l.initialData() : l.initialData, u = Z !== void 0, s = u ? typeof l.initialDataUpdatedAt == "function" ? l.initialDataUpdatedAt() : l.initialDataUpdatedAt : 0;
  return {
    data: Z,
    dataUpdateCount: 0,
    dataUpdatedAt: u ? s ?? Date.now() : 0,
    error: null,
    errorUpdateCount: 0,
    errorUpdatedAt: 0,
    fetchFailureCount: 0,
    fetchFailureReason: null,
    fetchMeta: null,
    isInvalidated: !1,
    status: u ? "success" : "pending",
    fetchStatus: "idle"
  };
}
var es, JI, g7 = (JI = class extends Wn {
  constructor(Z = {}) {
    super();
    ZZ(this, es);
    this.config = Z, vl(this, es, /* @__PURE__ */ new Map());
  }
  build(Z, u, s) {
    const G = u.queryKey, i = u.queryHash ?? Zx(G, u);
    let m = this.get(i);
    return m || (m = new J7({
      cache: this,
      queryKey: G,
      queryHash: i,
      options: Z.defaultQueryOptions(u),
      state: s,
      defaultOptions: Z.getQueryDefaults(G)
    }), this.add(m)), m;
  }
  add(Z) {
    ll(this, es).has(Z.queryHash) || (ll(this, es).set(Z.queryHash, Z), this.notify({
      type: "added",
      query: Z
    }));
  }
  remove(Z) {
    const u = ll(this, es).get(Z.queryHash);
    u && (Z.destroy(), u === Z && ll(this, es).delete(Z.queryHash), this.notify({ type: "removed", query: Z }));
  }
  clear() {
    _c.batch(() => {
      this.getAll().forEach((Z) => {
        this.remove(Z);
      });
    });
  }
  get(Z) {
    return ll(this, es).get(Z);
  }
  getAll() {
    return [...ll(this, es).values()];
  }
  find(Z) {
    const u = { exact: !0, ...Z };
    return this.getAll().find(
      (s) => jM(u, s)
    );
  }
  findAll(Z = {}) {
    const u = this.getAll();
    return Object.keys(Z).length > 0 ? u.filter((s) => jM(Z, s)) : u;
  }
  notify(Z) {
    _c.batch(() => {
      this.listeners.forEach((u) => {
        u(Z);
      });
    });
  }
  onFocus() {
    _c.batch(() => {
      this.getAll().forEach((Z) => {
        Z.onFocus();
      });
    });
  }
  onOnline() {
    _c.batch(() => {
      this.getAll().forEach((Z) => {
        Z.onOnline();
      });
    });
  }
}, es = new WeakMap(), JI), as, Vb, om, ns, bG, HI, v7 = (HI = class extends Xr {
  constructor(Z) {
    super();
    ZZ(this, ns);
    ZZ(this, as);
    ZZ(this, Vb);
    ZZ(this, om);
    this.mutationId = Z.mutationId, vl(this, Vb, Z.mutationCache), vl(this, as, []), this.state = Z.state || T7(), this.setOptions(Z.options), this.scheduleGc();
  }
  setOptions(Z) {
    this.options = Z, this.updateGcTime(this.options.gcTime);
  }
  get meta() {
    return this.options.meta;
  }
  addObserver(Z) {
    ll(this, as).includes(Z) || (ll(this, as).push(Z), this.clearGcTimeout(), ll(this, Vb).notify({
      type: "observerAdded",
      mutation: this,
      observer: Z
    }));
  }
  removeObserver(Z) {
    vl(this, as, ll(this, as).filter((u) => u !== Z)), this.scheduleGc(), ll(this, Vb).notify({
      type: "observerRemoved",
      mutation: this,
      observer: Z
    });
  }
  optionalRemove() {
    ll(this, as).length || (this.state.status === "pending" ? this.scheduleGc() : ll(this, Vb).remove(this));
  }
  continue() {
    var Z;
    return ((Z = ll(this, om)) == null ? void 0 : Z.continue()) ?? // continuing a mutation assumes that variables are set, mutation must have been dehydrated before
    this.execute(this.state.variables);
  }
  async execute(Z) {
    var G, i, m, a, n, p, y, h, S, t, W, V, R, x, r, k, U, w, z, D;
    vl(this, om, tr({
      fn: () => this.options.mutationFn ? this.options.mutationFn(Z) : Promise.reject(new Error("No mutationFn found")),
      onFail: (C, j) => {
        XZ(this, ns, bG).call(this, { type: "failed", failureCount: C, error: j });
      },
      onPause: () => {
        XZ(this, ns, bG).call(this, { type: "pause" });
      },
      onContinue: () => {
        XZ(this, ns, bG).call(this, { type: "continue" });
      },
      retry: this.options.retry ?? 0,
      retryDelay: this.options.retryDelay,
      networkMode: this.options.networkMode,
      canRun: () => ll(this, Vb).canRun(this)
    }));
    const u = this.state.status === "pending", s = !ll(this, om).canStart();
    try {
      if (!u) {
        XZ(this, ns, bG).call(this, { type: "pending", variables: Z, isPaused: s }), await ((i = (G = ll(this, Vb).config).onMutate) == null ? void 0 : i.call(
          G,
          Z,
          this
        ));
        const j = await ((a = (m = this.options).onMutate) == null ? void 0 : a.call(m, Z));
        j !== this.state.context && XZ(this, ns, bG).call(this, {
          type: "pending",
          context: j,
          variables: Z,
          isPaused: s
        });
      }
      const C = await ll(this, om).start();
      return await ((p = (n = ll(this, Vb).config).onSuccess) == null ? void 0 : p.call(
        n,
        C,
        Z,
        this.state.context,
        this
      )), await ((h = (y = this.options).onSuccess) == null ? void 0 : h.call(y, C, Z, this.state.context)), await ((t = (S = ll(this, Vb).config).onSettled) == null ? void 0 : t.call(
        S,
        C,
        null,
        this.state.variables,
        this.state.context,
        this
      )), await ((V = (W = this.options).onSettled) == null ? void 0 : V.call(W, C, null, Z, this.state.context)), XZ(this, ns, bG).call(this, { type: "success", data: C }), C;
    } catch (C) {
      try {
        throw await ((x = (R = ll(this, Vb).config).onError) == null ? void 0 : x.call(
          R,
          C,
          Z,
          this.state.context,
          this
        )), await ((k = (r = this.options).onError) == null ? void 0 : k.call(
          r,
          C,
          Z,
          this.state.context
        )), await ((w = (U = ll(this, Vb).config).onSettled) == null ? void 0 : w.call(
          U,
          void 0,
          C,
          this.state.variables,
          this.state.context,
          this
        )), await ((D = (z = this.options).onSettled) == null ? void 0 : D.call(
          z,
          void 0,
          C,
          Z,
          this.state.context
        )), C;
      } finally {
        XZ(this, ns, bG).call(this, { type: "error", error: C });
      }
    } finally {
      ll(this, Vb).runNext(this);
    }
  }
}, as = new WeakMap(), Vb = new WeakMap(), om = new WeakMap(), ns = new WeakSet(), bG = function(Z) {
  const u = (s) => {
    switch (Z.type) {
      case "failed":
        return {
          ...s,
          failureCount: Z.failureCount,
          failureReason: Z.error
        };
      case "pause":
        return {
          ...s,
          isPaused: !0
        };
      case "continue":
        return {
          ...s,
          isPaused: !1
        };
      case "pending":
        return {
          ...s,
          context: Z.context,
          data: void 0,
          failureCount: 0,
          failureReason: null,
          error: null,
          isPaused: Z.isPaused,
          status: "pending",
          variables: Z.variables,
          submittedAt: Date.now()
        };
      case "success":
        return {
          ...s,
          data: Z.data,
          failureCount: 0,
          failureReason: null,
          error: null,
          status: "success",
          isPaused: !1
        };
      case "error":
        return {
          ...s,
          data: void 0,
          error: Z.error,
          failureCount: s.failureCount + 1,
          failureReason: Z.error,
          isPaused: !1,
          status: "error"
        };
    }
  };
  this.state = u(this.state), _c.batch(() => {
    ll(this, as).forEach((s) => {
      s.onMutationUpdate(Z);
    }), ll(this, Vb).notify({
      mutation: this,
      type: "updated",
      action: Z
    });
  });
}, HI);
function T7() {
  return {
    context: void 0,
    data: void 0,
    error: null,
    failureCount: 0,
    failureReason: null,
    isPaused: !1,
    status: "idle",
    variables: void 0,
    submittedAt: 0
  };
}
var _b, on, gI, f7 = (gI = class extends Wn {
  constructor(Z = {}) {
    super();
    ZZ(this, _b);
    ZZ(this, on);
    this.config = Z, vl(this, _b, /* @__PURE__ */ new Map()), vl(this, on, Date.now());
  }
  build(Z, u, s) {
    const G = new v7({
      mutationCache: this,
      mutationId: ++gL(this, on)._,
      options: Z.defaultMutationOptions(u),
      state: s
    });
    return this.add(G), G;
  }
  add(Z) {
    const u = ch(Z), s = ll(this, _b).get(u) ?? [];
    s.push(Z), ll(this, _b).set(u, s), this.notify({ type: "added", mutation: Z });
  }
  remove(Z) {
    var s;
    const u = ch(Z);
    if (ll(this, _b).has(u)) {
      const G = (s = ll(this, _b).get(u)) == null ? void 0 : s.filter((i) => i !== Z);
      G && (G.length === 0 ? ll(this, _b).delete(u) : ll(this, _b).set(u, G));
    }
    this.notify({ type: "removed", mutation: Z });
  }
  canRun(Z) {
    var s;
    const u = (s = ll(this, _b).get(ch(Z))) == null ? void 0 : s.find((G) => G.state.status === "pending");
    return !u || u === Z;
  }
  runNext(Z) {
    var s;
    const u = (s = ll(this, _b).get(ch(Z))) == null ? void 0 : s.find((G) => G !== Z && G.state.isPaused);
    return (u == null ? void 0 : u.continue()) ?? Promise.resolve();
  }
  clear() {
    _c.batch(() => {
      this.getAll().forEach((Z) => {
        this.remove(Z);
      });
    });
  }
  getAll() {
    return [...ll(this, _b).values()].flat();
  }
  find(Z) {
    const u = { exact: !0, ...Z };
    return this.getAll().find(
      (s) => QM(u, s)
    );
  }
  findAll(Z = {}) {
    return this.getAll().filter((u) => QM(Z, u));
  }
  notify(Z) {
    _c.batch(() => {
      this.listeners.forEach((u) => {
        u(Z);
      });
    });
  }
  resumePausedMutations() {
    const Z = this.getAll().filter((u) => u.state.isPaused);
    return _c.batch(
      () => Promise.all(
        Z.map((u) => u.continue().catch(pu))
      )
    );
  }
}, _b = new WeakMap(), on = new WeakMap(), gI);
function ch(l) {
  var Z;
  return ((Z = l.options.scope) == null ? void 0 : Z.id) ?? String(l.mutationId);
}
function AM(l) {
  return {
    onFetch: (Z, u) => {
      var y, h, S, t, W;
      const s = Z.options, G = (S = (h = (y = Z.fetchOptions) == null ? void 0 : y.meta) == null ? void 0 : h.fetchMore) == null ? void 0 : S.direction, i = ((t = Z.state.data) == null ? void 0 : t.pages) || [], m = ((W = Z.state.data) == null ? void 0 : W.pageParams) || [];
      let a = { pages: [], pageParams: [] }, n = 0;
      const p = async () => {
        let V = !1;
        const R = (k) => {
          Object.defineProperty(k, "signal", {
            enumerable: !0,
            get: () => (Z.signal.aborted ? V = !0 : Z.signal.addEventListener("abort", () => {
              V = !0;
            }), Z.signal)
          });
        }, x = hr(Z.options, Z.fetchOptions), r = async (k, U, w) => {
          if (V)
            return Promise.reject();
          if (U == null && k.pages.length)
            return Promise.resolve(k);
          const z = {
            queryKey: Z.queryKey,
            pageParam: U,
            direction: w ? "backward" : "forward",
            meta: Z.options.meta
          };
          R(z);
          const D = await x(
            z
          ), { maxPages: C } = Z.options, j = w ? r7 : C7;
          return {
            pages: j(k.pages, D, C),
            pageParams: j(k.pageParams, U, C)
          };
        };
        if (G && i.length) {
          const k = G === "backward", U = k ? E7 : $M, w = {
            pages: i,
            pageParams: m
          }, z = U(s, w);
          a = await r(w, z, k);
        } else {
          const k = l ?? i.length;
          do {
            const U = n === 0 ? m[0] ?? s.initialPageParam : $M(s, a);
            if (n > 0 && U == null)
              break;
            a = await r(a, U), n++;
          } while (n < k);
        }
        return a;
      };
      Z.options.persister ? Z.fetchFn = () => {
        var V, R;
        return (R = (V = Z.options).persister) == null ? void 0 : R.call(
          V,
          p,
          {
            queryKey: Z.queryKey,
            meta: Z.options.meta,
            signal: Z.signal
          },
          u
        );
      } : Z.fetchFn = p;
    }
  };
}
function $M(l, { pages: Z, pageParams: u }) {
  const s = Z.length - 1;
  return Z.length > 0 ? l.getNextPageParam(
    Z[s],
    Z,
    u[s],
    u
  ) : void 0;
}
function E7(l, { pages: Z, pageParams: u }) {
  var s;
  return Z.length > 0 ? (s = l.getPreviousPageParam) == null ? void 0 : s.call(l, Z[0], Z, u[0], u) : void 0;
}
var ic, mG, iG, co, bo, oG, uo, so, vI, B7 = (vI = class {
  constructor(l = {}) {
    ZZ(this, ic);
    ZZ(this, mG);
    ZZ(this, iG);
    ZZ(this, co);
    ZZ(this, bo);
    ZZ(this, oG);
    ZZ(this, uo);
    ZZ(this, so);
    vl(this, ic, l.queryCache || new g7()), vl(this, mG, l.mutationCache || new f7()), vl(this, iG, l.defaultOptions || {}), vl(this, co, /* @__PURE__ */ new Map()), vl(this, bo, /* @__PURE__ */ new Map()), vl(this, oG, 0);
  }
  mount() {
    gL(this, oG)._++, ll(this, oG) === 1 && (vl(this, uo, cx.subscribe(async (l) => {
      l && (await this.resumePausedMutations(), ll(this, ic).onFocus());
    })), vl(this, so, Uh.subscribe(async (l) => {
      l && (await this.resumePausedMutations(), ll(this, ic).onOnline());
    })));
  }
  unmount() {
    var l, Z;
    gL(this, oG)._--, ll(this, oG) === 0 && ((l = ll(this, uo)) == null || l.call(this), vl(this, uo, void 0), (Z = ll(this, so)) == null || Z.call(this), vl(this, so, void 0));
  }
  isFetching(l) {
    return ll(this, ic).findAll({ ...l, fetchStatus: "fetching" }).length;
  }
  isMutating(l) {
    return ll(this, mG).findAll({ ...l, status: "pending" }).length;
  }
  getQueryData(l) {
    var u;
    const Z = this.defaultQueryOptions({ queryKey: l });
    return (u = ll(this, ic).get(Z.queryHash)) == null ? void 0 : u.state.data;
  }
  ensureQueryData(l) {
    const Z = this.getQueryData(l.queryKey);
    if (Z === void 0)
      return this.fetchQuery(l);
    {
      const u = this.defaultQueryOptions(l), s = ll(this, ic).build(this, u);
      return l.revalidateIfStale && s.isStaleByTime(Ai(u.staleTime, s)) && this.prefetchQuery(u), Promise.resolve(Z);
    }
  }
  getQueriesData(l) {
    return ll(this, ic).findAll(l).map(({ queryKey: Z, state: u }) => {
      const s = u.data;
      return [Z, s];
    });
  }
  setQueryData(l, Z, u) {
    const s = this.defaultQueryOptions({ queryKey: l }), G = ll(this, ic).get(
      s.queryHash
    ), i = G == null ? void 0 : G.state.data, m = M7(Z, i);
    if (m !== void 0)
      return ll(this, ic).build(this, s).setData(m, { ...u, manual: !0 });
  }
  setQueriesData(l, Z, u) {
    return _c.batch(
      () => ll(this, ic).findAll(l).map(({ queryKey: s }) => [
        s,
        this.setQueryData(s, Z, u)
      ])
    );
  }
  getQueryState(l) {
    var u;
    const Z = this.defaultQueryOptions({ queryKey: l });
    return (u = ll(this, ic).get(Z.queryHash)) == null ? void 0 : u.state;
  }
  removeQueries(l) {
    const Z = ll(this, ic);
    _c.batch(() => {
      Z.findAll(l).forEach((u) => {
        Z.remove(u);
      });
    });
  }
  resetQueries(l, Z) {
    const u = ll(this, ic), s = {
      type: "active",
      ...l
    };
    return _c.batch(() => (u.findAll(l).forEach((G) => {
      G.reset();
    }), this.refetchQueries(s, Z)));
  }
  cancelQueries(l = {}, Z = {}) {
    const u = { revert: !0, ...Z }, s = _c.batch(
      () => ll(this, ic).findAll(l).map((G) => G.cancel(u))
    );
    return Promise.all(s).then(pu).catch(pu);
  }
  invalidateQueries(l = {}, Z = {}) {
    return _c.batch(() => {
      if (ll(this, ic).findAll(l).forEach((s) => {
        s.invalidate();
      }), l.refetchType === "none")
        return Promise.resolve();
      const u = {
        ...l,
        type: l.refetchType ?? l.type ?? "active"
      };
      return this.refetchQueries(u, Z);
    });
  }
  refetchQueries(l = {}, Z) {
    const u = {
      ...Z,
      cancelRefetch: (Z == null ? void 0 : Z.cancelRefetch) ?? !0
    }, s = _c.batch(
      () => ll(this, ic).findAll(l).filter((G) => !G.isDisabled()).map((G) => {
        let i = G.fetch(void 0, u);
        return u.throwOnError || (i = i.catch(pu)), G.state.fetchStatus === "paused" ? Promise.resolve() : i;
      })
    );
    return Promise.all(s).then(pu);
  }
  fetchQuery(l) {
    const Z = this.defaultQueryOptions(l);
    Z.retry === void 0 && (Z.retry = !1);
    const u = ll(this, ic).build(this, Z);
    return u.isStaleByTime(
      Ai(Z.staleTime, u)
    ) ? u.fetch(Z) : Promise.resolve(u.state.data);
  }
  prefetchQuery(l) {
    return this.fetchQuery(l).then(pu).catch(pu);
  }
  fetchInfiniteQuery(l) {
    return l.behavior = AM(l.pages), this.fetchQuery(l);
  }
  prefetchInfiniteQuery(l) {
    return this.fetchInfiniteQuery(l).then(pu).catch(pu);
  }
  ensureInfiniteQueryData(l) {
    return l.behavior = AM(l.pages), this.ensureQueryData(l);
  }
  resumePausedMutations() {
    return Uh.isOnline() ? ll(this, mG).resumePausedMutations() : Promise.resolve();
  }
  getQueryCache() {
    return ll(this, ic);
  }
  getMutationCache() {
    return ll(this, mG);
  }
  getDefaultOptions() {
    return ll(this, iG);
  }
  setDefaultOptions(l) {
    vl(this, iG, l);
  }
  setQueryDefaults(l, Z) {
    ll(this, co).set(bn(l), {
      queryKey: l,
      defaultOptions: Z
    });
  }
  getQueryDefaults(l) {
    const Z = [...ll(this, co).values()];
    let u = {};
    return Z.forEach((s) => {
      un(l, s.queryKey) && (u = { ...u, ...s.defaultOptions });
    }), u;
  }
  setMutationDefaults(l, Z) {
    ll(this, bo).set(bn(l), {
      mutationKey: l,
      defaultOptions: Z
    });
  }
  getMutationDefaults(l) {
    const Z = [...ll(this, bo).values()];
    let u = {};
    return Z.forEach((s) => {
      un(l, s.mutationKey) && (u = { ...u, ...s.defaultOptions });
    }), u;
  }
  defaultQueryOptions(l) {
    if (l._defaulted)
      return l;
    const Z = {
      ...ll(this, iG).queries,
      ...this.getQueryDefaults(l.queryKey),
      ...l,
      _defaulted: !0
    };
    return Z.queryHash || (Z.queryHash = Zx(
      Z.queryKey,
      Z
    )), Z.refetchOnReconnect === void 0 && (Z.refetchOnReconnect = Z.networkMode !== "always"), Z.throwOnError === void 0 && (Z.throwOnError = !!Z.suspense), !Z.networkMode && Z.persister && (Z.networkMode = "offlineFirst"), Z.enabled !== !0 && Z.queryFn === Ih && (Z.enabled = !1), Z;
  }
  defaultMutationOptions(l) {
    return l != null && l._defaulted ? l : {
      ...ll(this, iG).mutations,
      ...(l == null ? void 0 : l.mutationKey) && this.getMutationDefaults(l.mutationKey),
      ...l,
      _defaulted: !0
    };
  }
  clear() {
    ll(this, ic).clear(), ll(this, mG).clear();
  }
}, ic = new WeakMap(), mG = new WeakMap(), iG = new WeakMap(), co = new WeakMap(), bo = new WeakMap(), oG = new WeakMap(), uo = new WeakMap(), so = new WeakMap(), vI), Hb, KZ, en, xb, em, Go, eG, ps, an, mo, io, am, nm, aG, oo, wZ, ra, ZV, cV, bV, uV, sV, dV, GV, Wr, TI, D7 = (TI = class extends Wn {
  constructor(Z, u) {
    super();
    ZZ(this, wZ);
    ZZ(this, Hb);
    ZZ(this, KZ);
    ZZ(this, en);
    ZZ(this, xb);
    ZZ(this, em);
    ZZ(this, Go);
    ZZ(this, eG);
    ZZ(this, ps);
    ZZ(this, an);
    ZZ(this, mo);
    // This property keeps track of the last query with defined data.
    // It will be used to pass the previous data and query to the placeholder function between renders.
    ZZ(this, io);
    ZZ(this, am);
    ZZ(this, nm);
    ZZ(this, aG);
    ZZ(this, oo, /* @__PURE__ */ new Set());
    this.options = u, vl(this, Hb, Z), vl(this, ps, null), vl(this, eG, lV()), this.options.experimental_prefetchInRender || ll(this, eG).reject(
      new Error("experimental_prefetchInRender feature flag is not enabled")
    ), this.bindMethods(), this.setOptions(u);
  }
  bindMethods() {
    this.refetch = this.refetch.bind(this);
  }
  onSubscribe() {
    this.listeners.size === 1 && (ll(this, KZ).addObserver(this), qM(ll(this, KZ), this.options) ? XZ(this, wZ, ra).call(this) : this.updateResult(), XZ(this, wZ, uV).call(this));
  }
  onUnsubscribe() {
    this.hasListeners() || this.destroy();
  }
  shouldFetchOnReconnect() {
    return mV(
      ll(this, KZ),
      this.options,
      this.options.refetchOnReconnect
    );
  }
  shouldFetchOnWindowFocus() {
    return mV(
      ll(this, KZ),
      this.options,
      this.options.refetchOnWindowFocus
    );
  }
  destroy() {
    this.listeners = /* @__PURE__ */ new Set(), XZ(this, wZ, sV).call(this), XZ(this, wZ, dV).call(this), ll(this, KZ).removeObserver(this);
  }
  setOptions(Z, u) {
    const s = this.options, G = ll(this, KZ);
    if (this.options = ll(this, Hb).defaultQueryOptions(Z), this.options.enabled !== void 0 && typeof this.options.enabled != "boolean" && typeof this.options.enabled != "function" && typeof Tu(this.options.enabled, ll(this, KZ)) != "boolean")
      throw new Error(
        "Expected enabled to be a boolean or a callback that returns a boolean"
      );
    XZ(this, wZ, GV).call(this), ll(this, KZ).setOptions(this.options), s._defaulted && !$W(this.options, s) && ll(this, Hb).getQueryCache().notify({
      type: "observerOptionsUpdated",
      query: ll(this, KZ),
      observer: this
    });
    const i = this.hasListeners();
    i && _M(
      ll(this, KZ),
      G,
      this.options,
      s
    ) && XZ(this, wZ, ra).call(this), this.updateResult(u), i && (ll(this, KZ) !== G || Tu(this.options.enabled, ll(this, KZ)) !== Tu(s.enabled, ll(this, KZ)) || Ai(this.options.staleTime, ll(this, KZ)) !== Ai(s.staleTime, ll(this, KZ))) && XZ(this, wZ, ZV).call(this);
    const m = XZ(this, wZ, cV).call(this);
    i && (ll(this, KZ) !== G || Tu(this.options.enabled, ll(this, KZ)) !== Tu(s.enabled, ll(this, KZ)) || m !== ll(this, aG)) && XZ(this, wZ, bV).call(this, m);
  }
  getOptimisticResult(Z) {
    const u = ll(this, Hb).getQueryCache().build(ll(this, Hb), Z), s = this.createResult(u, Z);
    return Q7(this, s) && (vl(this, xb, s), vl(this, Go, this.options), vl(this, em, ll(this, KZ).state)), s;
  }
  getCurrentResult() {
    return ll(this, xb);
  }
  trackResult(Z, u) {
    const s = {};
    return Object.keys(Z).forEach((G) => {
      Object.defineProperty(s, G, {
        configurable: !1,
        enumerable: !0,
        get: () => (this.trackProp(G), u == null || u(G), Z[G])
      });
    }), s;
  }
  trackProp(Z) {
    ll(this, oo).add(Z);
  }
  getCurrentQuery() {
    return ll(this, KZ);
  }
  refetch({ ...Z } = {}) {
    return this.fetch({
      ...Z
    });
  }
  fetchOptimistic(Z) {
    const u = ll(this, Hb).defaultQueryOptions(Z), s = ll(this, Hb).getQueryCache().build(ll(this, Hb), u);
    return s.fetch().then(() => this.createResult(s, u));
  }
  fetch(Z) {
    return XZ(this, wZ, ra).call(this, {
      ...Z,
      cancelRefetch: Z.cancelRefetch ?? !0
    }).then(() => (this.updateResult(), ll(this, xb)));
  }
  createResult(Z, u) {
    var D;
    const s = ll(this, KZ), G = this.options, i = ll(this, xb), m = ll(this, em), a = ll(this, Go), p = Z !== s ? Z.state : ll(this, en), { state: y } = Z;
    let h = { ...y }, S = !1, t;
    if (u._optimisticResults) {
      const C = this.hasListeners(), j = !C && qM(Z, u), E = C && _M(Z, s, u, G);
      (j || E) && (h = {
        ...h,
        ...Kr(y.data, Z.options)
      }), u._optimisticResults === "isRestoring" && (h.fetchStatus = "idle");
    }
    let { error: W, errorUpdatedAt: V, status: R } = h;
    if (u.select && h.data !== void 0)
      if (i && h.data === (m == null ? void 0 : m.data) && u.select === ll(this, an))
        t = ll(this, mo);
      else
        try {
          vl(this, an, u.select), t = u.select(h.data), t = _W(i == null ? void 0 : i.data, t, u), vl(this, mo, t), vl(this, ps, null);
        } catch (C) {
          vl(this, ps, C);
        }
    else
      t = h.data;
    if (u.placeholderData !== void 0 && t === void 0 && R === "pending") {
      let C;
      if (i != null && i.isPlaceholderData && u.placeholderData === (a == null ? void 0 : a.placeholderData))
        C = i.data;
      else if (C = typeof u.placeholderData == "function" ? u.placeholderData(
        (D = ll(this, io)) == null ? void 0 : D.state.data,
        ll(this, io)
      ) : u.placeholderData, u.select && C !== void 0)
        try {
          C = u.select(C), vl(this, ps, null);
        } catch (j) {
          vl(this, ps, j);
        }
      C !== void 0 && (R = "success", t = _W(
        i == null ? void 0 : i.data,
        C,
        u
      ), S = !0);
    }
    ll(this, ps) && (W = ll(this, ps), t = ll(this, mo), V = Date.now(), R = "error");
    const x = h.fetchStatus === "fetching", r = R === "pending", k = R === "error", U = r && x, w = t !== void 0;
    return {
      status: R,
      fetchStatus: h.fetchStatus,
      isPending: r,
      isSuccess: R === "success",
      isError: k,
      isInitialLoading: U,
      isLoading: U,
      data: t,
      dataUpdatedAt: h.dataUpdatedAt,
      error: W,
      errorUpdatedAt: V,
      failureCount: h.fetchFailureCount,
      failureReason: h.fetchFailureReason,
      errorUpdateCount: h.errorUpdateCount,
      isFetched: h.dataUpdateCount > 0 || h.errorUpdateCount > 0,
      isFetchedAfterMount: h.dataUpdateCount > p.dataUpdateCount || h.errorUpdateCount > p.errorUpdateCount,
      isFetching: x,
      isRefetching: x && !r,
      isLoadingError: k && !w,
      isPaused: h.fetchStatus === "paused",
      isPlaceholderData: S,
      isRefetchError: k && w,
      isStale: bx(Z, u),
      refetch: this.refetch,
      promise: ll(this, eG)
    };
  }
  updateResult(Z) {
    const u = ll(this, xb), s = this.createResult(ll(this, KZ), this.options);
    if (vl(this, em, ll(this, KZ).state), vl(this, Go, this.options), ll(this, em).data !== void 0 && vl(this, io, ll(this, KZ)), $W(s, u))
      return;
    if (this.options.experimental_prefetchInRender) {
      const m = (p) => {
        s.status === "error" ? p.reject(s.error) : s.data !== void 0 && p.resolve(s.data);
      }, a = () => {
        const p = vl(this, eG, s.promise = lV());
        m(p);
      }, n = ll(this, eG);
      switch (n.status) {
        case "pending":
          m(n);
          break;
        case "fulfilled":
          (s.status === "error" || s.data !== n.value) && a();
          break;
        case "rejected":
          (s.status !== "error" || s.error !== n.reason) && a();
          break;
      }
    }
    vl(this, xb, s);
    const G = {}, i = () => {
      if (!u)
        return !0;
      const { notifyOnChangeProps: m } = this.options, a = typeof m == "function" ? m() : m;
      if (a === "all" || !a && !ll(this, oo).size)
        return !0;
      const n = new Set(
        a ?? ll(this, oo)
      );
      return this.options.throwOnError && n.add("error"), Object.keys(ll(this, xb)).some((p) => {
        const y = p;
        return ll(this, xb)[y] !== u[y] && n.has(y);
      });
    };
    (Z == null ? void 0 : Z.listeners) !== !1 && i() && (G.listeners = !0), XZ(this, wZ, Wr).call(this, { ...G, ...Z });
  }
  onQueryUpdate() {
    this.updateResult(), this.hasListeners() && XZ(this, wZ, uV).call(this);
  }
}, Hb = new WeakMap(), KZ = new WeakMap(), en = new WeakMap(), xb = new WeakMap(), em = new WeakMap(), Go = new WeakMap(), eG = new WeakMap(), ps = new WeakMap(), an = new WeakMap(), mo = new WeakMap(), io = new WeakMap(), am = new WeakMap(), nm = new WeakMap(), aG = new WeakMap(), oo = new WeakMap(), wZ = new WeakSet(), ra = function(Z) {
  XZ(this, wZ, GV).call(this);
  let u = ll(this, KZ).fetch(
    this.options,
    Z
  );
  return Z != null && Z.throwOnError || (u = u.catch(pu)), u;
}, ZV = function() {
  XZ(this, wZ, sV).call(this);
  const Z = Ai(
    this.options.staleTime,
    ll(this, KZ)
  );
  if (Ym || ll(this, xb).isStale || !OW(Z))
    return;
  const s = Lr(ll(this, xb).dataUpdatedAt, Z) + 1;
  vl(this, am, setTimeout(() => {
    ll(this, xb).isStale || this.updateResult();
  }, s));
}, cV = function() {
  return (typeof this.options.refetchInterval == "function" ? this.options.refetchInterval(ll(this, KZ)) : this.options.refetchInterval) ?? !1;
}, bV = function(Z) {
  XZ(this, wZ, dV).call(this), vl(this, aG, Z), !(Ym || Tu(this.options.enabled, ll(this, KZ)) === !1 || !OW(ll(this, aG)) || ll(this, aG) === 0) && vl(this, nm, setInterval(() => {
    (this.options.refetchIntervalInBackground || cx.isFocused()) && XZ(this, wZ, ra).call(this);
  }, ll(this, aG)));
}, uV = function() {
  XZ(this, wZ, ZV).call(this), XZ(this, wZ, bV).call(this, XZ(this, wZ, cV).call(this));
}, sV = function() {
  ll(this, am) && (clearTimeout(ll(this, am)), vl(this, am, void 0));
}, dV = function() {
  ll(this, nm) && (clearInterval(ll(this, nm)), vl(this, nm, void 0));
}, GV = function() {
  const Z = ll(this, Hb).getQueryCache().build(ll(this, Hb), this.options);
  if (Z === ll(this, KZ))
    return;
  const u = ll(this, KZ);
  vl(this, KZ, Z), vl(this, en, Z.state), this.hasListeners() && (u == null || u.removeObserver(this), Z.addObserver(this));
}, Wr = function(Z) {
  _c.batch(() => {
    Z.listeners && this.listeners.forEach((u) => {
      u(ll(this, xb));
    }), ll(this, Hb).getQueryCache().notify({
      query: ll(this, KZ),
      type: "observerResultsUpdated"
    });
  });
}, TI);
function j7(l, Z) {
  return Tu(Z.enabled, l) !== !1 && l.state.data === void 0 && !(l.state.status === "error" && Z.retryOnMount === !1);
}
function qM(l, Z) {
  return j7(l, Z) || l.state.data !== void 0 && mV(l, Z, Z.refetchOnMount);
}
function mV(l, Z, u) {
  if (Tu(Z.enabled, l) !== !1) {
    const s = typeof u == "function" ? u(l) : u;
    return s === "always" || s !== !1 && bx(l, Z);
  }
  return !1;
}
function _M(l, Z, u, s) {
  return (l !== Z || Tu(s.enabled, l) === !1) && (!u.suspense || l.state.status !== "error") && bx(l, u);
}
function bx(l, Z) {
  return Tu(Z.enabled, l) !== !1 && l.isStaleByTime(Ai(Z.staleTime, l));
}
function Q7(l, Z) {
  return !$W(l.getCurrentResult(), Z);
}
var Vr = M.createContext(
  void 0
), P7 = (l) => {
  const Z = M.useContext(Vr);
  if (!Z)
    throw new Error("No QueryClient set, use QueryClientProvider to set one");
  return Z;
}, xr = ({
  client: l,
  children: Z
}) => (M.useEffect(() => (l.mount(), () => {
  l.unmount();
}), [l]), /* @__PURE__ */ B.jsx(Vr.Provider, { value: l, children: Z })), Rr = M.createContext(!1), O7 = () => M.useContext(Rr);
Rr.Provider;
function A7() {
  let l = !1;
  return {
    clearReset: () => {
      l = !1;
    },
    reset: () => {
      l = !0;
    },
    isReset: () => l
  };
}
var $7 = M.createContext(A7()), q7 = () => M.useContext($7);
function _7(l, Z) {
  return typeof l == "function" ? l(...Z) : !!l;
}
function l6() {
}
var Z6 = (l, Z) => {
  (l.suspense || l.throwOnError) && (Z.isReset() || (l.retryOnMount = !1));
}, c6 = (l) => {
  M.useEffect(() => {
    l.clearReset();
  }, [l]);
}, b6 = ({
  result: l,
  errorResetBoundary: Z,
  throwOnError: u,
  query: s
}) => l.isError && !Z.isReset() && !l.isFetching && s && _7(u, [l.error, s]), u6 = (l) => {
  l.suspense && (typeof l.staleTime != "number" && (l.staleTime = 1e3), typeof l.gcTime == "number" && (l.gcTime = Math.max(l.gcTime, 1e3)));
}, s6 = (l, Z) => l.isLoading && l.isFetching && !Z, d6 = (l, Z) => (l == null ? void 0 : l.suspense) && Z.isPending, lI = (l, Z, u) => Z.fetchOptimistic(l).catch(() => {
  u.clearReset();
});
function G6(l, Z, u) {
  var y, h, S, t, W;
  if (typeof l != "object" || Array.isArray(l))
    throw new Error(
      'Bad argument type. Starting with v5, only the "Object" form is allowed when calling query related functions. Please use the error stack to find the culprit call. More info here: https://tanstack.com/query/latest/docs/react/guides/migrating-to-v5#supports-a-single-signature-one-object'
    );
  const s = P7(), G = O7(), i = q7(), m = s.defaultQueryOptions(l);
  (h = (y = s.getDefaultOptions().queries) == null ? void 0 : y._experimental_beforeQuery) == null || h.call(
    y,
    m
  ), m._optimisticResults = G ? "isRestoring" : "optimistic", u6(m), Z6(m, i), c6(i);
  const a = !s.getQueryCache().get(m.queryHash), [n] = M.useState(
    () => new Z(
      s,
      m
    )
  ), p = n.getOptimisticResult(m);
  if (M.useSyncExternalStore(
    M.useCallback(
      (V) => {
        const R = G ? () => {
        } : n.subscribe(_c.batchCalls(V));
        return n.updateResult(), R;
      },
      [n, G]
    ),
    () => n.getCurrentResult(),
    () => n.getCurrentResult()
  ), M.useEffect(() => {
    n.setOptions(m, { listeners: !1 });
  }, [m, n]), d6(m, p))
    throw lI(m, n, i);
  if (b6({
    result: p,
    errorResetBoundary: i,
    throwOnError: m.throwOnError,
    query: s.getQueryCache().get(m.queryHash)
  }))
    throw p.error;
  if ((t = (S = s.getDefaultOptions().queries) == null ? void 0 : S._experimental_afterQuery) == null || t.call(
    S,
    m,
    p
  ), m.experimental_prefetchInRender && !Ym && s6(p, G)) {
    const V = a ? (
      // Fetch immediately on render in order to ensure `.promise` is resolved even if the component is unmounted
      lI(m, n, i)
    ) : (
      // subscribe to the "cache promise" so that we can finalize the currentThenable once data comes in
      (W = s.getQueryCache().get(m.queryHash)) == null ? void 0 : W.promise
    );
    V == null || V.catch(l6).finally(() => {
      n.hasListeners() || n.updateResult();
    });
  }
  return m.notifyOnChangeProps ? p : n.trackResult(p);
}
function m6(l, Z) {
  return G6(l, D7);
}
function Io(l, Z, u) {
  return l.fields = Z || [], l.fname = u, l;
}
function i6(l) {
  return l.length === 1 ? o6(l[0]) : e6(l);
}
const o6 = (l) => function(Z) {
  return Z[l];
}, e6 = (l) => {
  const Z = l.length;
  return function(u) {
    for (let s = 0; s < Z; ++s)
      u = u[l[s]];
    return u;
  };
};
function bW(l) {
  throw Error(l);
}
function a6(l) {
  const Z = [], u = l.length;
  let s = null, G = 0, i = "", m, a, n;
  l = l + "";
  function p() {
    Z.push(i + l.substring(m, a)), i = "", m = a + 1;
  }
  for (m = a = 0; a < u; ++a)
    if (n = l[a], n === "\\")
      i += l.substring(m, a++), m = a;
    else if (n === s)
      p(), s = null, G = -1;
    else {
      if (s)
        continue;
      m === G && n === '"' || m === G && n === "'" ? (m = a + 1, s = n) : n === "." && !G ? a > m ? p() : m = a + 1 : n === "[" ? (a > m && p(), G = m = a + 1) : n === "]" && (G || bW("Access path missing open bracket: " + l), G > 0 && p(), G = 0, m = a + 1);
    }
  return G && bW("Access path missing closing bracket: " + l), s && bW("Access path missing closing quote: " + l), a > m && (a++, p()), Z;
}
function n6(l, Z, u) {
  const s = a6(l);
  return l = s.length === 1 ? s[0] : l, Io(i6(s), [l], l);
}
n6("id");
Io((l) => l, [], "identity");
Io(() => 0, [], "zero");
Io(() => 1, [], "one");
Io(() => !0, [], "true");
Io(() => !1, [], "false");
var Yr = Array.isArray;
function p6(l) {
  return l[l.length - 1];
}
function L6(l) {
  return l == null || l === "" ? null : +l;
}
function h6(l) {
  return l != null ? Yr(l) ? l : [l] : [];
}
function y6(l) {
  const Z = {}, u = l.length;
  for (let s = 0; s < u; ++s) Z[l[s]] = !0;
  return Z;
}
function za(l, Z) {
  return l == null || Z == null ? NaN : l < Z ? -1 : l > Z ? 1 : l >= Z ? 0 : NaN;
}
function S6(l, Z) {
  return l == null || Z == null ? NaN : Z < l ? -1 : Z > l ? 1 : Z >= l ? 0 : NaN;
}
function ux(l) {
  let Z, u, s;
  l.length !== 2 ? (Z = za, u = (a, n) => za(l(a), n), s = (a, n) => l(a) - n) : (Z = l === za || l === S6 ? l : t6, u = l, s = l);
  function G(a, n, p = 0, y = a.length) {
    if (p < y) {
      if (Z(n, n) !== 0) return y;
      do {
        const h = p + y >>> 1;
        u(a[h], n) < 0 ? p = h + 1 : y = h;
      } while (p < y);
    }
    return p;
  }
  function i(a, n, p = 0, y = a.length) {
    if (p < y) {
      if (Z(n, n) !== 0) return y;
      do {
        const h = p + y >>> 1;
        u(a[h], n) <= 0 ? p = h + 1 : y = h;
      } while (p < y);
    }
    return p;
  }
  function m(a, n, p = 0, y = a.length) {
    const h = G(a, n, p, y - 1);
    return h > p && s(a[h - 1], n) > -s(a[h], n) ? h - 1 : h;
  }
  return { left: G, center: m, right: i };
}
function t6() {
  return 0;
}
function kr(l) {
  return l === null ? NaN : +l;
}
const X6 = ux(za), km = X6.right;
ux(kr).center;
class ZI extends Map {
  constructor(Z, u = V6) {
    if (super(), Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: u } }), Z != null) for (const [s, G] of Z) this.set(s, G);
  }
  get(Z) {
    return super.get(cI(this, Z));
  }
  has(Z) {
    return super.has(cI(this, Z));
  }
  set(Z, u) {
    return super.set(K6(this, Z), u);
  }
  delete(Z) {
    return super.delete(W6(this, Z));
  }
}
function cI({ _intern: l, _key: Z }, u) {
  const s = Z(u);
  return l.has(s) ? l.get(s) : u;
}
function K6({ _intern: l, _key: Z }, u) {
  const s = Z(u);
  return l.has(s) ? l.get(s) : (l.set(s, u), u);
}
function W6({ _intern: l, _key: Z }, u) {
  const s = Z(u);
  return l.has(s) && (u = l.get(s), l.delete(s)), u;
}
function V6(l) {
  return l !== null && typeof l == "object" ? l.valueOf() : l;
}
const x6 = Math.sqrt(50), R6 = Math.sqrt(10), Y6 = Math.sqrt(2);
function Ch(l, Z, u) {
  const s = (Z - l) / Math.max(0, u), G = Math.floor(Math.log10(s)), i = s / Math.pow(10, G), m = i >= x6 ? 10 : i >= R6 ? 5 : i >= Y6 ? 2 : 1;
  let a, n, p;
  return G < 0 ? (p = Math.pow(10, -G) / m, a = Math.round(l * p), n = Math.round(Z * p), a / p < l && ++a, n / p > Z && --n, p = -p) : (p = Math.pow(10, G) * m, a = Math.round(l / p), n = Math.round(Z / p), a * p < l && ++a, n * p > Z && --n), n < a && 0.5 <= u && u < 2 ? Ch(l, Z, u * 2) : [a, n, p];
}
function iV(l, Z, u) {
  if (Z = +Z, l = +l, u = +u, !(u > 0)) return [];
  if (l === Z) return [l];
  const s = Z < l, [G, i, m] = s ? Ch(Z, l, u) : Ch(l, Z, u);
  if (!(i >= G)) return [];
  const a = i - G + 1, n = new Array(a);
  if (s)
    if (m < 0) for (let p = 0; p < a; ++p) n[p] = (i - p) / -m;
    else for (let p = 0; p < a; ++p) n[p] = (i - p) * m;
  else if (m < 0) for (let p = 0; p < a; ++p) n[p] = (G + p) / -m;
  else for (let p = 0; p < a; ++p) n[p] = (G + p) * m;
  return n;
}
function oV(l, Z, u) {
  return Z = +Z, l = +l, u = +u, Ch(l, Z, u)[2];
}
function eV(l, Z, u) {
  Z = +Z, l = +l, u = +u;
  const s = Z < l, G = s ? oV(Z, l, u) : oV(l, Z, u);
  return (s ? -1 : 1) * (G < 0 ? 1 / -G : G);
}
function k6(l, Z, u = kr) {
  if (!(!(s = l.length) || isNaN(Z = +Z))) {
    if (Z <= 0 || s < 2) return +u(l[0], 0, l);
    if (Z >= 1) return +u(l[s - 1], s - 1, l);
    var s, G = (s - 1) * Z, i = Math.floor(G), m = +u(l[i], i, l), a = +u(l[i + 1], i + 1, l);
    return m + (a - m) * (G - i);
  }
}
function M6(l, Z, u) {
  l = +l, Z = +Z, u = (G = arguments.length) < 2 ? (Z = l, l = 0, 1) : G < 3 ? 1 : +u;
  for (var s = -1, G = Math.max(0, Math.ceil((Z - l) / u)) | 0, i = new Array(G); ++s < G; )
    i[s] = l + s * u;
  return i;
}
function Vs(l, Z) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(l);
      break;
    default:
      this.range(Z).domain(l);
      break;
  }
  return this;
}
function yG(l, Z) {
  switch (arguments.length) {
    case 0:
      break;
    case 1: {
      typeof l == "function" ? this.interpolator(l) : this.range(l);
      break;
    }
    default: {
      this.domain(l), typeof Z == "function" ? this.interpolator(Z) : this.range(Z);
      break;
    }
  }
  return this;
}
const bI = Symbol("implicit");
function sx() {
  var l = new ZI(), Z = [], u = [], s = bI;
  function G(i) {
    let m = l.get(i);
    if (m === void 0) {
      if (s !== bI) return s;
      l.set(i, m = Z.push(i) - 1);
    }
    return u[m % u.length];
  }
  return G.domain = function(i) {
    if (!arguments.length) return Z.slice();
    Z = [], l = new ZI();
    for (const m of i)
      l.has(m) || l.set(m, Z.push(m) - 1);
    return G;
  }, G.range = function(i) {
    return arguments.length ? (u = Array.from(i), G) : u.slice();
  }, G.unknown = function(i) {
    return arguments.length ? (s = i, G) : s;
  }, G.copy = function() {
    return sx(Z, u).unknown(s);
  }, Vs.apply(G, arguments), G;
}
function I6(l) {
  return function() {
    return l;
  };
}
function aV(l) {
  return +l;
}
var uI = [0, 1];
function vb(l) {
  return l;
}
function nV(l, Z) {
  return (Z -= l = +l) ? function(u) {
    return (u - l) / Z;
  } : I6(isNaN(Z) ? NaN : 0.5);
}
function U6(l, Z) {
  var u;
  return l > Z && (u = l, l = Z, Z = u), function(s) {
    return Math.max(l, Math.min(Z, s));
  };
}
function C6(l, Z, u) {
  var s = l[0], G = l[1], i = Z[0], m = Z[1];
  return G < s ? (s = nV(G, s), i = u(m, i)) : (s = nV(s, G), i = u(i, m)), function(a) {
    return i(s(a));
  };
}
function r6(l, Z, u) {
  var s = Math.min(l.length, Z.length) - 1, G = new Array(s), i = new Array(s), m = -1;
  for (l[s] < l[0] && (l = l.slice().reverse(), Z = Z.slice().reverse()); ++m < s; )
    G[m] = nV(l[m], l[m + 1]), i[m] = u(Z[m], Z[m + 1]);
  return function(a) {
    var n = km(l, a, 1, s) - 1;
    return i[n](G[n](a));
  };
}
function Vn(l, Z) {
  return Z.domain(l.domain()).range(l.range()).interpolate(l.interpolate()).clamp(l.clamp()).unknown(l.unknown());
}
function Gy() {
  var l = uI, Z = uI, u = Cm, s, G, i, m = vb, a, n, p;
  function y() {
    var S = Math.min(l.length, Z.length);
    return m !== vb && (m = U6(l[0], l[S - 1])), a = S > 2 ? r6 : C6, n = p = null, h;
  }
  function h(S) {
    return S == null || isNaN(S = +S) ? i : (n || (n = a(l.map(s), Z, u)))(s(m(S)));
  }
  return h.invert = function(S) {
    return m(G((p || (p = a(Z, l.map(s), hu)))(S)));
  }, h.domain = function(S) {
    return arguments.length ? (l = Array.from(S, aV), y()) : l.slice();
  }, h.range = function(S) {
    return arguments.length ? (Z = Array.from(S), y()) : Z.slice();
  }, h.rangeRound = function(S) {
    return Z = Array.from(S), u = Oh, y();
  }, h.clamp = function(S) {
    return arguments.length ? (m = S ? !0 : vb, y()) : m !== vb;
  }, h.interpolate = function(S) {
    return arguments.length ? (u = S, y()) : u;
  }, h.unknown = function(S) {
    return arguments.length ? (i = S, h) : i;
  }, function(S, t) {
    return s = S, G = t, y();
  };
}
function Mr() {
  return Gy()(vb, vb);
}
function F6(l) {
  return Math.abs(l = Math.round(l)) >= 1e21 ? l.toLocaleString("en").replace(/,/g, "") : l.toString(10);
}
function rh(l, Z) {
  if ((u = (l = Z ? l.toExponential(Z - 1) : l.toExponential()).indexOf("e")) < 0) return null;
  var u, s = l.slice(0, u);
  return [
    s.length > 1 ? s[0] + s.slice(2) : s,
    +l.slice(u + 1)
  ];
}
function to(l) {
  return l = rh(Math.abs(l)), l ? l[1] : NaN;
}
function N6(l, Z) {
  return function(u, s) {
    for (var G = u.length, i = [], m = 0, a = l[0], n = 0; G > 0 && a > 0 && (n + a + 1 > s && (a = Math.max(1, s - n)), i.push(u.substring(G -= a, G + a)), !((n += a + 1) > s)); )
      a = l[m = (m + 1) % l.length];
    return i.reverse().join(Z);
  };
}
function w6(l) {
  return function(Z) {
    return Z.replace(/[0-9]/g, function(u) {
      return l[+u];
    });
  };
}
var z6 = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function sn(l) {
  if (!(Z = z6.exec(l))) throw new Error("invalid format: " + l);
  var Z;
  return new dx({
    fill: Z[1],
    align: Z[2],
    sign: Z[3],
    symbol: Z[4],
    zero: Z[5],
    width: Z[6],
    comma: Z[7],
    precision: Z[8] && Z[8].slice(1),
    trim: Z[9],
    type: Z[10]
  });
}
sn.prototype = dx.prototype;
function dx(l) {
  this.fill = l.fill === void 0 ? " " : l.fill + "", this.align = l.align === void 0 ? ">" : l.align + "", this.sign = l.sign === void 0 ? "-" : l.sign + "", this.symbol = l.symbol === void 0 ? "" : l.symbol + "", this.zero = !!l.zero, this.width = l.width === void 0 ? void 0 : +l.width, this.comma = !!l.comma, this.precision = l.precision === void 0 ? void 0 : +l.precision, this.trim = !!l.trim, this.type = l.type === void 0 ? "" : l.type + "";
}
dx.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};
function J6(l) {
  l: for (var Z = l.length, u = 1, s = -1, G; u < Z; ++u)
    switch (l[u]) {
      case ".":
        s = G = u;
        break;
      case "0":
        s === 0 && (s = u), G = u;
        break;
      default:
        if (!+l[u]) break l;
        s > 0 && (s = 0);
        break;
    }
  return s > 0 ? l.slice(0, s) + l.slice(G + 1) : l;
}
var Ir;
function H6(l, Z) {
  var u = rh(l, Z);
  if (!u) return l + "";
  var s = u[0], G = u[1], i = G - (Ir = Math.max(-8, Math.min(8, Math.floor(G / 3))) * 3) + 1, m = s.length;
  return i === m ? s : i > m ? s + new Array(i - m + 1).join("0") : i > 0 ? s.slice(0, i) + "." + s.slice(i) : "0." + new Array(1 - i).join("0") + rh(l, Math.max(0, Z + i - 1))[0];
}
function sI(l, Z) {
  var u = rh(l, Z);
  if (!u) return l + "";
  var s = u[0], G = u[1];
  return G < 0 ? "0." + new Array(-G).join("0") + s : s.length > G + 1 ? s.slice(0, G + 1) + "." + s.slice(G + 1) : s + new Array(G - s.length + 2).join("0");
}
const dI = {
  "%": (l, Z) => (l * 100).toFixed(Z),
  b: (l) => Math.round(l).toString(2),
  c: (l) => l + "",
  d: F6,
  e: (l, Z) => l.toExponential(Z),
  f: (l, Z) => l.toFixed(Z),
  g: (l, Z) => l.toPrecision(Z),
  o: (l) => Math.round(l).toString(8),
  p: (l, Z) => sI(l * 100, Z),
  r: sI,
  s: H6,
  X: (l) => Math.round(l).toString(16).toUpperCase(),
  x: (l) => Math.round(l).toString(16)
};
function GI(l) {
  return l;
}
var mI = Array.prototype.map, iI = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function g6(l) {
  var Z = l.grouping === void 0 || l.thousands === void 0 ? GI : N6(mI.call(l.grouping, Number), l.thousands + ""), u = l.currency === void 0 ? "" : l.currency[0] + "", s = l.currency === void 0 ? "" : l.currency[1] + "", G = l.decimal === void 0 ? "." : l.decimal + "", i = l.numerals === void 0 ? GI : w6(mI.call(l.numerals, String)), m = l.percent === void 0 ? "%" : l.percent + "", a = l.minus === void 0 ? "−" : l.minus + "", n = l.nan === void 0 ? "NaN" : l.nan + "";
  function p(h) {
    h = sn(h);
    var S = h.fill, t = h.align, W = h.sign, V = h.symbol, R = h.zero, x = h.width, r = h.comma, k = h.precision, U = h.trim, w = h.type;
    w === "n" ? (r = !0, w = "g") : dI[w] || (k === void 0 && (k = 12), U = !0, w = "g"), (R || S === "0" && t === "=") && (R = !0, S = "0", t = "=");
    var z = V === "$" ? u : V === "#" && /[boxX]/.test(w) ? "0" + w.toLowerCase() : "", D = V === "$" ? s : /[%p]/.test(w) ? m : "", C = dI[w], j = /[defgprs%]/.test(w);
    k = k === void 0 ? 6 : /[gprs]/.test(w) ? Math.max(1, Math.min(21, k)) : Math.max(0, Math.min(20, k));
    function E(g) {
      var A = z, J = D, F, v, T;
      if (w === "c")
        J = C(g) + J, g = "";
      else {
        g = +g;
        var f = g < 0 || 1 / g < 0;
        if (g = isNaN(g) ? n : C(Math.abs(g), k), U && (g = J6(g)), f && +g == 0 && W !== "+" && (f = !1), A = (f ? W === "(" ? W : a : W === "-" || W === "(" ? "" : W) + A, J = (w === "s" ? iI[8 + Ir / 3] : "") + J + (f && W === "(" ? ")" : ""), j) {
          for (F = -1, v = g.length; ++F < v; )
            if (T = g.charCodeAt(F), 48 > T || T > 57) {
              J = (T === 46 ? G + g.slice(F + 1) : g.slice(F)) + J, g = g.slice(0, F);
              break;
            }
        }
      }
      r && !R && (g = Z(g, 1 / 0));
      var O = A.length + g.length + J.length, _ = O < x ? new Array(x - O + 1).join(S) : "";
      switch (r && R && (g = Z(_ + g, _.length ? x - J.length : 1 / 0), _ = ""), t) {
        case "<":
          g = A + g + J + _;
          break;
        case "=":
          g = A + _ + g + J;
          break;
        case "^":
          g = _.slice(0, O = _.length >> 1) + A + g + J + _.slice(O);
          break;
        default:
          g = _ + A + g + J;
          break;
      }
      return i(g);
    }
    return E.toString = function() {
      return h + "";
    }, E;
  }
  function y(h, S) {
    var t = p((h = sn(h), h.type = "f", h)), W = Math.max(-8, Math.min(8, Math.floor(to(S) / 3))) * 3, V = Math.pow(10, -W), R = iI[8 + W / 3];
    return function(x) {
      return t(V * x) + R;
    };
  }
  return {
    format: p,
    formatPrefix: y
  };
}
var bh, Gx, Ur;
v6({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function v6(l) {
  return bh = g6(l), Gx = bh.format, Ur = bh.formatPrefix, bh;
}
function T6(l) {
  return Math.max(0, -to(Math.abs(l)));
}
function f6(l, Z) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(to(Z) / 3))) * 3 - to(Math.abs(l)));
}
function E6(l, Z) {
  return l = Math.abs(l), Z = Math.abs(Z) - l, Math.max(0, to(Z) - to(l)) + 1;
}
function Cr(l, Z, u, s) {
  var G = eV(l, Z, u), i;
  switch (s = sn(s ?? ",f"), s.type) {
    case "s": {
      var m = Math.max(Math.abs(l), Math.abs(Z));
      return s.precision == null && !isNaN(i = f6(G, m)) && (s.precision = i), Ur(s, m);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      s.precision == null && !isNaN(i = E6(G, Math.max(Math.abs(l), Math.abs(Z)))) && (s.precision = i - (s.type === "e"));
      break;
    }
    case "f":
    case "%": {
      s.precision == null && !isNaN(i = T6(G)) && (s.precision = i - (s.type === "%") * 2);
      break;
    }
  }
  return Gx(s);
}
function rm(l) {
  var Z = l.domain;
  return l.ticks = function(u) {
    var s = Z();
    return iV(s[0], s[s.length - 1], u ?? 10);
  }, l.tickFormat = function(u, s) {
    var G = Z();
    return Cr(G[0], G[G.length - 1], u ?? 10, s);
  }, l.nice = function(u) {
    u == null && (u = 10);
    var s = Z(), G = 0, i = s.length - 1, m = s[G], a = s[i], n, p, y = 10;
    for (a < m && (p = m, m = a, a = p, p = G, G = i, i = p); y-- > 0; ) {
      if (p = oV(m, a, u), p === n)
        return s[G] = m, s[i] = a, Z(s);
      if (p > 0)
        m = Math.floor(m / p) * p, a = Math.ceil(a / p) * p;
      else if (p < 0)
        m = Math.ceil(m * p) / p, a = Math.floor(a * p) / p;
      else
        break;
      n = p;
    }
    return l;
  }, l;
}
function rr() {
  var l = Mr();
  return l.copy = function() {
    return Vn(l, rr());
  }, Vs.apply(l, arguments), rm(l);
}
function Fr(l) {
  var Z;
  function u(s) {
    return s == null || isNaN(s = +s) ? Z : s;
  }
  return u.invert = u, u.domain = u.range = function(s) {
    return arguments.length ? (l = Array.from(s, aV), u) : l.slice();
  }, u.unknown = function(s) {
    return arguments.length ? (Z = s, u) : Z;
  }, u.copy = function() {
    return Fr(l).unknown(Z);
  }, l = arguments.length ? Array.from(l, aV) : [0, 1], rm(u);
}
function Nr(l, Z) {
  l = l.slice();
  var u = 0, s = l.length - 1, G = l[u], i = l[s], m;
  return i < G && (m = u, u = s, s = m, m = G, G = i, i = m), l[u] = Z.floor(G), l[s] = Z.ceil(i), l;
}
function oI(l) {
  return Math.log(l);
}
function eI(l) {
  return Math.exp(l);
}
function B6(l) {
  return -Math.log(-l);
}
function D6(l) {
  return -Math.exp(-l);
}
function j6(l) {
  return isFinite(l) ? +("1e" + l) : l < 0 ? 0 : l;
}
function Q6(l) {
  return l === 10 ? j6 : l === Math.E ? Math.exp : (Z) => Math.pow(l, Z);
}
function P6(l) {
  return l === Math.E ? Math.log : l === 10 && Math.log10 || l === 2 && Math.log2 || (l = Math.log(l), (Z) => Math.log(Z) / l);
}
function aI(l) {
  return (Z, u) => -l(-Z, u);
}
function mx(l) {
  const Z = l(oI, eI), u = Z.domain;
  let s = 10, G, i;
  function m() {
    return G = P6(s), i = Q6(s), u()[0] < 0 ? (G = aI(G), i = aI(i), l(B6, D6)) : l(oI, eI), Z;
  }
  return Z.base = function(a) {
    return arguments.length ? (s = +a, m()) : s;
  }, Z.domain = function(a) {
    return arguments.length ? (u(a), m()) : u();
  }, Z.ticks = (a) => {
    const n = u();
    let p = n[0], y = n[n.length - 1];
    const h = y < p;
    h && ([p, y] = [y, p]);
    let S = G(p), t = G(y), W, V;
    const R = a == null ? 10 : +a;
    let x = [];
    if (!(s % 1) && t - S < R) {
      if (S = Math.floor(S), t = Math.ceil(t), p > 0) {
        for (; S <= t; ++S)
          for (W = 1; W < s; ++W)
            if (V = S < 0 ? W / i(-S) : W * i(S), !(V < p)) {
              if (V > y) break;
              x.push(V);
            }
      } else for (; S <= t; ++S)
        for (W = s - 1; W >= 1; --W)
          if (V = S > 0 ? W / i(-S) : W * i(S), !(V < p)) {
            if (V > y) break;
            x.push(V);
          }
      x.length * 2 < R && (x = iV(p, y, R));
    } else
      x = iV(S, t, Math.min(t - S, R)).map(i);
    return h ? x.reverse() : x;
  }, Z.tickFormat = (a, n) => {
    if (a == null && (a = 10), n == null && (n = s === 10 ? "s" : ","), typeof n != "function" && (!(s % 1) && (n = sn(n)).precision == null && (n.trim = !0), n = Gx(n)), a === 1 / 0) return n;
    const p = Math.max(1, s * a / Z.ticks().length);
    return (y) => {
      let h = y / i(Math.round(G(y)));
      return h * s < s - 0.5 && (h *= s), h <= p ? n(y) : "";
    };
  }, Z.nice = () => u(Nr(u(), {
    floor: (a) => i(Math.floor(G(a))),
    ceil: (a) => i(Math.ceil(G(a)))
  })), Z;
}
function wr() {
  const l = mx(Gy()).domain([1, 10]);
  return l.copy = () => Vn(l, wr()).base(l.base()), Vs.apply(l, arguments), l;
}
function nI(l) {
  return function(Z) {
    return Math.sign(Z) * Math.log1p(Math.abs(Z / l));
  };
}
function pI(l) {
  return function(Z) {
    return Math.sign(Z) * Math.expm1(Math.abs(Z)) * l;
  };
}
function ix(l) {
  var Z = 1, u = l(nI(Z), pI(Z));
  return u.constant = function(s) {
    return arguments.length ? l(nI(Z = +s), pI(Z)) : Z;
  }, rm(u);
}
function zr() {
  var l = ix(Gy());
  return l.copy = function() {
    return Vn(l, zr()).constant(l.constant());
  }, Vs.apply(l, arguments);
}
function LI(l) {
  return function(Z) {
    return Z < 0 ? -Math.pow(-Z, l) : Math.pow(Z, l);
  };
}
function O6(l) {
  return l < 0 ? -Math.sqrt(-l) : Math.sqrt(l);
}
function A6(l) {
  return l < 0 ? -l * l : l * l;
}
function ox(l) {
  var Z = l(vb, vb), u = 1;
  function s() {
    return u === 1 ? l(vb, vb) : u === 0.5 ? l(O6, A6) : l(LI(u), LI(1 / u));
  }
  return Z.exponent = function(G) {
    return arguments.length ? (u = +G, s()) : u;
  }, rm(Z);
}
function ex() {
  var l = ox(Gy());
  return l.copy = function() {
    return Vn(l, ex()).exponent(l.exponent());
  }, Vs.apply(l, arguments), l;
}
function $6() {
  return ex.apply(null, arguments).exponent(0.5);
}
function Jr() {
  var l = [], Z = [], u = [], s;
  function G() {
    var m = 0, a = Math.max(1, Z.length);
    for (u = new Array(a - 1); ++m < a; ) u[m - 1] = k6(l, m / a);
    return i;
  }
  function i(m) {
    return m == null || isNaN(m = +m) ? s : Z[km(u, m)];
  }
  return i.invertExtent = function(m) {
    var a = Z.indexOf(m);
    return a < 0 ? [NaN, NaN] : [
      a > 0 ? u[a - 1] : l[0],
      a < u.length ? u[a] : l[l.length - 1]
    ];
  }, i.domain = function(m) {
    if (!arguments.length) return l.slice();
    l = [];
    for (let a of m) a != null && !isNaN(a = +a) && l.push(a);
    return l.sort(za), G();
  }, i.range = function(m) {
    return arguments.length ? (Z = Array.from(m), G()) : Z.slice();
  }, i.unknown = function(m) {
    return arguments.length ? (s = m, i) : s;
  }, i.quantiles = function() {
    return u.slice();
  }, i.copy = function() {
    return Jr().domain(l).range(Z).unknown(s);
  }, Vs.apply(i, arguments);
}
function Hr() {
  var l = 0, Z = 1, u = 1, s = [0.5], G = [0, 1], i;
  function m(n) {
    return n != null && n <= n ? G[km(s, n, 0, u)] : i;
  }
  function a() {
    var n = -1;
    for (s = new Array(u); ++n < u; ) s[n] = ((n + 1) * Z - (n - u) * l) / (u + 1);
    return m;
  }
  return m.domain = function(n) {
    return arguments.length ? ([l, Z] = n, l = +l, Z = +Z, a()) : [l, Z];
  }, m.range = function(n) {
    return arguments.length ? (u = (G = Array.from(n)).length - 1, a()) : G.slice();
  }, m.invertExtent = function(n) {
    var p = G.indexOf(n);
    return p < 0 ? [NaN, NaN] : p < 1 ? [l, s[0]] : p >= u ? [s[u - 1], Z] : [s[p - 1], s[p]];
  }, m.unknown = function(n) {
    return arguments.length && (i = n), m;
  }, m.thresholds = function() {
    return s.slice();
  }, m.copy = function() {
    return Hr().domain([l, Z]).range(G).unknown(i);
  }, Vs.apply(rm(m), arguments);
}
function gr() {
  var l = [0.5], Z = [0, 1], u, s = 1;
  function G(i) {
    return i != null && i <= i ? Z[km(l, i, 0, s)] : u;
  }
  return G.domain = function(i) {
    return arguments.length ? (l = Array.from(i), s = Math.min(l.length, Z.length - 1), G) : l.slice();
  }, G.range = function(i) {
    return arguments.length ? (Z = Array.from(i), s = Math.min(l.length, Z.length - 1), G) : Z.slice();
  }, G.invertExtent = function(i) {
    var m = Z.indexOf(i);
    return [l[m - 1], l[m]];
  }, G.unknown = function(i) {
    return arguments.length ? (u = i, G) : u;
  }, G.copy = function() {
    return gr().domain(l).range(Z).unknown(u);
  }, Vs.apply(G, arguments);
}
const uW = /* @__PURE__ */ new Date(), sW = /* @__PURE__ */ new Date();
function Fc(l, Z, u, s) {
  function G(i) {
    return l(i = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+i)), i;
  }
  return G.floor = (i) => (l(i = /* @__PURE__ */ new Date(+i)), i), G.ceil = (i) => (l(i = new Date(i - 1)), Z(i, 1), l(i), i), G.round = (i) => {
    const m = G(i), a = G.ceil(i);
    return i - m < a - i ? m : a;
  }, G.offset = (i, m) => (Z(i = /* @__PURE__ */ new Date(+i), m == null ? 1 : Math.floor(m)), i), G.range = (i, m, a) => {
    const n = [];
    if (i = G.ceil(i), a = a == null ? 1 : Math.floor(a), !(i < m) || !(a > 0)) return n;
    let p;
    do
      n.push(p = /* @__PURE__ */ new Date(+i)), Z(i, a), l(i);
    while (p < i && i < m);
    return n;
  }, G.filter = (i) => Fc((m) => {
    if (m >= m) for (; l(m), !i(m); ) m.setTime(m - 1);
  }, (m, a) => {
    if (m >= m)
      if (a < 0) for (; ++a <= 0; )
        for (; Z(m, -1), !i(m); )
          ;
      else for (; --a >= 0; )
        for (; Z(m, 1), !i(m); )
          ;
  }), u && (G.count = (i, m) => (uW.setTime(+i), sW.setTime(+m), l(uW), l(sW), Math.floor(u(uW, sW))), G.every = (i) => (i = Math.floor(i), !isFinite(i) || !(i > 0) ? null : i > 1 ? G.filter(s ? (m) => s(m) % i === 0 : (m) => G.count(0, m) % i === 0) : G)), G;
}
const Xo = Fc(() => {
}, (l, Z) => {
  l.setTime(+l + Z);
}, (l, Z) => Z - l);
Xo.every = (l) => (l = Math.floor(l), !isFinite(l) || !(l > 0) ? null : l > 1 ? Fc((Z) => {
  Z.setTime(Math.floor(Z / l) * l);
}, (Z, u) => {
  Z.setTime(+Z + u * l);
}, (Z, u) => (u - Z) / l) : Xo);
Xo.range;
const md = 1e3, yu = md * 60, id = yu * 60, Ld = id * 24, ax = Ld * 7, hI = Ld * 30, dW = Ld * 365, od = Fc((l) => {
  l.setTime(l - l.getMilliseconds());
}, (l, Z) => {
  l.setTime(+l + Z * md);
}, (l, Z) => (Z - l) / md, (l) => l.getUTCSeconds());
od.range;
const my = Fc((l) => {
  l.setTime(l - l.getMilliseconds() - l.getSeconds() * md);
}, (l, Z) => {
  l.setTime(+l + Z * yu);
}, (l, Z) => (Z - l) / yu, (l) => l.getMinutes());
my.range;
const iy = Fc((l) => {
  l.setUTCSeconds(0, 0);
}, (l, Z) => {
  l.setTime(+l + Z * yu);
}, (l, Z) => (Z - l) / yu, (l) => l.getUTCMinutes());
iy.range;
const oy = Fc((l) => {
  l.setTime(l - l.getMilliseconds() - l.getSeconds() * md - l.getMinutes() * yu);
}, (l, Z) => {
  l.setTime(+l + Z * id);
}, (l, Z) => (Z - l) / id, (l) => l.getHours());
oy.range;
const ey = Fc((l) => {
  l.setUTCMinutes(0, 0, 0);
}, (l, Z) => {
  l.setTime(+l + Z * id);
}, (l, Z) => (Z - l) / id, (l) => l.getUTCHours());
ey.range;
const LG = Fc(
  (l) => l.setHours(0, 0, 0, 0),
  (l, Z) => l.setDate(l.getDate() + Z),
  (l, Z) => (Z - l - (Z.getTimezoneOffset() - l.getTimezoneOffset()) * yu) / Ld,
  (l) => l.getDate() - 1
);
LG.range;
const ym = Fc((l) => {
  l.setUTCHours(0, 0, 0, 0);
}, (l, Z) => {
  l.setUTCDate(l.getUTCDate() + Z);
}, (l, Z) => (Z - l) / Ld, (l) => l.getUTCDate() - 1);
ym.range;
const vr = Fc((l) => {
  l.setUTCHours(0, 0, 0, 0);
}, (l, Z) => {
  l.setUTCDate(l.getUTCDate() + Z);
}, (l, Z) => (Z - l) / Ld, (l) => Math.floor(l / Ld));
vr.range;
function Fm(l) {
  return Fc((Z) => {
    Z.setDate(Z.getDate() - (Z.getDay() + 7 - l) % 7), Z.setHours(0, 0, 0, 0);
  }, (Z, u) => {
    Z.setDate(Z.getDate() + u * 7);
  }, (Z, u) => (u - Z - (u.getTimezoneOffset() - Z.getTimezoneOffset()) * yu) / ax);
}
const xn = Fm(0), Fh = Fm(1), q6 = Fm(2), _6 = Fm(3), Ko = Fm(4), l$ = Fm(5), Z$ = Fm(6);
xn.range;
Fh.range;
q6.range;
_6.range;
Ko.range;
l$.range;
Z$.range;
function Nm(l) {
  return Fc((Z) => {
    Z.setUTCDate(Z.getUTCDate() - (Z.getUTCDay() + 7 - l) % 7), Z.setUTCHours(0, 0, 0, 0);
  }, (Z, u) => {
    Z.setUTCDate(Z.getUTCDate() + u * 7);
  }, (Z, u) => (u - Z) / ax);
}
const Rn = Nm(0), Nh = Nm(1), c$ = Nm(2), b$ = Nm(3), Wo = Nm(4), u$ = Nm(5), s$ = Nm(6);
Rn.range;
Nh.range;
c$.range;
b$.range;
Wo.range;
u$.range;
s$.range;
const dn = Fc((l) => {
  l.setDate(1), l.setHours(0, 0, 0, 0);
}, (l, Z) => {
  l.setMonth(l.getMonth() + Z);
}, (l, Z) => Z.getMonth() - l.getMonth() + (Z.getFullYear() - l.getFullYear()) * 12, (l) => l.getMonth());
dn.range;
const Gn = Fc((l) => {
  l.setUTCDate(1), l.setUTCHours(0, 0, 0, 0);
}, (l, Z) => {
  l.setUTCMonth(l.getUTCMonth() + Z);
}, (l, Z) => Z.getUTCMonth() - l.getUTCMonth() + (Z.getUTCFullYear() - l.getUTCFullYear()) * 12, (l) => l.getUTCMonth());
Gn.range;
const ts = Fc((l) => {
  l.setMonth(0, 1), l.setHours(0, 0, 0, 0);
}, (l, Z) => {
  l.setFullYear(l.getFullYear() + Z);
}, (l, Z) => Z.getFullYear() - l.getFullYear(), (l) => l.getFullYear());
ts.every = (l) => !isFinite(l = Math.floor(l)) || !(l > 0) ? null : Fc((Z) => {
  Z.setFullYear(Math.floor(Z.getFullYear() / l) * l), Z.setMonth(0, 1), Z.setHours(0, 0, 0, 0);
}, (Z, u) => {
  Z.setFullYear(Z.getFullYear() + u * l);
});
ts.range;
const Xs = Fc((l) => {
  l.setUTCMonth(0, 1), l.setUTCHours(0, 0, 0, 0);
}, (l, Z) => {
  l.setUTCFullYear(l.getUTCFullYear() + Z);
}, (l, Z) => Z.getUTCFullYear() - l.getUTCFullYear(), (l) => l.getUTCFullYear());
Xs.every = (l) => !isFinite(l = Math.floor(l)) || !(l > 0) ? null : Fc((Z) => {
  Z.setUTCFullYear(Math.floor(Z.getUTCFullYear() / l) * l), Z.setUTCMonth(0, 1), Z.setUTCHours(0, 0, 0, 0);
}, (Z, u) => {
  Z.setUTCFullYear(Z.getUTCFullYear() + u * l);
});
Xs.range;
function Tr(l, Z, u, s, G, i) {
  const m = [
    [od, 1, md],
    [od, 5, 5 * md],
    [od, 15, 15 * md],
    [od, 30, 30 * md],
    [i, 1, yu],
    [i, 5, 5 * yu],
    [i, 15, 15 * yu],
    [i, 30, 30 * yu],
    [G, 1, id],
    [G, 3, 3 * id],
    [G, 6, 6 * id],
    [G, 12, 12 * id],
    [s, 1, Ld],
    [s, 2, 2 * Ld],
    [u, 1, ax],
    [Z, 1, hI],
    [Z, 3, 3 * hI],
    [l, 1, dW]
  ];
  function a(p, y, h) {
    const S = y < p;
    S && ([p, y] = [y, p]);
    const t = h && typeof h.range == "function" ? h : n(p, y, h), W = t ? t.range(p, +y + 1) : [];
    return S ? W.reverse() : W;
  }
  function n(p, y, h) {
    const S = Math.abs(y - p) / h, t = ux(([, , R]) => R).right(m, S);
    if (t === m.length) return l.every(eV(p / dW, y / dW, h));
    if (t === 0) return Xo.every(Math.max(eV(p, y, h), 1));
    const [W, V] = m[S / m[t - 1][2] < m[t][2] / S ? t - 1 : t];
    return W.every(V);
  }
  return [a, n];
}
const [d$, G$] = Tr(Xs, Gn, Rn, vr, ey, iy), [m$, i$] = Tr(ts, dn, xn, LG, oy, my);
function GW(l) {
  if (0 <= l.y && l.y < 100) {
    var Z = new Date(-1, l.m, l.d, l.H, l.M, l.S, l.L);
    return Z.setFullYear(l.y), Z;
  }
  return new Date(l.y, l.m, l.d, l.H, l.M, l.S, l.L);
}
function mW(l) {
  if (0 <= l.y && l.y < 100) {
    var Z = new Date(Date.UTC(-1, l.m, l.d, l.H, l.M, l.S, l.L));
    return Z.setUTCFullYear(l.y), Z;
  }
  return new Date(Date.UTC(l.y, l.m, l.d, l.H, l.M, l.S, l.L));
}
function Va(l, Z, u) {
  return { y: l, m: Z, d: u, H: 0, M: 0, S: 0, L: 0 };
}
function o$(l) {
  var Z = l.dateTime, u = l.date, s = l.time, G = l.periods, i = l.days, m = l.shortDays, a = l.months, n = l.shortMonths, p = xa(G), y = Ra(G), h = xa(i), S = Ra(i), t = xa(m), W = Ra(m), V = xa(a), R = Ra(a), x = xa(n), r = Ra(n), k = {
    a: f,
    A: O,
    b: _,
    B: il,
    c: null,
    d: WI,
    e: WI,
    f: F$,
    g: E$,
    G: D$,
    H: U$,
    I: C$,
    j: r$,
    L: fr,
    m: N$,
    M: w$,
    p: Zl,
    q: ol,
    Q: RI,
    s: YI,
    S: z$,
    u: J$,
    U: H$,
    V: g$,
    w: v$,
    W: T$,
    x: null,
    X: null,
    y: f$,
    Y: B$,
    Z: j$,
    "%": xI
  }, U = {
    a: Wl,
    A: ml,
    b: Rl,
    B: kl,
    c: null,
    d: VI,
    e: VI,
    f: A$,
    g: dq,
    G: mq,
    H: Q$,
    I: P$,
    j: O$,
    L: Br,
    m: $$,
    M: q$,
    p: zl,
    q: Vl,
    Q: RI,
    s: YI,
    S: _$,
    u: lq,
    U: Zq,
    V: cq,
    w: bq,
    W: uq,
    x: null,
    X: null,
    y: sq,
    Y: Gq,
    Z: iq,
    "%": xI
  }, w = {
    a: E,
    A: g,
    b: A,
    B: J,
    c: F,
    d: XI,
    e: XI,
    f: Y$,
    g: tI,
    G: SI,
    H: KI,
    I: KI,
    j: W$,
    L: R$,
    m: K$,
    M: V$,
    p: j,
    q: X$,
    Q: M$,
    s: I$,
    S: x$,
    u: L$,
    U: h$,
    V: y$,
    w: p$,
    W: S$,
    x: v,
    X: T,
    y: tI,
    Y: SI,
    Z: t$,
    "%": k$
  };
  k.x = z(u, k), k.X = z(s, k), k.c = z(Z, k), U.x = z(u, U), U.X = z(s, U), U.c = z(Z, U);
  function z(el, xl) {
    return function(hl) {
      var cl = [], wl = -1, Jl = 0, cZ = el.length, uZ, UZ, hc;
      for (hl instanceof Date || (hl = /* @__PURE__ */ new Date(+hl)); ++wl < cZ; )
        el.charCodeAt(wl) === 37 && (cl.push(el.slice(Jl, wl)), (UZ = yI[uZ = el.charAt(++wl)]) != null ? uZ = el.charAt(++wl) : UZ = uZ === "e" ? " " : "0", (hc = xl[uZ]) && (uZ = hc(hl, UZ)), cl.push(uZ), Jl = wl + 1);
      return cl.push(el.slice(Jl, wl)), cl.join("");
    };
  }
  function D(el, xl) {
    return function(hl) {
      var cl = Va(1900, void 0, 1), wl = C(cl, el, hl += "", 0), Jl, cZ;
      if (wl != hl.length) return null;
      if ("Q" in cl) return new Date(cl.Q);
      if ("s" in cl) return new Date(cl.s * 1e3 + ("L" in cl ? cl.L : 0));
      if (xl && !("Z" in cl) && (cl.Z = 0), "p" in cl && (cl.H = cl.H % 12 + cl.p * 12), cl.m === void 0 && (cl.m = "q" in cl ? cl.q : 0), "V" in cl) {
        if (cl.V < 1 || cl.V > 53) return null;
        "w" in cl || (cl.w = 1), "Z" in cl ? (Jl = mW(Va(cl.y, 0, 1)), cZ = Jl.getUTCDay(), Jl = cZ > 4 || cZ === 0 ? Nh.ceil(Jl) : Nh(Jl), Jl = ym.offset(Jl, (cl.V - 1) * 7), cl.y = Jl.getUTCFullYear(), cl.m = Jl.getUTCMonth(), cl.d = Jl.getUTCDate() + (cl.w + 6) % 7) : (Jl = GW(Va(cl.y, 0, 1)), cZ = Jl.getDay(), Jl = cZ > 4 || cZ === 0 ? Fh.ceil(Jl) : Fh(Jl), Jl = LG.offset(Jl, (cl.V - 1) * 7), cl.y = Jl.getFullYear(), cl.m = Jl.getMonth(), cl.d = Jl.getDate() + (cl.w + 6) % 7);
      } else ("W" in cl || "U" in cl) && ("w" in cl || (cl.w = "u" in cl ? cl.u % 7 : "W" in cl ? 1 : 0), cZ = "Z" in cl ? mW(Va(cl.y, 0, 1)).getUTCDay() : GW(Va(cl.y, 0, 1)).getDay(), cl.m = 0, cl.d = "W" in cl ? (cl.w + 6) % 7 + cl.W * 7 - (cZ + 5) % 7 : cl.w + cl.U * 7 - (cZ + 6) % 7);
      return "Z" in cl ? (cl.H += cl.Z / 100 | 0, cl.M += cl.Z % 100, mW(cl)) : GW(cl);
    };
  }
  function C(el, xl, hl, cl) {
    for (var wl = 0, Jl = xl.length, cZ = hl.length, uZ, UZ; wl < Jl; ) {
      if (cl >= cZ) return -1;
      if (uZ = xl.charCodeAt(wl++), uZ === 37) {
        if (uZ = xl.charAt(wl++), UZ = w[uZ in yI ? xl.charAt(wl++) : uZ], !UZ || (cl = UZ(el, hl, cl)) < 0) return -1;
      } else if (uZ != hl.charCodeAt(cl++))
        return -1;
    }
    return cl;
  }
  function j(el, xl, hl) {
    var cl = p.exec(xl.slice(hl));
    return cl ? (el.p = y.get(cl[0].toLowerCase()), hl + cl[0].length) : -1;
  }
  function E(el, xl, hl) {
    var cl = t.exec(xl.slice(hl));
    return cl ? (el.w = W.get(cl[0].toLowerCase()), hl + cl[0].length) : -1;
  }
  function g(el, xl, hl) {
    var cl = h.exec(xl.slice(hl));
    return cl ? (el.w = S.get(cl[0].toLowerCase()), hl + cl[0].length) : -1;
  }
  function A(el, xl, hl) {
    var cl = x.exec(xl.slice(hl));
    return cl ? (el.m = r.get(cl[0].toLowerCase()), hl + cl[0].length) : -1;
  }
  function J(el, xl, hl) {
    var cl = V.exec(xl.slice(hl));
    return cl ? (el.m = R.get(cl[0].toLowerCase()), hl + cl[0].length) : -1;
  }
  function F(el, xl, hl) {
    return C(el, Z, xl, hl);
  }
  function v(el, xl, hl) {
    return C(el, u, xl, hl);
  }
  function T(el, xl, hl) {
    return C(el, s, xl, hl);
  }
  function f(el) {
    return m[el.getDay()];
  }
  function O(el) {
    return i[el.getDay()];
  }
  function _(el) {
    return n[el.getMonth()];
  }
  function il(el) {
    return a[el.getMonth()];
  }
  function Zl(el) {
    return G[+(el.getHours() >= 12)];
  }
  function ol(el) {
    return 1 + ~~(el.getMonth() / 3);
  }
  function Wl(el) {
    return m[el.getUTCDay()];
  }
  function ml(el) {
    return i[el.getUTCDay()];
  }
  function Rl(el) {
    return n[el.getUTCMonth()];
  }
  function kl(el) {
    return a[el.getUTCMonth()];
  }
  function zl(el) {
    return G[+(el.getUTCHours() >= 12)];
  }
  function Vl(el) {
    return 1 + ~~(el.getUTCMonth() / 3);
  }
  return {
    format: function(el) {
      var xl = z(el += "", k);
      return xl.toString = function() {
        return el;
      }, xl;
    },
    parse: function(el) {
      var xl = D(el += "", !1);
      return xl.toString = function() {
        return el;
      }, xl;
    },
    utcFormat: function(el) {
      var xl = z(el += "", U);
      return xl.toString = function() {
        return el;
      }, xl;
    },
    utcParse: function(el) {
      var xl = D(el += "", !0);
      return xl.toString = function() {
        return el;
      }, xl;
    }
  };
}
var yI = { "-": "", _: " ", 0: "0" }, fc = /^\s*\d+/, e$ = /^%/, a$ = /[\\^$*+?|[\]().{}]/g;
function IZ(l, Z, u) {
  var s = l < 0 ? "-" : "", G = (s ? -l : l) + "", i = G.length;
  return s + (i < u ? new Array(u - i + 1).join(Z) + G : G);
}
function n$(l) {
  return l.replace(a$, "\\$&");
}
function xa(l) {
  return new RegExp("^(?:" + l.map(n$).join("|") + ")", "i");
}
function Ra(l) {
  return new Map(l.map((Z, u) => [Z.toLowerCase(), u]));
}
function p$(l, Z, u) {
  var s = fc.exec(Z.slice(u, u + 1));
  return s ? (l.w = +s[0], u + s[0].length) : -1;
}
function L$(l, Z, u) {
  var s = fc.exec(Z.slice(u, u + 1));
  return s ? (l.u = +s[0], u + s[0].length) : -1;
}
function h$(l, Z, u) {
  var s = fc.exec(Z.slice(u, u + 2));
  return s ? (l.U = +s[0], u + s[0].length) : -1;
}
function y$(l, Z, u) {
  var s = fc.exec(Z.slice(u, u + 2));
  return s ? (l.V = +s[0], u + s[0].length) : -1;
}
function S$(l, Z, u) {
  var s = fc.exec(Z.slice(u, u + 2));
  return s ? (l.W = +s[0], u + s[0].length) : -1;
}
function SI(l, Z, u) {
  var s = fc.exec(Z.slice(u, u + 4));
  return s ? (l.y = +s[0], u + s[0].length) : -1;
}
function tI(l, Z, u) {
  var s = fc.exec(Z.slice(u, u + 2));
  return s ? (l.y = +s[0] + (+s[0] > 68 ? 1900 : 2e3), u + s[0].length) : -1;
}
function t$(l, Z, u) {
  var s = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(Z.slice(u, u + 6));
  return s ? (l.Z = s[1] ? 0 : -(s[2] + (s[3] || "00")), u + s[0].length) : -1;
}
function X$(l, Z, u) {
  var s = fc.exec(Z.slice(u, u + 1));
  return s ? (l.q = s[0] * 3 - 3, u + s[0].length) : -1;
}
function K$(l, Z, u) {
  var s = fc.exec(Z.slice(u, u + 2));
  return s ? (l.m = s[0] - 1, u + s[0].length) : -1;
}
function XI(l, Z, u) {
  var s = fc.exec(Z.slice(u, u + 2));
  return s ? (l.d = +s[0], u + s[0].length) : -1;
}
function W$(l, Z, u) {
  var s = fc.exec(Z.slice(u, u + 3));
  return s ? (l.m = 0, l.d = +s[0], u + s[0].length) : -1;
}
function KI(l, Z, u) {
  var s = fc.exec(Z.slice(u, u + 2));
  return s ? (l.H = +s[0], u + s[0].length) : -1;
}
function V$(l, Z, u) {
  var s = fc.exec(Z.slice(u, u + 2));
  return s ? (l.M = +s[0], u + s[0].length) : -1;
}
function x$(l, Z, u) {
  var s = fc.exec(Z.slice(u, u + 2));
  return s ? (l.S = +s[0], u + s[0].length) : -1;
}
function R$(l, Z, u) {
  var s = fc.exec(Z.slice(u, u + 3));
  return s ? (l.L = +s[0], u + s[0].length) : -1;
}
function Y$(l, Z, u) {
  var s = fc.exec(Z.slice(u, u + 6));
  return s ? (l.L = Math.floor(s[0] / 1e3), u + s[0].length) : -1;
}
function k$(l, Z, u) {
  var s = e$.exec(Z.slice(u, u + 1));
  return s ? u + s[0].length : -1;
}
function M$(l, Z, u) {
  var s = fc.exec(Z.slice(u));
  return s ? (l.Q = +s[0], u + s[0].length) : -1;
}
function I$(l, Z, u) {
  var s = fc.exec(Z.slice(u));
  return s ? (l.s = +s[0], u + s[0].length) : -1;
}
function WI(l, Z) {
  return IZ(l.getDate(), Z, 2);
}
function U$(l, Z) {
  return IZ(l.getHours(), Z, 2);
}
function C$(l, Z) {
  return IZ(l.getHours() % 12 || 12, Z, 2);
}
function r$(l, Z) {
  return IZ(1 + LG.count(ts(l), l), Z, 3);
}
function fr(l, Z) {
  return IZ(l.getMilliseconds(), Z, 3);
}
function F$(l, Z) {
  return fr(l, Z) + "000";
}
function N$(l, Z) {
  return IZ(l.getMonth() + 1, Z, 2);
}
function w$(l, Z) {
  return IZ(l.getMinutes(), Z, 2);
}
function z$(l, Z) {
  return IZ(l.getSeconds(), Z, 2);
}
function J$(l) {
  var Z = l.getDay();
  return Z === 0 ? 7 : Z;
}
function H$(l, Z) {
  return IZ(xn.count(ts(l) - 1, l), Z, 2);
}
function Er(l) {
  var Z = l.getDay();
  return Z >= 4 || Z === 0 ? Ko(l) : Ko.ceil(l);
}
function g$(l, Z) {
  return l = Er(l), IZ(Ko.count(ts(l), l) + (ts(l).getDay() === 4), Z, 2);
}
function v$(l) {
  return l.getDay();
}
function T$(l, Z) {
  return IZ(Fh.count(ts(l) - 1, l), Z, 2);
}
function f$(l, Z) {
  return IZ(l.getFullYear() % 100, Z, 2);
}
function E$(l, Z) {
  return l = Er(l), IZ(l.getFullYear() % 100, Z, 2);
}
function B$(l, Z) {
  return IZ(l.getFullYear() % 1e4, Z, 4);
}
function D$(l, Z) {
  var u = l.getDay();
  return l = u >= 4 || u === 0 ? Ko(l) : Ko.ceil(l), IZ(l.getFullYear() % 1e4, Z, 4);
}
function j$(l) {
  var Z = l.getTimezoneOffset();
  return (Z > 0 ? "-" : (Z *= -1, "+")) + IZ(Z / 60 | 0, "0", 2) + IZ(Z % 60, "0", 2);
}
function VI(l, Z) {
  return IZ(l.getUTCDate(), Z, 2);
}
function Q$(l, Z) {
  return IZ(l.getUTCHours(), Z, 2);
}
function P$(l, Z) {
  return IZ(l.getUTCHours() % 12 || 12, Z, 2);
}
function O$(l, Z) {
  return IZ(1 + ym.count(Xs(l), l), Z, 3);
}
function Br(l, Z) {
  return IZ(l.getUTCMilliseconds(), Z, 3);
}
function A$(l, Z) {
  return Br(l, Z) + "000";
}
function $$(l, Z) {
  return IZ(l.getUTCMonth() + 1, Z, 2);
}
function q$(l, Z) {
  return IZ(l.getUTCMinutes(), Z, 2);
}
function _$(l, Z) {
  return IZ(l.getUTCSeconds(), Z, 2);
}
function lq(l) {
  var Z = l.getUTCDay();
  return Z === 0 ? 7 : Z;
}
function Zq(l, Z) {
  return IZ(Rn.count(Xs(l) - 1, l), Z, 2);
}
function Dr(l) {
  var Z = l.getUTCDay();
  return Z >= 4 || Z === 0 ? Wo(l) : Wo.ceil(l);
}
function cq(l, Z) {
  return l = Dr(l), IZ(Wo.count(Xs(l), l) + (Xs(l).getUTCDay() === 4), Z, 2);
}
function bq(l) {
  return l.getUTCDay();
}
function uq(l, Z) {
  return IZ(Nh.count(Xs(l) - 1, l), Z, 2);
}
function sq(l, Z) {
  return IZ(l.getUTCFullYear() % 100, Z, 2);
}
function dq(l, Z) {
  return l = Dr(l), IZ(l.getUTCFullYear() % 100, Z, 2);
}
function Gq(l, Z) {
  return IZ(l.getUTCFullYear() % 1e4, Z, 4);
}
function mq(l, Z) {
  var u = l.getUTCDay();
  return l = u >= 4 || u === 0 ? Wo(l) : Wo.ceil(l), IZ(l.getUTCFullYear() % 1e4, Z, 4);
}
function iq() {
  return "+0000";
}
function xI() {
  return "%";
}
function RI(l) {
  return +l;
}
function YI(l) {
  return Math.floor(+l / 1e3);
}
var Ji, jr, Qr;
oq({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function oq(l) {
  return Ji = o$(l), jr = Ji.format, Ji.parse, Qr = Ji.utcFormat, Ji.utcParse, Ji;
}
function eq(l) {
  return new Date(l);
}
function aq(l) {
  return l instanceof Date ? +l : +/* @__PURE__ */ new Date(+l);
}
function nx(l, Z, u, s, G, i, m, a, n, p) {
  var y = Mr(), h = y.invert, S = y.domain, t = p(".%L"), W = p(":%S"), V = p("%I:%M"), R = p("%I %p"), x = p("%a %d"), r = p("%b %d"), k = p("%B"), U = p("%Y");
  function w(z) {
    return (n(z) < z ? t : a(z) < z ? W : m(z) < z ? V : i(z) < z ? R : s(z) < z ? G(z) < z ? x : r : u(z) < z ? k : U)(z);
  }
  return y.invert = function(z) {
    return new Date(h(z));
  }, y.domain = function(z) {
    return arguments.length ? S(Array.from(z, aq)) : S().map(eq);
  }, y.ticks = function(z) {
    var D = S();
    return l(D[0], D[D.length - 1], z ?? 10);
  }, y.tickFormat = function(z, D) {
    return D == null ? w : p(D);
  }, y.nice = function(z) {
    var D = S();
    return (!z || typeof z.range != "function") && (z = Z(D[0], D[D.length - 1], z ?? 10)), z ? S(Nr(D, z)) : y;
  }, y.copy = function() {
    return Vn(y, nx(l, Z, u, s, G, i, m, a, n, p));
  }, y;
}
function nq() {
  return Vs.apply(nx(m$, i$, ts, dn, xn, LG, oy, my, od, jr).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
}
function pq() {
  return Vs.apply(nx(d$, G$, Xs, Gn, Rn, ym, ey, iy, od, Qr).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]), arguments);
}
function ay() {
  var l = 0, Z = 1, u, s, G, i, m = vb, a = !1, n;
  function p(h) {
    return h == null || isNaN(h = +h) ? n : m(G === 0 ? 0.5 : (h = (i(h) - u) * G, a ? Math.max(0, Math.min(1, h)) : h));
  }
  p.domain = function(h) {
    return arguments.length ? ([l, Z] = h, u = i(l = +l), s = i(Z = +Z), G = u === s ? 0 : 1 / (s - u), p) : [l, Z];
  }, p.clamp = function(h) {
    return arguments.length ? (a = !!h, p) : a;
  }, p.interpolator = function(h) {
    return arguments.length ? (m = h, p) : m;
  };
  function y(h) {
    return function(S) {
      var t, W;
      return arguments.length ? ([t, W] = S, m = h(t, W), p) : [m(0), m(1)];
    };
  }
  return p.range = y(Cm), p.rangeRound = y(Oh), p.unknown = function(h) {
    return arguments.length ? (n = h, p) : n;
  }, function(h) {
    return i = h, u = h(l), s = h(Z), G = u === s ? 0 : 1 / (s - u), p;
  };
}
function SG(l, Z) {
  return Z.domain(l.domain()).interpolator(l.interpolator()).clamp(l.clamp()).unknown(l.unknown());
}
function px() {
  var l = rm(ay()(vb));
  return l.copy = function() {
    return SG(l, px());
  }, yG.apply(l, arguments);
}
function Pr() {
  var l = mx(ay()).domain([1, 10]);
  return l.copy = function() {
    return SG(l, Pr()).base(l.base());
  }, yG.apply(l, arguments);
}
function Or() {
  var l = ix(ay());
  return l.copy = function() {
    return SG(l, Or()).constant(l.constant());
  }, yG.apply(l, arguments);
}
function Lx() {
  var l = ox(ay());
  return l.copy = function() {
    return SG(l, Lx()).exponent(l.exponent());
  }, yG.apply(l, arguments);
}
function Lq() {
  return Lx.apply(null, arguments).exponent(0.5);
}
function ny() {
  var l = 0, Z = 0.5, u = 1, s = 1, G, i, m, a, n, p = vb, y, h = !1, S;
  function t(V) {
    return isNaN(V = +V) ? S : (V = 0.5 + ((V = +y(V)) - i) * (s * V < s * i ? a : n), p(h ? Math.max(0, Math.min(1, V)) : V));
  }
  t.domain = function(V) {
    return arguments.length ? ([l, Z, u] = V, G = y(l = +l), i = y(Z = +Z), m = y(u = +u), a = G === i ? 0 : 0.5 / (i - G), n = i === m ? 0 : 0.5 / (m - i), s = i < G ? -1 : 1, t) : [l, Z, u];
  }, t.clamp = function(V) {
    return arguments.length ? (h = !!V, t) : h;
  }, t.interpolator = function(V) {
    return arguments.length ? (p = V, t) : p;
  };
  function W(V) {
    return function(R) {
      var x, r, k;
      return arguments.length ? ([x, r, k] = R, p = fV(V, [x, r, k]), t) : [p(0), p(0.5), p(1)];
    };
  }
  return t.range = W(Cm), t.rangeRound = W(Oh), t.unknown = function(V) {
    return arguments.length ? (S = V, t) : S;
  }, function(V) {
    return y = V, G = V(l), i = V(Z), m = V(u), a = G === i ? 0 : 0.5 / (i - G), n = i === m ? 0 : 0.5 / (m - i), s = i < G ? -1 : 1, t;
  };
}
function Ar() {
  var l = rm(ny()(vb));
  return l.copy = function() {
    return SG(l, Ar());
  }, yG.apply(l, arguments);
}
function $r() {
  var l = mx(ny()).domain([0.1, 1, 10]);
  return l.copy = function() {
    return SG(l, $r()).base(l.base());
  }, yG.apply(l, arguments);
}
function qr() {
  var l = ix(ny());
  return l.copy = function() {
    return SG(l, qr()).constant(l.constant());
  }, yG.apply(l, arguments);
}
function hx() {
  var l = ox(ny());
  return l.copy = function() {
    return SG(l, hx()).exponent(l.exponent());
  }, yG.apply(l, arguments);
}
function hq() {
  return hx.apply(null, arguments).exponent(0.5);
}
function xs(l) {
  for (var Z = l.length / 6 | 0, u = new Array(Z), s = 0; s < Z; ) u[s] = "#" + l.slice(s * 6, ++s * 6);
  return u;
}
const yq = xs("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"), Sq = xs("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"), tq = xs("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"), Xq = xs("4269d0efb118ff725c6cc5b03ca951ff8ab7a463f297bbf59c6b4e9498a0"), Kq = xs("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"), Wq = xs("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"), Vq = xs("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"), xq = xs("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"), Rq = xs("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"), Yq = xs("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"), yx = "year", Sx = "quarter", tx = "month", Xx = "week", Kx = "date", Wx = "day", Vx = "dayofyear", xx = "hours", Rx = "minutes", Yx = "seconds", kx = "milliseconds", kq = [yx, Sx, tx, Xx, Kx, Wx, Vx, xx, Rx, Yx, kx];
kq.reduce((l, Z, u) => (l[Z] = 1 + u, l), {});
yx + "", Sx + "", dn.every(3), tx + "", Xx + "", Kx + "", Wx + "", Vx + "", xx + "", Rx + "", Yx + "", kx + "";
yx + "", Sx + "", Gn.every(3), tx + "", Xx + "", Kx + "", Wx + "", Vx + "", xx + "", Rx + "", Yx + "", kx + "";
function Mq(l, Z, u) {
  const s = l - Z + u * 2;
  return l ? s > 0 ? s : 1 : 0;
}
const Iq = "identity", Mx = "linear", Vo = "log", Ix = "pow", Ux = "sqrt", Cx = "symlog", Uq = "time", Cq = "utc", Uo = "sequential", Yn = "diverging", kI = "quantile", rq = "quantize", Fq = "threshold", Nq = "ordinal", wq = "point", zq = "band", Jq = "bin-ordinal", Ec = "continuous", py = "discrete", Ly = "discretizing", ju = "interpolating", _r = "temporal";
function Hq(l) {
  return function(Z) {
    let u = Z[0], s = Z[1], G;
    return s < u && (G = u, u = s, s = G), [l.invert(u), l.invert(s)];
  };
}
function gq(l) {
  return function(Z) {
    const u = l.range();
    let s = Z[0], G = Z[1], i = -1, m, a, n, p;
    for (G < s && (a = s, s = G, G = a), n = 0, p = u.length; n < p; ++n)
      u[n] >= s && u[n] <= G && (i < 0 && (i = n), m = n);
    if (!(i < 0))
      return s = l.invertExtent(u[i]), G = l.invertExtent(u[m]), [s[0] === void 0 ? s[1] : s[0], G[1] === void 0 ? G[0] : G[1]];
  };
}
function rx() {
  const l = sx().unknown(void 0), Z = l.domain, u = l.range;
  let s = [0, 1], G, i, m = !1, a = 0, n = 0, p = 0.5;
  delete l.unknown;
  function y() {
    const h = Z().length, S = s[1] < s[0], t = s[1 - S], W = Mq(h, a, n);
    let V = s[S - 0];
    G = (t - V) / (W || 1), m && (G = Math.floor(G)), V += (t - V - G * (h - a)) * p, i = G * (1 - a), m && (V = Math.round(V), i = Math.round(i));
    const R = M6(h).map((x) => V + G * x);
    return u(S ? R.reverse() : R);
  }
  return l.domain = function(h) {
    return arguments.length ? (Z(h), y()) : Z();
  }, l.range = function(h) {
    return arguments.length ? (s = [+h[0], +h[1]], y()) : s.slice();
  }, l.rangeRound = function(h) {
    return s = [+h[0], +h[1]], m = !0, y();
  }, l.bandwidth = function() {
    return i;
  }, l.step = function() {
    return G;
  }, l.round = function(h) {
    return arguments.length ? (m = !!h, y()) : m;
  }, l.padding = function(h) {
    return arguments.length ? (n = Math.max(0, Math.min(1, h)), a = n, y()) : a;
  }, l.paddingInner = function(h) {
    return arguments.length ? (a = Math.max(0, Math.min(1, h)), y()) : a;
  }, l.paddingOuter = function(h) {
    return arguments.length ? (n = Math.max(0, Math.min(1, h)), y()) : n;
  }, l.align = function(h) {
    return arguments.length ? (p = Math.max(0, Math.min(1, h)), y()) : p;
  }, l.invertRange = function(h) {
    if (h[0] == null || h[1] == null) return;
    const S = s[1] < s[0], t = S ? u().reverse() : u(), W = t.length - 1;
    let V = +h[0], R = +h[1], x, r, k;
    if (!(V !== V || R !== R) && (R < V && (k = V, V = R, R = k), !(R < t[0] || V > s[1 - S])))
      return x = Math.max(0, km(t, V) - 1), r = V === R ? x : km(t, R) - 1, V - t[x] > i + 1e-10 && ++x, S && (k = x, x = W - r, r = W - k), x > r ? void 0 : Z().slice(x, r + 1);
  }, l.invert = function(h) {
    const S = l.invertRange([h, h]);
    return S && S[0];
  }, l.copy = function() {
    return rx().domain(Z()).range(s).round(m).paddingInner(a).paddingOuter(n).align(p);
  }, y();
}
function lF(l) {
  const Z = l.copy;
  return l.padding = l.paddingOuter, delete l.paddingInner, l.copy = function() {
    return lF(Z());
  }, l;
}
function vq() {
  return lF(rx().paddingInner(1));
}
var Tq = Array.prototype.map;
function fq(l) {
  return Tq.call(l, L6);
}
const Eq = Array.prototype.slice;
function ZF() {
  let l = [], Z = [];
  function u(s) {
    return s == null || s !== s ? void 0 : Z[(km(l, s) - 1) % Z.length];
  }
  return u.domain = function(s) {
    return arguments.length ? (l = fq(s), u) : l.slice();
  }, u.range = function(s) {
    return arguments.length ? (Z = Eq.call(s), u) : Z.slice();
  }, u.tickFormat = function(s, G) {
    return Cr(l[0], p6(l), s ?? 10, G);
  }, u.copy = function() {
    return ZF().domain(u.domain()).range(u.range());
  }, u;
}
const pV = /* @__PURE__ */ new Map(), Bq = Symbol("vega_scale");
function Dq(l) {
  return l[Bq] = !0, l;
}
function jq(l, Z, u) {
  const s = function() {
    const i = Z();
    return i.invertRange || (i.invertRange = i.invert ? Hq(i) : i.invertExtent ? gq(i) : void 0), i.type = l, Dq(i);
  };
  return s.metadata = y6(h6(u)), s;
}
function OZ(l, Z, u) {
  return arguments.length > 1 ? (pV.set(l, jq(l, Z, u)), this) : Qq(l) ? pV.get(l) : void 0;
}
OZ(Iq, Fr);
OZ(Mx, rr, Ec);
OZ(Vo, wr, [Ec, Vo]);
OZ(Ix, ex, Ec);
OZ(Ux, $6, Ec);
OZ(Cx, zr, Ec);
OZ(Uq, nq, [Ec, _r]);
OZ(Cq, pq, [Ec, _r]);
OZ(Uo, px, [Ec, ju]);
OZ(`${Uo}-${Mx}`, px, [Ec, ju]);
OZ(`${Uo}-${Vo}`, Pr, [Ec, ju, Vo]);
OZ(`${Uo}-${Ix}`, Lx, [Ec, ju]);
OZ(`${Uo}-${Ux}`, Lq, [Ec, ju]);
OZ(`${Uo}-${Cx}`, Or, [Ec, ju]);
OZ(`${Yn}-${Mx}`, Ar, [Ec, ju]);
OZ(`${Yn}-${Vo}`, $r, [Ec, ju, Vo]);
OZ(`${Yn}-${Ix}`, hx, [Ec, ju]);
OZ(`${Yn}-${Ux}`, hq, [Ec, ju]);
OZ(`${Yn}-${Cx}`, qr, [Ec, ju]);
OZ(kI, Jr, [Ly, kI]);
OZ(rq, Hr, Ly);
OZ(Fq, gr, Ly);
OZ(Jq, ZF, [py, Ly]);
OZ(Nq, sx, py);
OZ(zq, rx, py);
OZ(wq, vq, py);
function Qq(l) {
  return pV.has(l);
}
function Pq(l, Z, u) {
  return fV(Oq("rgb", u), l);
}
function Oq(l, Z) {
  const u = gQ[Aq(l)];
  return Z != null && u && u.gamma ? u.gamma(Z) : u;
}
function Aq(l) {
  return "interpolate" + l.toLowerCase().split("-").map((Z) => Z[0].toUpperCase() + Z.slice(1)).join("");
}
const $q = {
  blues: "cfe1f2bed8eca8cee58fc1de74b2d75ba3cf4592c63181bd206fb2125ca40a4a90",
  greens: "d3eecdc0e6baabdda594d3917bc77d60ba6c46ab5e329a512089430e7735036429",
  greys: "e2e2e2d4d4d4c4c4c4b1b1b19d9d9d8888887575756262624d4d4d3535351e1e1e",
  oranges: "fdd8b3fdc998fdb87bfda55efc9244f87f2cf06b18e4580bd14904b93d029f3303",
  purples: "e2e1efd4d4e8c4c5e0b4b3d6a3a0cc928ec3827cb97566ae684ea25c3696501f8c",
  reds: "fdc9b4fcb49afc9e80fc8767fa7051f6573fec3f2fdc2a25c81b1db21218970b13",
  blueGreen: "d5efedc1e8e0a7ddd18bd2be70c6a958ba9144ad77319c5d2089460e7736036429",
  bluePurple: "ccddecbad0e4a8c2dd9ab0d4919cc98d85be8b6db28a55a6873c99822287730f71",
  greenBlue: "d3eecec5e8c3b1e1bb9bd8bb82cec269c2ca51b2cd3c9fc7288abd1675b10b60a1",
  orangeRed: "fddcaffdcf9bfdc18afdad77fb9562f67d53ee6545e24932d32d1ebf130da70403",
  purpleBlue: "dbdaebc8cee4b1c3de97b7d87bacd15b9fc93a90c01e7fb70b70ab056199045281",
  purpleBlueGreen: "dbd8eac8cee4b0c3de93b7d872acd1549fc83892bb1c88a3097f8702736b016353",
  purpleRed: "dcc9e2d3b3d7ce9eccd186c0da6bb2e14da0e23189d91e6fc61159ab07498f023a",
  redPurple: "fccfccfcbec0faa9b8f98faff571a5ec539ddb3695c41b8aa908808d0179700174",
  yellowGreen: "e4f4acd1eca0b9e2949ed68880c97c62bb6e47aa5e3297502083440e723b036034",
  yellowOrangeBrown: "feeaa1fedd84fecc63feb746fca031f68921eb7215db5e0bc54c05ab3d038f3204",
  yellowOrangeRed: "fee087fed16ffebd59fea849fd903efc7335f9522bee3423de1b20ca0b22af0225",
  blueOrange: "134b852f78b35da2cb9dcae1d2e5eff2f0ebfce0bafbbf74e8932fc5690d994a07",
  brownBlueGreen: "704108a0651ac79548e3c78af3e6c6eef1eac9e9e48ed1c74da79e187a72025147",
  purpleGreen: "5b1667834792a67fb6c9aed3e6d6e8eff0efd9efd5aedda971bb75368e490e5e29",
  purpleOrange: "4114696647968f83b7b9b4d6dadbebf3eeeafce0bafbbf74e8932fc5690d994a07",
  redBlue: "8c0d25bf363adf745ef4ae91fbdbc9f2efeed2e5ef9dcae15da2cb2f78b3134b85",
  redGrey: "8c0d25bf363adf745ef4ae91fcdccbfaf4f1e2e2e2c0c0c0969696646464343434",
  yellowGreenBlue: "eff9bddbf1b4bde5b594d5b969c5be45b4c22c9ec02182b82163aa23479c1c3185",
  redYellowBlue: "a50026d4322cf16e43fcac64fedd90faf8c1dcf1ecabd6e875abd04a74b4313695",
  redYellowGreen: "a50026d4322cf16e43fcac63fedd8df9f7aed7ee8ea4d86e64bc6122964f006837",
  pinkYellowGreen: "8e0152c0267edd72adf0b3d6faddedf5f3efe1f2cab6de8780bb474f9125276419",
  spectral: "9e0142d13c4bf0704afcac63fedd8dfbf8b0e0f3a1a9dda269bda94288b55e4fa2",
  viridis: "440154470e61481a6c482575472f7d443a834144873d4e8a39568c35608d31688e2d708e2a788e27818e23888e21918d1f988b1fa08822a8842ab07f35b77943bf7154c56866cc5d7ad1518fd744a5db36bcdf27d2e21be9e51afde725",
  magma: "0000040404130b0924150e3720114b2c11603b0f704a107957157e651a80721f817f24828c29819a2e80a8327db6377ac43c75d1426fde4968e95462f1605df76f5cfa7f5efc8f65fe9f6dfeaf78febf84fece91fddea0fcedaffcfdbf",
  inferno: "0000040403130c0826170c3b240c4f330a5f420a68500d6c5d126e6b176e781c6d86216b932667a12b62ae305cbb3755c73e4cd24644dd513ae65c30ed6925f3771af8850ffb9506fca50afcb519fac62df6d645f2e661f3f484fcffa4",
  plasma: "0d088723069033059742039d5002a25d01a66a00a87801a88405a7900da49c179ea72198b12a90ba3488c33d80cb4779d35171da5a69e16462e76e5bed7953f2834cf68f44fa9a3dfca636fdb32ffec029fcce25f9dc24f5ea27f0f921",
  cividis: "00205100235800265d002961012b65042e670831690d346b11366c16396d1c3c6e213f6e26426e2c456e31476e374a6e3c4d6e42506e47536d4c566d51586e555b6e5a5e6e5e616e62646f66676f6a6a706e6d717270717573727976737c79747f7c75827f758682768985778c8877908b78938e789691789a94789e9778a19b78a59e77a9a177aea575b2a874b6ab73bbaf71c0b26fc5b66dc9b96acebd68d3c065d8c462ddc85fe2cb5ce7cf58ebd355f0d652f3da4ff7de4cfae249fce647",
  rainbow: "6e40aa883eb1a43db3bf3cafd83fa4ee4395fe4b83ff576eff6659ff7847ff8c38f3a130e2b72fcfcc36bee044aff05b8ff4576ff65b52f6673af27828ea8d1ddfa319d0b81cbecb23abd82f96e03d82e14c6edb5a5dd0664dbf6e40aa",
  sinebow: "ff4040fc582af47218e78d0bd5a703bfbf00a7d5038de70b72f41858fc2a40ff402afc5818f4720be78d03d5a700bfbf03a7d50b8de71872f42a58fc4040ff582afc7218f48d0be7a703d5bf00bfd503a7e70b8df41872fc2a58ff4040",
  turbo: "23171b32204a3e2a71453493493eae4b49c54a53d7485ee44569ee4074f53c7ff8378af93295f72e9ff42ba9ef28b3e926bce125c5d925cdcf27d5c629dcbc2de3b232e9a738ee9d3ff39347f68950f9805afc7765fd6e70fe667cfd5e88fc5795fb51a1f84badf545b9f140c5ec3cd0e637dae034e4d931ecd12ef4c92bfac029ffb626ffad24ffa223ff9821ff8d1fff821dff771cfd6c1af76118f05616e84b14df4111d5380fcb2f0dc0260ab61f07ac1805a313029b0f00950c00910b00",
  browns: "eedbbdecca96e9b97ae4a865dc9856d18954c7784cc0673fb85536ad44339f3632",
  tealBlues: "bce4d89dd3d181c3cb65b3c245a2b9368fae347da0306a932c5985",
  teals: "bbdfdfa2d4d58ac9c975bcbb61b0af4da5a43799982b8b8c1e7f7f127273006667",
  warmGreys: "dcd4d0cec5c1c0b8b4b3aaa7a59c9998908c8b827f7e7673726866665c5a59504e",
  goldGreen: "f4d166d5ca60b6c35c98bb597cb25760a6564b9c533f8f4f33834a257740146c36",
  goldOrange: "f4d166f8be5cf8aa4cf5983bf3852aef701be2621fd65322c54923b142239e3a26",
  goldRed: "f4d166f6be59f9aa51fc964ef6834bee734ae56249db5247cf4244c43141b71d3e",
  lightGreyRed: "efe9e6e1dad7d5cbc8c8bdb9bbaea9cd967ddc7b43e15f19df4011dc000b",
  lightGreyTeal: "e4eaead6dcddc8ced2b7c2c7a6b4bc64b0bf22a6c32295c11f85be1876bc",
  lightMulti: "e0f1f2c4e9d0b0de9fd0e181f6e072f6c053f3993ef77440ef4a3c",
  lightOrange: "f2e7daf7d5baf9c499fab184fa9c73f68967ef7860e8645bde515bd43d5b",
  lightTealBlue: "e3e9e0c0dccf9aceca7abfc859afc0389fb9328dad2f7ca0276b95255988",
  darkBlue: "3232322d46681a5c930074af008cbf05a7ce25c0dd38daed50f3faffffff",
  darkGold: "3c3c3c584b37725e348c7631ae8b2bcfa424ecc31ef9de30fff184ffffff",
  darkGreen: "3a3a3a215748006f4d048942489e4276b340a6c63dd2d836ffeb2cffffaa",
  darkMulti: "3737371f5287197d8c29a86995ce3fffe800ffffff",
  darkRed: "3434347036339e3c38cc4037e75d1eec8620eeab29f0ce32ffeb2c"
}, qq = {
  accent: Sq,
  category10: yq,
  category20: "1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5",
  category20b: "393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6",
  category20c: "3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9",
  dark2: tq,
  observable10: Xq,
  paired: Kq,
  pastel1: Wq,
  pastel2: Vq,
  set1: xq,
  set2: Rq,
  set3: Yq,
  tableau10: "4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac",
  tableau20: "4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5"
};
function cF(l) {
  if (Yr(l)) return l;
  const Z = l.length / 6 | 0, u = new Array(Z);
  for (let s = 0; s < Z; )
    u[s] = "#" + l.slice(s * 6, ++s * 6);
  return u;
}
function bF(l, Z) {
  for (const u in l) LV(u, Z(l[u]));
}
const MI = {};
bF(qq, cF);
bF($q, (l) => Pq(cF(l)));
function LV(l, Z) {
  return l = l && l.toLowerCase(), arguments.length > 1 ? (MI[l] = Z, this) : MI[l];
}
function uh(l) {
  throw new Error('Could not dynamically require "' + l + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var uF = { exports: {} };
(function(l, Z) {
  (function(u) {
    l.exports = u();
  })(function() {
    return (/* @__PURE__ */ function() {
      function u(s, G, i) {
        function m(p, y) {
          if (!G[p]) {
            if (!s[p]) {
              var h = typeof uh == "function" && uh;
              if (!y && h) return h(p, !0);
              if (a) return a(p, !0);
              var S = new Error("Cannot find module '" + p + "'");
              throw S.code = "MODULE_NOT_FOUND", S;
            }
            var t = G[p] = { exports: {} };
            s[p][0].call(t.exports, function(W) {
              var V = s[p][1][W];
              return m(V || W);
            }, t, t.exports, u, s, G, i);
          }
          return G[p].exports;
        }
        for (var a = typeof uh == "function" && uh, n = 0; n < i.length; n++) m(i[n]);
        return m;
      }
      return u;
    }())({ 1: [function(u, s, G) {
      Object.defineProperty(G, "__esModule", {
        value: !0
      });
      var i = /* @__PURE__ */ function() {
        function p(y, h) {
          for (var S = 0; S < h.length; S++) {
            var t = h[S];
            t.enumerable = t.enumerable || !1, t.configurable = !0, "value" in t && (t.writable = !0), Object.defineProperty(y, t.key, t);
          }
        }
        return function(y, h, S) {
          return h && p(y.prototype, h), S && p(y, S), y;
        };
      }();
      function m(p, y) {
        if (!(p instanceof y))
          throw new TypeError("Cannot call a class as a function");
      }
      var a = function() {
        function p() {
          var y = this, h = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, S = h.defaultLayoutOptions, t = S === void 0 ? {} : S, W = h.algorithms, V = W === void 0 ? ["layered", "stress", "mrtree", "radial", "force", "disco", "sporeOverlap", "sporeCompaction", "rectpacking"] : W, R = h.workerFactory, x = h.workerUrl;
          if (m(this, p), this.defaultLayoutOptions = t, this.initialized = !1, typeof x > "u" && typeof R > "u")
            throw new Error("Cannot construct an ELK without both 'workerUrl' and 'workerFactory'.");
          var r = R;
          typeof x < "u" && typeof R > "u" && (r = function(w) {
            return new Worker(w);
          });
          var k = r(x);
          if (typeof k.postMessage != "function")
            throw new TypeError("Created worker does not provide the required 'postMessage' function.");
          this.worker = new n(k), this.worker.postMessage({
            cmd: "register",
            algorithms: V
          }).then(function(U) {
            return y.initialized = !0;
          }).catch(console.err);
        }
        return i(p, [{
          key: "layout",
          value: function(h) {
            var S = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, t = S.layoutOptions, W = t === void 0 ? this.defaultLayoutOptions : t, V = S.logging, R = V === void 0 ? !1 : V, x = S.measureExecutionTime, r = x === void 0 ? !1 : x;
            return h ? this.worker.postMessage({
              cmd: "layout",
              graph: h,
              layoutOptions: W,
              options: {
                logging: R,
                measureExecutionTime: r
              }
            }) : Promise.reject(new Error("Missing mandatory parameter 'graph'."));
          }
        }, {
          key: "knownLayoutAlgorithms",
          value: function() {
            return this.worker.postMessage({ cmd: "algorithms" });
          }
        }, {
          key: "knownLayoutOptions",
          value: function() {
            return this.worker.postMessage({ cmd: "options" });
          }
        }, {
          key: "knownLayoutCategories",
          value: function() {
            return this.worker.postMessage({ cmd: "categories" });
          }
        }, {
          key: "terminateWorker",
          value: function() {
            this.worker && this.worker.terminate();
          }
        }]), p;
      }();
      G.default = a;
      var n = function() {
        function p(y) {
          var h = this;
          if (m(this, p), y === void 0)
            throw new Error("Missing mandatory parameter 'worker'.");
          this.resolvers = {}, this.worker = y, this.worker.onmessage = function(S) {
            setTimeout(function() {
              h.receive(h, S);
            }, 0);
          };
        }
        return i(p, [{
          key: "postMessage",
          value: function(h) {
            var S = this.id || 0;
            this.id = S + 1, h.id = S;
            var t = this;
            return new Promise(function(W, V) {
              t.resolvers[S] = function(R, x) {
                R ? (t.convertGwtStyleError(R), V(R)) : W(x);
              }, t.worker.postMessage(h);
            });
          }
        }, {
          key: "receive",
          value: function(h, S) {
            var t = S.data, W = h.resolvers[t.id];
            W && (delete h.resolvers[t.id], t.error ? W(t.error) : W(null, t.data));
          }
        }, {
          key: "terminate",
          value: function() {
            this.worker && this.worker.terminate();
          }
        }, {
          key: "convertGwtStyleError",
          value: function(h) {
            if (h) {
              var S = h.__java$exception;
              S && (S.cause && S.cause.backingJsObject && (h.cause = S.cause.backingJsObject, this.convertGwtStyleError(h.cause)), delete h.__java$exception);
            }
          }
        }]), p;
      }();
    }, {}], 2: [function(u, s, G) {
      var i = u("./elk-api.js").default;
      Object.defineProperty(s.exports, "__esModule", {
        value: !0
      }), s.exports = i, i.default = i;
    }, { "./elk-api.js": 1 }] }, {}, [2])(2);
  });
})(uF);
var _q = uF.exports;
const l_ = /* @__PURE__ */ wh(_q), sF = "", Z_ = (l) => Uint8Array.from(atob(l), (Z) => Z.charCodeAt(0)), II = typeof self < "u" && self.Blob && new Blob([Z_(sF)], { type: "text/javascript;charset=utf-8" });
function c_(l) {
  let Z;
  try {
    if (Z = II && (self.URL || self.webkitURL).createObjectURL(II), !Z) throw "";
    const u = new Worker(Z, {
      name: l == null ? void 0 : l.name
    });
    return u.addEventListener("error", () => {
      (self.URL || self.webkitURL).revokeObjectURL(Z);
    }), u;
  } catch {
    return new Worker(
      "data:text/javascript;base64," + sF,
      {
        name: l == null ? void 0 : l.name
      }
    );
  } finally {
    Z && (self.URL || self.webkitURL).revokeObjectURL(Z);
  }
}
const b_ = {
  "elk.algorithm": "layered",
  "elk.direction": "DOWN",
  // This seems to result in a more compact layout
  "elk.layered.nodePlacement.strategy": "NETWORK_SIMPLEX",
  "elk.layered.mergeEdges": "true"
  // Can you use spline routing instead which generates non orthogonal edges
  // "elk.edgeRouting": "SPLINES",
  // "elk.layered.edgeRouting.splines.mode": "CONSERVATIVE",
}, Hi = 5, u_ = {
  "elk.algorithm": "layered",
  "elk.direction": "DOWN",
  "elk.spacing.componentComponent": Hi.toString(),
  "elk.spacing.nodeNode": Hi.toString(),
  "elk.padding": `[top=${Hi},left=${Hi},bottom=${Hi},right=${Hi}]`,
  "elk.spacing.portPort": "0",
  // allow ports on e-class to be anywhere
  // TODO: they only seem to appear on top side of nodes, figure out if there is a way to allow them
  // to be on all sides if it would result in a better layout
  portConstraints: "FREE"
}, UI = {
  "elk.layered.cycleBreaking.strategy": "INTERACTIVE",
  "elk.layered.layering.strategy": "INTERACTIVE",
  "elk.layered.nodePlacement.strategy": "INTERACTIVE"
  // Had to disable or leads to weird edges
  // "elk.layered.crossingMinimization.semiInteractive": "true",
  // "elk.layered.crossingMinimization.strategy": "INTERACTIVE",
}, s_ = {
  portConstraints: "FIXED_ORDER"
}, d_ = [...LV("pastel1"), ...LV("pastel2")];
async function G_(l, Z, u, s, G, i, m) {
  const a = JSON.parse(l), { elkNode: n, colors: p } = m_(a, Z, s, u, G, i), y = JSON.stringify(n, null, 2), h = await i_(n, m), S = e_(h), t = o_(h), W = new Map(
    [...Object.entries(Object.groupBy(S, (R) => R.source)), ...Object.entries(Object.groupBy(S, (R) => R.target))].map(
      ([R, x]) => [R, (x || []).map((r) => r.id)]
    )
  ), V = new Map(S.map((R) => [R.id, [R.source, R.target]]));
  return {
    layout: { layout: h, colors: p },
    elkJSON: y,
    nodes: t,
    edges: S,
    edgeToNodes: V,
    nodeToEdges: W
  };
}
function m_(l, Z, u, s, G, i) {
  var W;
  const m = /* @__PURE__ */ new Map(), a = /* @__PURE__ */ new Map();
  for (const [V, R] of Object.entries(l.nodes))
    m.set(V, R.eclass), a.has(R.eclass) || a.set(R.eclass, []), a.get(R.eclass).push([V, R]);
  if (u) {
    const V = /* @__PURE__ */ new Set();
    if (u.type === "class")
      V.add(u.id);
    else {
      const x = m.get(u.id);
      V.add(x), a.set(x, [[u.id, l.nodes[u.id]]]);
    }
    const R = /* @__PURE__ */ new Set();
    for (; V.size > 0; ) {
      const x = V.values().next().value;
      V.delete(x), R.add(x);
      for (const r of a.get(x).flatMap(([, k]) => k.children || [])) {
        const k = l.nodes[r].eclass;
        R.has(k) || V.add(k);
      }
    }
    for (const x of a.keys())
      R.has(x) || a.delete(x);
  }
  const n = /* @__PURE__ */ new Map();
  for (const [V, R] of [...a.values()].flatMap((x) => x))
    for (const [x, r] of (R.children || []).entries()) {
      const k = m.get(r);
      n.has(k) || n.set(k, []), n.get(k).push({ nodeID: V, index: x });
    }
  const p = l.class_data || {}, y = [
    ...new Set(
      Object.values(p).map(({ type: V }) => V).filter((V) => V)
    )
  ].sort(), h = [...d_], S = /* @__PURE__ */ new Map([[void 0, null]]);
  if (G)
    for (const [V, R] of G.colors.entries())
      y.includes(V) && R && (S.set(V, R), h.splice(h.indexOf(R), 1), y.splice(y.indexOf(V), 1));
  for (const [V, R] of y.entries())
    S.set(R, h[V % h.length]);
  const t = {
    id: "--eclipse-layout-kernel-root",
    layoutOptions: b_,
    children: [],
    edges: []
  };
  t.layoutOptions["elk.aspectRatio"] = s;
  for (const [V, R] of a.entries()) {
    const r = {
      id: `class-${V}`,
      data: { color: S.get((W = p[V]) == null ? void 0 : W.type), id: V },
      layoutOptions: u_,
      children: [],
      ports: i ? [] : (n.get(V) || []).map(({ nodeID: k, index: U }) => ({
        id: `port-class-incoming-${k}-${U}`
      })),
      edges: []
    };
    t.children.push(r);
    for (const [k, U] of R) {
      const w = Z(U.op), z = `node-${k}`, D = {
        id: z,
        data: { label: U.op, id: k },
        width: w.width,
        height: w.height,
        ports: [],
        labels: [{ text: U.op }],
        layoutOptions: s_
      };
      r.children.push(D);
      const C = Object.keys(U.children || []).length;
      for (const [j, E] of (U.children || []).entries()) {
        const g = `${k}-${j}`, A = `class-${m.get(E)}`, J = `port-node-${g}`, F = `port-class-incoming-${g}`, v = `port-class-outgoing-${g}`, T = `edge-inner-${g}`, f = `edge-outer-${g}`;
        D.ports.push({
          id: J,
          layoutOptions: {
            "port.side": "SOUTH",
            /// index is clockwise from top right, so we need to the reverse index, so that first port is on the left
            "port.index": (C - j - 1).toString()
          }
        }), r.ports.push({ id: v }), r.edges.push({
          id: T,
          edgeID: g,
          sourceNode: z,
          targetNode: A,
          sources: [J],
          targets: [v]
        }), t.edges.push({
          id: f,
          edgeID: g,
          sourceNode: z,
          targetNode: A,
          sources: [v],
          targets: [i ? A : F]
        });
      }
    }
  }
  if (G) {
    const V = G.layout, R = new Set(V.children.map(({ data: r }) => r.id)), x = Object.groupBy(
      t.children,
      ({ data: r }) => R.has(r.id).toString()
    );
    if ((x.false || []).length > (x.true || []).length)
      return { elkNode: t, colors: S };
    t.layoutOptions = { ...t.layoutOptions, ...UI };
    for (const r of t.children) {
      const k = V.children.find(({ id: U }) => U === r.id);
      if (k) {
        r.layoutOptions = { ...r.layoutOptions, ...UI }, r.x = k.x, r.y = k.y;
        for (const U of r.ports || []) {
          const w = (k.ports || []).find(({ id: z }) => z === U.id);
          w && (U.x = w.x, U.y = w.y);
        }
        for (const U of r.children) {
          const w = k.children.find(({ id: z }) => z === U.id);
          if (w) {
            for (const z of U.ports || []) {
              const D = (w.ports || []).find(({ id: C }) => C === z.id);
              D && (z.x = D.x, z.y = D.y);
            }
            U.x = w.x, U.y = w.y;
          }
        }
      }
    }
  }
  return { elkNode: t, colors: S };
}
function i_(l, Z) {
  return new Promise((u, s) => {
    Z.aborted && s(Z.reason);
    const G = new l_({
      workerFactory: () => new c_(),
      workerUrl: ""
    });
    Z.addEventListener("abort", () => {
      G.terminateWorker(), s(Z.reason);
    }), G.layout(l).then(u, s);
  });
}
function o_(l) {
  return l.children.flatMap(({ children: Z, x: u, y: s, data: G, id: i, height: m, width: a }) => [
    { position: { x: u, y: s }, data: G, id: i, type: "class", height: m, width: a },
    ...Z.map(({ x: n, y: p, height: y, width: h, data: S, id: t }) => ({
      data: S,
      id: t,
      type: "node",
      parentId: i,
      position: { x: n, y: p },
      width: h,
      height: y
    }))
  ]);
}
function e_(l) {
  const Z = Object.fromEntries(l.edges.map(({ edgeID: u, sections: s }) => [u, s[0]]));
  return l.children.flatMap(
    ({ x: u, y: s, edges: G }) => G.map(({ edgeID: i, sections: m, sourceNode: a, targetNode: n }) => {
      const [p] = m, y = Z[i], h = [p.startPoint, ...p.bendPoints || [], p.endPoint].map(({ x: S, y: t }) => ({
        x: S + u,
        y: t + s
      }));
      return {
        type: "edge",
        id: i,
        source: a,
        target: n,
        data: {
          // Combien inner and outer edge show it just shows up once in the rendering and can be selected as a single unit.
          points: [...h, ...y.bendPoints || [], y.endPoint]
        }
      };
    })
  );
}
const dF = new B7();
function a_(l) {
  return /* @__PURE__ */ B.jsx(
    lB,
    {
      ...l,
      className: Um(
        l.className,
        "flex flex-col gap-2 orientation-horizontal:min-w-64 orientation-vertical:items-center"
      )
    }
  );
}
const CI = [
  "absolute top-[50%] translate-y-[-50%] rounded-full",
  "group-orientation-horizontal:h-1",
  "group-orientation-horizontal:w-full",
  "group-orientation-vertical:left-[50%]",
  "group-orientation-vertical:h-full",
  "group-orientation-vertical:w-[6px]",
  "group-orientation-vertical:translate-x-[-50%]",
  "group-orientation-vertical:translate-y-[-50%]",
  "group-disabled:opacity-50"
];
function n_({ thumbLabels: l }) {
  return /* @__PURE__ */ B.jsx(uB, { className: "group relative flex w-full items-center orientation-horizontal:h-7 orientation-vertical:h-44 orientation-vertical:w-7", children: ({ state: Z, orientation: u }) => /* @__PURE__ */ B.jsxs(B.Fragment, { children: [
    /* @__PURE__ */ B.jsx(
      "div",
      {
        className: lb("bg-zinc-200 dark:bg-zinc-300", CI)
      }
    ),
    /* @__PURE__ */ B.jsx(
      "div",
      {
        className: lb("bg-accent", CI),
        style: p_(Z, u)
      }
    ),
    Z.values.map((s, G) => /* @__PURE__ */ B.jsx(
      dB,
      {
        index: G,
        "aria-label": l == null ? void 0 : l[G],
        className: Um("", [
          "size-5 rounded-full border bg-white shadow-xl dark:border-0",
          "group-orientation-horizontal:top-[50%] group-orientation-vertical:left-[50%]",
          "dragging:border-8  dragging:border-accent",
          "disabled:cursor-not-allowed",
          NV
        ])
      },
      G
    ))
  ] }) });
}
function p_(l, Z) {
  const u = l.values.length == 2, s = u ? (l.getThumbPercent(1) - l.getThumbPercent(0)) * 100 + "%" : l.getThumbPercent(0) * 100 + "%", G = u ? l.getThumbPercent(0) * 100 + "%" : "0";
  return Z === "horizontal" ? {
    width: s,
    left: G
  } : {
    height: s,
    bottom: G,
    top: "auto",
    transform: "translate(-50%,0px)"
  };
}
function L_({ data: l, selected: Z }) {
  return /* @__PURE__ */ B.jsxs(
    "div",
    {
      className: `rounded-md border-dotted border-black h-full w-full ${Z ? "border-2" : "border"}`,
      style: { backgroundColor: l.color || "white" },
      title: l.id,
      children: [
        /* @__PURE__ */ B.jsx(mF, { type: "class", id: l.id }),
        /* @__PURE__ */ B.jsx(Rm, { type: "target", position: Tl.Top, className: "invisible" }),
        /* @__PURE__ */ B.jsx(Rm, { type: "source", position: Tl.Bottom, className: "invisible" })
      ]
    }
  );
}
function GF(l) {
  var Z, u, s;
  return /* @__PURE__ */ B.jsxs(
    "div",
    {
      className: `p-1 rounded-md outline bg-white outline-black h-full w-full ${l != null && l.selected ? "outline-2" : "outline-1"}`,
      ref: l == null ? void 0 : l.outerRef,
      children: [
        l != null && l.outerRef ? /* @__PURE__ */ B.jsx(B.Fragment, {}) : /* @__PURE__ */ B.jsx(mF, { type: "node", id: l.data.id }),
        /* @__PURE__ */ B.jsx(
          "div",
          {
            className: "font-mono text-xs truncate max-w-96 min-w-4 text-center",
            title: `${(Z = l == null ? void 0 : l.data) == null ? void 0 : Z.id}
${(u = l == null ? void 0 : l.data) == null ? void 0 : u.label}`,
            ref: l == null ? void 0 : l.innerRef,
            children: (s = l == null ? void 0 : l.data) == null ? void 0 : s.label
          }
        ),
        l != null && l.outerRef ? /* @__PURE__ */ B.jsx(B.Fragment, {}) : /* @__PURE__ */ B.jsx(Rm, { type: "source", position: Tl.Bottom, className: "invisible" })
      ]
    }
  );
}
function mF(l) {
  const Z = M.useContext(Fx), u = M.useCallback(() => Z(l), [Z, l]);
  return /* @__PURE__ */ B.jsx(W7, { position: Tl.Top, children: /* @__PURE__ */ B.jsx(
    "button",
    {
      onClick: u,
      className: "rounded bg-white px-2 py-1 text-xs font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50",
      children: "Filter"
    }
  ) });
}
function h_({ data: l, ...Z }) {
  const { points: u } = l, s = u.map(({ x: G, y: i }, m) => `${m === 0 ? "M" : "L"} ${G} ${i}`).join(" ");
  return /* @__PURE__ */ B.jsx(Kn, { ...Z, path: s, style: { stroke: "black", strokeWidth: Z.selected ? 1 : 0.5 } });
}
const y_ = {
  class: M.memo(L_),
  node: M.memo(GF)
}, S_ = {
  edge: M.memo(h_)
}, Fx = M.createContext(null);
function rI(l, Z) {
  let u = null;
  for (const s of l) {
    if (s.type !== "select")
      continue;
    const G = Z.has(s.id);
    s.selected ? G || (u || (u = new Set(Z)), u.add(s.id)) : G && (u || (u = new Set(Z)), u.delete(s.id));
  }
  return u;
}
const t_ = { markerEnd: { type: qa.ArrowClosed, color: "black" } }, X_ = { hideAttribution: !0 };
function K_({
  nodes: l,
  edges: Z,
  selectedNode: u,
  nodeToEdges: s,
  edgeToNodes: G,
  elkJSON: i,
  useInteractiveLayout: m,
  setUseInteractiveLayout: a,
  mergeEdges: n,
  setMergeEdges: p
}) {
  const [y, h] = M.useState(/* @__PURE__ */ new Set()), [S, t] = M.useState(/* @__PURE__ */ new Set()), W = M.useRef(!1), V = M.useMemo(
    () => l.map((E) => ({ ...E, selected: S.has(E.id) })),
    [l, S]
  ), R = M.useMemo(
    () => Z.map((E) => ({ ...E, selected: y.has(E.id) })),
    [Z, y]
  ), x = M.useCallback(
    (E) => {
      const g = rI(E, S);
      if (g) {
        const A = [...g].flatMap((J) => s.get(J));
        t(g), h(new Set(A)), W.current = !0;
      }
    },
    [S, t, s, h]
  ), r = M.useCallback(
    (E) => {
      const g = rI(E, y);
      if (g) {
        const A = [...g].flatMap((J) => G.get(J));
        t(new Set(A)), h(g), W.current = !0;
      }
    },
    [y, h, G, t]
  ), k = M.useContext(Fx), U = M.useCallback(() => k(null), [k]), w = sy(), z = QA();
  M.useEffect(() => {
    z && (W.current ? W.current = !1 : w.fitView({ padding: 0.1, duration: 1e3 }));
  }, [z, w, W]);
  const [D, C] = M.useState(!1), j = k7();
  return /* @__PURE__ */ B.jsxs(
    BA,
    {
      nodes: V,
      nodeTypes: y_,
      edgeTypes: S_,
      edges: R,
      minZoom: 0.05,
      maxZoom: 10,
      nodesDraggable: !1,
      nodesConnectable: !1,
      nodesFocusable: !0,
      onNodesChange: x,
      onEdgesChange: r,
      defaultEdgeOptions: t_,
      proOptions: X_,
      children: [
        u ? /* @__PURE__ */ B.jsx(Zn, { position: "top-center", children: /* @__PURE__ */ B.jsx(
          "button",
          {
            className: "rounded bg-white px-2 py-1 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 hover:shadow-md hover:ring-gray-400 transition-all duration-200",
            onClick: U,
            children: "Reset filter"
          }
        ) }) : /* @__PURE__ */ B.jsx(B.Fragment, {}),
        /* @__PURE__ */ B.jsx(Zn, { position: "top-right", children: /* @__PURE__ */ B.jsxs(aB, { children: [
          /* @__PURE__ */ B.jsx(V7, { onPress: () => C((E) => !E), noIndicator: !0, variant: "plain", isIconOnly: !0, children: /* @__PURE__ */ B.jsx(nG, { "aria-label": "Open setting menu", children: /* @__PURE__ */ B.jsx(hD, { className: "size-6" }) }) }),
          /* @__PURE__ */ B.jsx(x7, { placement: "bottom right", isOpen: D, onOpenChange: C, children: /* @__PURE__ */ B.jsxs(R7, { children: [
            /* @__PURE__ */ B.jsxs(
              _K,
              {
                onAction: M.useCallback(
                  () => a(!m),
                  [a, m]
                ),
                className: "cursor-pointer",
                children: [
                  /* @__PURE__ */ B.jsx(nG, { children: m ? /* @__PURE__ */ B.jsx(mD, {}) : /* @__PURE__ */ B.jsx(dD, {}) }),
                  /* @__PURE__ */ B.jsx(lW, { children: "Interactive layout" }),
                  /* @__PURE__ */ B.jsx(ZW, { children: m ? "Layout independently of previous positions" : "Layout interactively based on previous positions" })
                ]
              }
            ),
            /* @__PURE__ */ B.jsxs(_K, { onAction: M.useCallback(() => p(!n), [p, n]), className: "cursor-pointer", children: [
              /* @__PURE__ */ B.jsx(nG, { children: n ? /* @__PURE__ */ B.jsx(aD, {}) : /* @__PURE__ */ B.jsx(oD, {}) }),
              /* @__PURE__ */ B.jsx(lW, { children: "Merge edges" }),
              /* @__PURE__ */ B.jsx(ZW, { children: n ? "Seperate ports for incoming edges" : "Merge all incoming edges" })
            ] }),
            /* @__PURE__ */ B.jsx(Y7, {}),
            /* @__PURE__ */ B.jsxs(_K, { onAction: M.useCallback(() => j.copy(i), [i, j]), className: "cursor-pointer", children: [
              /* @__PURE__ */ B.jsx(nG, { children: /* @__PURE__ */ B.jsx(pD, {}) }),
              /* @__PURE__ */ B.jsx(lW, { children: "Copy ELK" }),
              /* @__PURE__ */ B.jsx(ZW, { children: j.copied ? "Copied ELK JSON to clipboard" : j.error ? `Failed to copy ELK JSON to clipboard ${j.error.message}` : "Copy ELK JSON to clipboard" })
            ] })
          ] }) })
        ] }) }),
        /* @__PURE__ */ B.jsx(u7, {})
      ]
    }
  );
}
function W_({
  egraph: l,
  outerElem: Z,
  innerElem: u,
  aspectRatio: s,
  firstEgraph: G
}) {
  const [i, m] = M.useState(!1), [a, n] = M.useState(!1), p = M.useRef(null), [y, h] = M.useState(null), S = M.useMemo(() => y && y.firstEgraph === G ? y : null, [y, G]), t = M.useCallback(
    (z) => {
      h(z ? { ...z, firstEgraph: G } : null);
    },
    [h, G]
  ), W = M.useCallback(
    (z) => (u.innerText = z, Z.getBoundingClientRect()),
    [Z, u]
  ), V = i ? p.current : null, R = m6({
    queryKey: ["layout", l, W, s, S, V, a],
    networkMode: "always",
    queryFn: ({ signal: z }) => G_(l, W, s, S, V, a, z),
    staleTime: 1 / 0,
    retry: !1,
    retryOnMount: !1,
    placeholderData: U7
  });
  if (M.useEffect(() => {
    R.status === "success" && (p.current = R.data.layout);
  }, [R.status, R.data]), R.isError)
    return /* @__PURE__ */ B.jsxs("div", { className: "p-4", children: [
      "Error: ",
      R.error.message
    ] });
  if (R.isPending)
    return /* @__PURE__ */ B.jsx(f2, {});
  const { nodes: x, edges: r, elkJSON: k, nodeToEdges: U, edgeToNodes: w } = R.data;
  return /* @__PURE__ */ B.jsxs(B.Fragment, { children: [
    R.isFetching ? /* @__PURE__ */ B.jsx(f2, {}) : /* @__PURE__ */ B.jsx(B.Fragment, {}),
    /* @__PURE__ */ B.jsx(Fx.Provider, { value: t, children: /* @__PURE__ */ B.jsx(er, { children: /* @__PURE__ */ B.jsx(
      K_,
      {
        nodes: x,
        edges: r,
        nodeToEdges: U,
        edgeToNodes: w,
        selectedNode: S,
        elkJSON: k,
        useInteractiveLayout: i,
        setUseInteractiveLayout: m,
        mergeEdges: a,
        setMergeEdges: n
      }
    ) }) })
  ] });
}
function V_({ length: l, onSelect: Z, selected: u }) {
  return /* @__PURE__ */ B.jsx("div", { className: `absolute top-0 left-0 p-4 z-50 backdrop-blur-sm ${l > 1 ? "" : "opacity-0"}`, children: /* @__PURE__ */ B.jsx(
    a_,
    {
      minValue: 0,
      maxValue: l - 1,
      onChange: Z,
      value: u,
      "aria-label": "Select which egraph to display from the history",
      children: /* @__PURE__ */ B.jsx("div", { className: "flex flex-1 items-end", children: /* @__PURE__ */ B.jsxs("div", { className: "flex flex-1 flex-col", children: [
        /* @__PURE__ */ B.jsx(cB, { className: "self-center", children: ({ state: s }) => /* @__PURE__ */ B.jsxs("span", { className: "text-sm", children: [
          s.getThumbValueLabel(0),
          " / ",
          l - 1
        ] }) }),
        /* @__PURE__ */ B.jsx("div", { className: "flex flex-1 items-center gap-3", children: /* @__PURE__ */ B.jsx(n_, { thumbLabels: ["volume"] }) })
      ] }) })
    }
  ) });
}
function iF({ egraphs: l, height: Z = null, resize: u = !1 }) {
  const [s, G] = M.useState(null), [i, m] = M.useState(null), [a, n] = M.useState(null), p = s ? s.clientWidth / s.clientHeight : null, [y, h] = M.useState(null), S = y && y.egraphs === l ? y.index : l.length - 1, t = M.useCallback(
    (W) => {
      h({ egraphs: l, index: W });
    },
    [h, l]
  );
  return /* @__PURE__ */ B.jsxs("div", { className: `twp w-full relative ${u ? "resize-y" : ""}`, style: { height: Z || "100%" }, ref: G, children: [
    /* @__PURE__ */ B.jsx("div", { className: "invisible absolute", children: /* @__PURE__ */ B.jsx(GF, { outerRef: m, innerRef: n }) }),
    /* @__PURE__ */ B.jsx(V_, { length: l.length, onSelect: t, selected: S }),
    i && a && p && /* @__PURE__ */ B.jsx(
      W_,
      {
        aspectRatio: p,
        firstEgraph: l[0],
        egraph: l[S],
        outerElem: i,
        innerElem: a
      }
    )
  ] });
}
function N_({ model: l, el: Z }) {
  const u = hV(Z);
  return u.render(
    /* @__PURE__ */ B.jsx(xr, { client: dF, children: /* @__PURE__ */ B.jsx(iF, { egraphs: l.get("egraphs"), height: "600px", resize: !0 }) })
  ), () => {
    u.unmount();
  };
}
function w_(l) {
  const Z = hV(l);
  function u(G) {
    Z.render(
      /* @__PURE__ */ B.jsx(xr, { client: dF, children: /* @__PURE__ */ B.jsx(iF, { egraphs: G }) })
    );
  }
  function s() {
    Z.unmount();
  }
  return { render: u, unmount: s };
}
export {
  PZ as $,
  V4 as A,
  D4 as B,
  Hh as C,
  h_ as CustomEdge,
  q9 as D,
  G1 as E,
  L_ as EClassNode,
  GF as ENode,
  tV as F,
  Ks as G,
  Ln as H,
  f4 as I,
  yd as J,
  Kf as K,
  Mf as L,
  m1 as M,
  mF as MyNodeToolbar,
  Im as N,
  Th as O,
  W1 as P,
  _9 as Q,
  tl as R,
  Uf as S,
  KV as T,
  A4 as U,
  gh as V,
  iF as Visualizer,
  I_ as W,
  oW as X,
  $9 as Y,
  H4 as Z,
  ZU as _,
  gb as a,
  Ba as a0,
  Y1 as a1,
  B as a2,
  Um as a3,
  r_ as a4,
  T4 as a5,
  C_ as a6,
  F_ as a7,
  lb as a8,
  lD as a9,
  nW as aa,
  AB as ab,
  uD as ac,
  f2 as ad,
  m6 as ae,
  U7 as af,
  hV as ag,
  xr as ah,
  dF as ai,
  $f as b,
  I1 as c,
  xK as d,
  HZ as e,
  Su as f,
  X4 as g,
  RV as h,
  ad as i,
  Sm as j,
  qI as k,
  Y4 as l,
  S4 as m,
  w_ as mount,
  Ha as n,
  Ro as o,
  xV as p,
  l1 as q,
  M as r,
  N_ as render,
  NE as s,
  t4 as t,
  M4 as u,
  L4 as v,
  U_ as w,
  TE as x,
  Sf as y,
  B4 as z
};
